3f8f70d08c69d74271fe718fe73ed9eb
// Import testing libraries
"use strict";
// Mock Node.js modules
jest.mock('fs', ()=>({
        readFileSync: jest.fn(),
        writeFileSync: jest.fn(),
        existsSync: jest.fn(),
        mkdirSync: jest.fn()
    }));
jest.mock('net', ()=>({}));
jest.mock('tls', ()=>({}));
jest.mock('http2', ()=>({}));
// Mock nodemailer
jest.mock('nodemailer', ()=>({
        createTransport: jest.fn().mockReturnValue({
            sendMail: jest.fn().mockResolvedValue({
                messageId: 'mock-message-id'
            }),
            verify: jest.fn().mockResolvedValue(true)
        })
    }));
// Mock firebase-admin
jest.mock('firebase-admin', ()=>({
        initializeApp: jest.fn(),
        messaging: jest.fn().mockReturnValue({
            send: jest.fn().mockResolvedValue({})
        })
    }));
// Mock Next.js routing
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                pathname: '/'
            }),
        usePathname: ()=>'/',
        useSearchParams: ()=>new URLSearchParams()
    }));
// Mock Next.js image component
jest.mock('next/image', ()=>({
        __esModule: true,
        default: (props)=>{
            // eslint-disable-next-line @next/next/no-img-element
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                ...props,
                alt: props.alt || ''
            });
        }
    }));
// Mock Next.js link component
jest.mock('next/link', ()=>({
        __esModule: true,
        default: ({ children, href, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                href: href,
                ...props,
                children: children
            })
    }));
// Mock next-auth
jest.mock('next-auth/react', ()=>({
        useSession: jest.fn(()=>({
                data: null,
                status: 'unauthenticated'
            })),
        signIn: jest.fn(),
        signOut: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
const _util = require("util");
// Mock fetch API
global.fetch = jest.fn();
// Mock window.matchMedia
window.matchMedia = jest.fn().mockImplementation((query)=>({
        matches: false,
        media: query,
        onchange: null,
        addListener: jest.fn(),
        removeListener: jest.fn(),
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn()
    }));
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(callback, options){
        this.observe = jest.fn();
        this.unobserve = jest.fn();
        this.disconnect = jest.fn();
        this.callback = callback;
        this.options = options;
    }
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(callback){
        this.observe = jest.fn();
        this.unobserve = jest.fn();
        this.disconnect = jest.fn();
        this.callback = callback;
    }
};
// Mock window location
delete window.location;
window.location = {
    protocol: 'http:',
    host: 'localhost:3000',
    hostname: 'localhost',
    port: '3000',
    pathname: '/',
    search: '',
    hash: '',
    href: 'http://localhost:3000/',
    origin: 'http://localhost:3000',
    assign: jest.fn(),
    replace: jest.fn(),
    reload: jest.fn()
};
// Mock scrollTo
window.scrollTo = jest.fn();
// Mock text encoder/decoder
global.TextEncoder = _util.TextEncoder;
global.TextDecoder = _util.TextDecoder;
// Mock localStorage
const localStorageMock = (()=>{
    let store = {};
    return {
        getItem: (key)=>store[key] || null,
        setItem: (key, value)=>{
            store[key] = String(value);
        },
        removeItem: (key)=>{
            delete store[key];
        },
        clear: ()=>{
            store = {};
        },
        length: Object.keys(store).length,
        key: (index)=>Object.keys(store)[index] || null
    };
})();
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
});
// Mock sessionStorage
Object.defineProperty(window, 'sessionStorage', {
    value: localStorageMock
});
// Mock clipboard API
Object.defineProperty(navigator, 'clipboard', {
    value: {
        writeText: jest.fn(),
        readText: jest.fn()
    }
});
// Mock window.URL
window.URL.createObjectURL = jest.fn();
window.URL.revokeObjectURL = jest.fn();
// Mock console methods
console.error = jest.fn();
console.warn = jest.fn();
console.log = jest.fn();
// Mock window dimensions
Object.defineProperty(window, 'innerWidth', {
    writable: true,
    configurable: true,
    value: 1024
});
Object.defineProperty(window, 'innerHeight', {
    writable: true,
    configurable: true,
    value: 768
});
// Mock requestAnimationFrame
global.requestAnimationFrame = (callback)=>setTimeout(callback, 0);
global.cancelAnimationFrame = jest.fn();
// Mock MutationObserver
global.MutationObserver = class {
    constructor(callback){
        this.disconnect = jest.fn();
        this.observe = jest.fn();
        this.takeRecords = jest.fn();
        this.callback = callback;
    }
};
// Extend Jest matchers
expect.extend({
    toBeValidDate (received) {
        const pass = received instanceof Date && !isNaN(received);
        return {
            pass,
            message: ()=>`expected ${received} to be a valid Date${pass ? ' not' : ''}`
        };
    }
});
// Mock Image class
global.Image = class {
    constructor(){
        setTimeout(()=>{
            if (this.onload) this.onload();
        });
        return {
            src: '',
            onload: null,
            onerror: null
        };
    }
};
// Clear mocks after each test
afterEach(()=>{
    jest.clearAllMocks();
    localStorage.clear();
    sessionStorage.clear();
});
// Clean up after all tests
afterAll(()=>{
    jest.resetAllMocks();
});
// Set timezone for consistent date testing
process.env.TZ = 'UTC';
// Set up environment variables
process.env = {
    ...process.env,
    NEXT_PUBLIC_APP_URL: 'http://localhost:3000',
    NODE_ENV: 'test'
};

//# sourceMappingURL=data:application/json;base64,