{"version":3,"names":["cov_14s0caklag","actualCoverage","s","cancelSubscription","f","getSubscriptionByUserId","updateSubscription","userId","_db","connectToDatabase","seller","_sellermodel","default","findOne","b","success","message","data","subscription","error","_utils","formatError","plan","features","session","startSession","startTransaction","Error","startDate","Date","endDate","now","status","save","commitTransaction","abortTransaction","endSession"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/actions/subscription.actions.ts"],"sourcesContent":["'use server'\n\nimport { connectToDatabase } from '../db'\nimport Seller, { ISeller } from '../db/models/seller.model'\nimport { formatError } from '../utils'\n\nexport async function getSubscriptionByUserId(userId: string): Promise<{\n  success: boolean\n  data?: ISeller['subscription']\n  message?: string\n}> {\n  try {\n    await connectToDatabase()\n    const seller = await Seller.findOne({ userId })\n    if (!seller) {\n      return { success: false, message: 'Seller not found' }\n    }\n    return { success: true, data: seller.subscription }\n  } catch (error) {\n    return { success: false, message: formatError(error) }\n  }\n}\n\nexport async function updateSubscription(\n  userId: string,\n  plan: 'Basic' | 'Pro' | 'VIP',\n  features: { productsLimit: number; commission: number; prioritySupport: boolean; instantPayouts: boolean }\n): Promise<{ success: boolean; message: string }> {\n  try {\n    await connectToDatabase()\n    const session = await Seller.startSession()\n    session.startTransaction()\n    try {\n      const seller = await Seller.findOne({ userId }).session(session)\n      if (!seller) throw new Error('Seller not found')\n      seller.subscription = {\n        plan,\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n        status: 'active',\n        features,\n      }\n      await seller.save({ session })\n      await session.commitTransaction()\n      return { success: true, message: 'Subscription updated successfully' }\n    } catch (error) {\n      await session.abortTransaction()\n      throw error\n    } finally {\n      session.endSession()\n    }\n  } catch (error) {\n    return { success: false, message: formatError(error) }\n  }\n}\n\nexport async function cancelSubscription(userId: string): Promise<{ success: boolean; message: string }> {\n  try {\n    await connectToDatabase()\n    const session = await Seller.startSession()\n    session.startTransaction()\n    try {\n      const seller = await Seller.findOne({ userId }).session(session)\n      if (!seller) throw new Error('Seller not found')\n      seller.subscription.status = 'cancelled'\n      seller.subscription.endDate = new Date()\n      await seller.save({ session })\n      await session.commitTransaction()\n      return { success: true, message: 'Subscription cancelled successfully' }\n    } catch (error) {\n      await session.abortTransaction()\n      throw error\n    } finally {\n      session.endSession()\n    }\n  } catch (error) {\n    return { success: false, message: formatError(error) }\n  }\n}"],"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","ignoreList":[]}