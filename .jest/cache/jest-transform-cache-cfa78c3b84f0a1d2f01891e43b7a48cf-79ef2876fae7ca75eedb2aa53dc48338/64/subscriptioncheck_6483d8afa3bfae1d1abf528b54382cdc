f60d4ed323b3339801726a07f5beaa54
"use strict";

/* istanbul ignore next */
function cov_5d2m0own5() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/cron/subscription-check.ts";
  var hash = "10bad6f1ad549bbdd956b057f102e6a457192e88";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/cron/subscription-check.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "4": {
        start: {
          line: 12,
          column: 35
        },
        end: {
          line: 12,
          column: 97
        }
      },
      "5": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 13,
          column: 54
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "7": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "9": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 30
        }
      },
      "10": {
        start: {
          line: 23,
          column: 33
        },
        end: {
          line: 23,
          column: 82
        }
      },
      "11": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 31,
          column: 10
        }
      },
      "12": {
        start: {
          line: 33,
          column: 24
        },
        end: {
          line: 38,
          column: 10
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "14": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "15": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "16": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 53
        }
      },
      "17": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 32
        }
      },
      "18": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 77,
          column: 15
        }
      },
      "19": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 117
        }
      },
      "20": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "checkSubscriptions",
        decl: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 33
          }
        },
        loc: {
          start: {
            line: 19,
            column: 36
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 15,
            column: 38
          }
        }, {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 14
          }
        }, {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 32
          }
        }],
        line: 15
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/cron/subscription-check.ts"],
      sourcesContent: ["import { connectToDatabase } from '@/lib/db'\nimport Seller from '@/lib/db/models/seller.model'\nimport { sendNotification } from '@/lib/utils/notification'\n\nexport async function checkSubscriptions() {\n  try {\n    await connectToDatabase()\n\n    const now = new Date()\n    const threeDaysFromNow = new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000)\n\n    // Find subscriptions expiring soon (within 3 days)\n    const expiringSoon = await Seller.find({\n      'subscription.status': 'active',\n      'subscription.endDate': { $lte: threeDaysFromNow, $gte: now },\n    })\n\n    // Find expired subscriptions\n    const expired = await Seller.find({\n      'subscription.status': 'active',\n      'subscription.endDate': { $lt: now },\n    })\n\n    // Send notifications for expiring soon subscriptions\n    for (const seller of expiringSoon) {\n      await sendNotification({\n        userId: seller.userId.toString(),\n        type: 'subscription_expiring',\n        title: 'Your Subscription is Expiring Soon',\n        message: `Your ${seller.subscription.plan} subscription will expire on ${seller.subscription.endDate.toLocaleDateString()}. Renew now to avoid suspension.`,\n        data: {\n          plan: seller.subscription.plan,\n          expiryDate: seller.subscription.endDate,\n        },\n        channels: ['email', 'sms', 'in_app'],\n        priority: 'high',\n      })\n    }\n\n    // Handle expired subscriptions\n    for (const seller of expired) {\n      seller.subscription.status = 'suspended'\n      await seller.save()\n\n      await sendNotification({\n        userId: seller.userId.toString(),\n        type: 'subscription_expired',\n        title: 'Your Subscription Has Expired',\n        message: `Your ${seller.subscription.plan} subscription has expired. Your seller account is now suspended. Renew your subscription to reactivate.`,\n        data: {\n          plan: seller.subscription.plan,\n          expiryDate: seller.subscription.endDate,\n        },\n        channels: ['email', 'sms', 'in_app'],\n        priority: 'critical',\n      })\n    }\n\n    console.log(`Subscription check completed: ${expiringSoon.length} expiring soon, ${expired.length} expired`)\n  } catch (error) {\n    console.error('Subscription check error:', error)\n  }\n}"],
      names: ["checkSubscriptions", "connectToDatabase", "now", "Date", "threeDaysFromNow", "getTime", "expiringSoon", "Seller", "find", "$lte", "$gte", "expired", "$lt", "seller", "sendNotification", "userId", "toString", "type", "title", "message", "subscription", "plan", "endDate", "toLocaleDateString", "data", "expiryDate", "channels", "priority", "status", "save", "console", "log", "length", "error"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;oBAJY;oEACf;8BACc;;;;;;AAE1B,eAAeA;IACpB,IAAI;QACF,MAAMC,IAAAA,qBAAiB;QAEvB,MAAMC,MAAM,IAAIC;QAChB,MAAMC,mBAAmB,IAAID,KAAKD,IAAIG,OAAO,KAAK,IAAI,KAAK,KAAK,KAAK;QAErE,mDAAmD;QACnD,MAAMC,eAAe,MAAMC,oBAAM,CAACC,IAAI,CAAC;YACrC,uBAAuB;YACvB,wBAAwB;gBAAEC,MAAML;gBAAkBM,MAAMR;YAAI;QAC9D;QAEA,6BAA6B;QAC7B,MAAMS,UAAU,MAAMJ,oBAAM,CAACC,IAAI,CAAC;YAChC,uBAAuB;YACvB,wBAAwB;gBAAEI,KAAKV;YAAI;QACrC;QAEA,qDAAqD;QACrD,KAAK,MAAMW,UAAUP,aAAc;YACjC,MAAMQ,IAAAA,8BAAgB,EAAC;gBACrBC,QAAQF,OAAOE,MAAM,CAACC,QAAQ;gBAC9BC,MAAM;gBACNC,OAAO;gBACPC,SAAS,CAAC,KAAK,EAAEN,OAAOO,YAAY,CAACC,IAAI,CAAC,6BAA6B,EAAER,OAAOO,YAAY,CAACE,OAAO,CAACC,kBAAkB,GAAG,gCAAgC,CAAC;gBAC3JC,MAAM;oBACJH,MAAMR,OAAOO,YAAY,CAACC,IAAI;oBAC9BI,YAAYZ,OAAOO,YAAY,CAACE,OAAO;gBACzC;gBACAI,UAAU;oBAAC;oBAAS;oBAAO;iBAAS;gBACpCC,UAAU;YACZ;QACF;QAEA,+BAA+B;QAC/B,KAAK,MAAMd,UAAUF,QAAS;YAC5BE,OAAOO,YAAY,CAACQ,MAAM,GAAG;YAC7B,MAAMf,OAAOgB,IAAI;YAEjB,MAAMf,IAAAA,8BAAgB,EAAC;gBACrBC,QAAQF,OAAOE,MAAM,CAACC,QAAQ;gBAC9BC,MAAM;gBACNC,OAAO;gBACPC,SAAS,CAAC,KAAK,EAAEN,OAAOO,YAAY,CAACC,IAAI,CAAC,uGAAuG,CAAC;gBAClJG,MAAM;oBACJH,MAAMR,OAAOO,YAAY,CAACC,IAAI;oBAC9BI,YAAYZ,OAAOO,YAAY,CAACE,OAAO;gBACzC;gBACAI,UAAU;oBAAC;oBAAS;oBAAO;iBAAS;gBACpCC,UAAU;YACZ;QACF;QAEAG,QAAQC,GAAG,CAAC,CAAC,8BAA8B,EAAEzB,aAAa0B,MAAM,CAAC,gBAAgB,EAAErB,QAAQqB,MAAM,CAAC,QAAQ,CAAC;IAC7G,EAAE,OAAOC,OAAO;QACdH,QAAQG,KAAK,CAAC,6BAA6BA;IAC7C;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "10bad6f1ad549bbdd956b057f102e6a457192e88"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_5d2m0own5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_5d2m0own5();
cov_5d2m0own5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_5d2m0own5().s[1]++;
Object.defineProperty(exports, "checkSubscriptions", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_5d2m0own5().f[0]++;
    cov_5d2m0own5().s[2]++;
    return checkSubscriptions;
  }
});
const _db =
/* istanbul ignore next */
(cov_5d2m0own5().s[3]++, require("../db"));
const _sellermodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_5d2m0own5().s[4]++, _interop_require_default(require("../db/models/seller.model")));
const _notification =
/* istanbul ignore next */
(cov_5d2m0own5().s[5]++, require("../utils/notification"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_5d2m0own5().f[1]++;
  cov_5d2m0own5().s[6]++;
  return /* istanbul ignore next */(cov_5d2m0own5().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_5d2m0own5().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_5d2m0own5().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_5d2m0own5().b[0][1]++, {
    default: obj
  });
}
async function checkSubscriptions() {
  /* istanbul ignore next */
  cov_5d2m0own5().f[2]++;
  cov_5d2m0own5().s[7]++;
  try {
    /* istanbul ignore next */
    cov_5d2m0own5().s[8]++;
    await (0, _db.connectToDatabase)();
    const now =
    /* istanbul ignore next */
    (cov_5d2m0own5().s[9]++, new Date());
    const threeDaysFromNow =
    /* istanbul ignore next */
    (cov_5d2m0own5().s[10]++, new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000));
    // Find subscriptions expiring soon (within 3 days)
    const expiringSoon =
    /* istanbul ignore next */
    (cov_5d2m0own5().s[11]++, await _sellermodel.default.find({
      'subscription.status': 'active',
      'subscription.endDate': {
        $lte: threeDaysFromNow,
        $gte: now
      }
    }));
    // Find expired subscriptions
    const expired =
    /* istanbul ignore next */
    (cov_5d2m0own5().s[12]++, await _sellermodel.default.find({
      'subscription.status': 'active',
      'subscription.endDate': {
        $lt: now
      }
    }));
    // Send notifications for expiring soon subscriptions
    /* istanbul ignore next */
    cov_5d2m0own5().s[13]++;
    for (const seller of expiringSoon) {
      /* istanbul ignore next */
      cov_5d2m0own5().s[14]++;
      await (0, _notification.sendNotification)({
        userId: seller.userId.toString(),
        type: 'subscription_expiring',
        title: 'Your Subscription is Expiring Soon',
        message: `Your ${seller.subscription.plan} subscription will expire on ${seller.subscription.endDate.toLocaleDateString()}. Renew now to avoid suspension.`,
        data: {
          plan: seller.subscription.plan,
          expiryDate: seller.subscription.endDate
        },
        channels: ['email', 'sms', 'in_app'],
        priority: 'high'
      });
    }
    // Handle expired subscriptions
    /* istanbul ignore next */
    cov_5d2m0own5().s[15]++;
    for (const seller of expired) {
      /* istanbul ignore next */
      cov_5d2m0own5().s[16]++;
      seller.subscription.status = 'suspended';
      /* istanbul ignore next */
      cov_5d2m0own5().s[17]++;
      await seller.save();
      /* istanbul ignore next */
      cov_5d2m0own5().s[18]++;
      await (0, _notification.sendNotification)({
        userId: seller.userId.toString(),
        type: 'subscription_expired',
        title: 'Your Subscription Has Expired',
        message: `Your ${seller.subscription.plan} subscription has expired. Your seller account is now suspended. Renew your subscription to reactivate.`,
        data: {
          plan: seller.subscription.plan,
          expiryDate: seller.subscription.endDate
        },
        channels: ['email', 'sms', 'in_app'],
        priority: 'critical'
      });
    }
    /* istanbul ignore next */
    cov_5d2m0own5().s[19]++;
    console.log(`Subscription check completed: ${expiringSoon.length} expiring soon, ${expired.length} expired`);
  } catch (error) {
    /* istanbul ignore next */
    cov_5d2m0own5().s[20]++;
    console.error('Subscription check error:', error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGVja1N1YnNjcmlwdGlvbnMiLCJjb3ZfNWQybTBvd241IiwiZiIsInMiLCJfZGIiLCJjb25uZWN0VG9EYXRhYmFzZSIsIm5vdyIsIkRhdGUiLCJ0aHJlZURheXNGcm9tTm93IiwiZ2V0VGltZSIsImV4cGlyaW5nU29vbiIsIl9zZWxsZXJtb2RlbCIsImRlZmF1bHQiLCJmaW5kIiwiJGx0ZSIsIiRndGUiLCJleHBpcmVkIiwiJGx0Iiwic2VsbGVyIiwiX25vdGlmaWNhdGlvbiIsInNlbmROb3RpZmljYXRpb24iLCJ1c2VySWQiLCJ0b1N0cmluZyIsInR5cGUiLCJ0aXRsZSIsIm1lc3NhZ2UiLCJzdWJzY3JpcHRpb24iLCJwbGFuIiwiZW5kRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImRhdGEiLCJleHBpcnlEYXRlIiwiY2hhbm5lbHMiLCJwcmlvcml0eSIsInN0YXR1cyIsInNhdmUiLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwiZXJyb3IiXSwic291cmNlcyI6WyIvaG9tZS9oYWdlci9uZXcvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyICgzKS9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIvbGliL2Nyb24vc3Vic2NyaXB0aW9uLWNoZWNrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbm5lY3RUb0RhdGFiYXNlIH0gZnJvbSAnQC9saWIvZGInXG5pbXBvcnQgU2VsbGVyIGZyb20gJ0AvbGliL2RiL21vZGVscy9zZWxsZXIubW9kZWwnXG5pbXBvcnQgeyBzZW5kTm90aWZpY2F0aW9uIH0gZnJvbSAnQC9saWIvdXRpbHMvbm90aWZpY2F0aW9uJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tTdWJzY3JpcHRpb25zKCkge1xuICB0cnkge1xuICAgIGF3YWl0IGNvbm5lY3RUb0RhdGFiYXNlKClcblxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKClcbiAgICBjb25zdCB0aHJlZURheXNGcm9tTm93ID0gbmV3IERhdGUobm93LmdldFRpbWUoKSArIDMgKiAyNCAqIDYwICogNjAgKiAxMDAwKVxuXG4gICAgLy8gRmluZCBzdWJzY3JpcHRpb25zIGV4cGlyaW5nIHNvb24gKHdpdGhpbiAzIGRheXMpXG4gICAgY29uc3QgZXhwaXJpbmdTb29uID0gYXdhaXQgU2VsbGVyLmZpbmQoe1xuICAgICAgJ3N1YnNjcmlwdGlvbi5zdGF0dXMnOiAnYWN0aXZlJyxcbiAgICAgICdzdWJzY3JpcHRpb24uZW5kRGF0ZSc6IHsgJGx0ZTogdGhyZWVEYXlzRnJvbU5vdywgJGd0ZTogbm93IH0sXG4gICAgfSlcblxuICAgIC8vIEZpbmQgZXhwaXJlZCBzdWJzY3JpcHRpb25zXG4gICAgY29uc3QgZXhwaXJlZCA9IGF3YWl0IFNlbGxlci5maW5kKHtcbiAgICAgICdzdWJzY3JpcHRpb24uc3RhdHVzJzogJ2FjdGl2ZScsXG4gICAgICAnc3Vic2NyaXB0aW9uLmVuZERhdGUnOiB7ICRsdDogbm93IH0sXG4gICAgfSlcblxuICAgIC8vIFNlbmQgbm90aWZpY2F0aW9ucyBmb3IgZXhwaXJpbmcgc29vbiBzdWJzY3JpcHRpb25zXG4gICAgZm9yIChjb25zdCBzZWxsZXIgb2YgZXhwaXJpbmdTb29uKSB7XG4gICAgICBhd2FpdCBzZW5kTm90aWZpY2F0aW9uKHtcbiAgICAgICAgdXNlcklkOiBzZWxsZXIudXNlcklkLnRvU3RyaW5nKCksXG4gICAgICAgIHR5cGU6ICdzdWJzY3JpcHRpb25fZXhwaXJpbmcnLFxuICAgICAgICB0aXRsZTogJ1lvdXIgU3Vic2NyaXB0aW9uIGlzIEV4cGlyaW5nIFNvb24nLFxuICAgICAgICBtZXNzYWdlOiBgWW91ciAke3NlbGxlci5zdWJzY3JpcHRpb24ucGxhbn0gc3Vic2NyaXB0aW9uIHdpbGwgZXhwaXJlIG9uICR7c2VsbGVyLnN1YnNjcmlwdGlvbi5lbmREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpfS4gUmVuZXcgbm93IHRvIGF2b2lkIHN1c3BlbnNpb24uYCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHBsYW46IHNlbGxlci5zdWJzY3JpcHRpb24ucGxhbixcbiAgICAgICAgICBleHBpcnlEYXRlOiBzZWxsZXIuc3Vic2NyaXB0aW9uLmVuZERhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5uZWxzOiBbJ2VtYWlsJywgJ3NtcycsICdpbl9hcHAnXSxcbiAgICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGV4cGlyZWQgc3Vic2NyaXB0aW9uc1xuICAgIGZvciAoY29uc3Qgc2VsbGVyIG9mIGV4cGlyZWQpIHtcbiAgICAgIHNlbGxlci5zdWJzY3JpcHRpb24uc3RhdHVzID0gJ3N1c3BlbmRlZCdcbiAgICAgIGF3YWl0IHNlbGxlci5zYXZlKClcblxuICAgICAgYXdhaXQgc2VuZE5vdGlmaWNhdGlvbih7XG4gICAgICAgIHVzZXJJZDogc2VsbGVyLnVzZXJJZC50b1N0cmluZygpLFxuICAgICAgICB0eXBlOiAnc3Vic2NyaXB0aW9uX2V4cGlyZWQnLFxuICAgICAgICB0aXRsZTogJ1lvdXIgU3Vic2NyaXB0aW9uIEhhcyBFeHBpcmVkJyxcbiAgICAgICAgbWVzc2FnZTogYFlvdXIgJHtzZWxsZXIuc3Vic2NyaXB0aW9uLnBsYW59IHN1YnNjcmlwdGlvbiBoYXMgZXhwaXJlZC4gWW91ciBzZWxsZXIgYWNjb3VudCBpcyBub3cgc3VzcGVuZGVkLiBSZW5ldyB5b3VyIHN1YnNjcmlwdGlvbiB0byByZWFjdGl2YXRlLmAsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBwbGFuOiBzZWxsZXIuc3Vic2NyaXB0aW9uLnBsYW4sXG4gICAgICAgICAgZXhwaXJ5RGF0ZTogc2VsbGVyLnN1YnNjcmlwdGlvbi5lbmREYXRlLFxuICAgICAgICB9LFxuICAgICAgICBjaGFubmVsczogWydlbWFpbCcsICdzbXMnLCAnaW5fYXBwJ10sXG4gICAgICAgIHByaW9yaXR5OiAnY3JpdGljYWwnLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhgU3Vic2NyaXB0aW9uIGNoZWNrIGNvbXBsZXRlZDogJHtleHBpcmluZ1Nvb24ubGVuZ3RofSBleHBpcmluZyBzb29uLCAke2V4cGlyZWQubGVuZ3RofSBleHBpcmVkYClcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdTdWJzY3JpcHRpb24gY2hlY2sgZXJyb3I6JywgZXJyb3IpXG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFJc0I7Ozs7OztXQUFBQSxrQkFBQTs7Ozs7aUNBSlk7Ozt1RUFDZjs7O2lDQUNjOzs7Ozs7Ozs7Ozs7Ozs7QUFFMUIsZUFBZUEsbUJBQUE7RUFBQTtFQUFBQyxhQUFBLEdBQUFDLENBQUE7RUFBQUQsYUFBQSxHQUFBRSxDQUFBO0VBQ3BCLElBQUk7SUFBQTtJQUFBRixhQUFBLEdBQUFFLENBQUE7SUFDRixNQUFNLElBQUFDLEdBQUEsQ0FBQUMsaUJBQWlCO0lBRXZCLE1BQU1DLEdBQUE7SUFBQTtJQUFBLENBQUFMLGFBQUEsR0FBQUUsQ0FBQSxPQUFNLElBQUlJLElBQUE7SUFDaEIsTUFBTUMsZ0JBQUE7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