{"version":3,"names":["checkSubscriptions","cov_5d2m0own5","f","s","_db","connectToDatabase","now","Date","threeDaysFromNow","getTime","expiringSoon","_sellermodel","default","find","$lte","$gte","expired","$lt","seller","_notification","sendNotification","userId","toString","type","title","message","subscription","plan","endDate","toLocaleDateString","data","expiryDate","channels","priority","status","save","console","log","length","error"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/cron/subscription-check.ts"],"sourcesContent":["import { connectToDatabase } from '@/lib/db'\nimport Seller from '@/lib/db/models/seller.model'\nimport { sendNotification } from '@/lib/utils/notification'\n\nexport async function checkSubscriptions() {\n  try {\n    await connectToDatabase()\n\n    const now = new Date()\n    const threeDaysFromNow = new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000)\n\n    // Find subscriptions expiring soon (within 3 days)\n    const expiringSoon = await Seller.find({\n      'subscription.status': 'active',\n      'subscription.endDate': { $lte: threeDaysFromNow, $gte: now },\n    })\n\n    // Find expired subscriptions\n    const expired = await Seller.find({\n      'subscription.status': 'active',\n      'subscription.endDate': { $lt: now },\n    })\n\n    // Send notifications for expiring soon subscriptions\n    for (const seller of expiringSoon) {\n      await sendNotification({\n        userId: seller.userId.toString(),\n        type: 'subscription_expiring',\n        title: 'Your Subscription is Expiring Soon',\n        message: `Your ${seller.subscription.plan} subscription will expire on ${seller.subscription.endDate.toLocaleDateString()}. Renew now to avoid suspension.`,\n        data: {\n          plan: seller.subscription.plan,\n          expiryDate: seller.subscription.endDate,\n        },\n        channels: ['email', 'sms', 'in_app'],\n        priority: 'high',\n      })\n    }\n\n    // Handle expired subscriptions\n    for (const seller of expired) {\n      seller.subscription.status = 'suspended'\n      await seller.save()\n\n      await sendNotification({\n        userId: seller.userId.toString(),\n        type: 'subscription_expired',\n        title: 'Your Subscription Has Expired',\n        message: `Your ${seller.subscription.plan} subscription has expired. Your seller account is now suspended. Renew your subscription to reactivate.`,\n        data: {\n          plan: seller.subscription.plan,\n          expiryDate: seller.subscription.endDate,\n        },\n        channels: ['email', 'sms', 'in_app'],\n        priority: 'critical',\n      })\n    }\n\n    console.log(`Subscription check completed: ${expiringSoon.length} expiring soon, ${expired.length} expired`)\n  } catch (error) {\n    console.error('Subscription check error:', error)\n  }\n}"],"mappings":"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","ignoreList":[]}