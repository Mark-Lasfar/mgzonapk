{"version":3,"names":["GET","cov_2bwybvikhc","f","s","POST","fulfillmentService","_unifiedfulfillment","UnifiedFulfillmentService","provider","credentials","apiKey","process","env","SHIPBOB_API_KEY","apiUrl","SHIPBOB_API_URL","accessToken","AMAZON_ACCESS_TOKEN","refreshToken","AMAZON_REFRESH_TOKEN","merchantId","AMAZON_MERCHANT_ID","ALIEXPRESS_API_KEY","apiSecret","ALIEXPRESS_API_SECRET","ALIEXPRESS_ACCESS_TOKEN","FOURPX_API_KEY","FOURPX_API_SECRET","warehouseId","FOURPX_WAREHOUSE_ID","request","requestId","_crypto","default","randomBytes","toString","authError","_auth","validateApiKey","b","rateLimitResult","_ratelimit","rateLimit","_server","NextResponse","_db","connectToDatabase","orderId","shippingMethod","items","shippingAddress","options","json","success","error","timestamp","Date","toISOString","status","result","createFulfillmentOrder","createdAt","updatedAt","data","headers","console","message","searchParams","URL","url","get","getFulfillmentOrder"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/fulfillment/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateApiKey } from '@/lib/api/middleware/auth';\nimport { rateLimit } from '@/lib/api/middleware/rate-limit';\nimport { UnifiedFulfillmentService } from '@/lib/api/services/unified-fulfillment';\nimport { connectToDatabase } from '@/lib/db';\nimport { FulfillmentProvider } from '@/lib/api/types/fulfillment';\nimport crypto from 'crypto';\n\n// Initialize the unified fulfillment service with all provider configurations\nconst fulfillmentService = new UnifiedFulfillmentService([\n  {\n    provider: 'shipbob',\n    credentials: {\n      apiKey: process.env.SHIPBOB_API_KEY!,\n      apiUrl: process.env.SHIPBOB_API_URL!,\n    }\n  },\n  {\n    provider: 'amazon',\n    credentials: {\n      accessToken: process.env.AMAZON_ACCESS_TOKEN!,\n      refreshToken: process.env.AMAZON_REFRESH_TOKEN!,\n      merchantId: process.env.AMAZON_MERCHANT_ID!,\n    }\n  },\n  {\n    provider: 'aliexpress',\n    credentials: {\n      apiKey: process.env.ALIEXPRESS_API_KEY!,\n      apiSecret: process.env.ALIEXPRESS_API_SECRET!,\n      accessToken: process.env.ALIEXPRESS_ACCESS_TOKEN!,\n    }\n  },\n  {\n    provider: '4px',\n    credentials: {\n      apiKey: process.env.FOURPX_API_KEY!,\n      apiSecret: process.env.FOURPX_API_SECRET!,\n      warehouseId: process.env.FOURPX_WAREHOUSE_ID!,\n    }\n  }\n]);\n\nexport async function POST(request: NextRequest) {\n  // Generate request ID for tracking\n  const requestId = crypto.randomBytes(16).toString('hex');\n\n  try {\n    // Validate API key\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    // Check rate limits\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    // Connect to database\n    await connectToDatabase();\n    \n    const { \n      orderId,\n      provider = 'shipbob' as FulfillmentProvider,\n      shippingMethod,\n      items,\n      shippingAddress,\n      options = {}\n    } = await request.json();\n\n    // Validate required fields\n    if (!orderId || !items || !shippingAddress) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Missing required fields',\n          requestId,\n          timestamp: new Date().toISOString()\n        },\n        { status: 400 }\n      );\n    }\n\n    const result = await fulfillmentService.createFulfillmentOrder({\n      orderId,\n      provider,\n      items,\n      shippingAddress,\n      shippingMethod,\n      status: 'pending',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...options\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n      requestId,\n      timestamp: new Date().toISOString()\n    }, {\n      headers: {\n        ...rateLimitResult?.headers,\n        'X-Request-ID': requestId,\n        'X-Provider': provider\n      }\n    });\n\n  } catch (error) {\n    console.error(`[${requestId}] Fulfillment error:`, error);\n    \n    return NextResponse.json({\n      success: false,\n      error: error.message,\n      requestId,\n      timestamp: new Date().toISOString()\n    }, { \n      status: error.status || 500,\n      headers: {\n        'X-Request-ID': requestId\n      }\n    });\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  const requestId = crypto.randomBytes(16).toString('hex');\n\n  try {\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    const { searchParams } = new URL(request.url);\n    const orderId = searchParams.get('orderId');\n    const provider = searchParams.get('provider') as FulfillmentProvider || 'shipbob';\n\n    if (!orderId) {\n      return NextResponse.json({\n        success: false,\n        error: 'Order ID is required',\n        requestId,\n        timestamp: new Date().toISOString()\n      }, { \n        status: 400 \n      });\n    }\n\n    const result = await fulfillmentService.getFulfillmentOrder(orderId, provider);\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n      requestId,\n      timestamp: new Date().toISOString()\n    }, {\n      headers: {\n        ...rateLimitResult?.headers,\n        'X-Request-ID': requestId,\n        'X-Provider': provider\n      }\n    });\n\n  } catch (error) {\n    console.error(`[${requestId}] Tracking error:`, error);\n    \n    return NextResponse.json({\n      success: false,\n      error: error.message,\n      requestId,\n      timestamp: new Date().toISOString()\n    }, { \n      status: error.status || 500,\n      headers: {\n        'X-Request-ID': requestId\n      }\n    });\n  }\n}"],"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","ignoreList":[]}