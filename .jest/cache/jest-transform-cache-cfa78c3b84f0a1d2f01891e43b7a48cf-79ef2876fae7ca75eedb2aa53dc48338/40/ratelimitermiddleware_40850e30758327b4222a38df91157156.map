{"version":3,"names":["cov_1ej25hgolq","actualCoverage","s","rateLimiter","CURRENT_TIMESTAMP","CURRENT_USER","defaultKeyGenerator","request","f","ip","b","headers","get","path","nextUrl","pathname","config","maxRequests","windowSeconds","keyGenerator","key","result","_ratelimiter","RateLimiter","checkRateLimit","toString","remaining","resetTime","getTime","allowed","_logging","logger","warn","timestamp","user","_server","NextResponse","JSON","stringify","success","error","retryAfter","status","Math","ceil","Date","now","response","fetch","finalResponse","body","Object","entries","forEach","value","set","Error","message","String"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/rate-limiter.middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { RateLimiter } from '../services/rate-limiter';\nimport { logger } from '../services/logging';\n\n// Update the timestamp constant\nconst CURRENT_TIMESTAMP = '2025-04-28T02:43:31Z'\nconst CURRENT_USER = 'Mark-Lasfar'\n\nexport interface RateLimitConfig {\n  maxRequests: number;\n  windowSeconds: number;\n  keyGenerator?: (request: NextRequest) => string;\n}\n\nconst defaultKeyGenerator = (request: NextRequest): string => {\n  const ip = request.headers.get('x-forwarded-for') || \n             request.headers.get('x-real-ip') || \n             'unknown';\n  const path = request.nextUrl.pathname;\n  return `${ip}:${path}`;\n};\n\nexport function rateLimiter(config: RateLimitConfig) {\n  const {\n    maxRequests,\n    windowSeconds,\n    keyGenerator = defaultKeyGenerator\n  } = config;\n\n  return async (request: NextRequest) => {\n    try {\n      const key = keyGenerator(request);\n      \n      const result = await RateLimiter.checkRateLimit(\n        key,\n        maxRequests,\n        windowSeconds\n      );\n\n      // Add rate limit headers\n      const headers = {\n        'X-RateLimit-Limit': maxRequests.toString(),\n        'X-RateLimit-Remaining': result.remaining.toString(),\n        'X-RateLimit-Reset': result.resetTime.getTime().toString(),\n      };\n\n      if (!result.allowed) {\n        logger.warn('Rate limit exceeded', {\n          key,\n          maxRequests,\n          windowSeconds,\n          timestamp: CURRENT_TIMESTAMP,\n          user: CURRENT_USER\n        });\n\n        return new NextResponse(\n          JSON.stringify({\n            success: false,\n            error: 'Too many requests',\n            retryAfter: result.resetTime\n          }),\n          {\n            status: 429,\n            headers: {\n              ...headers,\n              'Retry-After': Math.ceil((result.resetTime.getTime() - Date.now()) / 1000).toString()\n            }\n          }\n        );\n      }\n\n      // Continue with the request\n      const response = await fetch(request);\n      \n      // Add rate limit headers to the response\n      const finalResponse = new NextResponse(response.body, response);\n      Object.entries(headers).forEach(([key, value]) => {\n        finalResponse.headers.set(key, value);\n      });\n\n      return finalResponse;\n\n    } catch (error) {\n      logger.error(new Error('Rate limiter middleware error'), {\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n\n      // Fail open\n      return fetch(request);\n    }\n  };\n}"],"mappings":"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","ignoreList":[]}