1c191f531f8fa2943d9ac10486417833
"use strict";

/* istanbul ignore next */
function cov_2bwybvikhc() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/fulfillment/route.ts";
  var hash = "d92e5239b0f1148f6a81b67c45ba4ad1d2f4291a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/fulfillment/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 60
        }
      },
      "8": {
        start: {
          line: 21,
          column: 19
        },
        end: {
          line: 21,
          column: 71
        }
      },
      "9": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 22,
          column: 87
        }
      },
      "10": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "11": {
        start: {
          line: 24,
          column: 30
        },
        end: {
          line: 24,
          column: 73
        }
      },
      "12": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 28,
          column: 6
        }
      },
      "13": {
        start: {
          line: 31,
          column: 27
        },
        end: {
          line: 63,
          column: 2
        }
      },
      "14": {
        start: {
          line: 66,
          column: 22
        },
        end: {
          line: 66,
          column: 69
        }
      },
      "15": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "16": {
        start: {
          line: 69,
          column: 26
        },
        end: {
          line: 69,
          column: 66
        }
      },
      "17": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 40
        }
      },
      "18": {
        start: {
          line: 70,
          column: 23
        },
        end: {
          line: 70,
          column: 40
        }
      },
      "19": {
        start: {
          line: 72,
          column: 32
        },
        end: {
          line: 72,
          column: 72
        }
      },
      "20": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 84
        }
      },
      "21": {
        start: {
          line: 73,
          column: 61
        },
        end: {
          line: 73,
          column: 84
        }
      },
      "22": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 43
        }
      },
      "23": {
        start: {
          line: 76,
          column: 104
        },
        end: {
          line: 76,
          column: 124
        }
      },
      "24": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "25": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 86,
          column: 15
        }
      },
      "26": {
        start: {
          line: 88,
          column: 23
        },
        end: {
          line: 98,
          column: 10
        }
      },
      "27": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 110,
          column: 11
        }
      },
      "28": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 66
        }
      },
      "29": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "30": {
        start: {
          line: 127,
          column: 22
        },
        end: {
          line: 127,
          column: 69
        }
      },
      "31": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "32": {
        start: {
          line: 129,
          column: 26
        },
        end: {
          line: 129,
          column: 66
        }
      },
      "33": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 40
        }
      },
      "34": {
        start: {
          line: 130,
          column: 23
        },
        end: {
          line: 130,
          column: 40
        }
      },
      "35": {
        start: {
          line: 131,
          column: 32
        },
        end: {
          line: 131,
          column: 72
        }
      },
      "36": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 84
        }
      },
      "37": {
        start: {
          line: 132,
          column: 61
        },
        end: {
          line: 132,
          column: 84
        }
      },
      "38": {
        start: {
          line: 133,
          column: 33
        },
        end: {
          line: 133,
          column: 53
        }
      },
      "39": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 51
        }
      },
      "40": {
        start: {
          line: 135,
          column: 25
        },
        end: {
          line: 135,
          column: 66
        }
      },
      "41": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "42": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 144,
          column: 15
        }
      },
      "43": {
        start: {
          line: 146,
          column: 23
        },
        end: {
          line: 146,
          column: 86
        }
      },
      "44": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "45": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 63
        }
      },
      "46": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 171,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 25,
            column: 9
          },
          end: {
            line: 25,
            column: 33
          }
        },
        loc: {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 25
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 64,
            column: 15
          },
          end: {
            line: 64,
            column: 19
          }
        },
        loc: {
          start: {
            line: 64,
            column: 29
          },
          end: {
            line: 125,
            column: 1
          }
        },
        line: 64
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 126,
            column: 15
          },
          end: {
            line: 126,
            column: 18
          }
        },
        loc: {
          start: {
            line: 126,
            column: 28
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 126
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 11
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 35
          },
          end: {
            line: 26,
            column: 38
          }
        }, {
          start: {
            line: 26,
            column: 41
          },
          end: {
            line: 28,
            column: 5
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 11
          },
          end: {
            line: 26,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 11
          },
          end: {
            line: 26,
            column: 14
          }
        }, {
          start: {
            line: 26,
            column: 18
          },
          end: {
            line: 26,
            column: 32
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 70,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 70,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 73,
            column: 84
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 73,
            column: 84
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 76,
            column: 25
          },
          end: {
            line: 76,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 76,
            column: 36
          },
          end: {
            line: 76,
            column: 45
          }
        }],
        line: 76
      },
      "5": {
        loc: {
          start: {
            line: 76,
            column: 87
          },
          end: {
            line: 76,
            column: 99
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 76,
            column: 97
          },
          end: {
            line: 76,
            column: 99
          }
        }],
        line: 76
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 20
          }
        }, {
          start: {
            line: 78,
            column: 24
          },
          end: {
            line: 78,
            column: 30
          }
        }, {
          start: {
            line: 78,
            column: 34
          },
          end: {
            line: 78,
            column: 50
          }
        }],
        line: 78
      },
      "8": {
        loc: {
          start: {
            line: 119,
            column: 20
          },
          end: {
            line: 119,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 20
          },
          end: {
            line: 119,
            column: 32
          }
        }, {
          start: {
            line: 119,
            column: 36
          },
          end: {
            line: 119,
            column: 39
          }
        }],
        line: 119
      },
      "9": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 130,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 130,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "10": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 132,
            column: 84
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 132,
            column: 84
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "11": {
        loc: {
          start: {
            line: 135,
            column: 25
          },
          end: {
            line: 135,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 25
          },
          end: {
            line: 135,
            column: 53
          }
        }, {
          start: {
            line: 135,
            column: 57
          },
          end: {
            line: 135,
            column: 66
          }
        }],
        line: 135
      },
      "12": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "13": {
        loc: {
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 32
          }
        }, {
          start: {
            line: 167,
            column: 36
          },
          end: {
            line: 167,
            column: 39
          }
        }],
        line: 167
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/fulfillment/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateApiKey } from '@/lib/api/middleware/auth';\nimport { rateLimit } from '@/lib/api/middleware/rate-limit';\nimport { UnifiedFulfillmentService } from '@/lib/api/services/unified-fulfillment';\nimport { connectToDatabase } from '@/lib/db';\nimport { FulfillmentProvider } from '@/lib/api/types/fulfillment';\nimport crypto from 'crypto';\n\n// Initialize the unified fulfillment service with all provider configurations\nconst fulfillmentService = new UnifiedFulfillmentService([\n  {\n    provider: 'shipbob',\n    credentials: {\n      apiKey: process.env.SHIPBOB_API_KEY!,\n      apiUrl: process.env.SHIPBOB_API_URL!,\n    }\n  },\n  {\n    provider: 'amazon',\n    credentials: {\n      accessToken: process.env.AMAZON_ACCESS_TOKEN!,\n      refreshToken: process.env.AMAZON_REFRESH_TOKEN!,\n      merchantId: process.env.AMAZON_MERCHANT_ID!,\n    }\n  },\n  {\n    provider: 'aliexpress',\n    credentials: {\n      apiKey: process.env.ALIEXPRESS_API_KEY!,\n      apiSecret: process.env.ALIEXPRESS_API_SECRET!,\n      accessToken: process.env.ALIEXPRESS_ACCESS_TOKEN!,\n    }\n  },\n  {\n    provider: '4px',\n    credentials: {\n      apiKey: process.env.FOURPX_API_KEY!,\n      apiSecret: process.env.FOURPX_API_SECRET!,\n      warehouseId: process.env.FOURPX_WAREHOUSE_ID!,\n    }\n  }\n]);\n\nexport async function POST(request: NextRequest) {\n  // Generate request ID for tracking\n  const requestId = crypto.randomBytes(16).toString('hex');\n\n  try {\n    // Validate API key\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    // Check rate limits\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    // Connect to database\n    await connectToDatabase();\n    \n    const { \n      orderId,\n      provider = 'shipbob' as FulfillmentProvider,\n      shippingMethod,\n      items,\n      shippingAddress,\n      options = {}\n    } = await request.json();\n\n    // Validate required fields\n    if (!orderId || !items || !shippingAddress) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Missing required fields',\n          requestId,\n          timestamp: new Date().toISOString()\n        },\n        { status: 400 }\n      );\n    }\n\n    const result = await fulfillmentService.createFulfillmentOrder({\n      orderId,\n      provider,\n      items,\n      shippingAddress,\n      shippingMethod,\n      status: 'pending',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...options\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n      requestId,\n      timestamp: new Date().toISOString()\n    }, {\n      headers: {\n        ...rateLimitResult?.headers,\n        'X-Request-ID': requestId,\n        'X-Provider': provider\n      }\n    });\n\n  } catch (error) {\n    console.error(`[${requestId}] Fulfillment error:`, error);\n    \n    return NextResponse.json({\n      success: false,\n      error: error.message,\n      requestId,\n      timestamp: new Date().toISOString()\n    }, { \n      status: error.status || 500,\n      headers: {\n        'X-Request-ID': requestId\n      }\n    });\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  const requestId = crypto.randomBytes(16).toString('hex');\n\n  try {\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    const { searchParams } = new URL(request.url);\n    const orderId = searchParams.get('orderId');\n    const provider = searchParams.get('provider') as FulfillmentProvider || 'shipbob';\n\n    if (!orderId) {\n      return NextResponse.json({\n        success: false,\n        error: 'Order ID is required',\n        requestId,\n        timestamp: new Date().toISOString()\n      }, { \n        status: 400 \n      });\n    }\n\n    const result = await fulfillmentService.getFulfillmentOrder(orderId, provider);\n\n    return NextResponse.json({\n      success: true,\n      data: result,\n      requestId,\n      timestamp: new Date().toISOString()\n    }, {\n      headers: {\n        ...rateLimitResult?.headers,\n        'X-Request-ID': requestId,\n        'X-Provider': provider\n      }\n    });\n\n  } catch (error) {\n    console.error(`[${requestId}] Tracking error:`, error);\n    \n    return NextResponse.json({\n      success: false,\n      error: error.message,\n      requestId,\n      timestamp: new Date().toISOString()\n    }, { \n      status: error.status || 500,\n      headers: {\n        'X-Request-ID': requestId\n      }\n    });\n  }\n}"],
      names: ["GET", "POST", "fulfillmentService", "UnifiedFulfillmentService", "provider", "credentials", "apiKey", "process", "env", "SHIPBOB_API_KEY", "apiUrl", "SHIPBOB_API_URL", "accessToken", "AMAZON_ACCESS_TOKEN", "refreshToken", "AMAZON_REFRESH_TOKEN", "merchantId", "AMAZON_MERCHANT_ID", "ALIEXPRESS_API_KEY", "apiSecret", "ALIEXPRESS_API_SECRET", "ALIEXPRESS_ACCESS_TOKEN", "FOURPX_API_KEY", "FOURPX_API_SECRET", "warehouseId", "FOURPX_WAREHOUSE_ID", "request", "requestId", "crypto", "randomBytes", "toString", "authError", "validateApiKey", "rateLimitResult", "rateLimit", "NextResponse", "connectToDatabase", "orderId", "shippingMethod", "items", "shippingAddress", "options", "json", "success", "error", "timestamp", "Date", "toISOString", "status", "result", "createFulfillmentOrder", "createdAt", "updatedAt", "data", "headers", "console", "message", "searchParams", "URL", "url", "get", "getFulfillmentOrder"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d92e5239b0f1148f6a81b67c45ba4ad1d2f4291a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bwybvikhc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bwybvikhc();
cov_2bwybvikhc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2bwybvikhc().f[0]++;
  cov_2bwybvikhc().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2bwybvikhc().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2bwybvikhc().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_2bwybvikhc().f[1]++;
    cov_2bwybvikhc().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2bwybvikhc().f[2]++;
    cov_2bwybvikhc().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2bwybvikhc().s[6]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_2bwybvikhc().s[7]++, require("../../../../lib/api/middleware/auth"));
const _ratelimit =
/* istanbul ignore next */
(cov_2bwybvikhc().s[8]++, require("../../../../lib/api/middleware/rate-limit"));
const _unifiedfulfillment =
/* istanbul ignore next */
(cov_2bwybvikhc().s[9]++, require("../../../../lib/api/services/unified-fulfillment"));
const _db =
/* istanbul ignore next */
(cov_2bwybvikhc().s[10]++, require("../../../../lib/db"));
const _crypto =
/* istanbul ignore next */
(/*#__PURE__*/cov_2bwybvikhc().s[11]++, _interop_require_default(require("crypto")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2bwybvikhc().f[3]++;
  cov_2bwybvikhc().s[12]++;
  return /* istanbul ignore next */(cov_2bwybvikhc().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2bwybvikhc().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2bwybvikhc().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2bwybvikhc().b[0][1]++, {
    default: obj
  });
}
// Initialize the unified fulfillment service with all provider configurations
const fulfillmentService =
/* istanbul ignore next */
(cov_2bwybvikhc().s[13]++, new _unifiedfulfillment.UnifiedFulfillmentService([{
  provider: 'shipbob',
  credentials: {
    apiKey: process.env.SHIPBOB_API_KEY,
    apiUrl: process.env.SHIPBOB_API_URL
  }
}, {
  provider: 'amazon',
  credentials: {
    accessToken: process.env.AMAZON_ACCESS_TOKEN,
    refreshToken: process.env.AMAZON_REFRESH_TOKEN,
    merchantId: process.env.AMAZON_MERCHANT_ID
  }
}, {
  provider: 'aliexpress',
  credentials: {
    apiKey: process.env.ALIEXPRESS_API_KEY,
    apiSecret: process.env.ALIEXPRESS_API_SECRET,
    accessToken: process.env.ALIEXPRESS_ACCESS_TOKEN
  }
}, {
  provider: '4px',
  credentials: {
    apiKey: process.env.FOURPX_API_KEY,
    apiSecret: process.env.FOURPX_API_SECRET,
    warehouseId: process.env.FOURPX_WAREHOUSE_ID
  }
}]));
async function POST(request) {
  /* istanbul ignore next */
  cov_2bwybvikhc().f[4]++;
  // Generate request ID for tracking
  const requestId =
  /* istanbul ignore next */
  (cov_2bwybvikhc().s[14]++, _crypto.default.randomBytes(16).toString('hex'));
  /* istanbul ignore next */
  cov_2bwybvikhc().s[15]++;
  try {
    // Validate API key
    const authError =
    /* istanbul ignore next */
    (cov_2bwybvikhc().s[16]++, await (0, _auth.validateApiKey)(request));
    /* istanbul ignore next */
    cov_2bwybvikhc().s[17]++;
    if (authError) {
      /* istanbul ignore next */
      cov_2bwybvikhc().b[2][0]++;
      cov_2bwybvikhc().s[18]++;
      return authError;
    } else
    /* istanbul ignore next */
    {
      cov_2bwybvikhc().b[2][1]++;
    }
    // Check rate limits
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_2bwybvikhc().s[19]++, await (0, _ratelimit.rateLimit)(request));
    /* istanbul ignore next */
    cov_2bwybvikhc().s[20]++;
    if (rateLimitResult instanceof _server.NextResponse) {
      /* istanbul ignore next */
      cov_2bwybvikhc().b[3][0]++;
      cov_2bwybvikhc().s[21]++;
      return rateLimitResult;
    } else
    /* istanbul ignore next */
    {
      cov_2bwybvikhc().b[3][1]++;
    }
    // Connect to database
    cov_2bwybvikhc().s[22]++;
    await (0, _db.connectToDatabase)();
    const {
      orderId,
      provider =
      /* istanbul ignore next */
      (cov_2bwybvikhc().b[4][0]++, 'shipbob'),
      shippingMethod,
      items,
      shippingAddress,
      options =
      /* istanbul ignore next */
      (cov_2bwybvikhc().b[5][0]++, {})
    } =
    /* istanbul ignore next */
    (cov_2bwybvikhc().s[23]++, await request.json());
    // Validate required fields
    /* istanbul ignore next */
    cov_2bwybvikhc().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_2bwybvikhc().b[7][0]++, !orderId) ||
    /* istanbul ignore next */
    (cov_2bwybvikhc().b[7][1]++, !items) ||
    /* istanbul ignore next */
    (cov_2bwybvikhc().b[7][2]++, !shippingAddress)) {
      /* istanbul ignore next */
      cov_2bwybvikhc().b[6][0]++;
      cov_2bwybvikhc().s[25]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Missing required fields',
        requestId,
        timestamp: new Date().toISOString()
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bwybvikhc().b[6][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2bwybvikhc().s[26]++, await fulfillmentService.createFulfillmentOrder({
      orderId,
      provider,
      items,
      shippingAddress,
      shippingMethod,
      status: 'pending',
      createdAt: new Date(),
      updatedAt: new Date(),
      ...options
    }));
    /* istanbul ignore next */
    cov_2bwybvikhc().s[27]++;
    return _server.NextResponse.json({
      success: true,
      data: result,
      requestId,
      timestamp: new Date().toISOString()
    }, {
      headers: {
        ...rateLimitResult?.headers,
        'X-Request-ID': requestId,
        'X-Provider': provider
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bwybvikhc().s[28]++;
    console.error(`[${requestId}] Fulfillment error:`, error);
    /* istanbul ignore next */
    cov_2bwybvikhc().s[29]++;
    return _server.NextResponse.json({
      success: false,
      error: error.message,
      requestId,
      timestamp: new Date().toISOString()
    }, {
      status:
      /* istanbul ignore next */
      (cov_2bwybvikhc().b[8][0]++, error.status) ||
      /* istanbul ignore next */
      (cov_2bwybvikhc().b[8][1]++, 500),
      headers: {
        'X-Request-ID': requestId
      }
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2bwybvikhc().f[5]++;
  const requestId =
  /* istanbul ignore next */
  (cov_2bwybvikhc().s[30]++, _crypto.default.randomBytes(16).toString('hex'));
  /* istanbul ignore next */
  cov_2bwybvikhc().s[31]++;
  try {
    const authError =
    /* istanbul ignore next */
    (cov_2bwybvikhc().s[32]++, await (0, _auth.validateApiKey)(request));
    /* istanbul ignore next */
    cov_2bwybvikhc().s[33]++;
    if (authError) {
      /* istanbul ignore next */
      cov_2bwybvikhc().b[9][0]++;
      cov_2bwybvikhc().s[34]++;
      return authError;
    } else
    /* istanbul ignore next */
    {
      cov_2bwybvikhc().b[9][1]++;
    }
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_2bwybvikhc().s[35]++, await (0, _ratelimit.rateLimit)(request));
    /* istanbul ignore next */
    cov_2bwybvikhc().s[36]++;
    if (rateLimitResult instanceof _server.NextResponse) {
      /* istanbul ignore next */
      cov_2bwybvikhc().b[10][0]++;
      cov_2bwybvikhc().s[37]++;
      return rateLimitResult;
    } else
    /* istanbul ignore next */
    {
      cov_2bwybvikhc().b[10][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2bwybvikhc().s[38]++, new URL(request.url));
    const orderId =
    /* istanbul ignore next */
    (cov_2bwybvikhc().s[39]++, searchParams.get('orderId'));
    const provider =
    /* istanbul ignore next */
    (cov_2bwybvikhc().s[40]++,
    /* istanbul ignore next */
    (cov_2bwybvikhc().b[11][0]++, searchParams.get('provider')) ||
    /* istanbul ignore next */
    (cov_2bwybvikhc().b[11][1]++, 'shipbob'));
    /* istanbul ignore next */
    cov_2bwybvikhc().s[41]++;
    if (!orderId) {
      /* istanbul ignore next */
      cov_2bwybvikhc().b[12][0]++;
      cov_2bwybvikhc().s[42]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Order ID is required',
        requestId,
        timestamp: new Date().toISOString()
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2bwybvikhc().b[12][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2bwybvikhc().s[43]++, await fulfillmentService.getFulfillmentOrder(orderId, provider));
    /* istanbul ignore next */
    cov_2bwybvikhc().s[44]++;
    return _server.NextResponse.json({
      success: true,
      data: result,
      requestId,
      timestamp: new Date().toISOString()
    }, {
      headers: {
        ...rateLimitResult?.headers,
        'X-Request-ID': requestId,
        'X-Provider': provider
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2bwybvikhc().s[45]++;
    console.error(`[${requestId}] Tracking error:`, error);
    /* istanbul ignore next */
    cov_2bwybvikhc().s[46]++;
    return _server.NextResponse.json({
      success: false,
      error: error.message,
      requestId,
      timestamp: new Date().toISOString()
    }, {
      status:
      /* istanbul ignore next */
      (cov_2bwybvikhc().b[13][0]++, error.status) ||
      /* istanbul ignore next */
      (cov_2bwybvikhc().b[13][1]++, 500),
      headers: {
        'X-Request-ID': requestId
      }
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,