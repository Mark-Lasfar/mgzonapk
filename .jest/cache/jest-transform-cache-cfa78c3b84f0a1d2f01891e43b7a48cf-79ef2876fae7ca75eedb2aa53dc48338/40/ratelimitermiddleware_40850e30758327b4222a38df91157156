bd2601b0ebc37d952d229ac54a0d48ec
"use strict";

/* istanbul ignore next */
function cov_1ej25hgolq() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/rate-limiter.middleware.ts";
  var hash = "42c544472d1cdefb76f9bd2c8c518de1759409fc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/rate-limiter.middleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 27
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 21
        },
        end: {
          line: 12,
          column: 56
        }
      },
      "5": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "6": {
        start: {
          line: 15,
          column: 26
        },
        end: {
          line: 15,
          column: 48
        }
      },
      "7": {
        start: {
          line: 16,
          column: 21
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "8": {
        start: {
          line: 17,
          column: 28
        },
        end: {
          line: 21,
          column: 1
        }
      },
      "9": {
        start: {
          line: 18,
          column: 15
        },
        end: {
          line: 18,
          column: 102
        }
      },
      "10": {
        start: {
          line: 19,
          column: 17
        },
        end: {
          line: 19,
          column: 41
        }
      },
      "11": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 27
        }
      },
      "12": {
        start: {
          line: 23,
          column: 79
        },
        end: {
          line: 23,
          column: 85
        }
      },
      "13": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 71,
          column: 6
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "15": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "16": {
        start: {
          line: 27,
          column: 27
        },
        end: {
          line: 27,
          column: 105
        }
      },
      "17": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 33,
          column: 13
        }
      },
      "18": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "19": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 41,
          column: 19
        }
      },
      "20": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "21": {
        start: {
          line: 55,
          column: 29
        },
        end: {
          line: 55,
          column: 49
        }
      },
      "22": {
        start: {
          line: 57,
          column: 34
        },
        end: {
          line: 57,
          column: 83
        }
      },
      "23": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 60,
          column: 15
        }
      },
      "24": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 54
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 33
        }
      },
      "26": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "27": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 28
          },
          end: {
            line: 17,
            column: 29
          }
        },
        loc: {
          start: {
            line: 17,
            column: 39
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "rateLimiter",
        decl: {
          start: {
            line: 22,
            column: 9
          },
          end: {
            line: 22,
            column: 20
          }
        },
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 24,
            column: 12
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 58,
            column: 44
          },
          end: {
            line: 58,
            column: 45
          }
        },
        loc: {
          start: {
            line: 58,
            column: 60
          },
          end: {
            line: 60,
            column: 13
          }
        },
        line: 58
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 53
          }
        }, {
          start: {
            line: 18,
            column: 57
          },
          end: {
            line: 18,
            column: 89
          }
        }, {
          start: {
            line: 18,
            column: 93
          },
          end: {
            line: 18,
            column: 102
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 40
          },
          end: {
            line: 23,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 55
          },
          end: {
            line: 23,
            column: 74
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 64,
            column: 23
          },
          end: {
            line: 64,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 48
          },
          end: {
            line: 64,
            column: 61
          }
        }, {
          start: {
            line: 64,
            column: 64
          },
          end: {
            line: 64,
            column: 77
          }
        }],
        line: 64
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/rate-limiter.middleware.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { RateLimiter } from '../services/rate-limiter';\nimport { logger } from '../services/logging';\n\n// Update the timestamp constant\nconst CURRENT_TIMESTAMP = '2025-04-28T02:43:31Z'\nconst CURRENT_USER = 'Mark-Lasfar'\n\nexport interface RateLimitConfig {\n  maxRequests: number;\n  windowSeconds: number;\n  keyGenerator?: (request: NextRequest) => string;\n}\n\nconst defaultKeyGenerator = (request: NextRequest): string => {\n  const ip = request.headers.get('x-forwarded-for') || \n             request.headers.get('x-real-ip') || \n             'unknown';\n  const path = request.nextUrl.pathname;\n  return `${ip}:${path}`;\n};\n\nexport function rateLimiter(config: RateLimitConfig) {\n  const {\n    maxRequests,\n    windowSeconds,\n    keyGenerator = defaultKeyGenerator\n  } = config;\n\n  return async (request: NextRequest) => {\n    try {\n      const key = keyGenerator(request);\n      \n      const result = await RateLimiter.checkRateLimit(\n        key,\n        maxRequests,\n        windowSeconds\n      );\n\n      // Add rate limit headers\n      const headers = {\n        'X-RateLimit-Limit': maxRequests.toString(),\n        'X-RateLimit-Remaining': result.remaining.toString(),\n        'X-RateLimit-Reset': result.resetTime.getTime().toString(),\n      };\n\n      if (!result.allowed) {\n        logger.warn('Rate limit exceeded', {\n          key,\n          maxRequests,\n          windowSeconds,\n          timestamp: CURRENT_TIMESTAMP,\n          user: CURRENT_USER\n        });\n\n        return new NextResponse(\n          JSON.stringify({\n            success: false,\n            error: 'Too many requests',\n            retryAfter: result.resetTime\n          }),\n          {\n            status: 429,\n            headers: {\n              ...headers,\n              'Retry-After': Math.ceil((result.resetTime.getTime() - Date.now()) / 1000).toString()\n            }\n          }\n        );\n      }\n\n      // Continue with the request\n      const response = await fetch(request);\n      \n      // Add rate limit headers to the response\n      const finalResponse = new NextResponse(response.body, response);\n      Object.entries(headers).forEach(([key, value]) => {\n        finalResponse.headers.set(key, value);\n      });\n\n      return finalResponse;\n\n    } catch (error) {\n      logger.error(new Error('Rate limiter middleware error'), {\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n\n      // Fail open\n      return fetch(request);\n    }\n  };\n}"],
      names: ["rateLimiter", "CURRENT_TIMESTAMP", "CURRENT_USER", "defaultKeyGenerator", "request", "ip", "headers", "get", "path", "nextUrl", "pathname", "config", "maxRequests", "windowSeconds", "keyGenerator", "key", "result", "RateLimiter", "checkRateLimit", "toString", "remaining", "resetTime", "getTime", "allowed", "logger", "warn", "timestamp", "user", "NextResponse", "JSON", "stringify", "success", "error", "retryAfter", "status", "Math", "ceil", "Date", "now", "response", "fetch", "finalResponse", "body", "Object", "entries", "forEach", "value", "set", "Error", "message", "String"],
      mappings: ";;;;+BAsBgBA;;;eAAAA;;;wBAtB0B;6BACd;yBACL;AAEvB,gCAAgC;AAChC,MAAMC,oBAAoB;AAC1B,MAAMC,eAAe;AAQrB,MAAMC,sBAAsB,CAACC;IAC3B,MAAMC,KAAKD,QAAQE,OAAO,CAACC,GAAG,CAAC,sBACpBH,QAAQE,OAAO,CAACC,GAAG,CAAC,gBACpB;IACX,MAAMC,OAAOJ,QAAQK,OAAO,CAACC,QAAQ;IACrC,OAAO,GAAGL,GAAG,CAAC,EAAEG,MAAM;AACxB;AAEO,SAASR,YAAYW,MAAuB;IACjD,MAAM,EACJC,WAAW,EACXC,aAAa,EACbC,eAAeX,mBAAmB,EACnC,GAAGQ;IAEJ,OAAO,OAAOP;QACZ,IAAI;YACF,MAAMW,MAAMD,aAAaV;YAEzB,MAAMY,SAAS,MAAMC,wBAAW,CAACC,cAAc,CAC7CH,KACAH,aACAC;YAGF,yBAAyB;YACzB,MAAMP,UAAU;gBACd,qBAAqBM,YAAYO,QAAQ;gBACzC,yBAAyBH,OAAOI,SAAS,CAACD,QAAQ;gBAClD,qBAAqBH,OAAOK,SAAS,CAACC,OAAO,GAAGH,QAAQ;YAC1D;YAEA,IAAI,CAACH,OAAOO,OAAO,EAAE;gBACnBC,eAAM,CAACC,IAAI,CAAC,uBAAuB;oBACjCV;oBACAH;oBACAC;oBACAa,WAAWzB;oBACX0B,MAAMzB;gBACR;gBAEA,OAAO,IAAI0B,oBAAY,CACrBC,KAAKC,SAAS,CAAC;oBACbC,SAAS;oBACTC,OAAO;oBACPC,YAAYjB,OAAOK,SAAS;gBAC9B,IACA;oBACEa,QAAQ;oBACR5B,SAAS;wBACP,GAAGA,OAAO;wBACV,eAAe6B,KAAKC,IAAI,CAAC,AAACpB,CAAAA,OAAOK,SAAS,CAACC,OAAO,KAAKe,KAAKC,GAAG,EAAC,IAAK,MAAMnB,QAAQ;oBACrF;gBACF;YAEJ;YAEA,4BAA4B;YAC5B,MAAMoB,WAAW,MAAMC,MAAMpC;YAE7B,yCAAyC;YACzC,MAAMqC,gBAAgB,IAAIb,oBAAY,CAACW,SAASG,IAAI,EAAEH;YACtDI,OAAOC,OAAO,CAACtC,SAASuC,OAAO,CAAC,CAAC,CAAC9B,KAAK+B,MAAM;gBAC3CL,cAAcnC,OAAO,CAACyC,GAAG,CAAChC,KAAK+B;YACjC;YAEA,OAAOL;QAET,EAAE,OAAOT,OAAO;YACdR,eAAM,CAACQ,KAAK,CAAC,IAAIgB,MAAM,kCAAkC;gBACvDhB,OAAOA,iBAAiBgB,QAAQhB,MAAMiB,OAAO,GAAGC,OAAOlB;gBACvDN,WAAWzB;gBACX0B,MAAMzB;YACR;YAEA,YAAY;YACZ,OAAOsC,MAAMpC;QACf;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "42c544472d1cdefb76f9bd2c8c518de1759409fc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ej25hgolq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ej25hgolq();
cov_1ej25hgolq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ej25hgolq().s[1]++;
Object.defineProperty(exports, "rateLimiter", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1ej25hgolq().f[0]++;
    cov_1ej25hgolq().s[2]++;
    return rateLimiter;
  }
});
const _server =
/* istanbul ignore next */
(cov_1ej25hgolq().s[3]++, require("next/server"));
const _ratelimiter =
/* istanbul ignore next */
(cov_1ej25hgolq().s[4]++, require("../services/rate-limiter"));
const _logging =
/* istanbul ignore next */
(cov_1ej25hgolq().s[5]++, require("../services/logging"));
// Update the timestamp constant
const CURRENT_TIMESTAMP =
/* istanbul ignore next */
(cov_1ej25hgolq().s[6]++, '2025-04-28T02:43:31Z');
const CURRENT_USER =
/* istanbul ignore next */
(cov_1ej25hgolq().s[7]++, 'Mark-Lasfar');
/* istanbul ignore next */
cov_1ej25hgolq().s[8]++;
const defaultKeyGenerator = request => {
  /* istanbul ignore next */
  cov_1ej25hgolq().f[1]++;
  const ip =
  /* istanbul ignore next */
  (cov_1ej25hgolq().s[9]++,
  /* istanbul ignore next */
  (cov_1ej25hgolq().b[0][0]++, request.headers.get('x-forwarded-for')) ||
  /* istanbul ignore next */
  (cov_1ej25hgolq().b[0][1]++, request.headers.get('x-real-ip')) ||
  /* istanbul ignore next */
  (cov_1ej25hgolq().b[0][2]++, 'unknown'));
  const path =
  /* istanbul ignore next */
  (cov_1ej25hgolq().s[10]++, request.nextUrl.pathname);
  /* istanbul ignore next */
  cov_1ej25hgolq().s[11]++;
  return `${ip}:${path}`;
};
function rateLimiter(config) {
  /* istanbul ignore next */
  cov_1ej25hgolq().f[2]++;
  const {
    maxRequests,
    windowSeconds,
    keyGenerator =
    /* istanbul ignore next */
    (cov_1ej25hgolq().b[1][0]++, defaultKeyGenerator)
  } =
  /* istanbul ignore next */
  (cov_1ej25hgolq().s[12]++, config);
  /* istanbul ignore next */
  cov_1ej25hgolq().s[13]++;
  return async request => {
    /* istanbul ignore next */
    cov_1ej25hgolq().f[3]++;
    cov_1ej25hgolq().s[14]++;
    try {
      const key =
      /* istanbul ignore next */
      (cov_1ej25hgolq().s[15]++, keyGenerator(request));
      const result =
      /* istanbul ignore next */
      (cov_1ej25hgolq().s[16]++, await _ratelimiter.RateLimiter.checkRateLimit(key, maxRequests, windowSeconds));
      // Add rate limit headers
      const headers =
      /* istanbul ignore next */
      (cov_1ej25hgolq().s[17]++, {
        'X-RateLimit-Limit': maxRequests.toString(),
        'X-RateLimit-Remaining': result.remaining.toString(),
        'X-RateLimit-Reset': result.resetTime.getTime().toString()
      });
      /* istanbul ignore next */
      cov_1ej25hgolq().s[18]++;
      if (!result.allowed) {
        /* istanbul ignore next */
        cov_1ej25hgolq().b[2][0]++;
        cov_1ej25hgolq().s[19]++;
        _logging.logger.warn('Rate limit exceeded', {
          key,
          maxRequests,
          windowSeconds,
          timestamp: CURRENT_TIMESTAMP,
          user: CURRENT_USER
        });
        /* istanbul ignore next */
        cov_1ej25hgolq().s[20]++;
        return new _server.NextResponse(JSON.stringify({
          success: false,
          error: 'Too many requests',
          retryAfter: result.resetTime
        }), {
          status: 429,
          headers: {
            ...headers,
            'Retry-After': Math.ceil((result.resetTime.getTime() - Date.now()) / 1000).toString()
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ej25hgolq().b[2][1]++;
      }
      // Continue with the request
      const response =
      /* istanbul ignore next */
      (cov_1ej25hgolq().s[21]++, await fetch(request));
      // Add rate limit headers to the response
      const finalResponse =
      /* istanbul ignore next */
      (cov_1ej25hgolq().s[22]++, new _server.NextResponse(response.body, response));
      /* istanbul ignore next */
      cov_1ej25hgolq().s[23]++;
      Object.entries(headers).forEach(([key, value]) => {
        /* istanbul ignore next */
        cov_1ej25hgolq().f[4]++;
        cov_1ej25hgolq().s[24]++;
        finalResponse.headers.set(key, value);
      });
      /* istanbul ignore next */
      cov_1ej25hgolq().s[25]++;
      return finalResponse;
    } catch (error) {
      /* istanbul ignore next */
      cov_1ej25hgolq().s[26]++;
      _logging.logger.error(new Error('Rate limiter middleware error'), {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ej25hgolq().b[3][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ej25hgolq().b[3][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      // Fail open
      /* istanbul ignore next */
      cov_1ej25hgolq().s[27]++;
      return fetch(request);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,