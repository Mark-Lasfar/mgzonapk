{"version":3,"names":["GET","cov_19zpb0ipj0","f","s","POST","request","authError","_auth","validateApiKey","b","rateLimitResult","_ratelimit","rateLimit","_server","NextResponse","searchParams","URL","url","page","parseInt","get","limit","category","search","sort","_db","connectToDatabase","query","$or","name","$regex","$options","description","total","_productmodel","default","countDocuments","products","find","skip","json","success","data","items","totalPages","Math","ceil","headers","error","message","status","body","product","create","_webhookdispatcher","WebhookDispatcher","dispatch","userId"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/products/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateApiKey } from '@/lib/api/middleware/auth';\nimport { rateLimit } from '@/lib/api/middleware/rate-limit';\nimport { connectToDatabase } from '@/lib/db';\nimport Product from '@/lib/db/models/product.model';\nimport { WebhookDispatcher } from '@/lib/api/webhook-dispatcher';\n\nexport async function GET(request: NextRequest) {\n  const authError = await validateApiKey(request);\n  if (authError) return authError;\n\n  const rateLimitResult = await rateLimit(request);\n  if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n  const { searchParams } = new URL(request.url);\n  const page = parseInt(searchParams.get('page') || '1');\n  const limit = parseInt(searchParams.get('limit') || '10');\n  const category = searchParams.get('category');\n  const search = searchParams.get('search');\n  const sort = searchParams.get('sort') || '-createdAt';\n\n  try {\n    await connectToDatabase();\n\n    const query: any = {};\n    if (category) query.category = category;\n    if (search) {\n      query.$or = [\n        { name: { $regex: search, $options: 'i' } },\n        { description: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    const total = await Product.countDocuments(query);\n    const products = await Product.find(query)\n      .sort(sort)\n      .skip((page - 1) * limit)\n      .limit(limit);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        items: products,\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit),\n      },\n    }, {\n      headers: rateLimitResult?.headers,\n    });\n  } catch (error) {\n    return NextResponse.json(\n      { success: false, error: error.message },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  const authError = await validateApiKey(request);\n  if (authError) return authError;\n\n  const rateLimitResult = await rateLimit(request);\n  if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n  try {\n    const body = await request.json();\n    await connectToDatabase();\n\n    const product = await Product.create(body);\n\n    // Dispatch webhook\n    await WebhookDispatcher.dispatch(\n      body.userId,\n      'product.created',\n      product\n    );\n\n    return NextResponse.json({\n      success: true,\n      data: product,\n    }, {\n      headers: rateLimitResult?.headers,\n    });\n  } catch (error) {\n    return NextResponse.json(\n      { success: false, error: error.message },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}