{"version":3,"names":["createXML","cov_2nn4cd8u2r","f","s","parseXML","validateXML","content","options","b","removeNamespaces","dateFields","numberFields","booleanFields","arrayFields","parser","DOMParser","doc","parseFromString","parseError","querySelector","Error","textContent","convertNode","node","result","attr","Array","from","attributes","name","value","child","childNodes","nodeType","Node","ELEMENT_NODE","el","tagName","split","pop","childValue","includes","push","TEXT_NODE","text","trim","tag","Date","Number","toLowerCase","Object","keys","length","documentElement","children","map","rootTag","data","fields","pretty","indent","declaration","escape","val","replace","serialize","obj","depth","pad","repeat","xml","field","isArray","item","String","requiredFields","errors","valid","firstItem","err","message"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/xml.ts"],"sourcesContent":["interface XMLParseOptions {\n    removeNamespaces?: boolean;\n    dateFields?: string[];\n    numberFields?: string[];\n    booleanFields?: string[];\n    arrayFields?: string[];\n  }\n  \n  interface XMLCreateOptions {\n    rootTag?: string;\n    pretty?: boolean;\n    indent?: string;\n    declaration?: boolean;\n  }\n  \n  export function parseXML<T>(content: string, options: XMLParseOptions = {}): T[] {\n    const {\n      removeNamespaces = true,\n      dateFields = [],\n      numberFields = [],\n      booleanFields = [],\n      arrayFields = [],\n    } = options;\n  \n    const parser = new DOMParser();\n    const doc = parser.parseFromString(content, 'application/xml');\n    const parseError = doc.querySelector('parsererror');\n  \n    if (parseError) {\n      throw new Error(`XML Parse Error: ${parseError.textContent}`);\n    }\n  \n    const convertNode = (node: Element): any => {\n      const result: Record<string, any> = {};\n  \n      for (const attr of Array.from(node.attributes)) {\n        result[`@${attr.name}`] = attr.value;\n      }\n  \n      for (const child of Array.from(node.childNodes)) {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n          const el = child as Element;\n          const tagName = removeNamespaces ? el.tagName.split(':').pop()! : el.tagName;\n          const childValue = convertNode(el);\n  \n          if (arrayFields.includes(tagName)) {\n            result[tagName] = result[tagName] || [];\n            result[tagName].push(childValue);\n          } else {\n            result[tagName] = childValue;\n          }\n        } else if (child.nodeType === Node.TEXT_NODE) {\n          const text = child.textContent?.trim();\n          if (text) {\n            const tag = node.tagName;\n            if (dateFields.includes(tag)) result['#text'] = new Date(text);\n            else if (numberFields.includes(tag)) result['#text'] = Number(text);\n            else if (booleanFields.includes(tag)) result['#text'] = text.toLowerCase() === 'true';\n            else result['#text'] = text;\n          }\n        }\n      }\n  \n      return Object.keys(result).length === 1 && '#text' in result ? result['#text'] : result;\n    };\n  \n    return Array.from(doc.documentElement.children).map(el => convertNode(el as Element)) as T[];\n  }\n  \n  export function createXML(\n    rootTag: string,\n    data: any[],\n    fields: string[],\n    options: XMLCreateOptions = {}\n  ): string {\n    const { pretty = true, indent = '  ', declaration = true } = options;\n  \n    const escape = (val: string) =>\n      val\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&apos;');\n  \n    const serialize = (obj: any, depth = 0): string => {\n      const pad = pretty ? '\\n' + indent.repeat(depth) : '';\n      let xml = '';\n  \n      for (const field of fields) {\n        if (!(field in obj)) continue;\n        const value = obj[field];\n        if (value == null) continue;\n  \n        xml += `${pad}<${field}>`;\n  \n        if (Array.isArray(value)) {\n          for (const item of value) {\n            xml += typeof item === 'object'\n              ? serialize(item, depth + 1)\n              : `${pad}${indent}<item>${escape(String(item))}</item>`;\n          }\n        } else if (typeof value === 'object') {\n          xml += serialize(value, depth + 1);\n        } else {\n          xml += escape(String(value));\n        }\n  \n        xml += `</${field}>`;\n      }\n  \n      return xml;\n    };\n  \n    let xml = declaration ? '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' : '';\n    if (pretty) xml += '\\n';\n    xml += `<${rootTag}>`;\n  \n    for (const item of data) {\n      xml += `${pretty ? '\\n' + indent : ''}<item>`;\n      xml += serialize(item, pretty ? 2 : 0);\n      xml += `${pretty ? '\\n' + indent : ''}</item>`;\n    }\n  \n    xml += pretty ? '\\n' : '';\n    xml += `</${rootTag}>`;\n  \n    return xml;\n  }\n  \n  export function validateXML(\n    content: string,\n    requiredFields: string[]\n  ): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n  \n    try {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(content, 'application/xml');\n  \n      if (doc.querySelector('parsererror')) {\n        errors.push('Invalid XML format.');\n        return { valid: false, errors };\n      }\n  \n      const firstItem = doc.querySelector('item');\n      if (!firstItem) {\n        errors.push('No <item> elements found.');\n        return { valid: false, errors };\n      }\n  \n      for (const field of requiredFields) {\n        if (!firstItem.querySelector(field)) {\n          errors.push(`Missing required field: <${field}>`);\n        }\n      }\n  \n      return { valid: errors.length === 0, errors };\n    } catch (err: any) {\n      errors.push(`Validation error: ${err.message}`);\n      return { valid: false, errors };\n    }\n  }\n  "],"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","ignoreList":[]}