87e1fa552bcb67825c4e23e78db7a367
"use strict";

/* istanbul ignore next */
function cov_nohgo3uob() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/verify-email/route.ts";
  var hash = "501c53fc041836bdbff9d3abd1cd26b5d953f8d5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/verify-email/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "5": {
        start: {
          line: 13,
          column: 45
        },
        end: {
          line: 13,
          column: 131
        }
      },
      "6": {
        start: {
          line: 14,
          column: 33
        },
        end: {
          line: 14,
          column: 106
        }
      },
      "7": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 63
        }
      },
      "8": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 67
        }
      },
      "9": {
        start: {
          line: 17,
          column: 17
        },
        end: {
          line: 17,
          column: 64
        }
      },
      "10": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 18,
          column: 72
        }
      },
      "11": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 22,
          column: 6
        }
      },
      "12": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 43
        }
      },
      "14": {
        start: {
          line: 27,
          column: 32
        },
        end: {
          line: 27,
          column: 48
        }
      },
      "15": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "16": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "17": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "18": {
        start: {
          line: 42,
          column: 30
        },
        end: {
          line: 42,
          column: 87
        }
      },
      "19": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "20": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "21": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 33
        }
      },
      "22": {
        start: {
          line: 50,
          column: 35
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "23": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "24": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 71
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 64,
          column: 15
        }
      },
      "26": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "27": {
        start: {
          line: 73,
          column: 21
        },
        end: {
          line: 75,
          column: 30
        }
      },
      "28": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "29": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "30": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 85,
          column: 15
        }
      },
      "31": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "32": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "33": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "34": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "35": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 63
        }
      },
      "36": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 33
          }
        },
        loc: {
          start: {
            line: 19,
            column: 39
          },
          end: {
            line: 23,
            column: 1
          }
        },
        line: 19
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 19
          }
        },
        loc: {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 24
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 11
          },
          end: {
            line: 22,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 35
          },
          end: {
            line: 20,
            column: 38
          }
        }, {
          start: {
            line: 20,
            column: 41
          },
          end: {
            line: 22,
            column: 5
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 11
          },
          end: {
            line: 20,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 11
          },
          end: {
            line: 20,
            column: 14
          }
        }, {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 32
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 55
          }
        }, {
          start: {
            line: 29,
            column: 59
          },
          end: {
            line: 29,
            column: 112
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/verify-email/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport VerificationCode from '@/lib/db/models/verification-code.model';\nimport User from '@/lib/db/models/user.model';\nimport { validation } from '@/lib/utils/validation';\nimport { sendNotification } from '@/lib/utils/notification';\nimport { logger } from '@/lib/api/services/logging';\nimport {\n  checkVerificationAttempts,\n  updateVerificationAttempts,\n  resetVerificationAttempts,\n} from '@/lib/middleware/verification';\n\nexport async function POST(req: NextRequest) {\n  try {\n    await connectToDatabase();\n\n    const { email, code } = await req.json();\n\n    // Validate input\n    if (!validation.isValidEmail(email) || !validation.isValidVerificationCode(code)) {\n      logger.warn('Invalid email or code format', { email, code });\n      return NextResponse.json(\n        { success: false, error: 'Invalid email or verification code format' },\n        { status: 400 }\n      );\n    }\n\n    // Check verification attempts\n    const attemptsCheck = await checkVerificationAttempts(email);\n    if (attemptsCheck) {\n      logger.warn('Too many verification attempts', { email });\n      return attemptsCheck;\n    }\n\n    // Verify code\n    const verificationRecord = await VerificationCode.findOne({\n      email,\n      code,\n      type: 'EMAIL_VERIFICATION',\n      verified: false,\n      expiresAt: { $gt: new Date() },\n    });\n\n    if (!verificationRecord) {\n      await updateVerificationAttempts(email);\n      logger.warn('Invalid or expired verification code', { email, code });\n      return NextResponse.json(\n        { success: false, error: 'Invalid or expired verification code' },\n        { status: 400 }\n      );\n    }\n\n    // Update verification status\n    const user = await User.findOne({ email }).select('id').lean();\n    if (!user) {\n      logger.error('User not found for email', { email });\n      return NextResponse.json({ success: false, error: 'User not found' }, { status: 400 });\n    }\n\n    await Promise.all([\n      VerificationCode.findByIdAndUpdate(verificationRecord._id, { verified: true }),\n      User.findOneAndUpdate(\n        { email },\n        {\n          emailVerified: true,\n          isActive: true,\n          $unset: { verificationAttempts: '', lastVerificationAttempt: '' },\n        }\n      ),\n      resetVerificationAttempts(email),\n    ]);\n\n    // Send notification for successful email verification\n    await sendNotification({\n      userId: user.id,\n      type: 'verification',\n      title: 'Email Verification Successful',\n      message: 'Your email address has been successfully verified.',\n      channels: ['email', 'in_app'],\n      data: { verificationType: 'email' },\n    });\n\n    logger.info('Email verified successfully', { email });\n    return NextResponse.json({\n      success: true,\n      message: 'Email verified successfully',\n    });\n  } catch (error) {\n    logger.error('Error verifying email:', error);\n    return NextResponse.json(\n      { success: false, error: 'Error verifying email' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "req", "connectToDatabase", "email", "code", "json", "validation", "isValidEmail", "isValidVerificationCode", "logger", "warn", "NextResponse", "success", "error", "status", "attemptsCheck", "checkVerificationAttempts", "verificationRecord", "VerificationCode", "findOne", "type", "verified", "expiresAt", "$gt", "Date", "updateVerificationAttempts", "user", "User", "select", "lean", "Promise", "all", "findByIdAndUpdate", "_id", "findOneAndUpdate", "emailVerified", "isActive", "$unset", "verificationAttempts", "lastVerificationAttempt", "resetVerificationAttempts", "sendNotification", "userId", "id", "title", "message", "channels", "data", "verificationType", "info"],
      mappings: ";;;;+BAasBA;;;eAAAA;;;wBAboB;oBACR;8EACL;kEACZ;4BACU;8BACM;yBACV;8BAKhB;;;;;;AAEA,eAAeA,KAAKC,GAAgB;IACzC,IAAI;QACF,MAAMC,IAAAA,qBAAiB;QAEvB,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAE,GAAG,MAAMH,IAAII,IAAI;QAEtC,iBAAiB;QACjB,IAAI,CAACC,sBAAU,CAACC,YAAY,CAACJ,UAAU,CAACG,sBAAU,CAACE,uBAAuB,CAACJ,OAAO;YAChFK,eAAM,CAACC,IAAI,CAAC,gCAAgC;gBAAEP;gBAAOC;YAAK;YAC1D,OAAOO,oBAAY,CAACN,IAAI,CACtB;gBAAEO,SAAS;gBAAOC,OAAO;YAA4C,GACrE;gBAAEC,QAAQ;YAAI;QAElB;QAEA,8BAA8B;QAC9B,MAAMC,gBAAgB,MAAMC,IAAAA,uCAAyB,EAACb;QACtD,IAAIY,eAAe;YACjBN,eAAM,CAACC,IAAI,CAAC,kCAAkC;gBAAEP;YAAM;YACtD,OAAOY;QACT;QAEA,cAAc;QACd,MAAME,qBAAqB,MAAMC,8BAAgB,CAACC,OAAO,CAAC;YACxDhB;YACAC;YACAgB,MAAM;YACNC,UAAU;YACVC,WAAW;gBAAEC,KAAK,IAAIC;YAAO;QAC/B;QAEA,IAAI,CAACP,oBAAoB;YACvB,MAAMQ,IAAAA,wCAA0B,EAACtB;YACjCM,eAAM,CAACC,IAAI,CAAC,wCAAwC;gBAAEP;gBAAOC;YAAK;YAClE,OAAOO,oBAAY,CAACN,IAAI,CACtB;gBAAEO,SAAS;gBAAOC,OAAO;YAAuC,GAChE;gBAAEC,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,MAAMY,OAAO,MAAMC,kBAAI,CAACR,OAAO,CAAC;YAAEhB;QAAM,GAAGyB,MAAM,CAAC,MAAMC,IAAI;QAC5D,IAAI,CAACH,MAAM;YACTjB,eAAM,CAACI,KAAK,CAAC,4BAA4B;gBAAEV;YAAM;YACjD,OAAOQ,oBAAY,CAACN,IAAI,CAAC;gBAAEO,SAAS;gBAAOC,OAAO;YAAiB,GAAG;gBAAEC,QAAQ;YAAI;QACtF;QAEA,MAAMgB,QAAQC,GAAG,CAAC;YAChBb,8BAAgB,CAACc,iBAAiB,CAACf,mBAAmBgB,GAAG,EAAE;gBAAEZ,UAAU;YAAK;YAC5EM,kBAAI,CAACO,gBAAgB,CACnB;gBAAE/B;YAAM,GACR;gBACEgC,eAAe;gBACfC,UAAU;gBACVC,QAAQ;oBAAEC,sBAAsB;oBAAIC,yBAAyB;gBAAG;YAClE;YAEFC,IAAAA,uCAAyB,EAACrC;SAC3B;QAED,sDAAsD;QACtD,MAAMsC,IAAAA,8BAAgB,EAAC;YACrBC,QAAQhB,KAAKiB,EAAE;YACfvB,MAAM;YACNwB,OAAO;YACPC,SAAS;YACTC,UAAU;gBAAC;gBAAS;aAAS;YAC7BC,MAAM;gBAAEC,kBAAkB;YAAQ;QACpC;QAEAvC,eAAM,CAACwC,IAAI,CAAC,+BAA+B;YAAE9C;QAAM;QACnD,OAAOQ,oBAAY,CAACN,IAAI,CAAC;YACvBO,SAAS;YACTiC,SAAS;QACX;IACF,EAAE,OAAOhC,OAAO;QACdJ,eAAM,CAACI,KAAK,CAAC,0BAA0BA;QACvC,OAAOF,oBAAY,CAACN,IAAI,CACtB;YAAEO,SAAS;YAAOC,OAAO;QAAwB,GACjD;YAAEC,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "501c53fc041836bdbff9d3abd1cd26b5d953f8d5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_nohgo3uob = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_nohgo3uob();
cov_nohgo3uob().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_nohgo3uob().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_nohgo3uob().f[0]++;
    cov_nohgo3uob().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_nohgo3uob().s[3]++, require("next/server"));
const _db =
/* istanbul ignore next */
(cov_nohgo3uob().s[4]++, require("../../../../lib/db"));
const _verificationcodemodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_nohgo3uob().s[5]++, _interop_require_default(require("../../../../lib/db/models/verification-code.model")));
const _usermodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_nohgo3uob().s[6]++, _interop_require_default(require("../../../../lib/db/models/user.model")));
const _validation =
/* istanbul ignore next */
(cov_nohgo3uob().s[7]++, require("../../../../lib/utils/validation"));
const _notification =
/* istanbul ignore next */
(cov_nohgo3uob().s[8]++, require("../../../../lib/utils/notification"));
const _logging =
/* istanbul ignore next */
(cov_nohgo3uob().s[9]++, require("../../../../lib/api/services/logging"));
const _verification =
/* istanbul ignore next */
(cov_nohgo3uob().s[10]++, require("../../../../lib/middleware/verification"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_nohgo3uob().f[1]++;
  cov_nohgo3uob().s[11]++;
  return /* istanbul ignore next */(cov_nohgo3uob().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_nohgo3uob().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_nohgo3uob().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_nohgo3uob().b[0][1]++, {
    default: obj
  });
}
async function POST(req) {
  /* istanbul ignore next */
  cov_nohgo3uob().f[2]++;
  cov_nohgo3uob().s[12]++;
  try {
    /* istanbul ignore next */
    cov_nohgo3uob().s[13]++;
    await (0, _db.connectToDatabase)();
    const {
      email,
      code
    } =
    /* istanbul ignore next */
    (cov_nohgo3uob().s[14]++, await req.json());
    // Validate input
    /* istanbul ignore next */
    cov_nohgo3uob().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_nohgo3uob().b[3][0]++, !_validation.validation.isValidEmail(email)) ||
    /* istanbul ignore next */
    (cov_nohgo3uob().b[3][1]++, !_validation.validation.isValidVerificationCode(code))) {
      /* istanbul ignore next */
      cov_nohgo3uob().b[2][0]++;
      cov_nohgo3uob().s[16]++;
      _logging.logger.warn('Invalid email or code format', {
        email,
        code
      });
      /* istanbul ignore next */
      cov_nohgo3uob().s[17]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Invalid email or verification code format'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_nohgo3uob().b[2][1]++;
    }
    // Check verification attempts
    const attemptsCheck =
    /* istanbul ignore next */
    (cov_nohgo3uob().s[18]++, await (0, _verification.checkVerificationAttempts)(email));
    /* istanbul ignore next */
    cov_nohgo3uob().s[19]++;
    if (attemptsCheck) {
      /* istanbul ignore next */
      cov_nohgo3uob().b[4][0]++;
      cov_nohgo3uob().s[20]++;
      _logging.logger.warn('Too many verification attempts', {
        email
      });
      /* istanbul ignore next */
      cov_nohgo3uob().s[21]++;
      return attemptsCheck;
    } else
    /* istanbul ignore next */
    {
      cov_nohgo3uob().b[4][1]++;
    }
    // Verify code
    const verificationRecord =
    /* istanbul ignore next */
    (cov_nohgo3uob().s[22]++, await _verificationcodemodel.default.findOne({
      email,
      code,
      type: 'EMAIL_VERIFICATION',
      verified: false,
      expiresAt: {
        $gt: new Date()
      }
    }));
    /* istanbul ignore next */
    cov_nohgo3uob().s[23]++;
    if (!verificationRecord) {
      /* istanbul ignore next */
      cov_nohgo3uob().b[5][0]++;
      cov_nohgo3uob().s[24]++;
      await (0, _verification.updateVerificationAttempts)(email);
      /* istanbul ignore next */
      cov_nohgo3uob().s[25]++;
      _logging.logger.warn('Invalid or expired verification code', {
        email,
        code
      });
      /* istanbul ignore next */
      cov_nohgo3uob().s[26]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Invalid or expired verification code'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_nohgo3uob().b[5][1]++;
    }
    // Update verification status
    const user =
    /* istanbul ignore next */
    (cov_nohgo3uob().s[27]++, await _usermodel.default.findOne({
      email
    }).select('id').lean());
    /* istanbul ignore next */
    cov_nohgo3uob().s[28]++;
    if (!user) {
      /* istanbul ignore next */
      cov_nohgo3uob().b[6][0]++;
      cov_nohgo3uob().s[29]++;
      _logging.logger.error('User not found for email', {
        email
      });
      /* istanbul ignore next */
      cov_nohgo3uob().s[30]++;
      return _server.NextResponse.json({
        success: false,
        error: 'User not found'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_nohgo3uob().b[6][1]++;
    }
    cov_nohgo3uob().s[31]++;
    await Promise.all([_verificationcodemodel.default.findByIdAndUpdate(verificationRecord._id, {
      verified: true
    }), _usermodel.default.findOneAndUpdate({
      email
    }, {
      emailVerified: true,
      isActive: true,
      $unset: {
        verificationAttempts: '',
        lastVerificationAttempt: ''
      }
    }), (0, _verification.resetVerificationAttempts)(email)]);
    // Send notification for successful email verification
    /* istanbul ignore next */
    cov_nohgo3uob().s[32]++;
    await (0, _notification.sendNotification)({
      userId: user.id,
      type: 'verification',
      title: 'Email Verification Successful',
      message: 'Your email address has been successfully verified.',
      channels: ['email', 'in_app'],
      data: {
        verificationType: 'email'
      }
    });
    /* istanbul ignore next */
    cov_nohgo3uob().s[33]++;
    _logging.logger.info('Email verified successfully', {
      email
    });
    /* istanbul ignore next */
    cov_nohgo3uob().s[34]++;
    return _server.NextResponse.json({
      success: true,
      message: 'Email verified successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_nohgo3uob().s[35]++;
    _logging.logger.error('Error verifying email:', error);
    /* istanbul ignore next */
    cov_nohgo3uob().s[36]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Error verifying email'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,