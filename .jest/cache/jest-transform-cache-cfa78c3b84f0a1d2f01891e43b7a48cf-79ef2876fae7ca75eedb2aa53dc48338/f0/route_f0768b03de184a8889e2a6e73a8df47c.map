{"version":3,"names":["POST","req","cov_nohgo3uob","f","s","_db","connectToDatabase","email","code","json","b","_validation","validation","isValidEmail","isValidVerificationCode","_logging","logger","warn","_server","NextResponse","success","error","status","attemptsCheck","_verification","checkVerificationAttempts","verificationRecord","_verificationcodemodel","default","findOne","type","verified","expiresAt","$gt","Date","updateVerificationAttempts","user","_usermodel","select","lean","Promise","all","findByIdAndUpdate","_id","findOneAndUpdate","emailVerified","isActive","$unset","verificationAttempts","lastVerificationAttempt","resetVerificationAttempts","_notification","sendNotification","userId","id","title","message","channels","data","verificationType","info"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/verify-email/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport VerificationCode from '@/lib/db/models/verification-code.model';\nimport User from '@/lib/db/models/user.model';\nimport { validation } from '@/lib/utils/validation';\nimport { sendNotification } from '@/lib/utils/notification';\nimport { logger } from '@/lib/api/services/logging';\nimport {\n  checkVerificationAttempts,\n  updateVerificationAttempts,\n  resetVerificationAttempts,\n} from '@/lib/middleware/verification';\n\nexport async function POST(req: NextRequest) {\n  try {\n    await connectToDatabase();\n\n    const { email, code } = await req.json();\n\n    // Validate input\n    if (!validation.isValidEmail(email) || !validation.isValidVerificationCode(code)) {\n      logger.warn('Invalid email or code format', { email, code });\n      return NextResponse.json(\n        { success: false, error: 'Invalid email or verification code format' },\n        { status: 400 }\n      );\n    }\n\n    // Check verification attempts\n    const attemptsCheck = await checkVerificationAttempts(email);\n    if (attemptsCheck) {\n      logger.warn('Too many verification attempts', { email });\n      return attemptsCheck;\n    }\n\n    // Verify code\n    const verificationRecord = await VerificationCode.findOne({\n      email,\n      code,\n      type: 'EMAIL_VERIFICATION',\n      verified: false,\n      expiresAt: { $gt: new Date() },\n    });\n\n    if (!verificationRecord) {\n      await updateVerificationAttempts(email);\n      logger.warn('Invalid or expired verification code', { email, code });\n      return NextResponse.json(\n        { success: false, error: 'Invalid or expired verification code' },\n        { status: 400 }\n      );\n    }\n\n    // Update verification status\n    const user = await User.findOne({ email }).select('id').lean();\n    if (!user) {\n      logger.error('User not found for email', { email });\n      return NextResponse.json({ success: false, error: 'User not found' }, { status: 400 });\n    }\n\n    await Promise.all([\n      VerificationCode.findByIdAndUpdate(verificationRecord._id, { verified: true }),\n      User.findOneAndUpdate(\n        { email },\n        {\n          emailVerified: true,\n          isActive: true,\n          $unset: { verificationAttempts: '', lastVerificationAttempt: '' },\n        }\n      ),\n      resetVerificationAttempts(email),\n    ]);\n\n    // Send notification for successful email verification\n    await sendNotification({\n      userId: user.id,\n      type: 'verification',\n      title: 'Email Verification Successful',\n      message: 'Your email address has been successfully verified.',\n      channels: ['email', 'in_app'],\n      data: { verificationType: 'email' },\n    });\n\n    logger.info('Email verified successfully', { email });\n    return NextResponse.json({\n      success: true,\n      message: 'Email verified successfully',\n    });\n  } catch (error) {\n    logger.error('Error verifying email:', error);\n    return NextResponse.json(\n      { success: false, error: 'Error verifying email' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}