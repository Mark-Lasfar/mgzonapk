{"version":3,"names":["POST","sellerRegistrationSchema","cov_q1jj0u6gc","s","_zod","z","object","businessName","string","min","max","email","phone","regex","description","optional","businessType","enum","vatRegistered","boolean","default","logo","address","street","city","state","country","postalCode","taxId","bankInfo","accountName","accountNumber","bankName","swiftCode","termsAccepted","refine","val","f","request","locale","_server1","getLocale","t1","getTranslations","namespace","userSession","_auth","auth","user","id","b","_server","NextResponse","json","success","message","status","formData","data","logoUrl","jsonData","get","Error","parsedData","JSON","parse","logoFile","maxSize","size","allowedTypes","includes","type","arrayBuffer","buffer","Buffer","from","_s3","uploadToStorage","folder","resource_type","allowedFormats","public_id","Date","now","overwrite","error","ZodError","errors","map","err","path","join","console","_db","connectToDatabase","dbSession","_mongoose","startSession","startTransaction","existingSeller","_sellermodel","findOne","$or","userId","session","_id","subscription","customSiteUrl","redirect","trialEndDate","seller","create","undefined","verified","plan","startDate","endDate","features","productsLimit","commission","prioritySupport","instantPayouts","verification","documents","submittedAt","metrics","rating","totalSales","totalRevenue","productsCount","ordersCount","customersCount","views","followers","products","total","active","outOfStock","settings","notifications","sms","orderUpdates","marketingEmails","pointsNotifications","display","showRating","showContactInfo","showMetrics","showPointsBalance","security","twoFactorAuth","loginNotifications","customSite","theme","primaryColor","pointsBalance","pointsTransactions","amount","createdAt","freeTrialActive","freeTrialEndDate","trialMonthsUsed","updatedUser","_usermodel","findByIdAndUpdate","role","businessProfile","new","commitTransaction","inTransaction","abortTransaction","endSession","ValidationError","t"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/seller/registration/route.ts"],"sourcesContent":["import { connectToDatabase } from '@/lib/db';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { auth } from '@/auth';\nimport Seller from '@/lib/db/models/seller.model';\nimport User from '@/lib/db/models/user.model';\nimport mongoose from 'mongoose';\nimport { z } from 'zod';\nimport { uploadToStorage } from '@/lib/utils/s3';\nimport { getTranslations, getLocale } from 'next-intl/server';\n\n// Validation schema\nconst sellerRegistrationSchema = z.object({\n  businessName: z.string().min(2, 'Business name must be at least 2 characters').max(100),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().min(10).max(20).regex(/^[+]?[(]?[0-9]{1,4}[)]?[-\\s./0-9]*$/),\n  description: z.string().min(50).max(500).optional(),\n  businessType: z.enum(['individual', 'company']),\n  vatRegistered: z.boolean().default(false),\n  logo: z.string().optional(),\n  address: z.object({\n    street: z.string().min(1),\n    city: z.string().min(1),\n    state: z.string().min(1),\n    country: z.string().min(1),\n    postalCode: z.string().min(1),\n  }),\n  taxId: z.string().min(1),\n  bankInfo: z.object({\n    accountName: z.string().min(2),\n    accountNumber: z.string().min(8),\n    bankName: z.string().min(2),\n    swiftCode: z.string().regex(/^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$/),\n  }),\n  termsAccepted: z.boolean().refine((val) => val === true, 'Terms must be accepted'),\n});\n\ntype SellerRegistrationData = z.infer<typeof sellerRegistrationSchema>;\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get locale and translations\n    const locale = await getLocale();\n    const t = await getTranslations({ locale, namespace: 'api' });\n\n    // Check authentication\n    const userSession = await auth();\n    if (!userSession?.user?.id) {\n      return NextResponse.json(\n        { success: false, message: t('errors.unauthorized') },\n        { status: 401 }\n      );\n    }\n\n    // Parse form data\n    const formData = await request.formData();\n    let data: SellerRegistrationData;\n    let logoUrl = '';\n\n    try {\n      const jsonData = formData.get('data');\n      if (!jsonData || typeof jsonData !== 'string') {\n        throw new Error(t('errors.invalidFormData'));\n      }\n\n      const parsedData = JSON.parse(jsonData);\n\n      // Handle logo upload\n      const logoFile = formData.get('logo') as File | null;\n      if (logoFile) {\n        const maxSize = 5 * 1024 * 1024; // 5MB\n        if (logoFile.size > maxSize) {\n          return NextResponse.json(\n            { success: false, message: t('errors.logoSizeExceed') },\n            { status: 400 }\n          );\n        }\n\n        const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];\n        if (!allowedTypes.includes(logoFile.type)) {\n          return NextResponse.json(\n            { success: false, message: t('errors.invalidLogoType') },\n            { status: 400 }\n          );\n        }\n\n        const arrayBuffer = await logoFile.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n\n        logoUrl = await uploadToStorage(buffer, `sellers/${userSession.user.id}/logo`, {\n          folder: 'sellers',\n          resource_type: 'image',\n          allowedFormats: ['jpg', 'jpeg', 'png', 'webp'],\n          public_id: `${userSession.user.id}-${Date.now()}`,\n          overwrite: true,\n        });\n\n        parsedData.logo = logoUrl;\n      }\n\n      data = sellerRegistrationSchema.parse(parsedData);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return NextResponse.json(\n          {\n            success: false,\n            message: t('errors.invalidData'),\n            errors: error.errors.map((err) => ({\n              path: err.path.join('.'),\n              message: err.message,\n            })),\n          },\n          { status: 400 }\n        );\n      }\n      console.error('Parse error:', error);\n      return NextResponse.json(\n        { success: false, message: t('errors.parseFailed') },\n        { status: 400 }\n      );\n    }\n\n    // Connect to database\n    await connectToDatabase();\n\n    // Start transaction\n    const dbSession = await mongoose.startSession();\n    dbSession.startTransaction();\n\n    try {\n      // Check for existing seller\n      const existingSeller = await Seller.findOne({\n        $or: [{ email: data.email }, { userId: userSession.user.id }],\n      }).session(dbSession);\n\n      if (existingSeller) {\n        return NextResponse.json(\n          {\n            success: true,\n            message: t('messages.sellerExists'),\n            data: {\n              id: existingSeller._id,\n              businessName: existingSeller.businessName,\n              email: existingSeller.email,\n              subscription: existingSeller.subscription,\n              customSiteUrl: existingSeller.customSiteUrl,\n              redirect: '/seller/dashboard',\n            },\n          },\n          { status: 200 }\n        );\n      }\n\n      // Create seller profile with 5-day free trial\n      const trialEndDate = new Date(Date.now() + 5 * 24 * 60 * 60 * 1000); // 5 days\n      const seller = await Seller.create(\n        [\n          {\n            userId: userSession.user.id,\n            businessName: data.businessName,\n            email: data.email,\n            phone: data.phone,\n            description: data.description,\n            businessType: data.businessType,\n            vatRegistered: data.vatRegistered,\n            logo: logoUrl || undefined,\n            address: data.address,\n            taxId: data.taxId,\n            bankInfo: {\n              accountName: data.bankInfo.accountName,\n              accountNumber: data.bankInfo.accountNumber,\n              bankName: data.bankInfo.bankName,\n              swiftCode: data.bankInfo.swiftCode,\n              verified: false,\n            },\n            subscription: {\n              plan: 'Trial',\n              startDate: new Date(),\n              endDate: trialEndDate,\n              status: 'active',\n              features: {\n                productsLimit: 50,\n                commission: 7,\n                prioritySupport: false,\n                instantPayouts: false,\n              },\n            },\n            verification: {\n              status: 'pending',\n              documents: {},\n              submittedAt: new Date(),\n            },\n            metrics: {\n              rating: 0,\n              totalSales: 0,\n              totalRevenue: 0,\n              productsCount: 0,\n              ordersCount: 0,\n              customersCount: 0,\n              views: 0,\n              followers: 0,\n              products: {\n                total: 0,\n                active: 0,\n                outOfStock: 0,\n              },\n            },\n            settings: {\n              notifications: {\n                email: true,\n                sms: false,\n                orderUpdates: true,\n                marketingEmails: false,\n                pointsNotifications: true,\n              },\n              display: {\n                showRating: true,\n                showContactInfo: true,\n                showMetrics: true,\n                showPointsBalance: true,\n              },\n              security: {\n                twoFactorAuth: false,\n                loginNotifications: true,\n              },\n              customSite: {\n                theme: 'default',\n                primaryColor: '#000000',\n              },\n            },\n            pointsBalance: 50,\n            pointsTransactions: [\n              {\n                amount: 50,\n                type: 'earn',\n                description: 'Welcome bonus for new seller registration',\n                createdAt: new Date(),\n              },\n            ],\n            freeTrialActive: true,\n            freeTrialEndDate: trialEndDate,\n            trialMonthsUsed: 0,\n            customSiteUrl: `/seller/${userSession.user.id}`,\n          },\n        ],\n        { session: dbSession }\n      );\n\n      // Update user role\n      const updatedUser = await User.findByIdAndUpdate(\n        userSession.user.id,\n        {\n          role: 'SELLER',\n          businessProfile: seller[0]._id,\n        },\n        { new: true, session: dbSession }\n      );\n\n      if (!updatedUser) {\n        throw new Error(t('errors.updateUserRoleFailed'));\n      }\n\n      // Commit transaction\n      await dbSession.commitTransaction();\n\n      return NextResponse.json({\n        success: true,\n        message: t('messages.success'),\n        data: {\n          id: seller[0]._id,\n          businessName: seller[0].businessName,\n          email: seller[0].email,\n          role: updatedUser.role,\n          subscription: seller[0].subscription,\n          customSiteUrl: seller[0].customSiteUrl,\n        },\n      });\n    } catch (error) {\n      if (dbSession.inTransaction()) {\n        await dbSession.abortTransaction();\n      }\n      console.error('Transaction error:', error);\n      throw error;\n    } finally {\n      await dbSession.endSession();\n    }\n  } catch (error) {\n    console.error('Seller registration error:', error);\n    if (error instanceof mongoose.Error.ValidationError) {\n      return NextResponse.json(\n        {\n          success: false,\n          message: t('errors.invalidData'),\n        },\n        { status: 400 }\n      );\n    }\n    return NextResponse.json(\n      {\n        success: false,\n        message: t('errors.serverError'),\n      },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}