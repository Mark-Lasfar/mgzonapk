{"version":3,"names":["OrderDetailsForm","order","isAdmin","cov_7fu0s9zuh","f","shippingAddress","items","itemsPrice","taxPrice","shippingPrice","totalPrice","paymentMethod","isPaid","paidAt","isDelivered","deliveredAt","expectedDeliveryDate","fulfillmentStatus","fulfillmentId","s","_jsxruntime","jsxs","className","jsx","_card","Card","CardContent","fullName","phone","street","city","province","postalCode","country","b","_badge","Badge","_utils","formatDateTime","dateTime","variant","_table","Table","TableHeader","TableRow","TableHead","TableBody","map","item","TableCell","_link","default","href","slug","_image","src","image","alt","name","width","height","quantity","_productprice","price","plain","includes","cn","_button","buttonVariants","_id","_actionbutton","caption","action","_orderactions","updateOrderToPaid","deliverOrder"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/components/shared/order/order-details-form.tsx"],"sourcesContent":["// components/shared/order-details-form.tsx\n'use client';\n\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { IOrder } from '@/lib/db/models/order.model';\nimport { cn, formatDateTime } from '@/lib/utils';\nimport { buttonVariants } from '@/components/ui/button';\n// import ProductPrice from './product/product-price';\n// import ActionButton from './action-button';\nimport { deliverOrder, updateOrderToPaid } from '@/lib/actions/order.actions';\nimport ActionButton from '../action-button';\nimport ProductPrice from '../product/product-price';\n\nexport default function OrderDetailsForm({\n  order,\n  isAdmin,\n}: {\n  order: IOrder;\n  isAdmin: boolean;\n}) {\n  const {\n    shippingAddress,\n    items,\n    itemsPrice,\n    taxPrice,\n    shippingPrice,\n    totalPrice,\n    paymentMethod,\n    isPaid,\n    paidAt,\n    isDelivered,\n    deliveredAt,\n    expectedDeliveryDate,\n    fulfillmentStatus,\n    fulfillmentId,\n  } = order;\n\n  return (\n    <div className=\"grid md:grid-cols-3 md:gap-5\">\n      <div className=\"overflow-x-auto md:col-span-2 space-y-4\">\n        <Card>\n          <CardContent className=\"p-4 gap-4\">\n            <h2 className=\"text-xl pb-4\">Shipping Address</h2>\n            <p>\n              {shippingAddress.fullName} {shippingAddress.phone}\n            </p>\n            <p>\n              {shippingAddress.street}, {shippingAddress.city},{' '}\n              {shippingAddress.province}, {shippingAddress.postalCode},{' '}\n              {shippingAddress.country}\n            </p>\n            {isDelivered ? (\n              <Badge>\n                Delivered at {formatDateTime(deliveredAt!).dateTime}\n              </Badge>\n            ) : (\n              <div>\n                <Badge variant=\"destructive\">Not delivered</Badge>\n                <div>\n                  Expected delivery at{' '}\n                  {formatDateTime(expectedDeliveryDate!).dateTime}\n                </div>\n                {fulfillmentStatus && (\n                  <p>Fulfillment Status: {fulfillmentStatus}</p>\n                )}\n                {fulfillmentId && (\n                  <p>Fulfillment ID: {fulfillmentId}</p>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 gap-4\">\n            <h2 className=\"text-xl pb-4\">Payment Method</h2>\n            <p>{paymentMethod}</p>\n            {isPaid ? (\n              <Badge>Paid at {formatDateTime(paidAt!).dateTime}</Badge>\n            ) : (\n              <Badge variant=\"destructive\">Not paid</Badge>\n            )}\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 gap-4\">\n            <h2 className=\"text-xl pb-4\">Order Items</h2>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Item</TableHead>\n                  <TableHead>Quantity</TableHead>\n                  <TableHead>Price</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {items.map((item) => (\n                  <TableRow key={item.slug}>\n                    <TableCell>\n                      <Link\n                        href={`/product/${item.slug}`}\n                        className=\"flex items-center\"\n                      >\n                        <Image\n                          src={item.image}\n                          alt={item.name}\n                          width={50}\n                          height={50}\n                        />\n                        <span className=\"px-2\">{item.name}</span>\n                      </Link>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"px-2\">{item.quantity}</span>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <ProductPrice price={item.price} plain />\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </div>\n      <div>\n        <Card>\n          <CardContent className=\"p-4 space-y-4 gap-4\">\n            <h2 className=\"text-xl pb-4\">Order Summary</h2>\n            <div className=\"flex justify-between\">\n              <div>Items</div>\n              <div>\n                <ProductPrice price={itemsPrice} plain />\n              </div>\n            </div>\n            <div className=\"flex justify-between\">\n              <div>Tax</div>\n              <div>\n                <ProductPrice price={taxPrice} plain />\n              </div>\n            </div>\n            <div className=\"flex justify-between\">\n              <div>Shipping</div>\n              <div>\n                <ProductPrice price={shippingPrice} plain />\n              </div>\n            </div>\n            <div className=\"flex justify-between\">\n              <div>Total</div>\n              <div>\n                <ProductPrice price={totalPrice} plain />\n              </div>\n            </div>\n            {!isPaid && ['Stripe', 'PayPal'].includes(paymentMethod) && (\n              <Link\n                className={cn(buttonVariants(), 'w-full')}\n                href={`/checkout/${order._id}`}\n              >\n                Pay Order\n              </Link>\n            )}\n            {isAdmin && !isPaid && paymentMethod === 'Cash On Delivery' && (\n              <ActionButton\n                caption=\"Mark as paid\"\n                action={() => updateOrderToPaid(order._id)}\n              />\n            )}\n            {isAdmin && isPaid && !isDelivered && (\n              <ActionButton\n                caption=\"Mark as delivered\"\n                action={() => deliverOrder(order._id)}\n              />\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}"],"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","ignoreList":[]}