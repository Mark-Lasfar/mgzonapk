19c12065b3cc6af3dac0bd3ca43a257b
"use strict";

/* istanbul ignore next */
function cov_172qqn3z5f() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/subscription-order.model.ts";
  var hash = "34d545dbd88b5a8e0f861cb68c234d606e37228e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/subscription-order.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "3": {
        start: {
          line: 11,
          column: 18
        },
        end: {
          line: 11,
          column: 37
        }
      },
      "4": {
        start: {
          line: 12,
          column: 32
        },
        end: {
          line: 93,
          column: 2
        }
      },
      "5": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 97,
          column: 3
        }
      },
      "6": {
        start: {
          line: 98,
          column: 0
        },
        end: {
          line: 100,
          column: 3
        }
      },
      "7": {
        start: {
          line: 101,
          column: 0
        },
        end: {
          line: 103,
          column: 3
        }
      },
      "8": {
        start: {
          line: 104,
          column: 26
        },
        end: {
          line: 104,
          column: 130
        }
      },
      "9": {
        start: {
          line: 105,
          column: 17
        },
        end: {
          line: 105,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 104,
            column: 26
          },
          end: {
            line: 104,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 26
          },
          end: {
            line: 104,
            column: 60
          }
        }, {
          start: {
            line: 104,
            column: 64
          },
          end: {
            line: 104,
            column: 130
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/subscription-order.model.ts"],
      sourcesContent: ["import { Schema, model, models, Document } from 'mongoose'\n\nexport interface ISubscriptionOrder extends Document {\n  userId: string\n  planId: string\n  amount: number\n  currency: string\n  paymentMethod: 'stripe' | 'paypal'\n  isPaid: boolean\n  paidAt?: Date\n  paymentResult?: {\n    id: string\n    status: string\n    update_time?: string\n    email_address?: string\n  }\n  createdAt: Date\n  updatedAt: Date\n}\n\nconst subscriptionOrderSchema = new Schema<ISubscriptionOrder>(\n  {\n    userId: {\n      type: String,\n      required: [true, 'User ID is required'],\n      index: true,\n    },\n    planId: {\n      type: String,\n      required: [true, 'Plan ID is required'],\n      trim: true,\n    },\n    amount: {\n      type: Number,\n      required: [true, 'Amount is required'],\n      min: [0, 'Amount cannot be negative'],\n    },\n    currency: {\n      type: String,\n      required: [true, 'Currency is required'],\n      trim: true,\n    },\n    paymentMethod: {\n      type: String,\n      enum: {\n        values: ['stripe', 'paypal'],\n        message: '{VALUE} is not a valid payment method',\n      },\n      required: [true, 'Payment method is required'],\n    },\n    isPaid: {\n      type: Boolean,\n      default: false,\n    },\n    paidAt: {\n      type: Date,\n    },\n    paymentResult: {\n      id: { type: String },\n      status: { type: String },\n      update_time: { type: String },\n      email_address: { type: String },\n    },\n    createdAt: {\n      type: Date,\n      default: Date.now,\n    },\n    updatedAt: {\n      type: Date,\n      default: Date.now,\n    },\n  },\n  {\n    timestamps: true,\n  }\n)\n\nsubscriptionOrderSchema.index({ userId: 1, createdAt: -1 });\nsubscriptionOrderSchema.index({ planId: 1 });\nsubscriptionOrderSchema.index({ isPaid: 1 });\n\nconst SubscriptionOrder = models.SubscriptionOrder || model<ISubscriptionOrder>('SubscriptionOrder', subscriptionOrderSchema)\n\nexport default SubscriptionOrder"],
      names: ["subscriptionOrderSchema", "Schema", "userId", "type", "String", "required", "index", "planId", "trim", "amount", "Number", "min", "currency", "paymentMethod", "enum", "values", "message", "isPaid", "Boolean", "default", "paidAt", "Date", "paymentResult", "id", "status", "update_time", "email_address", "createdAt", "now", "updatedAt", "timestamps", "SubscriptionOrder", "models", "model"],
      mappings: ";;;;+BAmFA;;;eAAA;;;0BAnFgD;AAoBhD,MAAMA,0BAA0B,IAAIC,gBAAM,CACxC;IACEC,QAAQ;QACNC,MAAMC;QACNC,UAAU;YAAC;YAAM;SAAsB;QACvCC,OAAO;IACT;IACAC,QAAQ;QACNJ,MAAMC;QACNC,UAAU;YAAC;YAAM;SAAsB;QACvCG,MAAM;IACR;IACAC,QAAQ;QACNN,MAAMO;QACNL,UAAU;YAAC;YAAM;SAAqB;QACtCM,KAAK;YAAC;YAAG;SAA4B;IACvC;IACAC,UAAU;QACRT,MAAMC;QACNC,UAAU;YAAC;YAAM;SAAuB;QACxCG,MAAM;IACR;IACAK,eAAe;QACbV,MAAMC;QACNU,MAAM;YACJC,QAAQ;gBAAC;gBAAU;aAAS;YAC5BC,SAAS;QACX;QACAX,UAAU;YAAC;YAAM;SAA6B;IAChD;IACAY,QAAQ;QACNd,MAAMe;QACNC,SAAS;IACX;IACAC,QAAQ;QACNjB,MAAMkB;IACR;IACAC,eAAe;QACbC,IAAI;YAAEpB,MAAMC;QAAO;QACnBoB,QAAQ;YAAErB,MAAMC;QAAO;QACvBqB,aAAa;YAAEtB,MAAMC;QAAO;QAC5BsB,eAAe;YAAEvB,MAAMC;QAAO;IAChC;IACAuB,WAAW;QACTxB,MAAMkB;QACNF,SAASE,KAAKO,GAAG;IACnB;IACAC,WAAW;QACT1B,MAAMkB;QACNF,SAASE,KAAKO,GAAG;IACnB;AACF,GACA;IACEE,YAAY;AACd;AAGF9B,wBAAwBM,KAAK,CAAC;IAAEJ,QAAQ;IAAGyB,WAAW,CAAC;AAAE;AACzD3B,wBAAwBM,KAAK,CAAC;IAAEC,QAAQ;AAAE;AAC1CP,wBAAwBM,KAAK,CAAC;IAAEW,QAAQ;AAAE;AAE1C,MAAMc,oBAAoBC,gBAAM,CAACD,iBAAiB,IAAIE,IAAAA,eAAK,EAAqB,qBAAqBjC;MAErG,WAAe+B"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "34d545dbd88b5a8e0f861cb68c234d606e37228e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_172qqn3z5f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_172qqn3z5f();
cov_172qqn3z5f().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_172qqn3z5f().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_172qqn3z5f().f[0]++;
    cov_172qqn3z5f().s[2]++;
    return _default;
  }
});
const _mongoose =
/* istanbul ignore next */
(cov_172qqn3z5f().s[3]++, require("mongoose"));
const subscriptionOrderSchema =
/* istanbul ignore next */
(cov_172qqn3z5f().s[4]++, new _mongoose.Schema({
  userId: {
    type: String,
    required: [true, 'User ID is required'],
    index: true
  },
  planId: {
    type: String,
    required: [true, 'Plan ID is required'],
    trim: true
  },
  amount: {
    type: Number,
    required: [true, 'Amount is required'],
    min: [0, 'Amount cannot be negative']
  },
  currency: {
    type: String,
    required: [true, 'Currency is required'],
    trim: true
  },
  paymentMethod: {
    type: String,
    enum: {
      values: ['stripe', 'paypal'],
      message: '{VALUE} is not a valid payment method'
    },
    required: [true, 'Payment method is required']
  },
  isPaid: {
    type: Boolean,
    default: false
  },
  paidAt: {
    type: Date
  },
  paymentResult: {
    id: {
      type: String
    },
    status: {
      type: String
    },
    update_time: {
      type: String
    },
    email_address: {
      type: String
    }
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
}));
/* istanbul ignore next */
cov_172qqn3z5f().s[5]++;
subscriptionOrderSchema.index({
  userId: 1,
  createdAt: -1
});
/* istanbul ignore next */
cov_172qqn3z5f().s[6]++;
subscriptionOrderSchema.index({
  planId: 1
});
/* istanbul ignore next */
cov_172qqn3z5f().s[7]++;
subscriptionOrderSchema.index({
  isPaid: 1
});
const SubscriptionOrder =
/* istanbul ignore next */
(cov_172qqn3z5f().s[8]++,
/* istanbul ignore next */
(cov_172qqn3z5f().b[0][0]++, _mongoose.models.SubscriptionOrder) ||
/* istanbul ignore next */
(cov_172qqn3z5f().b[0][1]++, (0, _mongoose.model)('SubscriptionOrder', subscriptionOrderSchema)));
const _default =
/* istanbul ignore next */
(cov_172qqn3z5f().s[9]++, SubscriptionOrder);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTcycXFuM3o1ZiIsImFjdHVhbENvdmVyYWdlIiwicyIsIl9kZWZhdWx0Iiwic3Vic2NyaXB0aW9uT3JkZXJTY2hlbWEiLCJfbW9uZ29vc2UiLCJTY2hlbWEiLCJ1c2VySWQiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJpbmRleCIsInBsYW5JZCIsInRyaW0iLCJhbW91bnQiLCJOdW1iZXIiLCJtaW4iLCJjdXJyZW5jeSIsInBheW1lbnRNZXRob2QiLCJlbnVtIiwidmFsdWVzIiwibWVzc2FnZSIsImlzUGFpZCIsIkJvb2xlYW4iLCJkZWZhdWx0IiwicGFpZEF0IiwiRGF0ZSIsInBheW1lbnRSZXN1bHQiLCJpZCIsInN0YXR1cyIsInVwZGF0ZV90aW1lIiwiZW1haWxfYWRkcmVzcyIsImNyZWF0ZWRBdCIsIm5vdyIsInVwZGF0ZWRBdCIsInRpbWVzdGFtcHMiLCJTdWJzY3JpcHRpb25PcmRlciIsImIiLCJtb2RlbHMiLCJtb2RlbCJdLCJzb3VyY2VzIjpbIi9ob21lL2hhZ2VyL25ldy9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIgKDMpL215LW5leHRqcy1wcm9qZWN0LW1hc3Rlci9saWIvZGIvbW9kZWxzL3N1YnNjcmlwdGlvbi1vcmRlci5tb2RlbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlbWEsIG1vZGVsLCBtb2RlbHMsIERvY3VtZW50IH0gZnJvbSAnbW9uZ29vc2UnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN1YnNjcmlwdGlvbk9yZGVyIGV4dGVuZHMgRG9jdW1lbnQge1xuICB1c2VySWQ6IHN0cmluZ1xuICBwbGFuSWQ6IHN0cmluZ1xuICBhbW91bnQ6IG51bWJlclxuICBjdXJyZW5jeTogc3RyaW5nXG4gIHBheW1lbnRNZXRob2Q6ICdzdHJpcGUnIHwgJ3BheXBhbCdcbiAgaXNQYWlkOiBib29sZWFuXG4gIHBhaWRBdD86IERhdGVcbiAgcGF5bWVudFJlc3VsdD86IHtcbiAgICBpZDogc3RyaW5nXG4gICAgc3RhdHVzOiBzdHJpbmdcbiAgICB1cGRhdGVfdGltZT86IHN0cmluZ1xuICAgIGVtYWlsX2FkZHJlc3M/OiBzdHJpbmdcbiAgfVxuICBjcmVhdGVkQXQ6IERhdGVcbiAgdXBkYXRlZEF0OiBEYXRlXG59XG5cbmNvbnN0IHN1YnNjcmlwdGlvbk9yZGVyU2NoZW1hID0gbmV3IFNjaGVtYTxJU3Vic2NyaXB0aW9uT3JkZXI+KFxuICB7XG4gICAgdXNlcklkOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogW3RydWUsICdVc2VyIElEIGlzIHJlcXVpcmVkJ10sXG4gICAgICBpbmRleDogdHJ1ZSxcbiAgICB9LFxuICAgIHBsYW5JZDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxhbiBJRCBpcyByZXF1aXJlZCddLFxuICAgICAgdHJpbTogdHJ1ZSxcbiAgICB9LFxuICAgIGFtb3VudDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnQW1vdW50IGlzIHJlcXVpcmVkJ10sXG4gICAgICBtaW46IFswLCAnQW1vdW50IGNhbm5vdCBiZSBuZWdhdGl2ZSddLFxuICAgIH0sXG4gICAgY3VycmVuY3k6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgJ0N1cnJlbmN5IGlzIHJlcXVpcmVkJ10sXG4gICAgICB0cmltOiB0cnVlLFxuICAgIH0sXG4gICAgcGF5bWVudE1ldGhvZDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZW51bToge1xuICAgICAgICB2YWx1ZXM6IFsnc3RyaXBlJywgJ3BheXBhbCddLFxuICAgICAgICBtZXNzYWdlOiAne1ZBTFVFfSBpcyBub3QgYSB2YWxpZCBwYXltZW50IG1ldGhvZCcsXG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGF5bWVudCBtZXRob2QgaXMgcmVxdWlyZWQnXSxcbiAgICB9LFxuICAgIGlzUGFpZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0sXG4gICAgcGFpZEF0OiB7XG4gICAgICB0eXBlOiBEYXRlLFxuICAgIH0sXG4gICAgcGF5bWVudFJlc3VsdDoge1xuICAgICAgaWQ6IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgICBzdGF0dXM6IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgICB1cGRhdGVfdGltZTogeyB0eXBlOiBTdHJpbmcgfSxcbiAgICAgIGVtYWlsX2FkZHJlc3M6IHsgdHlwZTogU3RyaW5nIH0sXG4gICAgfSxcbiAgICBjcmVhdGVkQXQ6IHtcbiAgICAgIHR5cGU6IERhdGUsXG4gICAgICBkZWZhdWx0OiBEYXRlLm5vdyxcbiAgICB9LFxuICAgIHVwZGF0ZWRBdDoge1xuICAgICAgdHlwZTogRGF0ZSxcbiAgICAgIGRlZmF1bHQ6IERhdGUubm93LFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0aW1lc3RhbXBzOiB0cnVlLFxuICB9XG4pXG5cbnN1YnNjcmlwdGlvbk9yZGVyU2NoZW1hLmluZGV4KHsgdXNlcklkOiAxLCBjcmVhdGVkQXQ6IC0xIH0pO1xuc3Vic2NyaXB0aW9uT3JkZXJTY2hlbWEuaW5kZXgoeyBwbGFuSWQ6IDEgfSk7XG5zdWJzY3JpcHRpb25PcmRlclNjaGVtYS5pbmRleCh7IGlzUGFpZDogMSB9KTtcblxuY29uc3QgU3Vic2NyaXB0aW9uT3JkZXIgPSBtb2RlbHMuU3Vic2NyaXB0aW9uT3JkZXIgfHwgbW9kZWw8SVN1YnNjcmlwdGlvbk9yZGVyPignU3Vic2NyaXB0aW9uT3JkZXInLCBzdWJzY3JpcHRpb25PcmRlclNjaGVtYSlcblxuZXhwb3J0IGRlZmF1bHQgU3Vic2NyaXB0aW9uT3JkZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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