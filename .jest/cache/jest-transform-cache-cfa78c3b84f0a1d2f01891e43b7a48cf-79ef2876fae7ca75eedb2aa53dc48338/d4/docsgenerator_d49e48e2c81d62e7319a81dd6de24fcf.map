{"version":3,"names":["ApiDocsGenerator","baseDir","process","cwd","docsPath","_path","join","generate","cov_28krnfv4sn","f","apiRoutes","s","_glob","glob","docs","version","title","description","endpoints","route","content","_fs","readFileSync","parseRouteFile","push","writeDocumentation","filePath","commentRegex","matches","b","match","forEach","comment","endpoint","parseComment","markdown","generateMarkdown","writeFileSync","openapi","generateOpenAPI","JSON","stringify"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/docs-generator.ts"],"sourcesContent":["import { readFileSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { glob } from 'glob';\n\ninterface EndpointDoc {\n  path: string;\n  method: string;\n  description: string;\n  parameters?: {\n    name: string;\n    type: string;\n    required: boolean;\n    description: string;\n  }[];\n  requestBody?: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      required?: boolean;\n    }>;\n  };\n  responses: Record<string, {\n    description: string;\n    content?: any;\n  }>;\n}\n\ninterface ApiDoc {\n  version: string;\n  title: string;\n  description: string;\n  endpoints: EndpointDoc[];\n}\n\nexport class ApiDocsGenerator {\n  private static baseDir = process.cwd();\n  private static docsPath = join(process.cwd(), 'docs', 'api');\n\n  static async generate() {\n    const apiRoutes = await glob('app/api/v1/**/*.ts');\n    const docs: ApiDoc = {\n      version: '1.0.0',\n      title: 'MGZon API Documentation',\n      description: 'API documentation for MGZon e-commerce platform',\n      endpoints: [],\n    };\n\n    for (const route of apiRoutes) {\n      const content = readFileSync(join(this.baseDir, route), 'utf-8');\n      const endpoints = this.parseRouteFile(content, route);\n      docs.endpoints.push(...endpoints);\n    }\n\n    this.writeDocumentation(docs);\n  }\n\n  private static parseRouteFile(content: string, filePath: string): EndpointDoc[] {\n    // Extract API documentation from comments\n    const docs: EndpointDoc[] = [];\n    const commentRegex = /\\/\\*\\*\\s*\\n([^*]|\\*[^/])*\\*\\//g;\n    const matches = content.match(commentRegex) || [];\n\n    matches.forEach((comment) => {\n      const endpoint = this.parseComment(comment, filePath);\n      if (endpoint) docs.push(endpoint);\n    });\n\n    return docs;\n  }\n\n  private static parseComment(comment: string, filePath: string): EndpointDoc | null {\n    // Parse JSDoc-style comments to extract API documentation\n    // Implementation details here...\n    return null;\n  }\n\n  private static writeDocumentation(docs: ApiDoc) {\n    // Generate markdown documentation\n    const markdown = this.generateMarkdown(docs);\n    writeFileSync(join(this.docsPath, 'api-reference.md'), markdown);\n\n    // Generate OpenAPI specification\n    const openapi = this.generateOpenAPI(docs);\n    writeFileSync(\n      join(this.docsPath, 'openapi.json'),\n      JSON.stringify(openapi, null, 2)\n    );\n  }\n\n  private static generateMarkdown(docs: ApiDoc): string {\n    // Generate markdown documentation\n    // Implementation details here...\n    return '';\n  }\n\n  private static generateOpenAPI(docs: ApiDoc): object {\n    // Generate OpenAPI specification\n    // Implementation details here...\n    return {};\n  }\n}"],"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","ignoreList":[]}