127c2061b1097009482008cdcdfa4e32
"use strict";

/* istanbul ignore next */
function cov_28krnfv4sn() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/docs-generator.ts";
  var hash = "1f1bac90f9624c8c05bae6dcc2c238285f3fb0cf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/docs-generator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 32
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 25
        }
      },
      "4": {
        start: {
          line: 12,
          column: 14
        },
        end: {
          line: 12,
          column: 29
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "7": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 70
        }
      },
      "8": {
        start: {
          line: 22,
          column: 26
        },
        end: {
          line: 22,
          column: 69
        }
      },
      "9": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "10": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "11": {
        start: {
          line: 30,
          column: 28
        },
        end: {
          line: 30,
          column: 96
        }
      },
      "12": {
        start: {
          line: 31,
          column: 30
        },
        end: {
          line: 31,
          column: 65
        }
      },
      "13": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 46
        }
      },
      "14": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 38
        }
      },
      "15": {
        start: {
          line: 38,
          column: 21
        },
        end: {
          line: 38,
          column: 23
        }
      },
      "16": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 39,
          column: 61
        }
      },
      "17": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 40,
          column: 57
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      },
      "19": {
        start: {
          line: 42,
          column: 29
        },
        end: {
          line: 42,
          column: 65
        }
      },
      "20": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 46
        }
      },
      "21": {
        start: {
          line: 43,
          column: 26
        },
        end: {
          line: 43,
          column: 46
        }
      },
      "22": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 20
        }
      },
      "23": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 20
        }
      },
      "24": {
        start: {
          line: 54,
          column: 25
        },
        end: {
          line: 54,
          column: 52
        }
      },
      "25": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 93
        }
      },
      "26": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 50
        }
      },
      "27": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 113
        }
      },
      "28": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 18
        }
      },
      "29": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 28
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 45
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 36
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 41,
            column: 25
          }
        },
        loc: {
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 44,
            column: 9
          }
        },
        line: 41
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 43
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 47
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 36
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 52
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 34
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 60
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 33
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 65
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 40,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 40,
            column: 51
          }
        }, {
          start: {
            line: 40,
            column: 55
          },
          end: {
            line: 40,
            column: 57
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 43,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 43,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/docs-generator.ts"],
      sourcesContent: ["import { readFileSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { glob } from 'glob';\n\ninterface EndpointDoc {\n  path: string;\n  method: string;\n  description: string;\n  parameters?: {\n    name: string;\n    type: string;\n    required: boolean;\n    description: string;\n  }[];\n  requestBody?: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      required?: boolean;\n    }>;\n  };\n  responses: Record<string, {\n    description: string;\n    content?: any;\n  }>;\n}\n\ninterface ApiDoc {\n  version: string;\n  title: string;\n  description: string;\n  endpoints: EndpointDoc[];\n}\n\nexport class ApiDocsGenerator {\n  private static baseDir = process.cwd();\n  private static docsPath = join(process.cwd(), 'docs', 'api');\n\n  static async generate() {\n    const apiRoutes = await glob('app/api/v1/**/*.ts');\n    const docs: ApiDoc = {\n      version: '1.0.0',\n      title: 'MGZon API Documentation',\n      description: 'API documentation for MGZon e-commerce platform',\n      endpoints: [],\n    };\n\n    for (const route of apiRoutes) {\n      const content = readFileSync(join(this.baseDir, route), 'utf-8');\n      const endpoints = this.parseRouteFile(content, route);\n      docs.endpoints.push(...endpoints);\n    }\n\n    this.writeDocumentation(docs);\n  }\n\n  private static parseRouteFile(content: string, filePath: string): EndpointDoc[] {\n    // Extract API documentation from comments\n    const docs: EndpointDoc[] = [];\n    const commentRegex = /\\/\\*\\*\\s*\\n([^*]|\\*[^/])*\\*\\//g;\n    const matches = content.match(commentRegex) || [];\n\n    matches.forEach((comment) => {\n      const endpoint = this.parseComment(comment, filePath);\n      if (endpoint) docs.push(endpoint);\n    });\n\n    return docs;\n  }\n\n  private static parseComment(comment: string, filePath: string): EndpointDoc | null {\n    // Parse JSDoc-style comments to extract API documentation\n    // Implementation details here...\n    return null;\n  }\n\n  private static writeDocumentation(docs: ApiDoc) {\n    // Generate markdown documentation\n    const markdown = this.generateMarkdown(docs);\n    writeFileSync(join(this.docsPath, 'api-reference.md'), markdown);\n\n    // Generate OpenAPI specification\n    const openapi = this.generateOpenAPI(docs);\n    writeFileSync(\n      join(this.docsPath, 'openapi.json'),\n      JSON.stringify(openapi, null, 2)\n    );\n  }\n\n  private static generateMarkdown(docs: ApiDoc): string {\n    // Generate markdown documentation\n    // Implementation details here...\n    return '';\n  }\n\n  private static generateOpenAPI(docs: ApiDoc): object {\n    // Generate OpenAPI specification\n    // Implementation details here...\n    return {};\n  }\n}"],
      names: ["ApiDocsGenerator", "baseDir", "process", "cwd", "docsPath", "join", "generate", "apiRoutes", "glob", "docs", "version", "title", "description", "endpoints", "route", "content", "readFileSync", "parseRouteFile", "push", "writeDocumentation", "filePath", "commentRegex", "matches", "match", "forEach", "comment", "endpoint", "parseComment", "markdown", "generateMarkdown", "writeFileSync", "openapi", "generateOpenAPI", "JSON", "stringify"],
      mappings: ";;;;+BAmCaA;;;eAAAA;;;oBAnC+B;sBACvB;sBACA;AAiCd,MAAMA;;aACIC,UAAUC,QAAQC,GAAG;;;aACrBC,WAAWC,IAAAA,UAAI,EAACH,QAAQC,GAAG,IAAI,QAAQ;;IAEtD,aAAaG,WAAW;QACtB,MAAMC,YAAY,MAAMC,IAAAA,UAAI,EAAC;QAC7B,MAAMC,OAAe;YACnBC,SAAS;YACTC,OAAO;YACPC,aAAa;YACbC,WAAW,EAAE;QACf;QAEA,KAAK,MAAMC,SAASP,UAAW;YAC7B,MAAMQ,UAAUC,IAAAA,gBAAY,EAACX,IAAAA,UAAI,EAAC,IAAI,CAACJ,OAAO,EAAEa,QAAQ;YACxD,MAAMD,YAAY,IAAI,CAACI,cAAc,CAACF,SAASD;YAC/CL,KAAKI,SAAS,CAACK,IAAI,IAAIL;QACzB;QAEA,IAAI,CAACM,kBAAkB,CAACV;IAC1B;IAEA,OAAeQ,eAAeF,OAAe,EAAEK,QAAgB,EAAiB;QAC9E,0CAA0C;QAC1C,MAAMX,OAAsB,EAAE;QAC9B,MAAMY,eAAe;QACrB,MAAMC,UAAUP,QAAQQ,KAAK,CAACF,iBAAiB,EAAE;QAEjDC,QAAQE,OAAO,CAAC,CAACC;YACf,MAAMC,WAAW,IAAI,CAACC,YAAY,CAACF,SAASL;YAC5C,IAAIM,UAAUjB,KAAKS,IAAI,CAACQ;QAC1B;QAEA,OAAOjB;IACT;IAEA,OAAekB,aAAaF,OAAe,EAAEL,QAAgB,EAAsB;QACjF,0DAA0D;QAC1D,iCAAiC;QACjC,OAAO;IACT;IAEA,OAAeD,mBAAmBV,IAAY,EAAE;QAC9C,kCAAkC;QAClC,MAAMmB,WAAW,IAAI,CAACC,gBAAgB,CAACpB;QACvCqB,IAAAA,iBAAa,EAACzB,IAAAA,UAAI,EAAC,IAAI,CAACD,QAAQ,EAAE,qBAAqBwB;QAEvD,iCAAiC;QACjC,MAAMG,UAAU,IAAI,CAACC,eAAe,CAACvB;QACrCqB,IAAAA,iBAAa,EACXzB,IAAAA,UAAI,EAAC,IAAI,CAACD,QAAQ,EAAE,iBACpB6B,KAAKC,SAAS,CAACH,SAAS,MAAM;IAElC;IAEA,OAAeF,iBAAiBpB,IAAY,EAAU;QACpD,kCAAkC;QAClC,iCAAiC;QACjC,OAAO;IACT;IAEA,OAAeuB,gBAAgBvB,IAAY,EAAU;QACnD,iCAAiC;QACjC,iCAAiC;QACjC,OAAO,CAAC;IACV;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1f1bac90f9624c8c05bae6dcc2c238285f3fb0cf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28krnfv4sn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28krnfv4sn();
cov_28krnfv4sn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_28krnfv4sn().s[1]++;
Object.defineProperty(exports, "ApiDocsGenerator", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_28krnfv4sn().f[0]++;
    cov_28krnfv4sn().s[2]++;
    return ApiDocsGenerator;
  }
});
const _fs =
/* istanbul ignore next */
(cov_28krnfv4sn().s[3]++, require("fs"));
const _path =
/* istanbul ignore next */
(cov_28krnfv4sn().s[4]++, require("path"));
const _glob =
/* istanbul ignore next */
(cov_28krnfv4sn().s[5]++, require("glob"));
class ApiDocsGenerator {
  static {
    /* istanbul ignore next */
    cov_28krnfv4sn().s[6]++;
    this.baseDir = process.cwd();
  }
  static {
    /* istanbul ignore next */
    cov_28krnfv4sn().s[7]++;
    this.docsPath = (0, _path.join)(process.cwd(), 'docs', 'api');
  }
  static async generate() {
    /* istanbul ignore next */
    cov_28krnfv4sn().f[1]++;
    const apiRoutes =
    /* istanbul ignore next */
    (cov_28krnfv4sn().s[8]++, await (0, _glob.glob)('app/api/v1/**/*.ts'));
    const docs =
    /* istanbul ignore next */
    (cov_28krnfv4sn().s[9]++, {
      version: '1.0.0',
      title: 'MGZon API Documentation',
      description: 'API documentation for MGZon e-commerce platform',
      endpoints: []
    });
    /* istanbul ignore next */
    cov_28krnfv4sn().s[10]++;
    for (const route of apiRoutes) {
      const content =
      /* istanbul ignore next */
      (cov_28krnfv4sn().s[11]++, (0, _fs.readFileSync)((0, _path.join)(this.baseDir, route), 'utf-8'));
      const endpoints =
      /* istanbul ignore next */
      (cov_28krnfv4sn().s[12]++, this.parseRouteFile(content, route));
      /* istanbul ignore next */
      cov_28krnfv4sn().s[13]++;
      docs.endpoints.push(...endpoints);
    }
    /* istanbul ignore next */
    cov_28krnfv4sn().s[14]++;
    this.writeDocumentation(docs);
  }
  static parseRouteFile(content, filePath) {
    /* istanbul ignore next */
    cov_28krnfv4sn().f[2]++;
    // Extract API documentation from comments
    const docs =
    /* istanbul ignore next */
    (cov_28krnfv4sn().s[15]++, []);
    const commentRegex =
    /* istanbul ignore next */
    (cov_28krnfv4sn().s[16]++, /\/\*\*\s*\n([^*]|\*[^/])*\*\//g);
    const matches =
    /* istanbul ignore next */
    (cov_28krnfv4sn().s[17]++,
    /* istanbul ignore next */
    (cov_28krnfv4sn().b[0][0]++, content.match(commentRegex)) ||
    /* istanbul ignore next */
    (cov_28krnfv4sn().b[0][1]++, []));
    /* istanbul ignore next */
    cov_28krnfv4sn().s[18]++;
    matches.forEach(comment => {
      /* istanbul ignore next */
      cov_28krnfv4sn().f[3]++;
      const endpoint =
      /* istanbul ignore next */
      (cov_28krnfv4sn().s[19]++, this.parseComment(comment, filePath));
      /* istanbul ignore next */
      cov_28krnfv4sn().s[20]++;
      if (endpoint) {
        /* istanbul ignore next */
        cov_28krnfv4sn().b[1][0]++;
        cov_28krnfv4sn().s[21]++;
        docs.push(endpoint);
      } else
      /* istanbul ignore next */
      {
        cov_28krnfv4sn().b[1][1]++;
      }
    });
    /* istanbul ignore next */
    cov_28krnfv4sn().s[22]++;
    return docs;
  }
  static parseComment(comment, filePath) {
    /* istanbul ignore next */
    cov_28krnfv4sn().f[4]++;
    cov_28krnfv4sn().s[23]++;
    // Parse JSDoc-style comments to extract API documentation
    // Implementation details here...
    return null;
  }
  static writeDocumentation(docs) {
    /* istanbul ignore next */
    cov_28krnfv4sn().f[5]++;
    // Generate markdown documentation
    const markdown =
    /* istanbul ignore next */
    (cov_28krnfv4sn().s[24]++, this.generateMarkdown(docs));
    /* istanbul ignore next */
    cov_28krnfv4sn().s[25]++;
    (0, _fs.writeFileSync)((0, _path.join)(this.docsPath, 'api-reference.md'), markdown);
    // Generate OpenAPI specification
    const openapi =
    /* istanbul ignore next */
    (cov_28krnfv4sn().s[26]++, this.generateOpenAPI(docs));
    /* istanbul ignore next */
    cov_28krnfv4sn().s[27]++;
    (0, _fs.writeFileSync)((0, _path.join)(this.docsPath, 'openapi.json'), JSON.stringify(openapi, null, 2));
  }
  static generateMarkdown(docs) {
    /* istanbul ignore next */
    cov_28krnfv4sn().f[6]++;
    cov_28krnfv4sn().s[28]++;
    // Generate markdown documentation
    // Implementation details here...
    return '';
  }
  static generateOpenAPI(docs) {
    /* istanbul ignore next */
    cov_28krnfv4sn().f[7]++;
    cov_28krnfv4sn().s[29]++;
    // Generate OpenAPI specification
    // Implementation details here...
    return {};
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,