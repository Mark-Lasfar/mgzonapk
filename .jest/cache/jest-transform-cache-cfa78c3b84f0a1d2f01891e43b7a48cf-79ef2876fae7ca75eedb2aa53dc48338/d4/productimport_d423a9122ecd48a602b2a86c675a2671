b417e38c24874b639531db8f4b3d2eeb
// lib/api/services/product-import.ts
"use strict";

/* istanbul ignore next */
function cov_122tn2dt3y() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/product-import.ts";
  var hash = "0806be8f2950b7ca56649be2aaff8d7b1b343f21";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/product-import.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 36
        }
      },
      "3": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "4": {
        start: {
          line: 13,
          column: 36
        },
        end: {
          line: 13,
          column: 102
        }
      },
      "5": {
        start: {
          line: 14,
          column: 35
        },
        end: {
          line: 14,
          column: 100
        }
      },
      "6": {
        start: {
          line: 15,
          column: 17
        },
        end: {
          line: 15,
          column: 37
        }
      },
      "7": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 44
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 42
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "11": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 47
        }
      },
      "12": {
        start: {
          line: 29,
          column: 27
        },
        end: {
          line: 29,
          column: 72
        }
      },
      "13": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 61
        }
      },
      "14": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 61
        }
      },
      "15": {
        start: {
          line: 31,
          column: 29
        },
        end: {
          line: 31,
          column: 31
        }
      },
      "16": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "17": {
        start: {
          line: 33,
          column: 33
        },
        end: {
          line: 37,
          column: 18
        }
      },
      "18": {
        start: {
          line: 38,
          column: 29
        },
        end: {
          line: 38,
          column: 50
        }
      },
      "19": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 48,
          column: 19
        }
      },
      "20": {
        start: {
          line: 44,
          column: 59
        },
        end: {
          line: 44,
          column: 66
        }
      },
      "21": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 71
        }
      },
      "22": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "23": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 24
        }
      },
      "24": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "25": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 47
        }
      },
      "26": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 61,
          column: 72
        }
      },
      "27": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 61
        }
      },
      "28": {
        start: {
          line: 62,
          column: 25
        },
        end: {
          line: 62,
          column: 61
        }
      },
      "29": {
        start: {
          line: 64,
          column: 29
        },
        end: {
          line: 75,
          column: 19
        }
      },
      "30": {
        start: {
          line: 64,
          column: 48
        },
        end: {
          line: 75,
          column: 17
        }
      },
      "31": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 71
        }
      },
      "32": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "33": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 24
        }
      },
      "34": {
        start: {
          line: 85,
          column: 30
        },
        end: {
          line: 85,
          column: 32
        }
      },
      "35": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "36": {
        start: {
          line: 87,
          column: 36
        },
        end: {
          line: 90,
          column: 14
        }
      },
      "37": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 42
        }
      },
      "38": {
        start: {
          line: 91,
          column: 33
        },
        end: {
          line: 91,
          column: 42
        }
      },
      "39": {
        start: {
          line: 92,
          column: 31
        },
        end: {
          line: 105,
          column: 14
        }
      },
      "40": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 43
        }
      },
      "41": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 29
        }
      },
      "42": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "43": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 47
        }
      },
      "44": {
        start: {
          line: 113,
          column: 26
        },
        end: {
          line: 113,
          column: 81
        }
      },
      "45": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 59
        }
      },
      "46": {
        start: {
          line: 114,
          column: 24
        },
        end: {
          line: 114,
          column: 59
        }
      },
      "47": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "48": {
        start: {
          line: 116,
          column: 32
        },
        end: {
          line: 116,
          column: 44
        }
      },
      "49": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 122,
          column: 17
        }
      },
      "50": {
        start: {
          line: 118,
          column: 39
        },
        end: {
          line: 118,
          column: 61
        }
      },
      "51": {
        start: {
          line: 119,
          column: 46
        },
        end: {
          line: 119,
          column: 75
        }
      },
      "52": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 125
        }
      },
      "53": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "54": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 130,
          column: 15
        }
      },
      "55": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 33
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 23
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 57
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 26
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 44,
            column: 52
          },
          end: {
            line: 44,
            column: 53
          }
        },
        loc: {
          start: {
            line: 44,
            column: 59
          },
          end: {
            line: 44,
            column: 66
          }
        },
        line: 44
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 44
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 58
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 39
          },
          end: {
            line: 64,
            column: 40
          }
        },
        loc: {
          start: {
            line: 64,
            column: 48
          },
          end: {
            line: 75,
            column: 17
          }
        },
        line: 64
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 51
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 84
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 48
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 110
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 38
          }
        }, {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 19,
            column: 5
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 14
          }
        }, {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 32
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 30,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 91,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 91,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 114,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "6": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "7": {
        loc: {
          start: {
            line: 117,
            column: 20
          },
          end: {
            line: 117,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 20
          },
          end: {
            line: 117,
            column: 34
          }
        }, {
          start: {
            line: 117,
            column: 38
          },
          end: {
            line: 117,
            column: 59
          }
        }],
        line: 117
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/product-import.ts"],
      sourcesContent: ["// lib/api/services/product-import.ts\nimport { connectToDatabase } from '@/lib/db';\nimport Product from '@/lib/db/models/product.model';\nimport Seller from '@/lib/db/models/seller.model';\nimport { logger } from '@/lib/api/services/logging';\n\ninterface ExternalProduct {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  images: string[];\n  source: 'shopify' | 'amazon' | 'other';\n  sourceId: string;\n  sourceStoreId: string;\n}\n\nexport class ProductImportService {\n  private shopifyConfig: { apiKey: string; apiSecret: string; domain: string };\n  private amazonConfig: { accessKeyId: string; secretAccessKey: string; region: string };\n\n  constructor(config: {\n    shopify: { apiKey: string; apiSecret: string; domain: string };\n    amazon: { accessKeyId: string; secretAccessKey: string; region: string };\n  }) {\n    this.shopifyConfig = config.shopify;\n    this.amazonConfig = config.amazon;\n  }\n\n  async importFromShopify(sellerId: string, shopifyProductIds: string[]) {\n    try {\n      await connectToDatabase();\n      const seller = await Seller.findById(sellerId);\n      if (!seller) throw new Error('Seller not found');\n\n      const products: ExternalProduct[] = [];\n      for (const productId of shopifyProductIds) {\n        const response = await fetch(\n          `https://${this.shopifyConfig.domain}/admin/api/2023-10/products/${productId}.json`,\n          {\n            headers: {\n              'X-Shopify-Access-Token': this.shopifyConfig.apiKey,\n            },\n          }\n        );\n        const data = await response.json();\n        products.push({\n          id: data.product.id,\n          name: data.product.title,\n          description: data.product.body_html,\n          price: parseFloat(data.product.variants[0].price),\n          images: data.product.images.map((img: any) => img.src),\n          source: 'shopify',\n          sourceId: data.product.id,\n          sourceStoreId: this.shopifyConfig.domain,\n        });\n      }\n\n      return await this.saveImportedProducts(sellerId, products);\n    } catch (error) {\n      logger.error('Shopify import error', { error });\n      throw error;\n    }\n  }\n\n  async importFromAmazon(sellerId: string, asins: string[]) {\n    try {\n      await connectToDatabase();\n      const seller = await Seller.findById(sellerId);\n      if (!seller) throw new Error('Seller not found');\n\n      // Mock Amazon API call (replace with actual SP-API integration)\n      const products: ExternalProduct[] = asins.map((asin) => ({\n        id: asin,\n        name: `Amazon Product ${asin}`,\n        description: `Description for ${asin}`,\n        price: 100, // Replace with actual price from Amazon\n        images: ['/images/fallback.jpg'],\n        source: 'amazon',\n        sourceId: asin,\n        sourceStoreId: 'amazon.com',\n      }));\n\n      return await this.saveImportedProducts(sellerId, products);\n    } catch (error) {\n      logger.error('Amazon import error', { error });\n      throw error;\n    }\n  }\n\n  private async saveImportedProducts(sellerId: string, products: ExternalProduct[]) {\n    const savedProducts = [];\n    for (const product of products) {\n      const existingProduct = await Product.findOne({ sourceId: product.sourceId, source: product.source });\n      if (existingProduct) continue;\n\n      const newProduct = await Product.create({\n        sellerId,\n        name: product.name,\n        description: product.description,\n        price: product.price,\n        images: product.images,\n        source: product.source,\n        sourceId: product.sourceId,\n        sourceStoreId: product.sourceStoreId,\n        countInStock: 100, // Default stock, adjust based on source\n        category: 'Imported',\n        slug: `${product.source}-${product.sourceId}`,\n        status: 'active',\n      });\n      savedProducts.push(newProduct);\n    }\n    return savedProducts;\n  }\n\n  async handleImportedProductPayment(orderId: string) {\n    try {\n      await connectToDatabase();\n      const order = await Order.findById(orderId).populate('items.product');\n      if (!order) throw new Error('Order not found');\n\n      for (const item of order.items) {\n        const product = item.product;\n        if (product.source && product.sourceStoreId) {\n          const commission = order.totalPrice * 0.1; // 10% commission for platform\n          const sourceStoreAmount = order.totalPrice - commission;\n\n          // Mock payment to source store (replace with actual payment gateway)\n          console.log(`Sending $${sourceStoreAmount} to ${product.sourceStoreId} for product ${product.sourceId}`);\n        }\n      }\n\n      return { success: true };\n    } catch (error) {\n      logger.error('Imported product payment error', { error });\n      throw error;\n    }\n  }\n}"],
      names: ["ProductImportService", "constructor", "config", "shopifyConfig", "shopify", "amazonConfig", "amazon", "importFromShopify", "sellerId", "shopifyProductIds", "connectToDatabase", "seller", "Seller", "findById", "Error", "products", "productId", "response", "fetch", "domain", "headers", "apiKey", "data", "json", "push", "id", "product", "name", "title", "description", "body_html", "price", "parseFloat", "variants", "images", "map", "img", "src", "source", "sourceId", "sourceStoreId", "saveImportedProducts", "error", "logger", "importFromAmazon", "asins", "asin", "savedProducts", "existingProduct", "Product", "findOne", "newProduct", "create", "countInStock", "category", "slug", "status", "handleImportedProductPayment", "orderId", "order", "Order", "populate", "item", "items", "commission", "totalPrice", "sourceStoreAmount", "console", "log", "success"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0806be8f2950b7ca56649be2aaff8d7b1b343f21"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_122tn2dt3y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_122tn2dt3y();
cov_122tn2dt3y().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_122tn2dt3y().s[1]++;
Object.defineProperty(exports, "ProductImportService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_122tn2dt3y().f[0]++;
    cov_122tn2dt3y().s[2]++;
    return ProductImportService;
  }
});
const _db =
/* istanbul ignore next */
(cov_122tn2dt3y().s[3]++, require("../../db"));
const _productmodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_122tn2dt3y().s[4]++, _interop_require_default(require("../../db/models/product.model")));
const _sellermodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_122tn2dt3y().s[5]++, _interop_require_default(require("../../db/models/seller.model")));
const _logging =
/* istanbul ignore next */
(cov_122tn2dt3y().s[6]++, require("./logging"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_122tn2dt3y().f[1]++;
  cov_122tn2dt3y().s[7]++;
  return /* istanbul ignore next */(cov_122tn2dt3y().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_122tn2dt3y().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_122tn2dt3y().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_122tn2dt3y().b[0][1]++, {
    default: obj
  });
}
class ProductImportService {
  constructor(config) {
    /* istanbul ignore next */
    cov_122tn2dt3y().f[2]++;
    cov_122tn2dt3y().s[8]++;
    this.shopifyConfig = config.shopify;
    /* istanbul ignore next */
    cov_122tn2dt3y().s[9]++;
    this.amazonConfig = config.amazon;
  }
  async importFromShopify(sellerId, shopifyProductIds) {
    /* istanbul ignore next */
    cov_122tn2dt3y().f[3]++;
    cov_122tn2dt3y().s[10]++;
    try {
      /* istanbul ignore next */
      cov_122tn2dt3y().s[11]++;
      await (0, _db.connectToDatabase)();
      const seller =
      /* istanbul ignore next */
      (cov_122tn2dt3y().s[12]++, await _sellermodel.default.findById(sellerId));
      /* istanbul ignore next */
      cov_122tn2dt3y().s[13]++;
      if (!seller) {
        /* istanbul ignore next */
        cov_122tn2dt3y().b[2][0]++;
        cov_122tn2dt3y().s[14]++;
        throw new Error('Seller not found');
      } else
      /* istanbul ignore next */
      {
        cov_122tn2dt3y().b[2][1]++;
      }
      const products =
      /* istanbul ignore next */
      (cov_122tn2dt3y().s[15]++, []);
      /* istanbul ignore next */
      cov_122tn2dt3y().s[16]++;
      for (const productId of shopifyProductIds) {
        const response =
        /* istanbul ignore next */
        (cov_122tn2dt3y().s[17]++, await fetch(`https://${this.shopifyConfig.domain}/admin/api/2023-10/products/${productId}.json`, {
          headers: {
            'X-Shopify-Access-Token': this.shopifyConfig.apiKey
          }
        }));
        const data =
        /* istanbul ignore next */
        (cov_122tn2dt3y().s[18]++, await response.json());
        /* istanbul ignore next */
        cov_122tn2dt3y().s[19]++;
        products.push({
          id: data.product.id,
          name: data.product.title,
          description: data.product.body_html,
          price: parseFloat(data.product.variants[0].price),
          images: data.product.images.map(img => {
            /* istanbul ignore next */
            cov_122tn2dt3y().f[4]++;
            cov_122tn2dt3y().s[20]++;
            return img.src;
          }),
          source: 'shopify',
          sourceId: data.product.id,
          sourceStoreId: this.shopifyConfig.domain
        });
      }
      /* istanbul ignore next */
      cov_122tn2dt3y().s[21]++;
      return await this.saveImportedProducts(sellerId, products);
    } catch (error) {
      /* istanbul ignore next */
      cov_122tn2dt3y().s[22]++;
      _logging.logger.error('Shopify import error', {
        error
      });
      /* istanbul ignore next */
      cov_122tn2dt3y().s[23]++;
      throw error;
    }
  }
  async importFromAmazon(sellerId, asins) {
    /* istanbul ignore next */
    cov_122tn2dt3y().f[5]++;
    cov_122tn2dt3y().s[24]++;
    try {
      /* istanbul ignore next */
      cov_122tn2dt3y().s[25]++;
      await (0, _db.connectToDatabase)();
      const seller =
      /* istanbul ignore next */
      (cov_122tn2dt3y().s[26]++, await _sellermodel.default.findById(sellerId));
      /* istanbul ignore next */
      cov_122tn2dt3y().s[27]++;
      if (!seller) {
        /* istanbul ignore next */
        cov_122tn2dt3y().b[3][0]++;
        cov_122tn2dt3y().s[28]++;
        throw new Error('Seller not found');
      } else
      /* istanbul ignore next */
      {
        cov_122tn2dt3y().b[3][1]++;
      }
      // Mock Amazon API call (replace with actual SP-API integration)
      const products =
      /* istanbul ignore next */
      (cov_122tn2dt3y().s[29]++, asins.map(asin => {
        /* istanbul ignore next */
        cov_122tn2dt3y().f[6]++;
        cov_122tn2dt3y().s[30]++;
        return {
          id: asin,
          name: `Amazon Product ${asin}`,
          description: `Description for ${asin}`,
          price: 100,
          images: ['/images/fallback.jpg'],
          source: 'amazon',
          sourceId: asin,
          sourceStoreId: 'amazon.com'
        };
      }));
      /* istanbul ignore next */
      cov_122tn2dt3y().s[31]++;
      return await this.saveImportedProducts(sellerId, products);
    } catch (error) {
      /* istanbul ignore next */
      cov_122tn2dt3y().s[32]++;
      _logging.logger.error('Amazon import error', {
        error
      });
      /* istanbul ignore next */
      cov_122tn2dt3y().s[33]++;
      throw error;
    }
  }
  async saveImportedProducts(sellerId, products) {
    /* istanbul ignore next */
    cov_122tn2dt3y().f[7]++;
    const savedProducts =
    /* istanbul ignore next */
    (cov_122tn2dt3y().s[34]++, []);
    /* istanbul ignore next */
    cov_122tn2dt3y().s[35]++;
    for (const product of products) {
      const existingProduct =
      /* istanbul ignore next */
      (cov_122tn2dt3y().s[36]++, await _productmodel.default.findOne({
        sourceId: product.sourceId,
        source: product.source
      }));
      /* istanbul ignore next */
      cov_122tn2dt3y().s[37]++;
      if (existingProduct) {
        /* istanbul ignore next */
        cov_122tn2dt3y().b[4][0]++;
        cov_122tn2dt3y().s[38]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_122tn2dt3y().b[4][1]++;
      }
      const newProduct =
      /* istanbul ignore next */
      (cov_122tn2dt3y().s[39]++, await _productmodel.default.create({
        sellerId,
        name: product.name,
        description: product.description,
        price: product.price,
        images: product.images,
        source: product.source,
        sourceId: product.sourceId,
        sourceStoreId: product.sourceStoreId,
        countInStock: 100,
        category: 'Imported',
        slug: `${product.source}-${product.sourceId}`,
        status: 'active'
      }));
      /* istanbul ignore next */
      cov_122tn2dt3y().s[40]++;
      savedProducts.push(newProduct);
    }
    /* istanbul ignore next */
    cov_122tn2dt3y().s[41]++;
    return savedProducts;
  }
  async handleImportedProductPayment(orderId) {
    /* istanbul ignore next */
    cov_122tn2dt3y().f[8]++;
    cov_122tn2dt3y().s[42]++;
    try {
      /* istanbul ignore next */
      cov_122tn2dt3y().s[43]++;
      await (0, _db.connectToDatabase)();
      const order =
      /* istanbul ignore next */
      (cov_122tn2dt3y().s[44]++, await Order.findById(orderId).populate('items.product'));
      /* istanbul ignore next */
      cov_122tn2dt3y().s[45]++;
      if (!order) {
        /* istanbul ignore next */
        cov_122tn2dt3y().b[5][0]++;
        cov_122tn2dt3y().s[46]++;
        throw new Error('Order not found');
      } else
      /* istanbul ignore next */
      {
        cov_122tn2dt3y().b[5][1]++;
      }
      cov_122tn2dt3y().s[47]++;
      for (const item of order.items) {
        const product =
        /* istanbul ignore next */
        (cov_122tn2dt3y().s[48]++, item.product);
        /* istanbul ignore next */
        cov_122tn2dt3y().s[49]++;
        if (
        /* istanbul ignore next */
        (cov_122tn2dt3y().b[7][0]++, product.source) &&
        /* istanbul ignore next */
        (cov_122tn2dt3y().b[7][1]++, product.sourceStoreId)) {
          /* istanbul ignore next */
          cov_122tn2dt3y().b[6][0]++;
          const commission =
          /* istanbul ignore next */
          (cov_122tn2dt3y().s[50]++, order.totalPrice * 0.1); // 10% commission for platform
          const sourceStoreAmount =
          /* istanbul ignore next */
          (cov_122tn2dt3y().s[51]++, order.totalPrice - commission);
          // Mock payment to source store (replace with actual payment gateway)
          /* istanbul ignore next */
          cov_122tn2dt3y().s[52]++;
          console.log(`Sending $${sourceStoreAmount} to ${product.sourceStoreId} for product ${product.sourceId}`);
        } else
        /* istanbul ignore next */
        {
          cov_122tn2dt3y().b[6][1]++;
        }
      }
      /* istanbul ignore next */
      cov_122tn2dt3y().s[53]++;
      return {
        success: true
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_122tn2dt3y().s[54]++;
      _logging.logger.error('Imported product payment error', {
        error
      });
      /* istanbul ignore next */
      cov_122tn2dt3y().s[55]++;
      throw error;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,