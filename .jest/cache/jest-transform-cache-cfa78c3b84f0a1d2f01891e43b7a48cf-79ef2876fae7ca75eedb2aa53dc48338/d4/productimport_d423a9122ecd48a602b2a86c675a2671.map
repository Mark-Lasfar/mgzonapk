{"version":3,"names":["ProductImportService","constructor","config","cov_122tn2dt3y","f","s","shopifyConfig","shopify","amazonConfig","amazon","importFromShopify","sellerId","shopifyProductIds","_db","connectToDatabase","seller","_sellermodel","default","findById","b","Error","products","productId","response","fetch","domain","headers","apiKey","data","json","push","id","product","name","title","description","body_html","price","parseFloat","variants","images","map","img","src","source","sourceId","sourceStoreId","saveImportedProducts","error","_logging","logger","importFromAmazon","asins","asin","savedProducts","existingProduct","_productmodel","findOne","newProduct","create","countInStock","category","slug","status","handleImportedProductPayment","orderId","order","Order","populate","item","items","commission","totalPrice","sourceStoreAmount","console","log","success"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/product-import.ts"],"sourcesContent":["// lib/api/services/product-import.ts\nimport { connectToDatabase } from '@/lib/db';\nimport Product from '@/lib/db/models/product.model';\nimport Seller from '@/lib/db/models/seller.model';\nimport { logger } from '@/lib/api/services/logging';\n\ninterface ExternalProduct {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  images: string[];\n  source: 'shopify' | 'amazon' | 'other';\n  sourceId: string;\n  sourceStoreId: string;\n}\n\nexport class ProductImportService {\n  private shopifyConfig: { apiKey: string; apiSecret: string; domain: string };\n  private amazonConfig: { accessKeyId: string; secretAccessKey: string; region: string };\n\n  constructor(config: {\n    shopify: { apiKey: string; apiSecret: string; domain: string };\n    amazon: { accessKeyId: string; secretAccessKey: string; region: string };\n  }) {\n    this.shopifyConfig = config.shopify;\n    this.amazonConfig = config.amazon;\n  }\n\n  async importFromShopify(sellerId: string, shopifyProductIds: string[]) {\n    try {\n      await connectToDatabase();\n      const seller = await Seller.findById(sellerId);\n      if (!seller) throw new Error('Seller not found');\n\n      const products: ExternalProduct[] = [];\n      for (const productId of shopifyProductIds) {\n        const response = await fetch(\n          `https://${this.shopifyConfig.domain}/admin/api/2023-10/products/${productId}.json`,\n          {\n            headers: {\n              'X-Shopify-Access-Token': this.shopifyConfig.apiKey,\n            },\n          }\n        );\n        const data = await response.json();\n        products.push({\n          id: data.product.id,\n          name: data.product.title,\n          description: data.product.body_html,\n          price: parseFloat(data.product.variants[0].price),\n          images: data.product.images.map((img: any) => img.src),\n          source: 'shopify',\n          sourceId: data.product.id,\n          sourceStoreId: this.shopifyConfig.domain,\n        });\n      }\n\n      return await this.saveImportedProducts(sellerId, products);\n    } catch (error) {\n      logger.error('Shopify import error', { error });\n      throw error;\n    }\n  }\n\n  async importFromAmazon(sellerId: string, asins: string[]) {\n    try {\n      await connectToDatabase();\n      const seller = await Seller.findById(sellerId);\n      if (!seller) throw new Error('Seller not found');\n\n      // Mock Amazon API call (replace with actual SP-API integration)\n      const products: ExternalProduct[] = asins.map((asin) => ({\n        id: asin,\n        name: `Amazon Product ${asin}`,\n        description: `Description for ${asin}`,\n        price: 100, // Replace with actual price from Amazon\n        images: ['/images/fallback.jpg'],\n        source: 'amazon',\n        sourceId: asin,\n        sourceStoreId: 'amazon.com',\n      }));\n\n      return await this.saveImportedProducts(sellerId, products);\n    } catch (error) {\n      logger.error('Amazon import error', { error });\n      throw error;\n    }\n  }\n\n  private async saveImportedProducts(sellerId: string, products: ExternalProduct[]) {\n    const savedProducts = [];\n    for (const product of products) {\n      const existingProduct = await Product.findOne({ sourceId: product.sourceId, source: product.source });\n      if (existingProduct) continue;\n\n      const newProduct = await Product.create({\n        sellerId,\n        name: product.name,\n        description: product.description,\n        price: product.price,\n        images: product.images,\n        source: product.source,\n        sourceId: product.sourceId,\n        sourceStoreId: product.sourceStoreId,\n        countInStock: 100, // Default stock, adjust based on source\n        category: 'Imported',\n        slug: `${product.source}-${product.sourceId}`,\n        status: 'active',\n      });\n      savedProducts.push(newProduct);\n    }\n    return savedProducts;\n  }\n\n  async handleImportedProductPayment(orderId: string) {\n    try {\n      await connectToDatabase();\n      const order = await Order.findById(orderId).populate('items.product');\n      if (!order) throw new Error('Order not found');\n\n      for (const item of order.items) {\n        const product = item.product;\n        if (product.source && product.sourceStoreId) {\n          const commission = order.totalPrice * 0.1; // 10% commission for platform\n          const sourceStoreAmount = order.totalPrice - commission;\n\n          // Mock payment to source store (replace with actual payment gateway)\n          console.log(`Sending $${sourceStoreAmount} to ${product.sourceStoreId} for product ${product.sourceId}`);\n        }\n      }\n\n      return { success: true };\n    } catch (error) {\n      logger.error('Imported product payment error', { error });\n      throw error;\n    }\n  }\n}"],"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","ignoreList":[]}