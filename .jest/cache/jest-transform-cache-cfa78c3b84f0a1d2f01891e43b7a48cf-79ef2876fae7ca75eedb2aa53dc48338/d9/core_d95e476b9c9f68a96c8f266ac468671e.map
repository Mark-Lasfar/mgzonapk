{"version":3,"names":["cov_1tmmnmve7e","actualCoverage","s","ourFileRouter","f","_next","createUploadthing","imageUploader","image","maxFileSize","middleware","session","_auth","auth","b","_server","UploadThingError","userId","user","id","onUploadComplete","metadata","file","uploadedBy"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/uploadthing/core.ts"],"sourcesContent":["import { createUploadthing, type FileRouter } from 'uploadthing/next'\nimport { UploadThingError } from 'uploadthing/server'\nimport { auth } from '@/auth'\n\nconst f = createUploadthing()\n\n// FileRouter for your app, can contain multiple FileRoutes\nexport const ourFileRouter = {\n  // Define as many FileRoutes as you like, each with a unique routeSlug\n  imageUploader: f({ image: { maxFileSize: '4MB' } })\n    // Set permissions and file types for this FileRoute\n    .middleware(async () => {\n      // This code runs on your server before upload\n      const session = await auth()\n\n      // If you throw, the user will not be able to upload\n      if (!session) throw new UploadThingError('Unauthorized')\n\n      // Whatever is returned here is accessible in onUploadComplete as `metadata`\n      return { userId: session?.user?.id }\n    })\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .onUploadComplete(async ({ metadata, file }) => {\n      // This code RUNS ON YOUR SERVER after upload\n\n      // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\n      return { uploadedBy: metadata.userId }\n    }),\n} satisfies FileRouter\n\nexport type OurFileRouter = typeof ourFileRouter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQE;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BADW;;;;;;WAAAC,aAAA;;;;;kCAPsC;;;kCAClB;;;kCACZ;AAErB,MAAMC,CAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,OAAI,IAAAG,KAAA,CAAAC,iBAAiB;AAGpB,MAAMH,aAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAgB;EAC3B;EACAK,aAAA,EAAeH,CAAA,CAAE;IAAEI,KAAA,EAAO;MAAEC,WAAA,EAAa;IAAM;EAAE,EAC/C;EAAA,CACCC,UAAU,CAAC;IAAA;IAAAV,cAAA,GAAAI,CAAA;IACV;IACA,MAAMO,OAAA;IAAA;IAAA,CAAAX,cAAA,GAAAE,CAAA,OAAU,MAAM,IAAAU,KAAA,CAAAC,IAAI;IAE1B;IAAA;IAAAb,cAAA,GAAAE,CAAA;IACA,IAAI,CAACS,OAAA,EAAS;MAAA;MAAAX,cAAA,GAAAc,CAAA;MAAAd,cAAA,GAAAE,CAAA;MAAA,MAAM,IAAIa,OAAA,CAAAC,gBAAgB,CAAC;IAAA;IAAA;IAAA;MAAAhB,cAAA,GAAAc,CAAA;IAAA;IAEzC;IAAAd,cAAA,GAAAE,CAAA;IACA,OAAO;MAAEe,MAAA,EAAQN,OAAA,EAASO,IAAA,EAAMC;IAAG;EACrC,EACA;EAAA,CACCC,gBAAgB,CAAC,OAAO;IAAEC,QAAQ;IAAEC;EAAI,CAAE;IAAA;IAAAtB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACzC;IAEA;IACA,OAAO;MAAEqB,UAAA,EAAYF,QAAA,CAASJ;IAAO;EACvC;AACJ","ignoreList":[]}