{"version":3,"names":["RegisterPage","cov_ha3c66h89","f","formData","setFormData","s","_react","useState","name","email","whatsapp","password","confirmPassword","loading","setLoading","router","_navigation","useRouter","toast","_usetoast","useToast","t","_nextintl","useTranslations","locale","useLocale","isArabic","direction","b","handleInputChange","e","prev","target","value","generateVerificationCode","Math","floor","random","toString","storeVerificationCode","userId","code","expiresAt","Date","now","process","env","VERIFICATION_CODE_EXPIRY","error","_supabase","supabase","from","insert","user_id","expires_at","toISOString","console","Error","handleSubmit","preventDefault","description","variant","res","fetch","method","headers","body","JSON","stringify","undefined","data","json","ok","success","verificationCode","channels","_notification","sendNotification","type","title","message","push","encodeURIComponent","_jsxruntime","jsx","className","style","jsxs","_card","Card","CardHeader","CardTitle","CardContent","onSubmit","_label","Label","htmlFor","_input","Input","id","onChange","required","placeholder","_button","Button","disabled"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/[locale]/(auth)/register/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { Label } from '@/components/ui/label'\nimport { useToast } from '@/hooks/use-toast'\nimport { useTranslations, useLocale } from 'next-intl'\nimport { sendNotification } from '@/lib/utils/notification'\nimport { supabase } from '@/lib/config/supabase'\nimport { v4 as uuidv4 } from 'uuid'\n\ninterface FormData {\n  name: string\n  email: string\n  whatsapp?: string\n  password: string\n  confirmPassword: string\n}\n\nexport default function RegisterPage() {\n  const [formData, setFormData] = useState<FormData>({\n    name: '',\n    email: '',\n    whatsapp: '',\n    password: '',\n    confirmPassword: '',\n  })\n  const [loading, setLoading] = useState(false)\n  const router = useRouter()\n  const { toast } = useToast()\n  const t = useTranslations('Auth')\n  const locale = useLocale()\n  const isArabic = locale === 'ar'\n  const direction = isArabic ? 'rtl' : 'ltr'\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }))\n  }\n\n  const generateVerificationCode = () => {\n    return Math.floor(100000 + Math.random() * 900000).toString() // 6-digit code\n  }\n\n  const storeVerificationCode = async (userId: string, email: string, code: string) => {\n    const expiresAt = new Date(Date.now() + process.env.VERIFICATION_CODE_EXPIRY!)\n    const { error } = await supabase\n      .from('verification_codes')\n      .insert({\n        user_id: userId,\n        email,\n        code,\n        expires_at: expiresAt.toISOString(),\n      })\n    if (error) {\n      console.error('Supabase error:', error)\n      throw new Error(t('VerificationCodeFailed'))\n    }\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (formData.password !== formData.confirmPassword) {\n      toast({ description: t('PasswordsDoNotMatch'), variant: 'destructive' })\n      return\n    }\n\n    setLoading(true)\n    try {\n      const res = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          name: formData.name,\n          email: formData.email,\n          whatsapp: formData.whatsapp || undefined,\n          password: formData.password,\n        }),\n      })\n\n      const data = await res.json()\n      if (res.ok && data.success) {\n        const verificationCode = generateVerificationCode()\n        const channels = formData.whatsapp ? ['email', 'whatsapp'] : ['email']\n\n        await storeVerificationCode(data.userId, formData.email, verificationCode)\n\n        await sendNotification({\n          userId: data.userId,\n          type: 'verification',\n          title: t('VerifyYourAccount'),\n          message: `${t('VerificationCodeMessage')} ${verificationCode}`,\n          channels,\n          data: { verificationCode, email: formData.email, whatsapp: formData.whatsapp },\n        })\n\n        toast({ description: t('RegistrationSuccess') })\n        router.push(`/verify-code?email=${encodeURIComponent(formData.email)}`)\n      } else {\n        toast({ description: data.error || t('RegistrationFailed'), variant: 'destructive' })\n      }\n    } catch (error) {\n      toast({\n        description: error instanceof Error ? error.message : t('Error'),\n        variant: 'destructive',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <main className=\"max-w-md mx-auto py-8\" style={{ direction }}>\n      <Card>\n        <CardHeader>\n          <CardTitle>{t('CreateAccount')}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">{t('FullName')}</Label>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                value={formData.name}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"email\">{t('Email')}</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"whatsapp\">{t('WhatsAppOptional')}</Label>\n              <Input\n                id=\"whatsapp\"\n                name=\"whatsapp\"\n                placeholder={t('WhatsAppPlaceholder')}\n                value={formData.whatsapp}\n                onChange={handleInputChange}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">{t('Password')}</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"confirmPassword\">{t('ConfirmPassword')}</Label>\n              <Input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                value={formData.confirmPassword}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            <Button type=\"submit\" disabled={loading} className=\"w-full\">\n              {loading ? t('Registering') : t('Register')}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </main>\n  )\n}"],"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","ignoreList":[]}