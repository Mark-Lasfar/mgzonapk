{"version":3,"names":["AliExpressMarketplace","cov_1a65icqtpv","f","s","default","_default","AliExpressAPI","constructor","config","authenticate","response","_axios","post","apiUrl","app_key","clientId","app_secret","clientSecret","accessToken","data","access_token","error","Error","message","getAuthHeaders","Authorization","getProducts","filters","request","method","params","products","map","transformAliExpressProduct","findProductById","id","product","processProductImages","processedImages","image","images","uploadedUrl","uploadImage","url","push","_logger","logger","aliProduct","product_id","title","subject","description","price","Number","compareAtPrice","original_price","sku","quantity","total_available_stock","image_urls","position","isDefault","categories","category_name","vendor","store_name","sourceUrl","product_url","sourceId","sourcePlatform","variants","b","skus","transformAliExpressVariant","attributes","status","sku_id","properties_names","join","sku_code","available_quantity","options","properties","reduce","acc","prop","name","value","endpoint","headers","body","api","importProducts","startTime","Date","now","errors","source","importFromFile","importFromUrl","filterProducts","transform","Promise","all","success","stats","total","length","imported","failed","timeElapsed","code","exportProducts","exportedData","format","exportToCSV","JSON","stringify","exportToXML","exported","file","content","text","split","pop","toLowerCase","_csv","parseCSV","parse","_xml","parseXML","get","filter","some","c","includes","priceRange","min","max","fields","getExportFields","createCSV","allFields","includeFields","excludeFields","field"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/services/marketplace/aliexpress.ts"],"sourcesContent":["import axios from 'axios';\nimport { createCSV, parseCSV } from '@/lib/utils/csv';\nimport { parseXML } from '@/lib/utils/xml';\n// import { logger } from '../logging';\n\nimport {\n  MarketplaceProduct,\n  ProductImage,\n  ProductVariant,\n  ProductOption,\n  ImportOptions,\n  ImportResult,\n  ImportError,\n  ImportWarning,\n  ExportOptions,\n  ExportResult,\n  MarketplaceConfig,\n  SyncOptions,\n  SyncResult,\n  SyncConflict,\n  AnalyticsData,\n  TransformationRule,\n  BackupMetadata,\n  MarketplaceOrder,\n} from './types';\nimport { logger } from '@/lib/utils/logger';\n\nclass AliExpressAPI {\n  private accessToken?: string;\n\n  constructor(private config: MarketplaceConfig) {}\n\n  async authenticate(): Promise<void> {\n    try {\n      const response = await axios.post(`${this.config.apiUrl}/auth`, {\n        app_key: this.config.clientId,\n        app_secret: this.config.clientSecret,\n      });\n\n      this.accessToken = response.data.access_token;\n    } catch (error: any) {\n      throw new Error('AliExpress authentication failed: ' + error.message);\n    }\n  }\n\n  private getAuthHeaders() {\n    return {\n      Authorization: `Bearer ${this.accessToken}`,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  async getProducts(filters?: any): Promise<MarketplaceProduct[]> {\n    const response = await this.request('/products', {\n      method: 'GET',\n      params: filters,\n    });\n    return response.products.map(this.transformAliExpressProduct);\n  }\n\n  async findProductById(id: string): Promise<MarketplaceProduct | null> {\n    try {\n      const response = await this.request(`/product/${id}`, {\n        method: 'GET',\n      });\n      return this.transformAliExpressProduct(response.product);\n    } catch {\n      return null;\n    }\n  }\n\n  async processProductImages(product: MarketplaceProduct): Promise<ProductImage[]> {\n    const processedImages: ProductImage[] = [];\n    for (const image of product.images) {\n      try {\n        const uploadedUrl = await this.uploadImage(image.url);\n        processedImages.push({ ...image, url: uploadedUrl });\n      } catch (error: any) {\n        logger.error(`Failed to process image: ${error.message}`);\n      }\n    }\n    return processedImages;\n  }\n\n  private transformAliExpressProduct(aliProduct: any): MarketplaceProduct {\n    return {\n      id: aliProduct.product_id,\n      title: aliProduct.subject,\n      description: aliProduct.description,\n      price: Number(aliProduct.price),\n      compareAtPrice: Number(aliProduct.original_price),\n      sku: aliProduct.product_id,\n      quantity: aliProduct.total_available_stock,\n      images: aliProduct.image_urls.map((url: string) => ({\n        url,\n        position: 0,\n        isDefault: false,\n      })),\n      categories: [aliProduct.category_name],\n      vendor: aliProduct.store_name,\n      sourceUrl: aliProduct.product_url,\n      sourceId: aliProduct.product_id,\n      sourcePlatform: 'aliexpress',\n      variants: aliProduct.skus?.map(this.transformAliExpressVariant) || [],\n      attributes: aliProduct.attributes || {},\n      status: aliProduct.status,\n    };\n  }\n\n  private transformAliExpressVariant(sku: any): ProductVariant {\n    return {\n      id: sku.sku_id,\n      title: sku.properties_names.join(' / '),\n      sku: sku.sku_code,\n      price: Number(sku.price),\n      quantity: sku.available_quantity,\n      options: sku.properties.reduce((acc: any, prop: any) => {\n        acc[prop.name] = prop.value;\n        return acc;\n      }, {}),\n    };\n  }\n\n  private async request(endpoint: string, options: { method: string; params?: any; body?: any }): Promise<any> {\n    if (!this.accessToken) {\n      await this.authenticate();\n    }\n\n    const url = `${this.config.apiUrl}${endpoint}`;\n\n    try {\n      const response = await axios({\n        method: options.method,\n        url,\n        headers: this.getAuthHeaders(),\n        params: options.params,\n        data: options.body,\n      });\n\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.status === 401) {\n        await this.authenticate();\n        return this.request(endpoint, options);\n      }\n      throw new Error(`AliExpress API Error: ${error.message}`);\n    }\n  }\n\n  private async uploadImage(url: string): Promise<string> {\n    // Stub method: needs real implementation\n    return url;\n  }\n}\n\nexport class AliExpressMarketplace {\n  private api: AliExpressAPI;\n\n  constructor(private config: MarketplaceConfig) {\n    this.api = new AliExpressAPI(config);\n  }\n\n  async importProducts(options: ImportOptions): Promise<ImportResult> {\n    const startTime = Date.now();\n    const errors: ImportError[] = [];\n    let products: MarketplaceProduct[] = [];\n\n    try {\n      switch (options.source) {\n        case 'api':\n          products = await this.api.getProducts(options.filters);\n          break;\n        case 'file':\n          products = await this.importFromFile(options);\n          break;\n        case 'url':\n          products = await this.importFromUrl(options);\n          break;\n        default:\n          throw new Error('Invalid import source');\n      }\n\n      if (options.filters) {\n        products = this.filterProducts(products, options.filters);\n      }\n\n      if (options.transform) {\n        products = await Promise.all(products.map(product => options.transform!(product)));\n      }\n\n      return {\n        success: true,\n        products,\n        stats: {\n          total: products.length,\n          imported: products.length,\n          failed: 0,\n          timeElapsed: Date.now() - startTime,\n        },\n      };\n    } catch (error: any) {\n      logger.error('AliExpress import error:', error);\n      return {\n        success: false,\n        products: [],\n        errors: [\n          {\n            code: 'IMPORT_FAILED',\n            message: error.message,\n          },\n        ],\n        stats: {\n          total: 0,\n          imported: 0,\n          failed: 1,\n          timeElapsed: Date.now() - startTime,\n        },\n      };\n    }\n  }\n\n  async exportProducts(products: MarketplaceProduct[], options: ExportOptions): Promise<ExportResult> {\n    const startTime = Date.now();\n\n    try {\n      if (options.filters) {\n        products = this.filterProducts(products, options.filters);\n      }\n\n      let exportedData: string;\n\n      switch (options.format) {\n        case 'csv':\n          exportedData = await this.exportToCSV(products, options);\n          break;\n        case 'json':\n          exportedData = JSON.stringify(products, null, 2);\n          break;\n        case 'xml':\n          exportedData = await this.exportToXML(products, options);\n          break;\n        default:\n          throw new Error(`Unsupported export format: ${options.format}`);\n      }\n\n      return {\n        success: true,\n        data: exportedData,\n        stats: {\n          total: products.length,\n          exported: products.length,\n          failed: 0,\n          timeElapsed: Date.now() - startTime,\n        },\n      };\n    } catch (error: any) {\n      logger.error('AliExpress export error:', error);\n      return {\n        success: false,\n        errors: [error.message],\n        stats: {\n          total: products.length,\n          exported: 0,\n          failed: products.length,\n          timeElapsed: Date.now() - startTime,\n        },\n      };\n    }\n  }\n\n  private async importFromFile(options: ImportOptions): Promise<MarketplaceProduct[]> {\n    if (!options.file) {\n      throw new Error('File is required for file import');\n    }\n\n    const content = await options.file.text();\n    const format = options.file.name.split('.').pop()?.toLowerCase();\n\n    switch (format) {\n      case 'csv':\n        return parseCSV(content);\n      case 'json':\n        return JSON.parse(content);\n      case 'xml':\n        return parseXML(content);\n      default:\n        throw new Error(`Unsupported file format: ${format}`);\n    }\n  }\n\n  private async importFromUrl(options: ImportOptions): Promise<MarketplaceProduct[]> {\n    if (!options.url) {\n      throw new Error('URL is required for URL import');\n    }\n\n    const response = await axios.get(options.url);\n    const content = response.data;\n\n    switch (options.format) {\n      case 'csv':\n        return parseCSV(content);\n      case 'json':\n        return content;\n      case 'xml':\n        return parseXML(content);\n      default:\n        throw new Error(`Unsupported format: ${options.format}`);\n    }\n  }\n\n  private filterProducts(products: MarketplaceProduct[], filters: ImportOptions['filters']): MarketplaceProduct[] {\n    if (!filters) return products;\n\n    return products.filter(product => {\n      if (filters.categories?.length && !filters.categories.some(c => product.categories.includes(c))) {\n        return false;\n      }\n      if (filters.priceRange) {\n        if (filters.priceRange.min && product.price < filters.priceRange.min) return false;\n        if (filters.priceRange.max && product.price > filters.priceRange.max) return false;\n      }\n      return true;\n    });\n  }\n\n  private async exportToCSV(products: MarketplaceProduct[], options: ExportOptions): Promise<string> {\n    const fields = this.getExportFields(options);\n    return createCSV(products, fields);\n  }\n\n  private async exportToXML(products: MarketplaceProduct[], options: ExportOptions): Promise<string> {\n    const fields = this.getExportFields(options);\n    return parseXML('products', products, fields);\n  }\n\n  private getExportFields(options: ExportOptions): string[] {\n    const allFields = [\n      'id', 'title', 'description', 'price', 'compareAtPrice',\n      'sku', 'quantity', 'images', 'categories', 'vendor',\n      'sourceUrl', 'sourceId', 'sourcePlatform',\n    ];\n\n    if (options.includeFields) {\n      return options.includeFields;\n    }\n\n    if (options.excludeFields) {\n      return allFields.filter(field => !options.excludeFields!.includes(field));\n    }\n\n    return allFields;\n  }\n}\n\nexport default AliExpressMarketplace;\n"],"mappingsaA,qBAAqB,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAArBH,qBAAA;;EAuMbI,OAAqC,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAArCE,QAAA;;;;;wEAlWkB;;;kCACkB;;;kCACX;;;kCAuBF;;;;;;;;;;;;;;;AAEvB,MAAMC,aAAA;EAGJC,YAAYC,MAAiC,EAAE;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;SAA3BK,MAAA,GAAAA,MAAA;EAA4B;EAEhD,MAAMC,aAAA,EAA8B;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAClC,IAAI;MACF,MAAMO,QAAA;MAAA;MAAA,CAAAT,cAAA,GAAAE,CAAA,QAAW,MAAMQ,MAAA,CAAAP,OAAK,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,CAACK,MAAM,OAAO,EAAE;QAC9DC,OAAA,EAAS,IAAI,CAACN,MAAM,CAACO,QAAQ;QAC7BC,UAAA,EAAY,IAAI,CAACR,MAAM,CAACS;MAC1B;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MAEA,IAAI,CAACe,WAAW,GAAGR,QAAA,CAASS,IAAI,CAACC,YAAY;IAC/C,EAAE,OAAOC,KAAA,EAAY;MAAA;MAAApB,cAAA,GAAAE,CAAA;MACnB,MAAM,IAAImB,KAAA,CAAM,uCAAuCD,KAAA,CAAME,OAAO;IACtE;EACF;EAEQC,eAAA,EAAiB;IAAA;IAAAvB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACvB,OAAO;MACLsB,aAAA,EAAe,UAAU,IAAI,CAACP,WAAW,EAAE;MAC3C,gBAAgB;IAClB;EACF;EAEA,MAAMQ,YAAYC,OAAa,EAAiC;IAAA;IAAA1B,cAAA,GAAAC,CAAA;IAC9D,MAAMQ,QAAA;IAAA;IAAA,CAAAT,cAAA,GAAAE,CAAA,QAAW,MAAM,IAAI,CAACyB,OAAO,CAAC,aAAa;MAC/CC,MAAA,EAAQ;MACRC,MAAA,EAAQH;IACV;IAAA;IAAA1B,cAAA,GAAAE,CAAA;IACA,OAAOO,QAAA,CAASqB,QAAQ,CAACC,GAAG,CAAC,IAAI,CAACC,0BAA0B;EAC9D;EAEA,MAAMC,gBAAgBC,EAAU,EAAsC;IAAA;IAAAlC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACpE,IAAI;MACF,MAAMO,QAAA;MAAA;MAAA,CAAAT,cAAA,GAAAE,CAAA,QAAW,MAAM,IAAI,CAACyB,OAAO,CAAC,YAAYO,EAAA,EAAI,EAAE;QACpDN,MAAA,EAAQ;MACV;MAAA;MAAA5B,cAAA,GAAAE,CAAA;MACA,OAAO,IAAI,CAAC8B,0BAA0B,CAACvB,QAAA,CAAS0B,OAAO;IACzD,EAAE,MAAM;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACN,OAAO;IACT;EACF;EAEA,MAAMkC,qBAAqBD,OAA2B,EAA2B;IAAA;IAAAnC,cAAA,GAAAC,CAAA;IAC/E,MAAMoC,eAAA;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA,QAAkC,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAC1C,KAAK,MAAMoC,KAAA,IAASH,OAAA,CAAQI,MAAM,EAAE;MAAA;MAAAvC,cAAA,GAAAE,CAAA;MAClC,IAAI;QACF,MAAMsC,WAAA;QAAA;QAAA,CAAAxC,cAAA,GAAAE,CAAA,QAAc,MAAM,IAAI,CAACuC,WAAW,CAACH,KAAA,CAAMI,GAAG;QAAA;QAAA1C,cAAA,GAAAE,CAAA;QACpDmC,eAAA,CAAgBM,IAAI,CAAC;UAAE,GAAGL,KAAK;UAAEI,GAAA,EAAKF;QAAY;MACpD,EAAE,OAAOpB,KAAA,EAAY;QAAA;QAAApB,cAAA,GAAAE,CAAA;QACnB0C,OAAA,CAAAC,MAAM,CAACzB,KAAK,CAAC,4BAA4BA,KAAA,CAAME,OAAO,EAAE;MAC1D;IACF;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IACA,OAAOmC,eAAA;EACT;EAEQL,2BAA2Bc,UAAe,EAAsB;IAAA;IAAA9C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACtE,OAAO;MACLgC,EAAA,EAAIY,UAAA,CAAWC,UAAU;MACzBC,KAAA,EAAOF,UAAA,CAAWG,OAAO;MACzBC,WAAA,EAAaJ,UAAA,CAAWI,WAAW;MACnCC,KAAA,EAAOC,MAAA,CAAON,UAAA,CAAWK,KAAK;MAC9BE,cAAA,EAAgBD,MAAA,CAAON,UAAA,CAAWQ,cAAc;MAChDC,GAAA,EAAKT,UAAA,CAAWC,UAAU;MAC1BS,QAAA,EAAUV,UAAA,CAAWW,qBAAqB;MAC1ClB,MAAA,EAAQO,UAAA,CAAWY,UAAU,CAAC3B,GAAG,CAAEW,GAAA,IAAiB;QAAA;QAAA1C,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA;UAClDwC,GAAA;UACAiB,QAAA,EAAU;UACVC,SAAA,EAAW;QACb;MAAA;MACAC,UAAA,EAAY,CAACf,UAAA,CAAWgB,aAAa,CAAC;MACtCC,MAAA,EAAQjB,UAAA,CAAWkB,UAAU;MAC7BC,SAAA,EAAWnB,UAAA,CAAWoB,WAAW;MACjCC,QAAA,EAAUrB,UAAA,CAAWC,UAAU;MAC/BqB,cAAA,EAAgB;MAChBC,QAAA;MAAU;MAAA,CAAArE,cAAA,GAAAsE,CAAA,UAAAxB,UAAA,CAAWyB,IAAI,EAAExC,GAAA,CAAI,IAAI,CAACyC,0BAA0B;MAAA;MAAA,CAAAxE,cAAA,GAAAsE,CAAA,UAAK,EAAE;MACrEG,UAAA;MAAY;MAAA,CAAAzE,cAAA,GAAAsE,CAAA,UAAAxB,UAAA,CAAW2B,UAAU;MAAA;MAAA,CAAAzE,cAAA,GAAAsE,CAAA,UAAI,CAAC;MACtCI,MAAA,EAAQ5B,UAAA,CAAW4B;IACrB;EACF;EAEQF,2BAA2BjB,GAAQ,EAAkB;IAAA;IAAAvD,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC3D,OAAO;MACLgC,EAAA,EAAIqB,GAAA,CAAIoB,MAAM;MACd3B,KAAA,EAAOO,GAAA,CAAIqB,gBAAgB,CAACC,IAAI,CAAC;MACjCtB,GAAA,EAAKA,GAAA,CAAIuB,QAAQ;MACjB3B,KAAA,EAAOC,MAAA,CAAOG,GAAA,CAAIJ,KAAK;MACvBK,QAAA,EAAUD,GAAA,CAAIwB,kBAAkB;MAChCC,OAAA,EAASzB,GAAA,CAAI0B,UAAU,CAACC,MAAM,CAAC,CAACC,GAAA,EAAUC,IAAA;QAAA;QAAApF,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QACxCiF,GAAG,CAACC,IAAA,CAAKC,IAAI,CAAC,GAAGD,IAAA,CAAKE,KAAK;QAAA;QAAAtF,cAAA,GAAAE,CAAA;QAC3B,OAAOiF,GAAA;MACT,GAAG,CAAC;IACN;EACF;EAEA,MAAcxD,QAAQ4D,QAAgB,EAAEP,OAAqD,EAAgB;IAAA;IAAAhF,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC3G,IAAI,CAAC,IAAI,CAACe,WAAW,EAAE;MAAA;MAAAjB,cAAA,GAAAsE,CAAA;MAAAtE,cAAA,GAAAE,CAAA;MACrB,MAAM,IAAI,CAACM,YAAY;IACzB;IAAA;IAAA;MAAAR,cAAA,GAAAsE,CAAA;IAAA;IAEA,MAAM5B,GAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAM,GAAG,IAAI,CAACK,MAAM,CAACK,MAAM,GAAG2E,QAAA,EAAU;IAAA;IAAAvF,cAAA,GAAAE,CAAA;IAE9C,IAAI;MACF,MAAMO,QAAA;MAAA;MAAA,CAAAT,cAAA,GAAAE,CAAA,QAAW,MAAM,IAAAQ,MAAA,CAAAP,OAAK,EAAC;QAC3ByB,MAAA,EAAQoD,OAAA,CAAQpD,MAAM;QACtBc,GAAA;QACA8C,OAAA,EAAS,IAAI,CAACjE,cAAc;QAC5BM,MAAA,EAAQmD,OAAA,CAAQnD,MAAM;QACtBX,IAAA,EAAM8D,OAAA,CAAQS;MAChB;MAAA;MAAAzF,cAAA,GAAAE,CAAA;MAEA,OAAOO,QAAA,CAASS,IAAI;IACtB,EAAE,OAAOE,KAAA,EAAY;MAAA;MAAApB,cAAA,GAAAE,CAAA;MACnB,IAAIkB,KAAA,CAAMX,QAAQ,EAAEiE,MAAA,KAAW,KAAK;QAAA;QAAA1E,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QAClC,MAAM,IAAI,CAACM,YAAY;QAAA;QAAAR,cAAA,GAAAE,CAAA;QACvB,OAAO,IAAI,CAACyB,OAAO,CAAC4D,QAAA,EAAUP,OAAA;MAChC;MAAA;MAAA;QAAAhF,cAAA,GAAAsE,CAAA;MAAA;MAAAtE,cAAA,GAAAE,CAAA;MACA,MAAM,IAAImB,KAAA,CAAM,yBAAyBD,KAAA,CAAME,OAAO,EAAE;IAC1D;EACF;EAEA,MAAcmB,YAAYC,GAAW,EAAmB;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACtD;IACA,OAAOwC,GAAA;EACT;AACF;AAEO,MAAM3C,qBAAA;EAGXO,YAAYC,MAAiC,EAAE;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;SAA3BK,MAAA,GAAAA,MAAA;IAAA;IAAAP,cAAA,GAAAE,CAAA;IAClB,IAAI,CAACwF,GAAG,GAAG,IAAIrF,aAAA,CAAcE,MAAA;EAC/B;EAEA,MAAMoF,eAAeX,OAAsB,EAAyB;IAAA;IAAAhF,cAAA,GAAAC,CAAA;IAClE,MAAM2F,SAAA;IAAA;IAAA,CAAA5F,cAAA,GAAAE,CAAA,QAAY2F,IAAA,CAAKC,GAAG;IAC1B,MAAMC,MAAA;IAAA;IAAA,CAAA/F,cAAA,GAAAE,CAAA,QAAwB,EAAE;IAChC,IAAI4B,QAAA;IAAA;IAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAiC,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEvC,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF,QAAQ8E,OAAA,CAAQgB,MAAM;QACpB,KAAK;UAAA;UAAAhG,cAAA,GAAAsE,CAAA;UAAAtE,cAAA,GAAAE,CAAA;UACH4B,QAAA,GAAW,MAAM,IAAI,CAAC4D,GAAG,CAACjE,WAAW,CAACuD,OAAA,CAAQtD,OAAO;UAAA;UAAA1B,cAAA,GAAAE,CAAA;UACrD;QACF,KAAK;UAAA;UAAAF,cAAA,GAAAsE,CAAA;UAAAtE,cAAA,GAAAE,CAAA;UACH4B,QAAA,GAAW,MAAM,IAAI,CAACmE,cAAc,CAACjB,OAAA;UAAA;UAAAhF,cAAA,GAAAE,CAAA;UACrC;QACF,KAAK;UAAA;UAAAF,cAAA,GAAAsE,CAAA;UAAAtE,cAAA,GAAAE,CAAA;UACH4B,QAAA,GAAW,MAAM,IAAI,CAACoE,aAAa,CAAClB,OAAA;UAAA;UAAAhF,cAAA,GAAAE,CAAA;UACpC;QACF;UAAA;UAAAF,cAAA,GAAAsE,CAAA;UAAAtE,cAAA,GAAAE,CAAA;UACE,MAAM,IAAImB,KAAA,CAAM;MACpB;MAAA;MAAArB,cAAA,GAAAE,CAAA;MAEA,IAAI8E,OAAA,CAAQtD,OAAO,EAAE;QAAA;QAAA1B,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACnB4B,QAAA,GAAW,IAAI,CAACqE,cAAc,CAACrE,QAAA,EAAUkD,OAAA,CAAQtD,OAAO;MAC1D;MAAA;MAAA;QAAA1B,cAAA,GAAAsE,CAAA;MAAA;MAAAtE,cAAA,GAAAE,CAAA;MAEA,IAAI8E,OAAA,CAAQoB,SAAS,EAAE;QAAA;QAAApG,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACrB4B,QAAA,GAAW,MAAMuE,OAAA,CAAQC,GAAG,CAACxE,QAAA,CAASC,GAAG,CAACI,OAAA,IAAW;UAAA;UAAAnC,cAAA,GAAAC,CAAA;UAAAD,cAAA,GAAAE,CAAA;UAAA,OAAA8E,OAAA,CAAQoB,SAAS,CAAEjE,OAAA;QAAA;MAC1E;MAAA;MAAA;QAAAnC,cAAA,GAAAsE,CAAA;MAAA;MAAAtE,cAAA,GAAAE,CAAA;MAEA,OAAO;QACLqG,OAAA,EAAS;QACTzE,QAAA;QACA0E,KAAA,EAAO;UACLC,KAAA,EAAO3E,QAAA,CAAS4E,MAAM;UACtBC,QAAA,EAAU7E,QAAA,CAAS4E,MAAM;UACzBE,MAAA,EAAQ;UACRC,WAAA,EAAahB,IAAA,CAAKC,GAAG,KAAKF;QAC5B;MACF;IACF,EAAE,OAAOxE,KAAA,EAAY;MAAA;MAAApB,cAAA,GAAAE,CAAA;MACnB0C,OAAA,CAAAC,MAAM,CAACzB,KAAK,CAAC,4BAA4BA,KAAA;MAAA;MAAApB,cAAA,GAAAE,CAAA;MACzC,OAAO;QACLqG,OAAA,EAAS;QACTzE,QAAA,EAAU,EAAE;QACZiE,MAAA,EAAQ,CACN;UACEe,IAAA,EAAM;UACNxF,OAAA,EAASF,KAAA,CAAME;QACjB,EACD;QACDkF,KAAA,EAAO;UACLC,KAAA,EAAO;UACPE,QAAA,EAAU;UACVC,MAAA,EAAQ;UACRC,WAAA,EAAahB,IAAA,CAAKC,GAAG,KAAKF;QAC5B;MACF;IACF;EACF;EAEA,MAAMmB,eAAejF,QAA8B,EAAEkD,OAAsB,EAAyB;IAAA;IAAAhF,cAAA,GAAAC,CAAA;IAClG,MAAM2F,SAAA;IAAA;IAAA,CAAA5F,cAAA,GAAAE,CAAA,QAAY2F,IAAA,CAAKC,GAAG;IAAA;IAAA9F,cAAA,GAAAE,CAAA;IAE1B,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF,IAAI8E,OAAA,CAAQtD,OAAO,EAAE;QAAA;QAAA1B,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACnB4B,QAAA,GAAW,IAAI,CAACqE,cAAc,CAACrE,QAAA,EAAUkD,OAAA,CAAQtD,OAAO;MAC1D;MAAA;MAAA;QAAA1B,cAAA,GAAAsE,CAAA;MAAA;MAEA,IAAI0C,YAAA;MAAA;MAAAhH,cAAA,GAAAE,CAAA;MAEJ,QAAQ8E,OAAA,CAAQiC,MAAM;QACpB,KAAK;UAAA;UAAAjH,cAAA,GAAAsE,CAAA;UAAAtE,cAAA,GAAAE,CAAA;UACH8G,YAAA,GAAe,MAAM,IAAI,CAACE,WAAW,CAACpF,QAAA,EAAUkD,OAAA;UAAA;UAAAhF,cAAA,GAAAE,CAAA;UAChD;QACF,KAAK;UAAA;UAAAF,cAAA,GAAAsE,CAAA;UAAAtE,cAAA,GAAAE,CAAA;UACH8G,YAAA,GAAeG,IAAA,CAAKC,SAAS,CAACtF,QAAA,EAAU,MAAM;UAAA;UAAA9B,cAAA,GAAAE,CAAA;UAC9C;QACF,KAAK;UAAA;UAAAF,cAAA,GAAAsE,CAAA;UAAAtE,cAAA,GAAAE,CAAA;UACH8G,YAAA,GAAe,MAAM,IAAI,CAACK,WAAW,CAACvF,QAAA,EAAUkD,OAAA;UAAA;UAAAhF,cAAA,GAAAE,CAAA;UAChD;QACF;UAAA;UAAAF,cAAA,GAAAsE,CAAA;UAAAtE,cAAA,GAAAE,CAAA;UACE,MAAM,IAAImB,KAAA,CAAM,8BAA8B2D,OAAA,CAAQiC,MAAM,EAAE;MAClE;MAAA;MAAAjH,cAAA,GAAAE,CAAA;MAEA,OAAO;QACLqG,OAAA,EAAS;QACTrF,IAAA,EAAM8F,YAAA;QACNR,KAAA,EAAO;UACLC,KAAA,EAAO3E,QAAA,CAAS4E,MAAM;UACtBY,QAAA,EAAUxF,QAAA,CAAS4E,MAAM;UACzBE,MAAA,EAAQ;UACRC,WAAA,EAAahB,IAAA,CAAKC,GAAG,KAAKF;QAC5B;MACF;IACF,EAAE,OAAOxE,KAAA,EAAY;MAAA;MAAApB,cAAA,GAAAE,CAAA;MACnB0C,OAAA,CAAAC,MAAM,CAACzB,KAAK,CAAC,4BAA4BA,KAAA;MAAA;MAAApB,cAAA,GAAAE,CAAA;MACzC,OAAO;QACLqG,OAAA,EAAS;QACTR,MAAA,EAAQ,CAAC3E,KAAA,CAAME,OAAO,CAAC;QACvBkF,KAAA,EAAO;UACLC,KAAA,EAAO3E,QAAA,CAAS4E,MAAM;UACtBY,QAAA,EAAU;UACVV,MAAA,EAAQ9E,QAAA,CAAS4E,MAAM;UACvBG,WAAA,EAAahB,IAAA,CAAKC,GAAG,KAAKF;QAC5B;MACF;IACF;EACF;EAEA,MAAcK,eAAejB,OAAsB,EAAiC;IAAA;IAAAhF,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAClF,IAAI,CAAC8E,OAAA,CAAQuC,IAAI,EAAE;MAAA;MAAAvH,cAAA,GAAAsE,CAAA;MAAAtE,cAAA,GAAAE,CAAA;MACjB,MAAM,IAAImB,KAAA,CAAM;IAClB;IAAA;IAAA;MAAArB,cAAA,GAAAsE,CAAA;IAAA;IAEA,MAAMkD,OAAA;IAAA;IAAA,CAAAxH,cAAA,GAAAE,CAAA,QAAU,MAAM8E,OAAA,CAAQuC,IAAI,CAACE,IAAI;IACvC,MAAMR,MAAA;IAAA;IAAA,CAAAjH,cAAA,GAAAE,CAAA,QAAS8E,OAAA,CAAQuC,IAAI,CAAClC,IAAI,CAACqC,KAAK,CAAC,KAAKC,GAAG,IAAIC,WAAA;IAAA;IAAA5H,cAAA,GAAAE,CAAA;IAEnD,QAAQ+G,MAAA;MACN,KAAK;QAAA;QAAAjH,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACH,OAAO,IAAA2H,IAAA,CAAAC,QAAQ,EAACN,OAAA;MAClB,KAAK;QAAA;QAAAxH,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACH,OAAOiH,IAAA,CAAKY,KAAK,CAACP,OAAA;MACpB,KAAK;QAAA;QAAAxH,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACH,OAAO,IAAA8H,IAAA,CAAAC,QAAQ,EAACT,OAAA;MAClB;QAAA;QAAAxH,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACE,MAAM,IAAImB,KAAA,CAAM,4BAA4B4F,MAAA,EAAQ;IACxD;EACF;EAEA,MAAcf,cAAclB,OAAsB,EAAiC;IAAA;IAAAhF,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACjF,IAAI,CAAC8E,OAAA,CAAQtC,GAAG,EAAE;MAAA;MAAA1C,cAAA,GAAAsE,CAAA;MAAAtE,cAAA,GAAAE,CAAA;MAChB,MAAM,IAAImB,KAAA,CAAM;IAClB;IAAA;IAAA;MAAArB,cAAA,GAAAsE,CAAA;IAAA;IAEA,MAAM7D,QAAA;IAAA;IAAA,CAAAT,cAAA,GAAAE,CAAA,QAAW,MAAMQ,MAAA,CAAAP,OAAK,CAAC+H,GAAG,CAAClD,OAAA,CAAQtC,GAAG;IAC5C,MAAM8E,OAAA;IAAA;IAAA,CAAAxH,cAAA,GAAAE,CAAA,QAAUO,QAAA,CAASS,IAAI;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IAE7B,QAAQ8E,OAAA,CAAQiC,MAAM;MACpB,KAAK;QAAA;QAAAjH,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACH,OAAO,IAAA2H,IAAA,CAAAC,QAAQ,EAACN,OAAA;MAClB,KAAK;QAAA;QAAAxH,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACH,OAAOsH,OAAA;MACT,KAAK;QAAA;QAAAxH,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACH,OAAO,IAAA8H,IAAA,CAAAC,QAAQ,EAACT,OAAA;MAClB;QAAA;QAAAxH,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACE,MAAM,IAAImB,KAAA,CAAM,uBAAuB2D,OAAA,CAAQiC,MAAM,EAAE;IAC3D;EACF;EAEQd,eAAerE,QAA8B,EAAEJ,OAAiC,EAAwB;IAAA;IAAA1B,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC9G,IAAI,CAACwB,OAAA,EAAS;MAAA;MAAA1B,cAAA,GAAAsE,CAAA;MAAAtE,cAAA,GAAAE,CAAA;MAAA,OAAO4B,QAAA;IAAA;IAAA;IAAA;MAAA9B,cAAA,GAAAsE,CAAA;IAAA;IAAAtE,cAAA,GAAAE,CAAA;IAErB,OAAO4B,QAAA,CAASqG,MAAM,CAAChG,OAAA;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MACrB;MAAI;MAAA,CAAAF,cAAA,GAAAsE,CAAA,WAAA5C,OAAA,CAAQmC,UAAU,EAAE6C,MAAA;MAAA;MAAA,CAAA1G,cAAA,GAAAsE,CAAA,WAAU,CAAC5C,OAAA,CAAQmC,UAAU,CAACuE,IAAI,CAACC,CAAA,IAAK;QAAA;QAAArI,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAiC,OAAA,CAAQ0B,UAAU,CAACyE,QAAQ,CAACD,CAAA;MAAA,KAAK;QAAA;QAAArI,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QAC/F,OAAO;MACT;MAAA;MAAA;QAAAF,cAAA,GAAAsE,CAAA;MAAA;MAAAtE,cAAA,GAAAE,CAAA;MACA,IAAIwB,OAAA,CAAQ6G,UAAU,EAAE;QAAA;QAAAvI,cAAA,GAAAsE,CAAA;QAAAtE,cAAA,GAAAE,CAAA;QACtB;QAAI;QAAA,CAAAF,cAAA,GAAAsE,CAAA,WAAA5C,OAAA,CAAQ6G,UAAU,CAACC,GAAG;QAAA;QAAA,CAAAxI,cAAA,GAAAsE,CAAA,WAAInC,OAAA,CAAQgB,KAAK,GAAGzB,OAAA,CAAQ6G,UAAU,CAACC,GAAG,GAAE;UAAA;UAAAxI,cAAA,GAAAsE,CAAA;UAAAtE,cAAA,GAAAE,CAAA;UAAA,OAAO;QAAA;QAAA;QAAA;UAAAF,cAAA,GAAAsE,CAAA;QAAA;QAAAtE,cAAA,GAAAE,CAAA;QAC7E;QAAI;QAAA,CAAAF,cAAA,GAAAsE,CAAA,WAAA5C,OAAA,CAAQ6G,UAAU,CAACE,GAAG;QAAA;QAAA,CAAAzI,cAAA,GAAAsE,CAAA,WAAInC,OAAA,CAAQgB,KAAK,GAAGzB,OAAA,CAAQ6G,UAAU,CAACE,GAAG,GAAE;UAAA;UAAAzI,cAAA,GAAAsE,CAAA;UAAAtE,cAAA,GAAAE,CAAA;UAAA,OAAO;QAAA;QAAA;QAAA;UAAAF,cAAA,GAAAsE,CAAA;QAAA;MAC/E;MAAA;MAAA;QAAAtE,cAAA,GAAAsE,CAAA;MAAA;MAAAtE,cAAA,GAAAE,CAAA;MACA,OAAO;IACT;EACF;EAEA,MAAcgH,YAAYpF,QAA8B,EAAEkD,OAAsB,EAAmB;IAAA;IAAAhF,cAAA,GAAAC,CAAA;IACjG,MAAMyI,MAAA;IAAA;IAAA,CAAA1I,cAAA,GAAAE,CAAA,SAAS,IAAI,CAACyI,eAAe,CAAC3D,OAAA;IAAA;IAAAhF,cAAA,GAAAE,CAAA;IACpC,OAAO,IAAA2H,IAAA,CAAAe,SAAS,EAAC9G,QAAA,EAAU4G,MAAA;EAC7B;EAEA,MAAcrB,YAAYvF,QAA8B,EAAEkD,OAAsB,EAAmB;IAAA;IAAAhF,cAAA,GAAAC,CAAA;IACjG,MAAMyI,MAAA;IAAA;IAAA,CAAA1I,cAAA,GAAAE,CAAA,SAAS,IAAI,CAACyI,eAAe,CAAC3D,OAAA;IAAA;IAAAhF,cAAA,GAAAE,CAAA;IACpC,OAAO,IAAA8H,IAAA,CAAAC,QAAQ,EAAC,YAAYnG,QAAA,EAAU4G,MAAA;EACxC;EAEQC,gBAAgB3D,OAAsB,EAAY;IAAA;IAAAhF,cAAA,GAAAC,CAAA;IACxD,MAAM4I,SAAA;IAAA;IAAA,CAAA7I,cAAA,GAAAE,CAAA,SAAY,CAChB,MAAM,SAAS,eAAe,SAAS,kBACvC,OAAO,YAAY,UAAU,cAAc,UAC3C,aAAa,YAAY,iBAC1B;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAED,IAAI8E,OAAA,CAAQ8D,aAAa,EAAE;MAAA;MAAA9I,cAAA,GAAAsE,CAAA;MAAAtE,cAAA,GAAAE,CAAA;MACzB,OAAO8E,OAAA,CAAQ8D,aAAa;IAC9B;IAAA;IAAA;MAAA9I,cAAA,GAAAsE,CAAA;IAAA;IAAAtE,cAAA,GAAAE,CAAA;IAEA,IAAI8E,OAAA,CAAQ+D,aAAa,EAAE;MAAA;MAAA/I,cAAA,GAAAsE,CAAA;MAAAtE,cAAA,GAAAE,CAAA;MACzB,OAAO2I,SAAA,CAAUV,MAAM,CAACa,KAAA,IAAS;QAAA;QAAAhJ,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,QAAC8E,OAAA,CAAQ+D,aAAa,CAAET,QAAQ,CAACU,KAAA;MAAA;IACpE;IAAA;IAAA;MAAAhJ,cAAA,GAAAsE,CAAA;IAAA;IAAAtE,cAAA,GAAAE,CAAA;IAEA,OAAO2I,SAAA;EACT;AACF;MAEAzI,QAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,SAAeH,qBAAA","ignoreList":[]}