{"version":3,"names":["AppError","cov_27awt8chkc","f","s","handleError","handleRequestError","Error","constructor","message","code","b","statusCode","details","name","timestamp","Date","toISOString","captureStackTrace","error","context","user","process","env","CURRENT_USER","_errors","UnauthorizedError","_logging","customLogger","security","ForbiddenError","unknownError","stack","String","appError","success"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/error-handler.ts"],"sourcesContent":["import { customLogger as logger } from '@/lib/api/services/logging';\nimport { UnauthorizedError, ForbiddenError } from '@/types/errors';\n\nexport interface AppErrorOptions {\n  message: string;\n  code?: string;\n  statusCode?: number;\n  details?: any;\n}\n\nexport class AppError extends Error {\n  public readonly code: string;\n  public readonly statusCode: number;\n  public readonly details: any;\n  public readonly timestamp: string;\n  public readonly requestId?: string;\n\n  constructor({ message, code = 'INTERNAL_ERROR', statusCode = 500, details }: AppErrorOptions) {\n    super(message);\n    this.name = 'AppError';\n    this.code = code;\n    this.statusCode = statusCode;\n    this.details = details;\n    this.timestamp = new Date().toISOString();\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport const handleError = (error: unknown, context: string) => {\n  // Get current user information\n  const user = process.env.CURRENT_USER || 'system';\n  const timestamp = new Date().toISOString();\n\n  // Handle specific error types\n  if (error instanceof UnauthorizedError) {\n    logger.security('Unauthorized access attempt', {\n      context,\n      error: error.message,\n      user,\n      timestamp\n    });\n    return new AppError({\n      message: error.message,\n      code: 'UNAUTHORIZED',\n      statusCode: 401\n    });\n  }\n\n  if (error instanceof ForbiddenError) {\n    logger.security('Forbidden access attempt', {\n      context,\n      error: error.message,\n      user,\n      timestamp\n    });\n    return new AppError({\n      message: error.message,\n      code: 'FORBIDDEN',\n      statusCode: 403\n    });\n  }\n\n  if (error instanceof AppError) {\n    logger.error('Application error occurred', {\n      context,\n      error: {\n        message: error.message,\n        code: error.code,\n        statusCode: error.statusCode,\n        details: error.details\n      },\n      user,\n      timestamp\n    });\n    return error;\n  }\n\n  // Handle unknown errors\n  const unknownError = new AppError({\n    message: error instanceof Error ? error.message : 'An unexpected error occurred',\n    statusCode: 500\n  });\n\n  logger.error('Unhandled error occurred', {\n    context,\n    error: error instanceof Error ? {\n      message: error.message,\n      stack: error.stack\n    } : String(error),\n    user,\n    timestamp\n  });\n\n  return unknownError;\n};\n\nexport const handleRequestError = (error: unknown, context: string) => {\n  const appError = handleError(error, context);\n  \n  return {\n    success: false,\n    error: {\n      message: appError.message,\n      code: appError.code,\n      statusCode: appError.statusCode,\n      timestamp: appError.timestamp\n    }\n  };\n};"],"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","ignoreList":[]}