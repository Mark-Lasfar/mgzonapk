1da5b7245351f8c06a1fae755ad1d3b8
"use strict";

/* istanbul ignore next */
function cov_ph8nw53p0() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/verification.ts";
  var hash = "3b8b4540df11c630182394a81bca93cc6008b6fa";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/verification.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 36
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 28
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 28
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 29
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 30
        }
      },
      "11": {
        start: {
          line: 34,
          column: 19
        },
        end: {
          line: 34,
          column: 42
        }
      },
      "12": {
        start: {
          line: 36,
          column: 26
        },
        end: {
          line: 103,
          column: 1
        }
      },
      "13": {
        start: {
          line: 50,
          column: 31
        },
        end: {
          line: 50,
          column: 45
        }
      },
      "14": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 48
        }
      },
      "15": {
        start: {
          line: 58,
          column: 31
        },
        end: {
          line: 58,
          column: 45
        }
      },
      "16": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 48
        }
      },
      "17": {
        start: {
          line: 90,
          column: 31
        },
        end: {
          line: 90,
          column: 45
        }
      },
      "18": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 48
        }
      },
      "19": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "20": {
        start: {
          line: 107,
          column: 25
        },
        end: {
          line: 107,
          column: 49
        }
      },
      "21": {
        start: {
          line: 108,
          column: 23
        },
        end: {
          line: 108,
          column: 51
        }
      },
      "22": {
        start: {
          line: 110,
          column: 30
        },
        end: {
          line: 110,
          column: 54
        }
      },
      "23": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 61
        }
      },
      "24": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 61
        }
      },
      "25": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 120,
          column: 10
        }
      },
      "26": {
        start: {
          line: 125,
          column: 19
        },
        end: {
          line: 125,
          column: 55
        }
      },
      "27": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 134,
          column: 5
        }
      },
      "28": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 41
        }
      },
      "29": {
        start: {
          line: 128,
          column: 35
        },
        end: {
          line: 128,
          column: 78
        }
      },
      "30": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 33
        }
      },
      "31": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 20
        }
      },
      "32": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 33
        }
      },
      "33": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 38
        }
      },
      "34": {
        start: {
          line: 138,
          column: 19
        },
        end: {
          line: 138,
          column: 42
        }
      },
      "35": {
        start: {
          line: 139,
          column: 26
        },
        end: {
          line: 139,
          column: 28
        }
      },
      "36": {
        start: {
          line: 140,
          column: 24
        },
        end: {
          line: 140,
          column: 25
        }
      },
      "37": {
        start: {
          line: 141,
          column: 25
        },
        end: {
          line: 141,
          column: 26
        }
      },
      "38": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "39": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 45
        }
      },
      "40": {
        start: {
          line: 144,
          column: 28
        },
        end: {
          line: 144,
          column: 45
        }
      },
      "41": {
        start: {
          line: 145,
          column: 22
        },
        end: {
          line: 145,
          column: 47
        }
      },
      "42": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "43": {
        start: {
          line: 147,
          column: 26
        },
        end: {
          line: 147,
          column: 41
        }
      },
      "44": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "45": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 25
        }
      },
      "46": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 45
        }
      },
      "47": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 48
        }
      },
      "48": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 153,
          column: 48
        }
      },
      "49": {
        start: {
          line: 157,
          column: 23
        },
        end: {
          line: 157,
          column: 78
        }
      },
      "50": {
        start: {
          line: 158,
          column: 21
        },
        end: {
          line: 158,
          column: 38
        }
      },
      "51": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 169,
          column: 6
        }
      },
      "52": {
        start: {
          line: 172,
          column: 17
        },
        end: {
          line: 172,
          column: 34
        }
      },
      "53": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 173,
          column: 34
        }
      },
      "54": {
        start: {
          line: 176,
          column: 4
        },
        end: {
          line: 176,
          column: 40
        }
      },
      "55": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 179,
          column: 44
        }
      },
      "56": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 182,
          column: 68
        }
      },
      "57": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 185,
          column: 42
        }
      },
      "58": {
        start: {
          line: 187,
          column: 29
        },
        end: {
          line: 193,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 12,
            column: 27
          }
        },
        loc: {
          start: {
            line: 12,
            column: 37
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 15,
            column: 27
          }
        },
        loc: {
          start: {
            line: 15,
            column: 37
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 18
          },
          end: {
            line: 18,
            column: 19
          }
        },
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 28
          },
          end: {
            line: 21,
            column: 29
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 18
          },
          end: {
            line: 24,
            column: 19
          }
        },
        loc: {
          start: {
            line: 24,
            column: 29
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 19
          },
          end: {
            line: 27,
            column: 20
          }
        },
        loc: {
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 30,
            column: 21
          }
        },
        loc: {
          start: {
            line: 30,
            column: 31
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 49,
            column: 23
          },
          end: {
            line: 49,
            column: 24
          }
        },
        loc: {
          start: {
            line: 49,
            column: 31
          },
          end: {
            line: 52,
            column: 13
          }
        },
        line: 49
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 57,
            column: 23
          },
          end: {
            line: 57,
            column: 24
          }
        },
        loc: {
          start: {
            line: 57,
            column: 31
          },
          end: {
            line: 60,
            column: 13
          }
        },
        line: 57
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 89,
            column: 23
          },
          end: {
            line: 89,
            column: 24
          }
        },
        loc: {
          start: {
            line: 89,
            column: 31
          },
          end: {
            line: 92,
            column: 13
          }
        },
        line: 89
      },
      "11": {
        name: "verifyDocument",
        decl: {
          start: {
            line: 104,
            column: 15
          },
          end: {
            line: 104,
            column: 29
          }
        },
        loc: {
          start: {
            line: 104,
            column: 49
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 104
      },
      "12": {
        name: "performOCR",
        decl: {
          start: {
            line: 124,
            column: 15
          },
          end: {
            line: 124,
            column: 25
          }
        },
        loc: {
          start: {
            line: 124,
            column: 34
          },
          end: {
            line: 135,
            column: 1
          }
        },
        line: 124
      },
      "13": {
        name: "verifyDocumentText",
        decl: {
          start: {
            line: 137,
            column: 15
          },
          end: {
            line: 137,
            column: 33
          }
        },
        loc: {
          start: {
            line: 137,
            column: 46
          },
          end: {
            line: 170,
            column: 1
          }
        },
        line: 137
      },
      "14": {
        name: "validateDate",
        decl: {
          start: {
            line: 171,
            column: 9
          },
          end: {
            line: 171,
            column: 21
          }
        },
        loc: {
          start: {
            line: 171,
            column: 31
          },
          end: {
            line: 174,
            column: 1
          }
        },
        line: 171
      },
      "15": {
        name: "validateDocumentNumber",
        decl: {
          start: {
            line: 175,
            column: 9
          },
          end: {
            line: 175,
            column: 31
          }
        },
        loc: {
          start: {
            line: 175,
            column: 37
          },
          end: {
            line: 177,
            column: 1
          }
        },
        line: 175
      },
      "16": {
        name: "validateName",
        decl: {
          start: {
            line: 178,
            column: 9
          },
          end: {
            line: 178,
            column: 21
          }
        },
        loc: {
          start: {
            line: 178,
            column: 28
          },
          end: {
            line: 180,
            column: 1
          }
        },
        line: 178
      },
      "17": {
        name: "generateRecoveryCode",
        decl: {
          start: {
            line: 181,
            column: 9
          },
          end: {
            line: 181,
            column: 29
          }
        },
        loc: {
          start: {
            line: 181,
            column: 32
          },
          end: {
            line: 183,
            column: 1
          }
        },
        line: 181
      },
      "18": {
        name: "validateTaxId",
        decl: {
          start: {
            line: 184,
            column: 9
          },
          end: {
            line: 184,
            column: 22
          }
        },
        loc: {
          start: {
            line: 184,
            column: 30
          },
          end: {
            line: 186,
            column: 1
          }
        },
        line: 184
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "1": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "2": {
        loc: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 17
          }
        }, {
          start: {
            line: 146,
            column: 21
          },
          end: {
            line: 146,
            column: 29
          }
        }],
        line: 146
      },
      "3": {
        loc: {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "4": {
        loc: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 31
          }
        }, {
          start: {
            line: 149,
            column: 35
          },
          end: {
            line: 149,
            column: 58
          }
        }],
        line: 149
      },
      "5": {
        loc: {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "6": {
        loc: {
          start: {
            line: 157,
            column: 23
          },
          end: {
            line: 157,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 157,
            column: 44
          },
          end: {
            line: 157,
            column: 74
          }
        }, {
          start: {
            line: 157,
            column: 77
          },
          end: {
            line: 157,
            column: 78
          }
        }],
        line: 157
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/verification.ts"],
      sourcesContent: ["import { createWorker } from 'tesseract.js';\n\ninterface VerificationResult {\n  verified: boolean;\n  confidence: number;\n  details: Record<string, any>;\n  error?: string;\n}\n\ninterface DocumentFields {\n  [key: string]: {\n    pattern: RegExp;\n    required: boolean;\n    validator?: (value: string) => boolean;\n  };\n}\n\n// Define document field patterns for different document types.\nconst DOCUMENT_PATTERNS = {\n  businessLicense: {\n    businessName: {\n      pattern: /(?:business|company|enterprise)\\s*(?:name)?[:]\\s*([A-Za-z0-9\\s.,&-]+)/i,\n      required: true,\n    },\n    licenseNumber: {\n      pattern: /(?:license|permit|registration)\\s*(?:number|#|no)[:.\\s]*([A-Z0-9-]+)/i,\n      required: true,\n    },\n    issueDate: {\n      pattern: /(?:issue|issued)\\s*(?:date|on)[:]\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})/i,\n      required: true,\n      validator: (date: string) => {\n        const parsed = new Date(date);\n        return !isNaN(parsed.getTime());\n      },\n    },\n    expiryDate: {\n      pattern: /(?:expiry|expiration|valid until)[:]\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})/i,\n      required: true,\n      validator: (date: string) => {\n        const parsed = new Date(date);\n        return !isNaN(parsed.getTime());\n      },\n    },\n  },\n  taxDocument: {\n    taxId: {\n      pattern: /(?:tax\\s*id|ein|tin)[:.\\s]*([A-Z0-9-]+)/i,\n      required: true,\n    },\n    businessName: {\n      pattern: /(?:business|company|enterprise)\\s*name[:]\\s*([A-Za-z0-9\\s.,&-]+)/i,\n      required: true,\n    },\n    taxPeriod: {\n      pattern: /(?:tax\\s*period|period|year)[:]\\s*(\\d{4}(?:-\\d{2,4})?)/i,\n      required: true,\n    },\n    amount: {\n      pattern: /(?:amount|total|sum)[:]\\s*[\\$\u20AC\xA3]?\\s*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/i,\n      required: false,\n    },\n  },\n  identityProof: {\n    fullName: {\n      pattern: /(?:name|full\\s*name)[:]\\s*([A-Za-z\\s.-]+)/i,\n      required: true,\n    },\n    dateOfBirth: {\n      pattern: /(?:date\\s*of\\s*birth|dob|born)[:]\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})/i,\n      required: true,\n      validator: (date: string) => {\n        const parsed = new Date(date);\n        return !isNaN(parsed.getTime());\n      },\n    },\n    documentNumber: {\n      pattern: /(?:document|id|passport)\\s*(?:number|#|no)[:.\\s]*([A-Z0-9-]+)/i,\n      required: true,\n    },\n    nationality: {\n      pattern: /(?:nationality|country)[:]\\s*([A-Za-z\\s]+)/i,\n      required: false,\n    },\n  },\n} as const;\n\n// Main function to download a document from a URL, perform OCR, and verify its text.\nexport async function verifyDocument(\n  documentUrl: string,\n  type: 'businessLicense' | 'taxDocument' | 'identityProof'\n): Promise<VerificationResult> {\n  try {\n    // Download document from the provided URL.\n    const response = await fetch(documentUrl);\n    const buffer = await response.arrayBuffer();\n\n    // Perform OCR on the downloaded document.\n    const extractedText = await performOCR(buffer);\n\n    // Verify the extracted text against the field patterns.\n    return await verifyDocumentText(extractedText, type);\n  } catch (error) {\n    console.error('Document verification error:', error);\n    return {\n      verified: false,\n      confidence: 0,\n      details: {},\n      error: 'Failed to verify document',\n    };\n  }\n}\n\n// Helper to perform OCR using Tesseract.js.\nasync function performOCR(buffer: ArrayBuffer): Promise<string> {\n  const worker = await createWorker();\n\n  try {\n    await worker.reinitialize('eng');\n    const {\n      data: { text },\n    } = await worker.recognize(Buffer.from(buffer));\n    await worker.terminate();\n    return text;\n  } catch (error) {\n    await worker.terminate();\n    throw new Error('OCR failed');\n  }\n}\n\n// Matches and validates document fields in extracted text.\nasync function verifyDocumentText(\n  text: string,\n  type: keyof typeof DOCUMENT_PATTERNS\n): Promise<VerificationResult> {\n  const fields = DOCUMENT_PATTERNS[type];\n  const extractedData: Record<string, string> = {};\n  let matchedFields = 0;\n  let requiredFields = 0;\n\n  // Process each field defined in the pattern.\n  for (const [fieldName, field] of Object.entries(fields)) {\n    if (field.required) requiredFields++;\n\n    const match = text.match(field.pattern);\n    if (match && match[1]) {\n      const value = match[1].trim();\n\n      // If a validator is provided, use it.\n      if (field.validator && !field.validator(value)) {\n        continue;\n      }\n\n      extractedData[fieldName] = value;\n      if (field.required) matchedFields++;\n    }\n  }\n\n  // Calculate a confidence score based on required fields.\n  const confidence = requiredFields > 0 ? matchedFields / requiredFields : 0;\n  const verified = confidence >= 0.7; // 70% threshold for verification.\n\n  return {\n    verified,\n    confidence,\n    details: {\n      documentType: type,\n      extractedData,\n      matchedFields,\n      requiredFields,\n      verificationDate: new Date().toISOString(),\n    },\n  };\n}\n\n// Additional helper validators.\nexport function validateDate(dateStr: string): boolean {\n  const date = new Date(dateStr);\n  return !isNaN(date.getTime());\n}\n\nexport function validateDocumentNumber(num: string): boolean {\n  return /^[A-Z0-9-]{6,}$/i.test(num);\n}\n\nexport function validateName(name: string): boolean {\n  return /^[A-Za-z\\s.-]{2,}$/i.test(name);\n}\n\nexport function generateRecoveryCode() {\n  return Math.random().toString(36).substring(2, 8).toUpperCase();\n}\n\nexport function validateTaxId(taxId: string): boolean {\n  return /^[A-Z0-9-]{9,}$/i.test(taxId);\n}\n\nexport const DocumentVerification = {\n  verifyDocument,\n  validateDate,\n  validateDocumentNumber,\n  validateName,\n  validateTaxId,\n};"],
      names: ["DocumentVerification", "generateRecoveryCode", "validateDate", "validateDocumentNumber", "validateName", "validateTaxId", "verifyDocument", "DOCUMENT_PATTERNS", "businessLicense", "businessName", "pattern", "required", "licenseNumber", "issueDate", "validator", "date", "parsed", "Date", "isNaN", "getTime", "expiryDate", "taxDocument", "taxId", "taxPeriod", "amount", "identityProof", "fullName", "dateOfBirth", "documentNumber", "nationality", "documentUrl", "type", "response", "fetch", "buffer", "arrayBuffer", "extractedText", "performOCR", "verifyDocumentText", "error", "console", "verified", "confidence", "details", "worker", "createWorker", "reinitialize", "data", "text", "recognize", "Buffer", "from", "terminate", "Error", "fields", "extractedData", "matchedFields", "requiredFields", "fieldName", "field", "Object", "entries", "match", "value", "trim", "documentType", "verificationDate", "toISOString", "dateStr", "num", "test", "name", "Math", "random", "toString", "substring", "toUpperCase"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3b8b4540df11c630182394a81bca93cc6008b6fa"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ph8nw53p0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ph8nw53p0();
cov_ph8nw53p0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_ph8nw53p0().f[0]++;
  cov_ph8nw53p0().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_ph8nw53p0().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_ph8nw53p0().s[3]++;
_export(exports, {
  DocumentVerification: function () {
    /* istanbul ignore next */
    cov_ph8nw53p0().f[1]++;
    cov_ph8nw53p0().s[4]++;
    return DocumentVerification;
  },
  generateRecoveryCode: function () {
    /* istanbul ignore next */
    cov_ph8nw53p0().f[2]++;
    cov_ph8nw53p0().s[5]++;
    return generateRecoveryCode;
  },
  validateDate: function () {
    /* istanbul ignore next */
    cov_ph8nw53p0().f[3]++;
    cov_ph8nw53p0().s[6]++;
    return validateDate;
  },
  validateDocumentNumber: function () {
    /* istanbul ignore next */
    cov_ph8nw53p0().f[4]++;
    cov_ph8nw53p0().s[7]++;
    return validateDocumentNumber;
  },
  validateName: function () {
    /* istanbul ignore next */
    cov_ph8nw53p0().f[5]++;
    cov_ph8nw53p0().s[8]++;
    return validateName;
  },
  validateTaxId: function () {
    /* istanbul ignore next */
    cov_ph8nw53p0().f[6]++;
    cov_ph8nw53p0().s[9]++;
    return validateTaxId;
  },
  verifyDocument: function () {
    /* istanbul ignore next */
    cov_ph8nw53p0().f[7]++;
    cov_ph8nw53p0().s[10]++;
    return verifyDocument;
  }
});
const _tesseract =
/* istanbul ignore next */
(cov_ph8nw53p0().s[11]++, require("tesseract.js"));
// Define document field patterns for different document types.
const DOCUMENT_PATTERNS =
/* istanbul ignore next */
(cov_ph8nw53p0().s[12]++, {
  businessLicense: {
    businessName: {
      pattern: /(?:business|company|enterprise)\s*(?:name)?[:]\s*([A-Za-z0-9\s.,&-]+)/i,
      required: true
    },
    licenseNumber: {
      pattern: /(?:license|permit|registration)\s*(?:number|#|no)[:.\s]*([A-Z0-9-]+)/i,
      required: true
    },
    issueDate: {
      pattern: /(?:issue|issued)\s*(?:date|on)[:]\s*(\d{1,2}[-/]\d{1,2}[-/]\d{2,4})/i,
      required: true,
      validator: date => {
        /* istanbul ignore next */
        cov_ph8nw53p0().f[8]++;
        const parsed =
        /* istanbul ignore next */
        (cov_ph8nw53p0().s[13]++, new Date(date));
        /* istanbul ignore next */
        cov_ph8nw53p0().s[14]++;
        return !isNaN(parsed.getTime());
      }
    },
    expiryDate: {
      pattern: /(?:expiry|expiration|valid until)[:]\s*(\d{1,2}[-/]\d{1,2}[-/]\d{2,4})/i,
      required: true,
      validator: date => {
        /* istanbul ignore next */
        cov_ph8nw53p0().f[9]++;
        const parsed =
        /* istanbul ignore next */
        (cov_ph8nw53p0().s[15]++, new Date(date));
        /* istanbul ignore next */
        cov_ph8nw53p0().s[16]++;
        return !isNaN(parsed.getTime());
      }
    }
  },
  taxDocument: {
    taxId: {
      pattern: /(?:tax\s*id|ein|tin)[:.\s]*([A-Z0-9-]+)/i,
      required: true
    },
    businessName: {
      pattern: /(?:business|company|enterprise)\s*name[:]\s*([A-Za-z0-9\s.,&-]+)/i,
      required: true
    },
    taxPeriod: {
      pattern: /(?:tax\s*period|period|year)[:]\s*(\d{4}(?:-\d{2,4})?)/i,
      required: true
    },
    amount: {
      pattern: /(?:amount|total|sum)[:]\s*[\$€£]?\s*(\d+(?:,\d{3})*(?:\.\d{2})?)/i,
      required: false
    }
  },
  identityProof: {
    fullName: {
      pattern: /(?:name|full\s*name)[:]\s*([A-Za-z\s.-]+)/i,
      required: true
    },
    dateOfBirth: {
      pattern: /(?:date\s*of\s*birth|dob|born)[:]\s*(\d{1,2}[-/]\d{1,2}[-/]\d{2,4})/i,
      required: true,
      validator: date => {
        /* istanbul ignore next */
        cov_ph8nw53p0().f[10]++;
        const parsed =
        /* istanbul ignore next */
        (cov_ph8nw53p0().s[17]++, new Date(date));
        /* istanbul ignore next */
        cov_ph8nw53p0().s[18]++;
        return !isNaN(parsed.getTime());
      }
    },
    documentNumber: {
      pattern: /(?:document|id|passport)\s*(?:number|#|no)[:.\s]*([A-Z0-9-]+)/i,
      required: true
    },
    nationality: {
      pattern: /(?:nationality|country)[:]\s*([A-Za-z\s]+)/i,
      required: false
    }
  }
});
async function verifyDocument(documentUrl, type) {
  /* istanbul ignore next */
  cov_ph8nw53p0().f[11]++;
  cov_ph8nw53p0().s[19]++;
  try {
    // Download document from the provided URL.
    const response =
    /* istanbul ignore next */
    (cov_ph8nw53p0().s[20]++, await fetch(documentUrl));
    const buffer =
    /* istanbul ignore next */
    (cov_ph8nw53p0().s[21]++, await response.arrayBuffer());
    // Perform OCR on the downloaded document.
    const extractedText =
    /* istanbul ignore next */
    (cov_ph8nw53p0().s[22]++, await performOCR(buffer));
    // Verify the extracted text against the field patterns.
    /* istanbul ignore next */
    cov_ph8nw53p0().s[23]++;
    return await verifyDocumentText(extractedText, type);
  } catch (error) {
    /* istanbul ignore next */
    cov_ph8nw53p0().s[24]++;
    console.error('Document verification error:', error);
    /* istanbul ignore next */
    cov_ph8nw53p0().s[25]++;
    return {
      verified: false,
      confidence: 0,
      details: {},
      error: 'Failed to verify document'
    };
  }
}
// Helper to perform OCR using Tesseract.js.
async function performOCR(buffer) {
  /* istanbul ignore next */
  cov_ph8nw53p0().f[12]++;
  const worker =
  /* istanbul ignore next */
  (cov_ph8nw53p0().s[26]++, await (0, _tesseract.createWorker)());
  /* istanbul ignore next */
  cov_ph8nw53p0().s[27]++;
  try {
    /* istanbul ignore next */
    cov_ph8nw53p0().s[28]++;
    await worker.reinitialize('eng');
    const {
      data: {
        text
      }
    } =
    /* istanbul ignore next */
    (cov_ph8nw53p0().s[29]++, await worker.recognize(Buffer.from(buffer)));
    /* istanbul ignore next */
    cov_ph8nw53p0().s[30]++;
    await worker.terminate();
    /* istanbul ignore next */
    cov_ph8nw53p0().s[31]++;
    return text;
  } catch (error) {
    /* istanbul ignore next */
    cov_ph8nw53p0().s[32]++;
    await worker.terminate();
    /* istanbul ignore next */
    cov_ph8nw53p0().s[33]++;
    throw new Error('OCR failed');
  }
}
// Matches and validates document fields in extracted text.
async function verifyDocumentText(text, type) {
  /* istanbul ignore next */
  cov_ph8nw53p0().f[13]++;
  const fields =
  /* istanbul ignore next */
  (cov_ph8nw53p0().s[34]++, DOCUMENT_PATTERNS[type]);
  const extractedData =
  /* istanbul ignore next */
  (cov_ph8nw53p0().s[35]++, {});
  let matchedFields =
  /* istanbul ignore next */
  (cov_ph8nw53p0().s[36]++, 0);
  let requiredFields =
  /* istanbul ignore next */
  (cov_ph8nw53p0().s[37]++, 0);
  // Process each field defined in the pattern.
  /* istanbul ignore next */
  cov_ph8nw53p0().s[38]++;
  for (const [fieldName, field] of Object.entries(fields)) {
    /* istanbul ignore next */
    cov_ph8nw53p0().s[39]++;
    if (field.required) {
      /* istanbul ignore next */
      cov_ph8nw53p0().b[0][0]++;
      cov_ph8nw53p0().s[40]++;
      requiredFields++;
    } else
    /* istanbul ignore next */
    {
      cov_ph8nw53p0().b[0][1]++;
    }
    const match =
    /* istanbul ignore next */
    (cov_ph8nw53p0().s[41]++, text.match(field.pattern));
    /* istanbul ignore next */
    cov_ph8nw53p0().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_ph8nw53p0().b[2][0]++, match) &&
    /* istanbul ignore next */
    (cov_ph8nw53p0().b[2][1]++, match[1])) {
      /* istanbul ignore next */
      cov_ph8nw53p0().b[1][0]++;
      const value =
      /* istanbul ignore next */
      (cov_ph8nw53p0().s[43]++, match[1].trim());
      // If a validator is provided, use it.
      /* istanbul ignore next */
      cov_ph8nw53p0().s[44]++;
      if (
      /* istanbul ignore next */
      (cov_ph8nw53p0().b[4][0]++, field.validator) &&
      /* istanbul ignore next */
      (cov_ph8nw53p0().b[4][1]++, !field.validator(value))) {
        /* istanbul ignore next */
        cov_ph8nw53p0().b[3][0]++;
        cov_ph8nw53p0().s[45]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_ph8nw53p0().b[3][1]++;
      }
      cov_ph8nw53p0().s[46]++;
      extractedData[fieldName] = value;
      /* istanbul ignore next */
      cov_ph8nw53p0().s[47]++;
      if (field.required) {
        /* istanbul ignore next */
        cov_ph8nw53p0().b[5][0]++;
        cov_ph8nw53p0().s[48]++;
        matchedFields++;
      } else
      /* istanbul ignore next */
      {
        cov_ph8nw53p0().b[5][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_ph8nw53p0().b[1][1]++;
    }
  }
  // Calculate a confidence score based on required fields.
  const confidence =
  /* istanbul ignore next */
  (cov_ph8nw53p0().s[49]++, requiredFields > 0 ?
  /* istanbul ignore next */
  (cov_ph8nw53p0().b[6][0]++, matchedFields / requiredFields) :
  /* istanbul ignore next */
  (cov_ph8nw53p0().b[6][1]++, 0));
  const verified =
  /* istanbul ignore next */
  (cov_ph8nw53p0().s[50]++, confidence >= 0.7); // 70% threshold for verification.
  /* istanbul ignore next */
  cov_ph8nw53p0().s[51]++;
  return {
    verified,
    confidence,
    details: {
      documentType: type,
      extractedData,
      matchedFields,
      requiredFields,
      verificationDate: new Date().toISOString()
    }
  };
}
function validateDate(dateStr) {
  /* istanbul ignore next */
  cov_ph8nw53p0().f[14]++;
  const date =
  /* istanbul ignore next */
  (cov_ph8nw53p0().s[52]++, new Date(dateStr));
  /* istanbul ignore next */
  cov_ph8nw53p0().s[53]++;
  return !isNaN(date.getTime());
}
function validateDocumentNumber(num) {
  /* istanbul ignore next */
  cov_ph8nw53p0().f[15]++;
  cov_ph8nw53p0().s[54]++;
  return /^[A-Z0-9-]{6,}$/i.test(num);
}
function validateName(name) {
  /* istanbul ignore next */
  cov_ph8nw53p0().f[16]++;
  cov_ph8nw53p0().s[55]++;
  return /^[A-Za-z\s.-]{2,}$/i.test(name);
}
function generateRecoveryCode() {
  /* istanbul ignore next */
  cov_ph8nw53p0().f[17]++;
  cov_ph8nw53p0().s[56]++;
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}
function validateTaxId(taxId) {
  /* istanbul ignore next */
  cov_ph8nw53p0().f[18]++;
  cov_ph8nw53p0().s[57]++;
  return /^[A-Z0-9-]{9,}$/i.test(taxId);
}
const DocumentVerification =
/* istanbul ignore next */
(cov_ph8nw53p0().s[58]++, {
  verifyDocument,
  validateDate,
  validateDocumentNumber,
  validateName,
  validateTaxId
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEb2N1bWVudFZlcmlmaWNhdGlvbiIsImNvdl9waDhudzUzcDAiLCJmIiwicyIsImdlbmVyYXRlUmVjb3ZlcnlDb2RlIiwidmFsaWRhdGVEYXRlIiwidmFsaWRhdGVEb2N1bWVudE51bWJlciIsInZhbGlkYXRlTmFtZSIsInZhbGlkYXRlVGF4SWQiLCJ2ZXJpZnlEb2N1bWVudCIsIkRPQ1VNRU5UX1BBVFRFUk5TIiwiYnVzaW5lc3NMaWNlbnNlIiwiYnVzaW5lc3NOYW1lIiwicGF0dGVybiIsInJlcXVpcmVkIiwibGljZW5zZU51bWJlciIsImlzc3VlRGF0ZSIsInZhbGlkYXRvciIsImRhdGUiLCJwYXJzZWQiLCJEYXRlIiwiaXNOYU4iLCJnZXRUaW1lIiwiZXhwaXJ5RGF0ZSIsInRheERvY3VtZW50IiwidGF4SWQiLCJ0YXhQZXJpb2QiLCJhbW91bnQiLCJpZGVudGl0eVByb29mIiwiZnVsbE5hbWUiLCJkYXRlT2ZCaXJ0aCIsImRvY3VtZW50TnVtYmVyIiwibmF0aW9uYWxpdHkiLCJkb2N1bWVudFVybCIsInR5cGUiLCJyZXNwb25zZSIsImZldGNoIiwiYnVmZmVyIiwiYXJyYXlCdWZmZXIiLCJleHRyYWN0ZWRUZXh0IiwicGVyZm9ybU9DUiIsInZlcmlmeURvY3VtZW50VGV4dCIsImVycm9yIiwiY29uc29sZSIsInZlcmlmaWVkIiwiY29uZmlkZW5jZSIsImRldGFpbHMiLCJ3b3JrZXIiLCJfdGVzc2VyYWN0IiwiY3JlYXRlV29ya2VyIiwicmVpbml0aWFsaXplIiwiZGF0YSIsInRleHQiLCJyZWNvZ25pemUiLCJCdWZmZXIiLCJmcm9tIiwidGVybWluYXRlIiwiRXJyb3IiLCJmaWVsZHMiLCJleHRyYWN0ZWREYXRhIiwibWF0Y2hlZEZpZWxkcyIsInJlcXVpcmVkRmllbGRzIiwiZmllbGROYW1lIiwiZmllbGQiLCJPYmplY3QiLCJlbnRyaWVzIiwiYiIsIm1hdGNoIiwidmFsdWUiLCJ0cmltIiwiZG9jdW1lbnRUeXBlIiwidmVyaWZpY2F0aW9uRGF0ZSIsInRvSVNPU3RyaW5nIiwiZGF0ZVN0ciIsIm51bSIsInRlc3QiLCJuYW1lIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwidG9VcHBlckNhc2UiXSwic291cmNlcyI6WyIvaG9tZS9oYWdlci9uZXcvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyICgzKS9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIvbGliL3V0aWxzL3ZlcmlmaWNhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVXb3JrZXIgfSBmcm9tICd0ZXNzZXJhY3QuanMnO1xuXG5pbnRlcmZhY2UgVmVyaWZpY2F0aW9uUmVzdWx0IHtcbiAgdmVyaWZpZWQ6IGJvb2xlYW47XG4gIGNvbmZpZGVuY2U6IG51bWJlcjtcbiAgZGV0YWlsczogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgZXJyb3I/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBEb2N1bWVudEZpZWxkcyB7XG4gIFtrZXk6IHN0cmluZ106IHtcbiAgICBwYXR0ZXJuOiBSZWdFeHA7XG4gICAgcmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgdmFsaWRhdG9yPzogKHZhbHVlOiBzdHJpbmcpID0+IGJvb2xlYW47XG4gIH07XG59XG5cbi8vIERlZmluZSBkb2N1bWVudCBmaWVsZCBwYXR0ZXJucyBmb3IgZGlmZmVyZW50IGRvY3VtZW50IHR5cGVzLlxuY29uc3QgRE9DVU1FTlRfUEFUVEVSTlMgPSB7XG4gIGJ1c2luZXNzTGljZW5zZToge1xuICAgIGJ1c2luZXNzTmFtZToge1xuICAgICAgcGF0dGVybjogLyg/OmJ1c2luZXNzfGNvbXBhbnl8ZW50ZXJwcmlzZSlcXHMqKD86bmFtZSk/WzpdXFxzKihbQS1aYS16MC05XFxzLiwmLV0rKS9pLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgfSxcbiAgICBsaWNlbnNlTnVtYmVyOiB7XG4gICAgICBwYXR0ZXJuOiAvKD86bGljZW5zZXxwZXJtaXR8cmVnaXN0cmF0aW9uKVxccyooPzpudW1iZXJ8I3xubylbOi5cXHNdKihbQS1aMC05LV0rKS9pLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgfSxcbiAgICBpc3N1ZURhdGU6IHtcbiAgICAgIHBhdHRlcm46IC8oPzppc3N1ZXxpc3N1ZWQpXFxzKig/OmRhdGV8b24pWzpdXFxzKihcXGR7MSwyfVstL11cXGR7MSwyfVstL11cXGR7Miw0fSkvaSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgdmFsaWRhdG9yOiAoZGF0ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlZC5nZXRUaW1lKCkpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIGV4cGlyeURhdGU6IHtcbiAgICAgIHBhdHRlcm46IC8oPzpleHBpcnl8ZXhwaXJhdGlvbnx2YWxpZCB1bnRpbClbOl1cXHMqKFxcZHsxLDJ9Wy0vXVxcZHsxLDJ9Wy0vXVxcZHsyLDR9KS9pLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICB2YWxpZGF0b3I6IChkYXRlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VkLmdldFRpbWUoKSk7XG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG4gIHRheERvY3VtZW50OiB7XG4gICAgdGF4SWQ6IHtcbiAgICAgIHBhdHRlcm46IC8oPzp0YXhcXHMqaWR8ZWlufHRpbilbOi5cXHNdKihbQS1aMC05LV0rKS9pLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgfSxcbiAgICBidXNpbmVzc05hbWU6IHtcbiAgICAgIHBhdHRlcm46IC8oPzpidXNpbmVzc3xjb21wYW55fGVudGVycHJpc2UpXFxzKm5hbWVbOl1cXHMqKFtBLVphLXowLTlcXHMuLCYtXSspL2ksXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHRheFBlcmlvZDoge1xuICAgICAgcGF0dGVybjogLyg/OnRheFxccypwZXJpb2R8cGVyaW9kfHllYXIpWzpdXFxzKihcXGR7NH0oPzotXFxkezIsNH0pPykvaSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAgYW1vdW50OiB7XG4gICAgICBwYXR0ZXJuOiAvKD86YW1vdW50fHRvdGFsfHN1bSlbOl1cXHMqW1xcJOKCrMKjXT9cXHMqKFxcZCsoPzosXFxkezN9KSooPzpcXC5cXGR7Mn0pPykvaSxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICB9LFxuICBpZGVudGl0eVByb29mOiB7XG4gICAgZnVsbE5hbWU6IHtcbiAgICAgIHBhdHRlcm46IC8oPzpuYW1lfGZ1bGxcXHMqbmFtZSlbOl1cXHMqKFtBLVphLXpcXHMuLV0rKS9pLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgfSxcbiAgICBkYXRlT2ZCaXJ0aDoge1xuICAgICAgcGF0dGVybjogLyg/OmRhdGVcXHMqb2ZcXHMqYmlydGh8ZG9ifGJvcm4pWzpdXFxzKihcXGR7MSwyfVstL11cXGR7MSwyfVstL11cXGR7Miw0fSkvaSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgdmFsaWRhdG9yOiAoZGF0ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlZC5nZXRUaW1lKCkpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIGRvY3VtZW50TnVtYmVyOiB7XG4gICAgICBwYXR0ZXJuOiAvKD86ZG9jdW1lbnR8aWR8cGFzc3BvcnQpXFxzKig/Om51bWJlcnwjfG5vKVs6Llxcc10qKFtBLVowLTktXSspL2ksXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIG5hdGlvbmFsaXR5OiB7XG4gICAgICBwYXR0ZXJuOiAvKD86bmF0aW9uYWxpdHl8Y291bnRyeSlbOl1cXHMqKFtBLVphLXpcXHNdKykvaSxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICB9LFxuICB9LFxufSBhcyBjb25zdDtcblxuLy8gTWFpbiBmdW5jdGlvbiB0byBkb3dubG9hZCBhIGRvY3VtZW50IGZyb20gYSBVUkwsIHBlcmZvcm0gT0NSLCBhbmQgdmVyaWZ5IGl0cyB0ZXh0LlxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeURvY3VtZW50KFxuICBkb2N1bWVudFVybDogc3RyaW5nLFxuICB0eXBlOiAnYnVzaW5lc3NMaWNlbnNlJyB8ICd0YXhEb2N1bWVudCcgfCAnaWRlbnRpdHlQcm9vZidcbik6IFByb21pc2U8VmVyaWZpY2F0aW9uUmVzdWx0PiB7XG4gIHRyeSB7XG4gICAgLy8gRG93bmxvYWQgZG9jdW1lbnQgZnJvbSB0aGUgcHJvdmlkZWQgVVJMLlxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZG9jdW1lbnRVcmwpO1xuICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG5cbiAgICAvLyBQZXJmb3JtIE9DUiBvbiB0aGUgZG93bmxvYWRlZCBkb2N1bWVudC5cbiAgICBjb25zdCBleHRyYWN0ZWRUZXh0ID0gYXdhaXQgcGVyZm9ybU9DUihidWZmZXIpO1xuXG4gICAgLy8gVmVyaWZ5IHRoZSBleHRyYWN0ZWQgdGV4dCBhZ2FpbnN0IHRoZSBmaWVsZCBwYXR0ZXJucy5cbiAgICByZXR1cm4gYXdhaXQgdmVyaWZ5RG9jdW1lbnRUZXh0KGV4dHJhY3RlZFRleHQsIHR5cGUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0RvY3VtZW50IHZlcmlmaWNhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgIGNvbmZpZGVuY2U6IDAsXG4gICAgICBkZXRhaWxzOiB7fSxcbiAgICAgIGVycm9yOiAnRmFpbGVkIHRvIHZlcmlmeSBkb2N1bWVudCcsXG4gICAgfTtcbiAgfVxufVxuXG4vLyBIZWxwZXIgdG8gcGVyZm9ybSBPQ1IgdXNpbmcgVGVzc2VyYWN0LmpzLlxuYXN5bmMgZnVuY3Rpb24gcGVyZm9ybU9DUihidWZmZXI6IEFycmF5QnVmZmVyKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3Qgd29ya2VyID0gYXdhaXQgY3JlYXRlV29ya2VyKCk7XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCB3b3JrZXIucmVpbml0aWFsaXplKCdlbmcnKTtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhOiB7IHRleHQgfSxcbiAgICB9ID0gYXdhaXQgd29ya2VyLnJlY29nbml6ZShCdWZmZXIuZnJvbShidWZmZXIpKTtcbiAgICBhd2FpdCB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYXdhaXQgd29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgIHRocm93IG5ldyBFcnJvcignT0NSIGZhaWxlZCcpO1xuICB9XG59XG5cbi8vIE1hdGNoZXMgYW5kIHZhbGlkYXRlcyBkb2N1bWVudCBmaWVsZHMgaW4gZXh0cmFjdGVkIHRleHQuXG5hc3luYyBmdW5jdGlvbiB2ZXJpZnlEb2N1bWVudFRleHQoXG4gIHRleHQ6IHN0cmluZyxcbiAgdHlwZToga2V5b2YgdHlwZW9mIERPQ1VNRU5UX1BBVFRFUk5TXG4pOiBQcm9taXNlPFZlcmlmaWNhdGlvblJlc3VsdD4ge1xuICBjb25zdCBmaWVsZHMgPSBET0NVTUVOVF9QQVRURVJOU1t0eXBlXTtcbiAgY29uc3QgZXh0cmFjdGVkRGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICBsZXQgbWF0Y2hlZEZpZWxkcyA9IDA7XG4gIGxldCByZXF1aXJlZEZpZWxkcyA9IDA7XG5cbiAgLy8gUHJvY2VzcyBlYWNoIGZpZWxkIGRlZmluZWQgaW4gdGhlIHBhdHRlcm4uXG4gIGZvciAoY29uc3QgW2ZpZWxkTmFtZSwgZmllbGRdIG9mIE9iamVjdC5lbnRyaWVzKGZpZWxkcykpIHtcbiAgICBpZiAoZmllbGQucmVxdWlyZWQpIHJlcXVpcmVkRmllbGRzKys7XG5cbiAgICBjb25zdCBtYXRjaCA9IHRleHQubWF0Y2goZmllbGQucGF0dGVybik7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1hdGNoWzFdLnRyaW0oKTtcblxuICAgICAgLy8gSWYgYSB2YWxpZGF0b3IgaXMgcHJvdmlkZWQsIHVzZSBpdC5cbiAgICAgIGlmIChmaWVsZC52YWxpZGF0b3IgJiYgIWZpZWxkLnZhbGlkYXRvcih2YWx1ZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGV4dHJhY3RlZERhdGFbZmllbGROYW1lXSA9IHZhbHVlO1xuICAgICAgaWYgKGZpZWxkLnJlcXVpcmVkKSBtYXRjaGVkRmllbGRzKys7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIGEgY29uZmlkZW5jZSBzY29yZSBiYXNlZCBvbiByZXF1aXJlZCBmaWVsZHMuXG4gIGNvbnN0IGNvbmZpZGVuY2UgPSByZXF1aXJlZEZpZWxkcyA+IDAgPyBtYXRjaGVkRmllbGRzIC8gcmVxdWlyZWRGaWVsZHMgOiAwO1xuICBjb25zdCB2ZXJpZmllZCA9IGNvbmZpZGVuY2UgPj0gMC43OyAvLyA3MCUgdGhyZXNob2xkIGZvciB2ZXJpZmljYXRpb24uXG5cbiAgcmV0dXJuIHtcbiAgICB2ZXJpZmllZCxcbiAgICBjb25maWRlbmNlLFxuICAgIGRldGFpbHM6IHtcbiAgICAgIGRvY3VtZW50VHlwZTogdHlwZSxcbiAgICAgIGV4dHJhY3RlZERhdGEsXG4gICAgICBtYXRjaGVkRmllbGRzLFxuICAgICAgcmVxdWlyZWRGaWVsZHMsXG4gICAgICB2ZXJpZmljYXRpb25EYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfSxcbiAgfTtcbn1cblxuLy8gQWRkaXRpb25hbCBoZWxwZXIgdmFsaWRhdG9ycy5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZURhdGUoZGF0ZVN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkYXRlU3RyKTtcbiAgcmV0dXJuICFpc05hTihkYXRlLmdldFRpbWUoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZURvY3VtZW50TnVtYmVyKG51bTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAvXltBLVowLTktXXs2LH0kL2kudGVzdChudW0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVOYW1lKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gL15bQS1aYS16XFxzLi1dezIsfSQvaS50ZXN0KG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSZWNvdmVyeUNvZGUoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgOCkudG9VcHBlckNhc2UoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVGF4SWQodGF4SWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gL15bQS1aMC05LV17OSx9JC9pLnRlc3QodGF4SWQpO1xufVxuXG5leHBvcnQgY29uc3QgRG9jdW1lbnRWZXJpZmljYXRpb24gPSB7XG4gIHZlcmlmeURvY3VtZW50LFxuICB2YWxpZGF0ZURhdGUsXG4gIHZhbGlkYXRlRG9jdW1lbnROdW1iZXIsXG4gIHZhbGlkYXRlTmFtZSxcbiAgdmFsaWRhdGVUYXhJZCxcbn07Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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