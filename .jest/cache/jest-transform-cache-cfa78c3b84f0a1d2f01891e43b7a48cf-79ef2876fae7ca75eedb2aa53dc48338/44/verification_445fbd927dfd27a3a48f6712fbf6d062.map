{"version":3,"names":["DocumentVerification","cov_ph8nw53p0","f","s","generateRecoveryCode","validateDate","validateDocumentNumber","validateName","validateTaxId","verifyDocument","DOCUMENT_PATTERNS","businessLicense","businessName","pattern","required","licenseNumber","issueDate","validator","date","parsed","Date","isNaN","getTime","expiryDate","taxDocument","taxId","taxPeriod","amount","identityProof","fullName","dateOfBirth","documentNumber","nationality","documentUrl","type","response","fetch","buffer","arrayBuffer","extractedText","performOCR","verifyDocumentText","error","console","verified","confidence","details","worker","_tesseract","createWorker","reinitialize","data","text","recognize","Buffer","from","terminate","Error","fields","extractedData","matchedFields","requiredFields","fieldName","field","Object","entries","b","match","value","trim","documentType","verificationDate","toISOString","dateStr","num","test","name","Math","random","toString","substring","toUpperCase"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/verification.ts"],"sourcesContent":["import { createWorker } from 'tesseract.js';\n\ninterface VerificationResult {\n  verified: boolean;\n  confidence: number;\n  details: Record<string, any>;\n  error?: string;\n}\n\ninterface DocumentFields {\n  [key: string]: {\n    pattern: RegExp;\n    required: boolean;\n    validator?: (value: string) => boolean;\n  };\n}\n\n// Define document field patterns for different document types.\nconst DOCUMENT_PATTERNS = {\n  businessLicense: {\n    businessName: {\n      pattern: /(?:business|company|enterprise)\\s*(?:name)?[:]\\s*([A-Za-z0-9\\s.,&-]+)/i,\n      required: true,\n    },\n    licenseNumber: {\n      pattern: /(?:license|permit|registration)\\s*(?:number|#|no)[:.\\s]*([A-Z0-9-]+)/i,\n      required: true,\n    },\n    issueDate: {\n      pattern: /(?:issue|issued)\\s*(?:date|on)[:]\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})/i,\n      required: true,\n      validator: (date: string) => {\n        const parsed = new Date(date);\n        return !isNaN(parsed.getTime());\n      },\n    },\n    expiryDate: {\n      pattern: /(?:expiry|expiration|valid until)[:]\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})/i,\n      required: true,\n      validator: (date: string) => {\n        const parsed = new Date(date);\n        return !isNaN(parsed.getTime());\n      },\n    },\n  },\n  taxDocument: {\n    taxId: {\n      pattern: /(?:tax\\s*id|ein|tin)[:.\\s]*([A-Z0-9-]+)/i,\n      required: true,\n    },\n    businessName: {\n      pattern: /(?:business|company|enterprise)\\s*name[:]\\s*([A-Za-z0-9\\s.,&-]+)/i,\n      required: true,\n    },\n    taxPeriod: {\n      pattern: /(?:tax\\s*period|period|year)[:]\\s*(\\d{4}(?:-\\d{2,4})?)/i,\n      required: true,\n    },\n    amount: {\n      pattern: /(?:amount|total|sum)[:]\\s*[\\$€£]?\\s*(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)/i,\n      required: false,\n    },\n  },\n  identityProof: {\n    fullName: {\n      pattern: /(?:name|full\\s*name)[:]\\s*([A-Za-z\\s.-]+)/i,\n      required: true,\n    },\n    dateOfBirth: {\n      pattern: /(?:date\\s*of\\s*birth|dob|born)[:]\\s*(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})/i,\n      required: true,\n      validator: (date: string) => {\n        const parsed = new Date(date);\n        return !isNaN(parsed.getTime());\n      },\n    },\n    documentNumber: {\n      pattern: /(?:document|id|passport)\\s*(?:number|#|no)[:.\\s]*([A-Z0-9-]+)/i,\n      required: true,\n    },\n    nationality: {\n      pattern: /(?:nationality|country)[:]\\s*([A-Za-z\\s]+)/i,\n      required: false,\n    },\n  },\n} as const;\n\n// Main function to download a document from a URL, perform OCR, and verify its text.\nexport async function verifyDocument(\n  documentUrl: string,\n  type: 'businessLicense' | 'taxDocument' | 'identityProof'\n): Promise<VerificationResult> {\n  try {\n    // Download document from the provided URL.\n    const response = await fetch(documentUrl);\n    const buffer = await response.arrayBuffer();\n\n    // Perform OCR on the downloaded document.\n    const extractedText = await performOCR(buffer);\n\n    // Verify the extracted text against the field patterns.\n    return await verifyDocumentText(extractedText, type);\n  } catch (error) {\n    console.error('Document verification error:', error);\n    return {\n      verified: false,\n      confidence: 0,\n      details: {},\n      error: 'Failed to verify document',\n    };\n  }\n}\n\n// Helper to perform OCR using Tesseract.js.\nasync function performOCR(buffer: ArrayBuffer): Promise<string> {\n  const worker = await createWorker();\n\n  try {\n    await worker.reinitialize('eng');\n    const {\n      data: { text },\n    } = await worker.recognize(Buffer.from(buffer));\n    await worker.terminate();\n    return text;\n  } catch (error) {\n    await worker.terminate();\n    throw new Error('OCR failed');\n  }\n}\n\n// Matches and validates document fields in extracted text.\nasync function verifyDocumentText(\n  text: string,\n  type: keyof typeof DOCUMENT_PATTERNS\n): Promise<VerificationResult> {\n  const fields = DOCUMENT_PATTERNS[type];\n  const extractedData: Record<string, string> = {};\n  let matchedFields = 0;\n  let requiredFields = 0;\n\n  // Process each field defined in the pattern.\n  for (const [fieldName, field] of Object.entries(fields)) {\n    if (field.required) requiredFields++;\n\n    const match = text.match(field.pattern);\n    if (match && match[1]) {\n      const value = match[1].trim();\n\n      // If a validator is provided, use it.\n      if (field.validator && !field.validator(value)) {\n        continue;\n      }\n\n      extractedData[fieldName] = value;\n      if (field.required) matchedFields++;\n    }\n  }\n\n  // Calculate a confidence score based on required fields.\n  const confidence = requiredFields > 0 ? matchedFields / requiredFields : 0;\n  const verified = confidence >= 0.7; // 70% threshold for verification.\n\n  return {\n    verified,\n    confidence,\n    details: {\n      documentType: type,\n      extractedData,\n      matchedFields,\n      requiredFields,\n      verificationDate: new Date().toISOString(),\n    },\n  };\n}\n\n// Additional helper validators.\nexport function validateDate(dateStr: string): boolean {\n  const date = new Date(dateStr);\n  return !isNaN(date.getTime());\n}\n\nexport function validateDocumentNumber(num: string): boolean {\n  return /^[A-Z0-9-]{6,}$/i.test(num);\n}\n\nexport function validateName(name: string): boolean {\n  return /^[A-Za-z\\s.-]{2,}$/i.test(name);\n}\n\nexport function generateRecoveryCode() {\n  return Math.random().toString(36).substring(2, 8).toUpperCase();\n}\n\nexport function validateTaxId(taxId: string): boolean {\n  return /^[A-Z0-9-]{9,}$/i.test(taxId);\n}\n\nexport const DocumentVerification = {\n  verifyDocument,\n  validateDate,\n  validateDocumentNumber,\n  validateName,\n  validateTaxId,\n};"],"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","ignoreList":[]}