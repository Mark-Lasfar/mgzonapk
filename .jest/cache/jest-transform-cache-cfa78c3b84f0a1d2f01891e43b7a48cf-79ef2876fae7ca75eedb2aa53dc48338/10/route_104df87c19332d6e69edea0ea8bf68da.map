{"version":3,"names":["PATCH","req","params","cov_1rgo9a0fl2","f","s","id","status","json","includes","b","_server","NextResponse","success","message","product","_productmodel","default","findById","save","data","error","console"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/admin/products/[id]/status/route.ts"],"sourcesContent":["// app/api/admin/products/[id]/status/route.ts\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/auth'\nimport Product from '@/lib/db/models/product.model'\n\nexport async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {\n  try {\n    // const session = await auth()\n    // if (!session || !session.user.isAdmin) {\n    //   return NextResponse.json({ success: false, message: 'Unauthorized' }, { status: 401 })\n    // }\n\n    const { id } = params\n    const { status } = await req.json()\n\n    if (!['active', 'rejected'].includes(status)) {\n        return NextResponse.json({ success: false, message: 'Invalid status' }, { status: 400 })\n      }\n      \n\n    const product = await Product.findById(id)\n    if (!product) {\n      return NextResponse.json({ success: false, message: 'Product not found' }, { status: 404 })\n    }\n\n    product.status = status\n    await product.save()\n\n    return NextResponse.json({ success: true, message: 'Product status updated', data: product })\n\n  } catch (error) {\n    console.error('Update product status error:', error)\n    return NextResponse.json({ success: false, message: 'Failed to update product status' }, { status: 500 })\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAMsB;;;;;;WAAAA,KAAA;;;;;kCAJoB;;;wEAEtB;;;;;;;;;;;;;;;AAEb,eAAeA,MAAMC,GAAgB,EAAE;EAAEC;AAAM,CAA8B;EAAA;EAAAC,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAClF,IAAI;IACF;IACA;IACA;IACA;IAEA,MAAM;MAAEC;IAAE,CAAE;IAAA;IAAA,CAAAH,cAAA,GAAAE,CAAA,OAAGH,MAAA;IACf,MAAM;MAAEK;IAAM,CAAE;IAAA;IAAA,CAAAJ,cAAA,GAAAE,CAAA,OAAG,MAAMJ,GAAA,CAAIO,IAAI;IAAA;IAAAL,cAAA,GAAAE,CAAA;IAEjC,IAAI,CAAC,CAAC,UAAU,WAAW,CAACI,QAAQ,CAACF,MAAA,GAAS;MAAA;MAAAJ,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MAC1C,OAAOM,OAAA,CAAAC,YAAY,CAACJ,IAAI,CAAC;QAAEK,OAAA,EAAS;QAAOC,OAAA,EAAS;MAAiB,GAAG;QAAEP,MAAA,EAAQ;MAAI;IACxF;IAAA;IAAA;MAAAJ,cAAA,GAAAO,CAAA;IAAA;IAGF,MAAMK,OAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAU,MAAMW,aAAA,CAAAC,OAAO,CAACC,QAAQ,CAACZ,EAAA;IAAA;IAAAH,cAAA,GAAAE,CAAA;IACvC,IAAI,CAACU,OAAA,EAAS;MAAA;MAAAZ,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAE,CAAA;MACZ,OAAOM,OAAA,CAAAC,YAAY,CAACJ,IAAI,CAAC;QAAEK,OAAA,EAAS;QAAOC,OAAA,EAAS;MAAoB,GAAG;QAAEP,MAAA,EAAQ;MAAI;IAC3F;IAAA;IAAA;MAAAJ,cAAA,GAAAO,CAAA;IAAA;IAAAP,cAAA,GAAAE,CAAA;IAEAU,OAAA,CAAQR,MAAM,GAAGA,MAAA;IAAA;IAAAJ,cAAA,GAAAE,CAAA;IACjB,MAAMU,OAAA,CAAQI,IAAI;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAElB,OAAOM,OAAA,CAAAC,YAAY,CAACJ,IAAI,CAAC;MAAEK,OAAA,EAAS;MAAMC,OAAA,EAAS;MAA0BM,IAAA,EAAML;IAAQ;EAE7F,EAAE,OAAOM,KAAA,EAAO;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IACdiB,OAAA,CAAQD,KAAK,CAAC,gCAAgCA,KAAA;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IAC9C,OAAOM,OAAA,CAAAC,YAAY,CAACJ,IAAI,CAAC;MAAEK,OAAA,EAAS;MAAOC,OAAA,EAAS;IAAkC,GAAG;MAAEP,MAAA,EAAQ;IAAI;EACzG;AACF","ignoreList":[]}