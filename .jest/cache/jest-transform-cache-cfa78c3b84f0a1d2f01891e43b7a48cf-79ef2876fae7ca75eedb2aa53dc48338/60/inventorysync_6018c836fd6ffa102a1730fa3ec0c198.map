{"version":3,"names":["AdvancedInventorySyncService","CURRENT_TIMESTAMP","cov_tvnqpd8ub","s","CURRENT_USER","constructor","f","fulfillmentProviders","Map","redis","_redis","Redis","url","process","env","UPSTASH_REDIS_REST_URL","token","UPSTASH_REDIS_REST_TOKEN","initializeFulfillmentProviders","configs","loadProviderConfigs","forEach","config","provider","b","set","_service","ShipBobService","apiKey","apiUrl","SHIPBOB_API_URL","_service1","AmazonFulfillmentService","_service2","AliExpressFulfillmentService","_service3","FourPXFulfillmentService","_logging","logger","warn","SHIPBOB_API_KEY","push","sandbox","NODE_ENV","createdAt","createdBy","updatedAt","updatedBy","AMAZON_API_KEY","apiSecret","AMAZON_API_SECRET","region","AMAZON_REGION","ALIEXPRESS_API_KEY","ALIEXPRESS_API_SECRET","FOURPX_API_KEY","FOURPX_API_SECRET","getProvider","providerService","get","Error","syncInventory","service","inventoryLevels","getInventoryLevels","JSON","stringify","ex","syncWithDatabase","info","timestamp","user","success","data","error","message","String","getInventory","cachedInventory","parse","cached","requestedBy","updateSyncStatus","syncId","status","sync","getSyncState","completedAt","Date","updateSyncProgress","itemsProcessed","totalItems","undefined","recordSyncError","sku","errors","sendLowStockAlert","item","_webhookdispatcher","WebhookDispatcher","dispatch","quantity","threshold","thresholds","low","adjustInventory","adjustment","_inventorymodel","default","findOne","newQuantity","type","updatedItem","findByIdAndUpdate","_id","$push","adjustments","reason","new"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/inventory-sync.ts"],"sourcesContent":["import { Redis } from '@upstash/redis';\nimport { logger } from './logging';\nimport { InventoryItem, InventorySync, InventoryAdjustment } from '../types/inventory';\nimport { UnifiedFulfillmentService } from './unified-fulfillment';\nimport { WebhookDispatcher } from '../webhook-dispatcher';\nimport InventoryModel from '@/lib/db/models/inventory.model';\nimport crypto from 'crypto';\nimport { FulfillmentProvider, FulfillmentConfig } from '../types/fulfillment';\nimport { ShipBobService } from '../integrations/shipbob/service';\nimport { AmazonFulfillmentService } from '../integrations/amazon/service';\nimport { AliExpressFulfillmentService } from '../integrations/aliexpress/service';\nimport { FourPXFulfillmentService } from '../integrations/4px/service';\nimport { connectToDatabase } from '@/lib/db';\n\nconst CURRENT_TIMESTAMP = '2025-04-27T12:11:47Z';\nconst CURRENT_USER = 'Mark-Lasfar';\n\n// الفئة التي تدير خدمة مزامنة المخزون\nexport class AdvancedInventorySyncService {\n  private redis: Redis;\n  private fulfillmentProviders: Map<FulfillmentProvider, any> = new Map();\n\n  constructor() {\n    // إعداد Redis\n    this.redis = new Redis({\n      url: process.env.UPSTASH_REDIS_REST_URL!,\n      token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n    });\n    this.initializeFulfillmentProviders();\n  }\n\n  // إعداد خدمات المزودين (مثل ShipBob و Amazon)\n  private initializeFulfillmentProviders() {\n    const configs: FulfillmentConfig[] = this.loadProviderConfigs();\n\n    configs.forEach(config => {\n      switch (config.provider) {\n        case 'shipbob':\n          this.fulfillmentProviders.set(\n            config.provider,\n            new ShipBobService({\n              apiKey: config.apiKey,\n              apiUrl: process.env.SHIPBOB_API_URL || 'https://api.shipbob.com',\n            })\n          );\n          break;\n        case 'amazon':\n          this.fulfillmentProviders.set(config.provider, new AmazonFulfillmentService(config));\n          break;\n        case 'aliexpress':\n          this.fulfillmentProviders.set(config.provider, new AliExpressFulfillmentService(config));\n          break;\n        case '4px':\n          this.fulfillmentProviders.set(config.provider, new FourPXFulfillmentService(config));\n          break;\n        default:\n          logger.warn('Unknown provider: ' + config.provider);\n      }\n    });\n  }\n\n  // تحميل إعدادات المزودين من البيئة\n  private loadProviderConfigs(): FulfillmentConfig[] {\n    const configs: FulfillmentConfig[] = [];\n\n    if (process.env.SHIPBOB_API_KEY) {\n      configs.push({\n        provider: 'shipbob',\n        apiKey: process.env.SHIPBOB_API_KEY,\n        sandbox: process.env.NODE_ENV !== 'production',\n        createdAt: CURRENT_TIMESTAMP,\n        createdBy: CURRENT_USER,\n        updatedAt: CURRENT_TIMESTAMP,\n        updatedBy: CURRENT_USER\n      });\n    }\n\n    if (process.env.AMAZON_API_KEY) {\n      configs.push({\n        provider: 'amazon',\n        apiKey: process.env.AMAZON_API_KEY,\n        apiSecret: process.env.AMAZON_API_SECRET,\n        region: process.env.AMAZON_REGION,\n        createdAt: CURRENT_TIMESTAMP,\n        createdBy: CURRENT_USER,\n        updatedAt: CURRENT_TIMESTAMP,\n        updatedBy: CURRENT_USER\n      });\n    }\n\n    if (process.env.ALIEXPRESS_API_KEY) {\n      configs.push({\n        provider: 'aliexpress',\n        apiKey: process.env.ALIEXPRESS_API_KEY,\n        apiSecret: process.env.ALIEXPRESS_API_SECRET,\n        createdAt: CURRENT_TIMESTAMP,\n        createdBy: CURRENT_USER,\n        updatedAt: CURRENT_TIMESTAMP,\n        updatedBy: CURRENT_USER\n      });\n    }\n\n    if (process.env.FOURPX_API_KEY) {\n      configs.push({\n        provider: '4px',\n        apiKey: process.env.FOURPX_API_KEY,\n        apiSecret: process.env.FOURPX_API_SECRET,\n        createdAt: CURRENT_TIMESTAMP,\n        createdBy: CURRENT_USER,\n        updatedAt: CURRENT_TIMESTAMP,\n        updatedBy: CURRENT_USER\n      });\n    }\n\n    return configs;\n  }\n\n  // الحصول على المزود المناسب بناءً على الاسم\n  private async getProvider(provider: FulfillmentProvider) {\n    const providerService = this.fulfillmentProviders.get(provider);\n    if (!providerService) {\n      throw new Error(`Fulfillment provider ${provider} not configured`);\n    }\n    return providerService;\n  }\n\n  // مزامنة المخزون مع المزود\n  async syncInventory(provider: FulfillmentProvider) {\n    const service = await this.getProvider(provider);\n\n    try {\n      // الحصول على مستويات المخزون من المزود\n      const inventoryLevels = await service.getInventoryLevels();\n\n      // تحديث Redis\n      await this.redis.set(\n        `inventory:${provider}`,\n        JSON.stringify(inventoryLevels),\n        { ex: 3600 } // انتهاء بعد ساعة\n      );\n\n      // مزامنة مع قاعدة البيانات\n      await this.syncWithDatabase(inventoryLevels);\n\n      logger.info('Inventory synced successfully', {\n        provider,\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n\n      return {\n        success: true,\n        data: inventoryLevels,\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      };\n    } catch (error) {\n      logger.error(\n        new Error('Inventory sync failed'),\n        {\n          provider,\n          error: error instanceof Error ? error.message : String(error),\n          timestamp: CURRENT_TIMESTAMP,\n          user: CURRENT_USER\n        }\n      );\n      throw error;\n    }\n  }\n\n  // مزامنة المخزون مع قاعدة البيانات\n  private async syncWithDatabase(inventoryLevels: any) {\n    logger.info('Syncing inventory with database...', {\n      inventoryLevels,\n      timestamp: CURRENT_TIMESTAMP,\n      user: CURRENT_USER\n    });\n\n    // مثال على مزامنة المخزون مع قاعدة بيانات (مثل MongoDB أو SQL)\n    // يمكنك إضافة منطق التحديث هنا.\n    // على سبيل المثال: await Product.updateMany({ sku: { $in: inventoryLevels.sku } }, { $set: { stock: inventoryLevels.stock } });\n  }\n\n  // الحصول على المخزون من Redis أو من المزود إذا لم يكن موجودًا\n  async getInventory(provider: FulfillmentProvider) {\n    const service = await this.getProvider(provider);\n\n    try {\n      // محاولة الحصول على المخزون من Redis أولاً\n      const cachedInventory = await this.redis.get(`inventory:${provider}`);\n      if (cachedInventory) {\n        return {\n          success: true,\n          data: JSON.parse(typeof cachedInventory === 'string' ? cachedInventory : JSON.stringify(cachedInventory)),\n          cached: true,\n          timestamp: CURRENT_TIMESTAMP,\n          requestedBy: CURRENT_USER\n        };\n      }\n\n      // إذا لم يكن موجودًا في Redis، الحصول عليه من المزود\n      const inventoryLevels = await service.getInventoryLevels();\n\n      // تحديث Redis\n      await this.redis.set(\n        `inventory:${provider}`,\n        JSON.stringify(inventoryLevels),\n        { ex: 3600 } // انتهاء بعد ساعة\n      );\n\n      return {\n        success: true,\n        data: inventoryLevels,\n        cached: false,\n        timestamp: CURRENT_TIMESTAMP,\n        requestedBy: CURRENT_USER\n      };\n\n    } catch (error) {\n      logger.error(\n        new Error('Get inventory failed'),\n        {\n          provider,\n          error: error instanceof Error ? error.message : String(error),\n          timestamp: CURRENT_TIMESTAMP,\n          user: CURRENT_USER\n        }\n      );\n      throw error;\n    }\n  }\n\n  // المزامنة مع Redis وتخزين حالة المزامنة\n  private async updateSyncStatus(\n    syncId: string,\n    status: InventorySync['status']\n  ) {\n    const sync = await this.getSyncState(syncId);\n    if (!sync) return;\n\n    sync.status = status;\n    if (status === 'completed' || status === 'failed') {\n      sync.completedAt = new Date();\n    }\n\n    await this.redis.set(`inventory-sync:${syncId}`, JSON.stringify(sync));\n  }\n\n  // تحديث تقدم المزامنة\n  private async updateSyncProgress(\n    syncId: string,\n    itemsProcessed: number,\n    totalItems?: number\n  ) {\n    const sync = await this.getSyncState(syncId);\n    if (!sync) return;\n\n    sync.itemsProcessed = itemsProcessed;\n    if (totalItems !== undefined) {\n      sync.totalItems = totalItems;\n    }\n\n    await this.redis.set(`inventory-sync:${syncId}`, JSON.stringify(sync));\n  }\n\n  // تسجيل الأخطاء أثناء المزامنة\n  private async recordSyncError(\n    syncId: string,\n    sku: string,\n    error: string\n  ) {\n    const sync = await this.getSyncState(syncId);\n    if (!sync) return;\n\n    sync.errors.push({\n      sku,\n      error,\n      timestamp: new Date(),\n    });\n\n    await this.redis.set(`inventory-sync:${syncId}`, JSON.stringify(sync));\n  }\n\n  // الحصول على حالة المزامنة\n  private async getSyncState(syncId: string): Promise<InventorySync | null> {\n    const data = await this.redis.get(`inventory-sync:${syncId}`);\n    return data ? JSON.parse(String(data)) : null;\n  }\n\n  // المزامنة مع الكائنات الأخرى مثل Webhook\n  private async sendLowStockAlert(item: InventoryItem) {\n    await WebhookDispatcher.dispatch(\n      'system',\n      'inventory.low_stock',\n      {\n        sku: item.sku,\n        quantity: item.quantity,\n        threshold: item.thresholds.low,\n        provider: item.provider,\n      }\n    );\n  }\n\n  // تحديث المخزون داخل النظام\n  async adjustInventory(adjustment: InventoryAdjustment) {\n    const item = await InventoryModel.findOne({ sku: adjustment.sku });\n    if (!item) {\n      throw new Error(`Item with SKU ${adjustment.sku} not found`);\n    }\n\n    let newQuantity: number;\n    switch (adjustment.type) {\n      case 'increase':\n        newQuantity = item.quantity + adjustment.quantity;\n        break;\n      case 'decrease':\n        newQuantity = item.quantity - adjustment.quantity;\n        if (newQuantity < 0) {\n          throw new Error('Insufficient inventory');\n        }\n        break;\n      case 'set':\n        newQuantity = adjustment.quantity;\n        break;\n    }\n\n    const updatedItem = await InventoryModel.findByIdAndUpdate(\n      item._id,\n      {\n        quantity: newQuantity,\n        updatedAt: new Date(),\n        $push: {\n          adjustments: {\n            type: adjustment.type,\n            quantity: adjustment.quantity,\n            reason: adjustment.reason,\n            createdAt: new Date(),\n          },\n        },\n      },\n      { new: true }\n    );\n\n    return updatedItem;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAkBa;;;;;;WAAAA,4BAAA;;;;;iCAlBS;;;iCAC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","ignoreList":[]}