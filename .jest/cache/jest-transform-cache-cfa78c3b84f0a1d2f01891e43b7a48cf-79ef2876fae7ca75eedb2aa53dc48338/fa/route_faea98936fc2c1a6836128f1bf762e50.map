{"version":3,"names":["cov_1dltsbxuoo","actualCoverage","s","POST","request","f","headersList","_headers","headers","userAgent","b","get","referer","url","json","analyticsData","type","timestamp","Date","toISOString","console","log","_server","NextResponse","success","message","error","Error","status"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/analytics/pageview/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { headers } from 'next/headers'\n\ninterface AnalyticsData {\n  type: 'pageview'\n  url: string\n  userAgent: string\n  referer: string\n  timestamp: string\n}\n\ninterface PageViewPayload {\n  url: string\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const headersList = await headers()\n    const userAgent = headersList.get('user-agent') ?? ''\n    const referer = headersList.get('referer') ?? ''\n    const { url } = (await request.json()) as PageViewPayload\n\n    const analyticsData: AnalyticsData = {\n      type: 'pageview',\n      url,\n      userAgent,\n      referer,\n      timestamp: new Date().toISOString(),\n    }\n\n    console.log('Analytics data:', analyticsData)\n\n    return NextResponse.json({\n      success: true,\n      message: 'Pageview tracked successfully',\n    })\n  } catch (error) {\n    console.error('Analytics error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message:\n          error instanceof Error ? error.message : 'Failed to track pageview',\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// Current Date and Time (UTC): 2025-04-19 23:40:30\n// Current User's Login: ibrahim-lasfar\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBI;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAHkB;;;;;;WAAAC,IAAA;;;;;kCAfoB;;;kCAClB;AAcjB,eAAeA,KAAKC,OAAoB;EAAA;EAAAJ,cAAA,GAAAK,CAAA;EAAAL,cAAA,GAAAE,CAAA;EAC7C,IAAI;IACF,MAAMI,WAAA;IAAA;IAAA,CAAAN,cAAA,GAAAE,CAAA,OAAc,MAAM,IAAAK,QAAA,CAAAC,OAAO;IACjC,MAAMC,SAAA;IAAA;IAAA,CAAAT,cAAA,GAAAE,CAAA;IAAY;IAAA,CAAAF,cAAA,GAAAU,CAAA,UAAAJ,WAAA,CAAYK,GAAG,CAAC;IAAA;IAAA,CAAAX,cAAA,GAAAU,CAAA,UAAiB;IACnD,MAAME,OAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA;IAAU;IAAA,CAAAF,cAAA,GAAAU,CAAA,UAAAJ,WAAA,CAAYK,GAAG,CAAC;IAAA;IAAA,CAAAX,cAAA,GAAAU,CAAA,UAAc;IAC9C,MAAM;MAAEG;IAAG,CAAE;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,OAAI,MAAME,OAAA,CAAQU,IAAI;IAEnC,MAAMC,aAAA;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,QAA+B;MACnCc,IAAA,EAAM;MACNH,GAAA;MACAJ,SAAA;MACAG,OAAA;MACAK,SAAA,EAAW,IAAIC,IAAA,GAAOC,WAAW;IACnC;IAAA;IAAAnB,cAAA,GAAAE,CAAA;IAEAkB,OAAA,CAAQC,GAAG,CAAC,mBAAmBN,aAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAE/B,OAAOoB,OAAA,CAAAC,YAAY,CAACT,IAAI,CAAC;MACvBU,OAAA,EAAS;MACTC,OAAA,EAAS;IACX;EACF,EAAE,OAAOC,KAAA,EAAO;IAAA;IAAA1B,cAAA,GAAAE,CAAA;IACdkB,OAAA,CAAQM,KAAK,CAAC,oBAAoBA,KAAA;IAAA;IAAA1B,cAAA,GAAAE,CAAA;IAClC,OAAOoB,OAAA,CAAAC,YAAY,CAACT,IAAI,CACtB;MACEU,OAAA,EAAS;MACTC,OAAA,EACEC,KAAA,YAAiBC,KAAA;MAAA;MAAA,CAAA3B,cAAA,GAAAU,CAAA,UAAQgB,KAAA,CAAMD,OAAO;MAAA;MAAA,CAAAzB,cAAA,GAAAU,CAAA,UAAG;IAC7C,GACA;MAAEkB,MAAA,EAAQ;IAAI;EAElB;AACF,EAEA;AACA","ignoreList":[]}