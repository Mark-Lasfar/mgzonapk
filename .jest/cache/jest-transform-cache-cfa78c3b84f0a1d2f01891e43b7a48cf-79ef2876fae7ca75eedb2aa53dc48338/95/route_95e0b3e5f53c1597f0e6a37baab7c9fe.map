{"version":3,"names":["cov_zwyozqna9","actualCoverage","s","GET","f","startTime","Date","now","checks","_db","connectToDatabase","database","status","latency","error","_logging","logger","providers","fulfillmentService","_unifiedfulfillment","UnifiedFulfillmentService","provider","providerStart","checkProviderHealth","overallStatus","Object","values","every","check","b","_server","NextResponse","json","timestamp","toISOString","uptime","process","environment","env","NODE_ENV","message"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/monitoring/health/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport { UnifiedFulfillmentService } from '@/lib/api/services/unified-fulfillment';\nimport { logger } from '@/lib/api/services/logging';\n\nexport async function GET() {\n  const startTime = Date.now();\n  const checks: Record<string, { status: string; latency?: number }> = {};\n\n  try {\n    // Check database connection\n    try {\n      await connectToDatabase();\n      checks.database = { \n        status: 'healthy',\n        latency: Date.now() - startTime \n      };\n    } catch (error) {\n      checks.database = { status: 'unhealthy' };\n      logger.error('Database health check failed', { error });\n    }\n\n    // Check fulfillment providers\n    const providers = ['shipbob', 'amazon', 'aliexpress', '4px'];\n    const fulfillmentService = new UnifiedFulfillmentService([\n      // ... provider configurations\n    ]);\n\n    for (const provider of providers) {\n      try {\n        const providerStart = Date.now();\n        await fulfillmentService.checkProviderHealth(provider);\n        checks[provider] = {\n          status: 'healthy',\n          latency: Date.now() - providerStart\n        };\n      } catch (error) {\n        checks[provider] = { status: 'unhealthy' };\n        logger.error(`${provider} health check failed`, { error });\n      }\n    }\n\n    const overallStatus = Object.values(checks)\n      .every(check => check.status === 'healthy')\n      ? 'healthy'\n      : 'degraded';\n\n    return NextResponse.json({\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      checks,\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV,\n    });\n\n  } catch (error) {\n    logger.error('Health check failed', { error });\n    return NextResponse.json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      checks,\n      error: error.message\n    }, { \n      status: 500 \n    });\n  }\n}"],"mappings":"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","ignoreList":[]}