ad719030af44913bb7e661b0179801b8
"use strict";

/* istanbul ignore next */
function cov_zwyozqna9() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/monitoring/health/route.ts";
  var hash = "13be08d6bfa7c12ebdf447a09e66f8a55226734f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/monitoring/health/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 44
        }
      },
      "5": {
        start: {
          line: 13,
          column: 28
        },
        end: {
          line: 13,
          column: 90
        }
      },
      "6": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 67
        }
      },
      "7": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 32
        }
      },
      "8": {
        start: {
          line: 17,
          column: 19
        },
        end: {
          line: 17,
          column: 21
        }
      },
      "9": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "11": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 47
        }
      },
      "12": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 25,
          column: 14
        }
      },
      "13": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 29,
          column: 14
        }
      },
      "14": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "15": {
        start: {
          line: 35,
          column: 26
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "16": {
        start: {
          line: 41,
          column: 35
        },
        end: {
          line: 41,
          column: 88
        }
      },
      "17": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "18": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "19": {
        start: {
          line: 44,
          column: 38
        },
        end: {
          line: 44,
          column: 48
        }
      },
      "20": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 71
        }
      },
      "21": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 49,
          column: 18
        }
      },
      "22": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 53,
          column: 18
        }
      },
      "23": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 56,
          column: 19
        }
      },
      "24": {
        start: {
          line: 59,
          column: 30
        },
        end: {
          line: 59,
          column: 119
        }
      },
      "25": {
        start: {
          line: 59,
          column: 67
        },
        end: {
          line: 59,
          column: 93
        }
      },
      "26": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "27": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "28": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 78,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 18
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 59,
            column: 58
          },
          end: {
            line: 59,
            column: 59
          }
        },
        loc: {
          start: {
            line: 59,
            column: 67
          },
          end: {
            line: 59,
            column: 93
          }
        },
        line: 59
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 59,
            column: 30
          },
          end: {
            line: 59,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 97
          },
          end: {
            line: 59,
            column: 106
          }
        }, {
          start: {
            line: 59,
            column: 109
          },
          end: {
            line: 59,
            column: 119
          }
        }],
        line: 59
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/monitoring/health/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport { UnifiedFulfillmentService } from '@/lib/api/services/unified-fulfillment';\nimport { logger } from '@/lib/api/services/logging';\n\nexport async function GET() {\n  const startTime = Date.now();\n  const checks: Record<string, { status: string; latency?: number }> = {};\n\n  try {\n    // Check database connection\n    try {\n      await connectToDatabase();\n      checks.database = { \n        status: 'healthy',\n        latency: Date.now() - startTime \n      };\n    } catch (error) {\n      checks.database = { status: 'unhealthy' };\n      logger.error('Database health check failed', { error });\n    }\n\n    // Check fulfillment providers\n    const providers = ['shipbob', 'amazon', 'aliexpress', '4px'];\n    const fulfillmentService = new UnifiedFulfillmentService([\n      // ... provider configurations\n    ]);\n\n    for (const provider of providers) {\n      try {\n        const providerStart = Date.now();\n        await fulfillmentService.checkProviderHealth(provider);\n        checks[provider] = {\n          status: 'healthy',\n          latency: Date.now() - providerStart\n        };\n      } catch (error) {\n        checks[provider] = { status: 'unhealthy' };\n        logger.error(`${provider} health check failed`, { error });\n      }\n    }\n\n    const overallStatus = Object.values(checks)\n      .every(check => check.status === 'healthy')\n      ? 'healthy'\n      : 'degraded';\n\n    return NextResponse.json({\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      checks,\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV,\n    });\n\n  } catch (error) {\n    logger.error('Health check failed', { error });\n    return NextResponse.json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      checks,\n      error: error.message\n    }, { \n      status: 500 \n    });\n  }\n}"],
      names: ["GET", "startTime", "Date", "now", "checks", "connectToDatabase", "database", "status", "latency", "error", "logger", "providers", "fulfillmentService", "UnifiedFulfillmentService", "provider", "providerStart", "checkProviderHealth", "overallStatus", "Object", "values", "every", "check", "NextResponse", "json", "timestamp", "toISOString", "uptime", "process", "environment", "env", "NODE_ENV", "message"],
      mappings: ";;;;+BAKsBA;;;eAAAA;;;wBALO;oBACK;oCACQ;yBACnB;AAEhB,eAAeA;IACpB,MAAMC,YAAYC,KAAKC,GAAG;IAC1B,MAAMC,SAA+D,CAAC;IAEtE,IAAI;QACF,4BAA4B;QAC5B,IAAI;YACF,MAAMC,IAAAA,qBAAiB;YACvBD,OAAOE,QAAQ,GAAG;gBAChBC,QAAQ;gBACRC,SAASN,KAAKC,GAAG,KAAKF;YACxB;QACF,EAAE,OAAOQ,OAAO;YACdL,OAAOE,QAAQ,GAAG;gBAAEC,QAAQ;YAAY;YACxCG,eAAM,CAACD,KAAK,CAAC,gCAAgC;gBAAEA;YAAM;QACvD;QAEA,8BAA8B;QAC9B,MAAME,YAAY;YAAC;YAAW;YAAU;YAAc;SAAM;QAC5D,MAAMC,qBAAqB,IAAIC,6CAAyB,CAAC,EAExD;QAED,KAAK,MAAMC,YAAYH,UAAW;YAChC,IAAI;gBACF,MAAMI,gBAAgBb,KAAKC,GAAG;gBAC9B,MAAMS,mBAAmBI,mBAAmB,CAACF;gBAC7CV,MAAM,CAACU,SAAS,GAAG;oBACjBP,QAAQ;oBACRC,SAASN,KAAKC,GAAG,KAAKY;gBACxB;YACF,EAAE,OAAON,OAAO;gBACdL,MAAM,CAACU,SAAS,GAAG;oBAAEP,QAAQ;gBAAY;gBACzCG,eAAM,CAACD,KAAK,CAAC,GAAGK,SAAS,oBAAoB,CAAC,EAAE;oBAAEL;gBAAM;YAC1D;QACF;QAEA,MAAMQ,gBAAgBC,OAAOC,MAAM,CAACf,QACjCgB,KAAK,CAACC,CAAAA,QAASA,MAAMd,MAAM,KAAK,aAC/B,YACA;QAEJ,OAAOe,oBAAY,CAACC,IAAI,CAAC;YACvBhB,QAAQU;YACRO,WAAW,IAAItB,OAAOuB,WAAW;YACjCrB;YACAsB,QAAQC,QAAQD,MAAM;YACtBE,aAAaD,QAAQE,GAAG,CAACC,QAAQ;QACnC;IAEF,EAAE,OAAOrB,OAAO;QACdC,eAAM,CAACD,KAAK,CAAC,uBAAuB;YAAEA;QAAM;QAC5C,OAAOa,oBAAY,CAACC,IAAI,CAAC;YACvBhB,QAAQ;YACRiB,WAAW,IAAItB,OAAOuB,WAAW;YACjCrB;YACAK,OAAOA,MAAMsB,OAAO;QACtB,GAAG;YACDxB,QAAQ;QACV;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "13be08d6bfa7c12ebdf447a09e66f8a55226734f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_zwyozqna9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_zwyozqna9();
cov_zwyozqna9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_zwyozqna9().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_zwyozqna9().f[0]++;
    cov_zwyozqna9().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_zwyozqna9().s[3]++, require("next/server"));
const _db =
/* istanbul ignore next */
(cov_zwyozqna9().s[4]++, require("../../../../../lib/db"));
const _unifiedfulfillment =
/* istanbul ignore next */
(cov_zwyozqna9().s[5]++, require("../../../../../lib/api/services/unified-fulfillment"));
const _logging =
/* istanbul ignore next */
(cov_zwyozqna9().s[6]++, require("../../../../../lib/api/services/logging"));
async function GET() {
  /* istanbul ignore next */
  cov_zwyozqna9().f[1]++;
  const startTime =
  /* istanbul ignore next */
  (cov_zwyozqna9().s[7]++, Date.now());
  const checks =
  /* istanbul ignore next */
  (cov_zwyozqna9().s[8]++, {});
  /* istanbul ignore next */
  cov_zwyozqna9().s[9]++;
  try {
    /* istanbul ignore next */
    cov_zwyozqna9().s[10]++;
    // Check database connection
    try {
      /* istanbul ignore next */
      cov_zwyozqna9().s[11]++;
      await (0, _db.connectToDatabase)();
      /* istanbul ignore next */
      cov_zwyozqna9().s[12]++;
      checks.database = {
        status: 'healthy',
        latency: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_zwyozqna9().s[13]++;
      checks.database = {
        status: 'unhealthy'
      };
      /* istanbul ignore next */
      cov_zwyozqna9().s[14]++;
      _logging.logger.error('Database health check failed', {
        error
      });
    }
    // Check fulfillment providers
    const providers =
    /* istanbul ignore next */
    (cov_zwyozqna9().s[15]++, ['shipbob', 'amazon', 'aliexpress', '4px']);
    const fulfillmentService =
    /* istanbul ignore next */
    (cov_zwyozqna9().s[16]++, new _unifiedfulfillment.UnifiedFulfillmentService([]));
    /* istanbul ignore next */
    cov_zwyozqna9().s[17]++;
    for (const provider of providers) {
      /* istanbul ignore next */
      cov_zwyozqna9().s[18]++;
      try {
        const providerStart =
        /* istanbul ignore next */
        (cov_zwyozqna9().s[19]++, Date.now());
        /* istanbul ignore next */
        cov_zwyozqna9().s[20]++;
        await fulfillmentService.checkProviderHealth(provider);
        /* istanbul ignore next */
        cov_zwyozqna9().s[21]++;
        checks[provider] = {
          status: 'healthy',
          latency: Date.now() - providerStart
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_zwyozqna9().s[22]++;
        checks[provider] = {
          status: 'unhealthy'
        };
        /* istanbul ignore next */
        cov_zwyozqna9().s[23]++;
        _logging.logger.error(`${provider} health check failed`, {
          error
        });
      }
    }
    const overallStatus =
    /* istanbul ignore next */
    (cov_zwyozqna9().s[24]++, Object.values(checks).every(check => {
      /* istanbul ignore next */
      cov_zwyozqna9().f[2]++;
      cov_zwyozqna9().s[25]++;
      return check.status === 'healthy';
    }) ?
    /* istanbul ignore next */
    (cov_zwyozqna9().b[0][0]++, 'healthy') :
    /* istanbul ignore next */
    (cov_zwyozqna9().b[0][1]++, 'degraded'));
    /* istanbul ignore next */
    cov_zwyozqna9().s[26]++;
    return _server.NextResponse.json({
      status: overallStatus,
      timestamp: new Date().toISOString(),
      checks,
      uptime: process.uptime(),
      environment: process.env.NODE_ENV
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_zwyozqna9().s[27]++;
    _logging.logger.error('Health check failed', {
      error
    });
    /* istanbul ignore next */
    cov_zwyozqna9().s[28]++;
    return _server.NextResponse.json({
      status: 'unhealthy',
      timestamp: new Date().toISOString(),
      checks,
      error: error.message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfend5b3pxbmE5IiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiR0VUIiwiZiIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJjaGVja3MiLCJfZGIiLCJjb25uZWN0VG9EYXRhYmFzZSIsImRhdGFiYXNlIiwic3RhdHVzIiwibGF0ZW5jeSIsImVycm9yIiwiX2xvZ2dpbmciLCJsb2dnZXIiLCJwcm92aWRlcnMiLCJmdWxmaWxsbWVudFNlcnZpY2UiLCJfdW5pZmllZGZ1bGZpbGxtZW50IiwiVW5pZmllZEZ1bGZpbGxtZW50U2VydmljZSIsInByb3ZpZGVyIiwicHJvdmlkZXJTdGFydCIsImNoZWNrUHJvdmlkZXJIZWFsdGgiLCJvdmVyYWxsU3RhdHVzIiwiT2JqZWN0IiwidmFsdWVzIiwiZXZlcnkiLCJjaGVjayIsImIiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsInRpbWVzdGFtcCIsInRvSVNPU3RyaW5nIiwidXB0aW1lIiwicHJvY2VzcyIsImVudmlyb25tZW50IiwiZW52IiwiTk9ERV9FTlYiLCJtZXNzYWdlIl0sInNvdXJjZXMiOlsiL2hvbWUvaGFnZXIvbmV3L215LW5leHRqcy1wcm9qZWN0LW1hc3RlciAoMykvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyL2FwcC9hcGkvdjEvbW9uaXRvcmluZy9oZWFsdGgvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgY29ubmVjdFRvRGF0YWJhc2UgfSBmcm9tICdAL2xpYi9kYic7XG5pbXBvcnQgeyBVbmlmaWVkRnVsZmlsbG1lbnRTZXJ2aWNlIH0gZnJvbSAnQC9saWIvYXBpL3NlcnZpY2VzL3VuaWZpZWQtZnVsZmlsbG1lbnQnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQC9saWIvYXBpL3NlcnZpY2VzL2xvZ2dpbmcnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICBjb25zdCBjaGVja3M6IFJlY29yZDxzdHJpbmcsIHsgc3RhdHVzOiBzdHJpbmc7IGxhdGVuY3k/OiBudW1iZXIgfT4gPSB7fTtcblxuICB0cnkge1xuICAgIC8vIENoZWNrIGRhdGFiYXNlIGNvbm5lY3Rpb25cbiAgICB0cnkge1xuICAgICAgYXdhaXQgY29ubmVjdFRvRGF0YWJhc2UoKTtcbiAgICAgIGNoZWNrcy5kYXRhYmFzZSA9IHsgXG4gICAgICAgIHN0YXR1czogJ2hlYWx0aHknLFxuICAgICAgICBsYXRlbmN5OiBEYXRlLm5vdygpIC0gc3RhcnRUaW1lIFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2hlY2tzLmRhdGFiYXNlID0geyBzdGF0dXM6ICd1bmhlYWx0aHknIH07XG4gICAgICBsb2dnZXIuZXJyb3IoJ0RhdGFiYXNlIGhlYWx0aCBjaGVjayBmYWlsZWQnLCB7IGVycm9yIH0pO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZ1bGZpbGxtZW50IHByb3ZpZGVyc1xuICAgIGNvbnN0IHByb3ZpZGVycyA9IFsnc2hpcGJvYicsICdhbWF6b24nLCAnYWxpZXhwcmVzcycsICc0cHgnXTtcbiAgICBjb25zdCBmdWxmaWxsbWVudFNlcnZpY2UgPSBuZXcgVW5pZmllZEZ1bGZpbGxtZW50U2VydmljZShbXG4gICAgICAvLyAuLi4gcHJvdmlkZXIgY29uZmlndXJhdGlvbnNcbiAgICBdKTtcblxuICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgcHJvdmlkZXJzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwcm92aWRlclN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgYXdhaXQgZnVsZmlsbG1lbnRTZXJ2aWNlLmNoZWNrUHJvdmlkZXJIZWFsdGgocHJvdmlkZXIpO1xuICAgICAgICBjaGVja3NbcHJvdmlkZXJdID0ge1xuICAgICAgICAgIHN0YXR1czogJ2hlYWx0aHknLFxuICAgICAgICAgIGxhdGVuY3k6IERhdGUubm93KCkgLSBwcm92aWRlclN0YXJ0XG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjaGVja3NbcHJvdmlkZXJdID0geyBzdGF0dXM6ICd1bmhlYWx0aHknIH07XG4gICAgICAgIGxvZ2dlci5lcnJvcihgJHtwcm92aWRlcn0gaGVhbHRoIGNoZWNrIGZhaWxlZGAsIHsgZXJyb3IgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgb3ZlcmFsbFN0YXR1cyA9IE9iamVjdC52YWx1ZXMoY2hlY2tzKVxuICAgICAgLmV2ZXJ5KGNoZWNrID0+IGNoZWNrLnN0YXR1cyA9PT0gJ2hlYWx0aHknKVxuICAgICAgPyAnaGVhbHRoeSdcbiAgICAgIDogJ2RlZ3JhZGVkJztcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdGF0dXM6IG92ZXJhbGxTdGF0dXMsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGNoZWNrcyxcbiAgICAgIHVwdGltZTogcHJvY2Vzcy51cHRpbWUoKSxcbiAgICAgIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5OT0RFX0VOVixcbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZ2dlci5lcnJvcignSGVhbHRoIGNoZWNrIGZhaWxlZCcsIHsgZXJyb3IgfSk7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN0YXR1czogJ3VuaGVhbHRoeScsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGNoZWNrcyxcbiAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgfSwgeyBcbiAgICAgIHN0YXR1czogNTAwIFxuICAgIH0pO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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