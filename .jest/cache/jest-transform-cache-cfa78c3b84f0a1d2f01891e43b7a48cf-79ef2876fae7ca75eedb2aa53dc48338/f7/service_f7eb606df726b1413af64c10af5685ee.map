{"version":3,"names":["cov_2qi2jkgr3i","actualCoverage","s","FourPXFulfillmentService","constructor","config","f","b","apiKey","apiSecret","Error","client","_4pxclient","FourPXClient","warehouseId","createFulfillmentOrder","order","items","length","response","createOrder","ref_no","orderId","warehouse_code","defaultWarehouse","consignee_info","name","shippingAddress","company","address1","street1","address2","street2","city","state","country","postcode","postalCode","phone","email","shipping_method","shippingMethod","map","item","sku","quantity","success","data","order_id","status","error","message","getFulfillmentOrder","getOrder","trackingNumber","tracking_number","carrier","updatedAt","update_time"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/integrations/4px/service.ts"],"sourcesContent":["import { FulfillmentOrder, FulfillmentConfig } from '../../types/fulfillment';\nimport { FourPXClient } from './4px-client';\n\nexport class FourPXFulfillmentService {\n  private client: FourPXClient;\n\n  constructor(config: FulfillmentConfig) {\n    if (!config.apiKey || !config.apiSecret) {\n      throw new Error('Missing API credentials for 4PX fulfillment service.');\n    }\n\n    this.client = new FourPXClient({\n      apiKey: config.apiKey,\n      apiSecret: config.apiSecret,\n      warehouseId: config.warehouseId,\n    });\n  }\n\n  async createFulfillmentOrder(order: FulfillmentOrder) {\n    try {\n      if (!order.items.length) {\n        throw new Error('Order must have at least one item.');\n      }\n\n      const response = await this.client.createOrder({\n        ref_no: order.orderId,\n        warehouse_code: this.client.defaultWarehouse,\n        consignee_info: {\n          name: order.shippingAddress.name || '',\n          company: order.shippingAddress.company || '',\n          address1: order.shippingAddress.street1 || '',\n          address2: order.shippingAddress.street2 || '',\n          city: order.shippingAddress.city,\n          state: order.shippingAddress.state,\n          country: order.shippingAddress.country,\n          postcode: order.shippingAddress.postalCode,\n          phone: order.shippingAddress.phone,\n          email: order.shippingAddress.email || '',\n        },\n        shipping_method: order.shippingMethod,\n        items: order.items.map(item => ({\n          sku: item.sku,\n          quantity: item.quantity,\n        })),\n      });\n\n      return {\n        success: true,\n        data: {\n          orderId: response.order_id,\n          status: 'processing',\n        },\n      };\n    } catch (error: any) {\n      throw new Error(`4PX fulfillment error: ${error?.message || 'Unknown error'}`);\n    }\n  }\n\n  async getFulfillmentOrder(orderId: string) {\n    try {\n      const response = await this.client.getOrder(orderId);\n\n      return {\n        success: true,\n        data: {\n          status: response.status,\n          trackingNumber: response.tracking_number || '',\n          carrier: response.carrier || '',\n          updatedAt: response.update_time,\n        },\n      };\n    } catch (error: any) {\n      throw new Error(`4PX tracking error: ${error?.message || 'Unknown error'}`);\n    }\n  }\n}\n"],"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","ignoreList":[]}