{"version":3,"names":["analyzeSales","cov_nev0krhr","f","s","applyTransformationRules","exportProducts","fetchOrders","fetchProducts","getBackupMetadata","importProducts","shopifyConfig","syncData","SHOPIFY_API_URL","process","env","SHOPIFY_ACCESS_TOKEN","http","_axios","default","create","baseURL","headers","name","supportsImport","supportsExport","supportsSync","supportsAnalytics","res","get","data","products","map","product","variants","v","id","toString","sku","price","parseFloat","quantity","inventory_quantity","images","i","url","src","alt","b","title","description","body_html","options","o","values","err","_logging","logger","error","orders","order","status","financial_status","total","total_price","createdAt","Date","created_at","customer","first_name","last_name","email","items","line_items","item","productId","product_id","format","_csv","parseCSV","file","_xml","parseXML","imported","length","warnings","success","errors","message","line","csv","createCSV","remote","local","localProducts","conflicts","forEach","localProduct","matchingRemote","find","r","push","field","localValue","remoteValue","updated","totalRevenue","reduce","sum","totalOrders","topProducts","rules","newPrice","rule","type","value","toFixed","source","timestamp","toISOString","itemCount"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/services/marketplace/shopify.ts"],"sourcesContent":["import axios from 'axios';\nimport { createCSV, parseCSV } from '@/lib/utils/csv';\nimport { parseXML } from '@/lib/utils/xml';\nimport { logger } from '../logging';\nimport {\n  MarketplaceProduct,\n  ProductImage,\n  ProductVariant,\n  ProductOption,\n  ImportOptions,\n  ImportResult,\n  ImportError,\n  ImportWarning,\n  ExportOptions,\n  ExportResult,\n  MarketplaceConfig,\n  SyncOptions,\n  SyncResult,\n  SyncConflict,\n  AnalyticsData,\n  TransformationRule,\n  BackupMetadata,\n  MarketplaceOrder,\n  ShopifyProductResponse,\n  ShopifyOrderResponse\n} from './types';\n// import { logger } from '@/lib/utils/logger';\n\nconst SHOPIFY_API_URL = process.env.SHOPIFY_API_URL!;\nconst SHOPIFY_ACCESS_TOKEN = process.env.SHOPIFY_ACCESS_TOKEN!;\n\nconst http = axios.create({\n  baseURL: SHOPIFY_API_URL,\n  headers: {\n    'X-Shopify-Access-Token': SHOPIFY_ACCESS_TOKEN,\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const shopifyConfig: MarketplaceConfig = {\n  name: 'Shopify',\n  supportsImport: true,\n  supportsExport: true,\n  supportsSync: true,\n  supportsAnalytics: true,\n};\n\nexport async function fetchProducts(): Promise<MarketplaceProduct[]> {\n  try {\n    const res = await http.get<ShopifyProductResponse>('/products.json');\n\n    return res.data.products.map(product => {\n      const variants: ProductVariant[] = product.variants.map(v => ({\n        id: v.id.toString(),\n        sku: v.sku,\n        price: parseFloat(v.price),\n        quantity: v.inventory_quantity,\n      }));\n\n      const images: ProductImage[] = product.images.map(i => ({\n        url: i.src,\n        alt: i.alt || '',\n      }));\n\n      return {\n        id: product.id.toString(),\n        title: product.title,\n        description: product.body_html,\n        price: parseFloat(product.variants[0]?.price || '0'),\n        quantity: product.variants[0]?.inventory_quantity || 0,\n        images,\n        variants,\n        options: product.options.map(o => ({\n          name: o.name,\n          values: o.values,\n        })) as ProductOption[],\n      };\n    });\n  } catch (err) {\n    logger.error('Error fetching Shopify products', err);\n    return [];\n  }\n}\n\nexport async function fetchOrders(): Promise<MarketplaceOrder[]> {\n  try {\n    const res = await http.get<ShopifyOrderResponse>('/orders.json');\n\n    return res.data.orders.map(order => ({\n      id: order.id.toString(),\n      status: order.financial_status,\n      total: parseFloat(order.total_price),\n      createdAt: new Date(order.created_at),\n      customer: {\n        name: `${order.customer.first_name} ${order.customer.last_name}`,\n        email: order.customer.email,\n      },\n      items: order.line_items.map(item => ({\n        productId: item.product_id.toString(),\n        quantity: item.quantity,\n        price: parseFloat(item.price),\n      })),\n    }));\n  } catch (err) {\n    logger.error('Error fetching Shopify orders', err);\n    return [];\n  }\n}\n\nexport async function importProducts(options: ImportOptions): Promise<ImportResult> {\n  try {\n    const data = options.format === 'csv'\n      ? await parseCSV(options.file)\n      : await parseXML(options.file);\n\n    const imported = data.length;\n    const warnings: ImportWarning[] = [];\n\n    return {\n      success: true,\n      imported,\n      warnings,\n    };\n  } catch (err) {\n    logger.error('Import failed', err);\n    const errors: ImportError[] = [{\n      message: 'Failed to parse file.',\n      line: 0,\n    }];\n    return {\n      success: false,\n      imported: 0,\n      errors,\n    };\n  }\n}\n\nexport async function exportProducts(options: ExportOptions): Promise<ExportResult> {\n  try {\n    const products = await fetchProducts();\n    const csv = createCSV(products);\n\n    return {\n      success: true,\n      file: csv,\n    };\n  } catch (err) {\n    logger.error('Export failed', err);\n    return {\n      success: false,\n      error: 'Failed to export products.',\n    };\n  }\n}\n\nexport async function syncData(options: SyncOptions): Promise<SyncResult> {\n  try {\n    const remote = await fetchProducts();\n    const local = options.localProducts || [];\n\n    const conflicts: SyncConflict[] = [];\n\n    local.forEach(localProduct => {\n      const matchingRemote = remote.find(r => r.id === localProduct.id);\n      if (matchingRemote && matchingRemote.price !== localProduct.price) {\n        conflicts.push({\n          productId: localProduct.id,\n          field: 'price',\n          localValue: localProduct.price,\n          remoteValue: matchingRemote.price,\n        });\n      }\n    });\n\n    return {\n      success: true,\n      updated: remote.length,\n      conflicts,\n    };\n  } catch (err) {\n    logger.error('Sync error', err);\n    return {\n      success: false,\n      updated: 0,\n      conflicts: [],\n    };\n  }\n}\n\nexport async function analyzeSales(): Promise<AnalyticsData> {\n  const orders = await fetchOrders();\n  const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0);\n\n  return {\n    totalOrders: orders.length,\n    totalRevenue,\n    topProducts: [], // Optional: fill later with bestsellers logic\n  };\n}\n\nexport async function applyTransformationRules(\n  products: MarketplaceProduct[],\n  rules: TransformationRule[]\n): Promise<MarketplaceProduct[]> {\n  return products.map(product => {\n    let newPrice = product.price;\n\n    rules.forEach(rule => {\n      if (rule.type === 'markup') {\n        newPrice += newPrice * (rule.value / 100);\n      } else if (rule.type === 'discount') {\n        newPrice -= newPrice * (rule.value / 100);\n      }\n    });\n\n    return {\n      ...product,\n      price: parseFloat(newPrice.toFixed(2)),\n    };\n  });\n}\n\nexport async function getBackupMetadata(): Promise<BackupMetadata> {\n  const products = await fetchProducts();\n\n  return {\n    source: 'shopify',\n    timestamp: new Date().toISOString(),\n    itemCount: products.length,\n  };\n}\n"],"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","ignoreList":[]}