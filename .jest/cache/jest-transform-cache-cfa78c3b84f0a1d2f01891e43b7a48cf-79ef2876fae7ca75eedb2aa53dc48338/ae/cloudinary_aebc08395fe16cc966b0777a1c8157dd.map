{"version":3,"names":["deleteFromCloudinary","cov_1tq0emjv89","f","s","getPublicIdFromUrl","uploadToCloudinary","_cloudinary","v2","config","cloud_name","process","env","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","file","options","b","buffer","File","arrayBuffer","maxSize","byteLength","Error","Promise","resolve","reject","uploader","upload_stream","folder","public_id","Date","now","resource_type","overwrite","allowed_formats","allowedFormats","err","result","end","Buffer","from","publicId","destroy","url","parts","split","filename","length"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/cloudinary.ts"],"sourcesContent":["\nimport { v2 as cloudinary } from 'cloudinary'\nimport type { UploadApiResponse } from 'cloudinary'\n\n// Cloudinary configuration\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME!,\n  api_key: process.env.CLOUDINARY_API_KEY!,\n  api_secret: process.env.CLOUDINARY_API_SECRET!,\n})\n\nexport interface StorageOptions {\n  folder?: string\n  public_id?: string\n  resource_type?: 'auto' | 'image' | 'video' | 'raw'\n  overwrite?: boolean\n  maxSize?: number\n  allowedFormats?: string[]\n}\n\nexport async function uploadToCloudinary(\n  file: File | Buffer,\n  options: StorageOptions = {}\n): Promise<UploadApiResponse> {\n  const buffer = file instanceof File ? await file.arrayBuffer() : file\n\n  if (options.maxSize && buffer.byteLength > options.maxSize) {\n    throw new Error(`File exceeds size limit of ${options.maxSize / 1024 / 1024}MB`)\n  }\n\n  return await new Promise((resolve, reject) => {\n    cloudinary.uploader.upload_stream(\n      {\n        folder: options.folder ?? 'uploads',\n        public_id: options.public_id ?? `${Date.now()}`,\n        resource_type: options.resource_type ?? 'auto',\n        overwrite: options.overwrite ?? true,\n        allowed_formats: options.allowedFormats,\n      },\n      (err, result) => (err ? reject(err) : resolve(result!))\n    ).end(Buffer.from(buffer))\n  })\n}\n\nexport async function deleteFromCloudinary(publicId: string): Promise<void> {\n  await cloudinary.uploader.destroy(publicId)\n}\n\nexport function getPublicIdFromUrl(url: string): string {\n  const parts = url.split('/')\n  const filename = parts[parts.length - 1]\n  return filename.split('.')[0]\n}\n"],"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","ignoreList":[]}