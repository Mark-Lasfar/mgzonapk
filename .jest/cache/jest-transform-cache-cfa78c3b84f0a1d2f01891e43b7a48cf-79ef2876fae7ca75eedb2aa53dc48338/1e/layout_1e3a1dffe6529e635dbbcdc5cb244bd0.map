{"version":3,"names":["cov_119puea7qt","actualCoverage","s","SellerLayout","children","params","f","session","headersList","Promise","all","_auth","auth","_headers","headers","pathname","b","get","pathSegments","split","isRegistrationPage","includes","isErrorPage","user","_navigation","redirect","locale","_jsxruntime","jsx","className","error","console"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/[locale]/(root)/seller/layout.tsx"],"sourcesContent":["import { redirect } from 'next/navigation'\nimport { auth } from '@/auth'\nimport type { ReactNode } from 'react'\nimport { headers } from 'next/headers'\n\nexport default async function SellerLayout({\n  children,\n  params,\n}: {\n  children: ReactNode\n  params: { locale: string }\n}) {\n  try {\n    // Execute all asynchronous operations concurrently\n    const [session, headersList] = await Promise.all([\n      auth(),\n      headers(),\n    ])\n\n    // Parse the pathname\n    const pathname = headersList.get('x-invoke-path') || ''\n    const pathSegments = pathname.split('/')\n\n    const isRegistrationPage = pathSegments.includes('registration')\n    const isErrorPage = pathSegments.includes('error')\n\n    // Check authentication and redirect if necessary\n    if (!session?.user && !isRegistrationPage && !isErrorPage) {\n      return redirect(`/${params.locale}/seller/registration`)\n    }\n\n    // Render the layout with content\n    return (\n      <div className=\"min-h-screen bg-background\">\n        {children}\n      </div>\n    )\n  } catch (error) {\n    console.error('Seller Layout Error:', error)\n    return redirect(`/${params.locale}/error`)\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYM;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAPN;;;;;;WAA8BC,YAAA;;;;;;;;kCALL;;;kCACJ;;;kCAEG;AAET,eAAeA,aAAa;EACzCC,QAAQ;EACRC;AAAM,CAIP;EAAA;EAAAL,cAAA,GAAAM,CAAA;EAAAN,cAAA,GAAAE,CAAA;EACC,IAAI;IACF;IACA,MAAM,CAACK,OAAA,EAASC,WAAA,CAAY;IAAA;IAAA,CAAAR,cAAA,GAAAE,CAAA,OAAG,MAAMO,OAAA,CAAQC,GAAG,CAAC,CAC/C,IAAAC,KAAA,CAAAC,IAAI,KACJ,IAAAC,QAAA,CAAAC,OAAO,IACR;IAED;IACA,MAAMC,QAAA;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA;IAAW;IAAA,CAAAF,cAAA,GAAAgB,CAAA,UAAAR,WAAA,CAAYS,GAAG,CAAC;IAAA;IAAA,CAAAjB,cAAA,GAAAgB,CAAA,UAAoB;IACrD,MAAME,YAAA;IAAA;IAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAea,QAAA,CAASI,KAAK,CAAC;IAEpC,MAAMC,kBAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAqBgB,YAAA,CAAaG,QAAQ,CAAC;IACjD,MAAMC,WAAA;IAAA;IAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAcgB,YAAA,CAAaG,QAAQ,CAAC;IAE1C;IAAA;IAAArB,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAgB,CAAA,WAACT,OAAA,EAASgB,IAAA;IAAA;IAAA,CAAAvB,cAAA,GAAAgB,CAAA,UAAQ,CAACI,kBAAA;IAAA;IAAA,CAAApB,cAAA,GAAAgB,CAAA,UAAsB,CAACM,WAAA,GAAa;MAAA;MAAAtB,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MACzD,OAAO,IAAAsB,WAAA,CAAAC,QAAQ,EAAC,IAAIpB,MAAA,CAAOqB,MAAM,sBAAsB;IACzD;IAAA;IAAA;MAAA1B,cAAA,GAAAgB,CAAA;IAAA;IAEA;IAAAhB,cAAA,GAAAE,CAAA;IACA,oBACE,IAAAyB,WAAA,CAAAC,GAAA,EAAC;MAAIC,SAAA,EAAU;gBACZzB;;EAGP,EAAE,OAAO0B,KAAA,EAAO;IAAA;IAAA9B,cAAA,GAAAE,CAAA;IACd6B,OAAA,CAAQD,KAAK,CAAC,wBAAwBA,KAAA;IAAA;IAAA9B,cAAA,GAAAE,CAAA;IACtC,OAAO,IAAAsB,WAAA,CAAAC,QAAQ,EAAC,IAAIpB,MAAA,CAAOqB,MAAM,QAAQ;EAC3C;AACF","ignoreList":[]}