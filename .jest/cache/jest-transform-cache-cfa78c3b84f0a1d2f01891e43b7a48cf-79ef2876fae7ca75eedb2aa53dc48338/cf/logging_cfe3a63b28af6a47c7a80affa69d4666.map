{"version":3,"names":["customLogger","cov_22z1trqqma","f","s","logger","loggerMiddleware","redis","_redis","Redis","url","process","env","UPSTASH_REDIS_URL","token","UPSTASH_REDIS_REST_TOKEN","getCurrentTimestamp","Date","toISOString","getCurrentUser","session","_auth","auth","timestamp","user","b","id","logFormat","_winston","default","format","combine","metadata","fillWith","json","createLogger","level","LOG_LEVEL","defaultMeta","service","transports","Console","colorize","simple","File","filename","maxsize","maxFiles","storeLog","logEntry","key","_crypto","randomUUID","set","JSON","stringify","ex","error","Error","message","String","info","meta","name","stack","security","event","details","warn","audit","action","data","req","res","next","startTime","now","requestId","logRequest","method","ip","userAgent","get","logResponse","duration","statusCode","on"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/logging.ts"],"sourcesContent":["import winston from 'winston';\nimport { Redis } from '@upstash/redis';\nimport crypto from 'crypto';\nimport { Request, Response, NextFunction } from 'express';\nimport { auth } from '@/auth';\n\nconst redis = new Redis({\n  url: `https://${process.env.UPSTASH_REDIS_URL}`,\n  token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n});\n\nconst getCurrentTimestamp = () => new Date().toISOString();\n\nconst getCurrentUser = async () => {\n  const session = await auth();\n  return {\n    timestamp: getCurrentTimestamp(),\n    user: session?.user?.id || 'anonymous',\n  };\n};\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp(),\n  winston.format.metadata({\n    fillWith: ['user', 'timestamp', 'service'],\n  }),\n  winston.format.json()\n);\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  defaultMeta: {\n    service: 'api',\n  },\n  format: logFormat,\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(winston.format.colorize(), winston.format.simple()),\n    }),\n    new winston.transports.File({\n      filename: 'logs/error.log',\n      level: 'error',\n      maxsize: 5242880,\n      maxFiles: 5,\n    }),\n    new winston.transports.File({\n      filename: 'logs/combined.log',\n      maxsize: 5242880,\n      maxFiles: 5,\n    }),\n  ],\n});\n\nasync function storeLog(logEntry: Record<string, any>) {\n  try {\n    const key = `logs:${getCurrentTimestamp()}:${crypto.randomUUID()}`;\n    await redis.set(key, JSON.stringify(logEntry), { ex: 86400 });\n  } catch (error) {\n    logger.error('Failed to store log in Redis', {\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n}\n\nexport const customLogger = {\n  info: async (message: string, meta: Record<string, any> = {}) => {\n    const logEntry = {\n      message,\n      ...(await getCurrentUser()),\n      ...meta,\n    };\n    logger.info(message, logEntry);\n    await storeLog(logEntry);\n  },\n\n  error: async (message: string, error?: Error | unknown, meta: Record<string, any> = {}) => {\n    const logEntry = {\n      message,\n      error:\n        error instanceof Error\n          ? {\n              name: error.name,\n              message: error.message,\n              stack: error.stack,\n            }\n          : String(error),\n      ...(await getCurrentUser()),\n      ...meta,\n    };\n    logger.error(message, logEntry);\n    await storeLog(logEntry);\n  },\n\n  security: async (event: string, details: Record<string, any>) => {\n    const logEntry = {\n      event,\n      details,\n      ...(await getCurrentUser()),\n    };\n    logger.warn('Security Event', logEntry);\n    await storeLog(logEntry);\n  },\n\n  audit: async (action: string, data: Record<string, any>) => {\n    const logEntry = {\n      action,\n      data,\n      ...(await getCurrentUser()),\n    };\n    logger.info('Audit Log', logEntry);\n    await storeLog(logEntry);\n  },\n};\n\nexport const loggerMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID();\n\n  const logRequest = async () => {\n    const logEntry = {\n      requestId,\n      method: req.method,\n      url: req.url,\n      ip: req.ip,\n      userAgent: req.get('user-agent'),\n      ...(await getCurrentUser()),\n    };\n    await customLogger.info('Request received', logEntry);\n  };\n\n  const logResponse = async () => {\n    const duration = Date.now() - startTime;\n    const logEntry = {\n      requestId,\n      method: req.method,\n      url: req.url,\n      statusCode: res.statusCode,\n      duration,\n      ...(await getCurrentUser()),\n    };\n    await customLogger.info('Response sent', logEntry);\n  };\n\n  await logRequest();\n\n  res.on('finish', async () => {\n    await logResponse();\n  });\n\n  next();\n};\n\nexport { logger };"],"mappingsgEaA,YAAY,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAZH,YAAA;;EAwFJI,MAAM,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAANC,MAAA;;EAtCIC,gBAAgB,WAAAA,CAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAhBE,gBAAA;;;;;wEAlHO;;;kCACE;;;wEACH;;;mCAEE;;;;;;;;;;;;;;;AAErB,MAAMC,KAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,QAAQ,IAAII,MAAA,CAAAC,KAAK,CAAC;EACtBC,GAAA,EAAK,WAAWC,OAAA,CAAQC,GAAG,CAACC,iBAAiB,EAAE;EAC/CC,KAAA,EAAOH,OAAA,CAAQC,GAAG,CAACG;AACrB;AAAA;AAAAb,cAAA,GAAAE,CAAA;AAEA,MAAMY,mBAAA,GAAsBA,CAAA,KAAM;EAAA;EAAAd,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAAA,WAAIa,IAAA,GAAOC,WAAW;AAAA;AAAA;AAAAhB,cAAA,GAAAE,CAAA;AAExD,MAAMe,cAAA,GAAiB,MAAAA,CAAA;EAAA;EAAAjB,cAAA,GAAAC,CAAA;EACrB,MAAMiB,OAAA;EAAA;EAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAU,MAAM,IAAAiB,KAAA,CAAAC,IAAI;EAAA;EAAApB,cAAA,GAAAE,CAAA;EAC1B,OAAO;IACLmB,SAAA,EAAWP,mBAAA;IACXQ,IAAA;IAAM;IAAA,CAAAtB,cAAA,GAAAuB,CAAA,UAAAL,OAAA,EAASI,IAAA,EAAME,EAAA;IAAA;IAAA,CAAAxB,cAAA,GAAAuB,CAAA,UAAM;EAC7B;AACF;AAEA,MAAME,SAAA;AAAA;AAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAYwB,QAAA,CAAAC,OAAO,CAACC,MAAM,CAACC,OAAO,CACtCH,QAAA,CAAAC,OAAO,CAACC,MAAM,CAACP,SAAS,IACxBK,QAAA,CAAAC,OAAO,CAACC,MAAM,CAACE,QAAQ,CAAC;EACtBC,QAAA,EAAU,CAAC,QAAQ,aAAa;AAClC,IACAL,QAAA,CAAAC,OAAO,CAACC,MAAM,CAACI,IAAI;AAGrB,MAAM7B,MAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,QAASwB,QAAA,CAAAC,OAAO,CAACM,YAAY,CAAC;EAClCC,KAAA;EAAO;EAAA,CAAAlC,cAAA,GAAAuB,CAAA,UAAAd,OAAA,CAAQC,GAAG,CAACyB,SAAS;EAAA;EAAA,CAAAnC,cAAA,GAAAuB,CAAA,UAAI;EAChCa,WAAA,EAAa;IACXC,OAAA,EAAS;EACX;EACAT,MAAA,EAAQH,SAAA;EACRa,UAAA,EAAY,CACV,IAAIZ,QAAA,CAAAC,OAAO,CAACW,UAAU,CAACC,OAAO,CAAC;IAC7BX,MAAA,EAAQF,QAAA,CAAAC,OAAO,CAACC,MAAM,CAACC,OAAO,CAACH,QAAA,CAAAC,OAAO,CAACC,MAAM,CAACY,QAAQ,IAAId,QAAA,CAAAC,OAAO,CAACC,MAAM,CAACa,MAAM;EACjF,IACA,IAAIf,QAAA,CAAAC,OAAO,CAACW,UAAU,CAACI,IAAI,CAAC;IAC1BC,QAAA,EAAU;IACVT,KAAA,EAAO;IACPU,OAAA,EAAS;IACTC,QAAA,EAAU;EACZ,IACA,IAAInB,QAAA,CAAAC,OAAO,CAACW,UAAU,CAACI,IAAI,CAAC;IAC1BC,QAAA,EAAU;IACVC,OAAA,EAAS;IACTC,QAAA,EAAU;EACZ;AAEJ;AAEA,eAAeC,SAASC,QAA6B;EAAA;EAAA/C,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACnD,IAAI;IACF,MAAM8C,GAAA;IAAA;IAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAM,QAAQY,mBAAA,MAAyBmC,OAAA,CAAAtB,OAAM,CAACuB,UAAU,IAAI;IAAA;IAAAlD,cAAA,GAAAE,CAAA;IAClE,MAAMG,KAAA,CAAM8C,GAAG,CAACH,GAAA,EAAKI,IAAA,CAAKC,SAAS,CAACN,QAAA,GAAW;MAAEO,EAAA,EAAI;IAAM;EAC7D,EAAE,OAAOC,KAAA,EAAO;IAAA;IAAAvD,cAAA,GAAAE,CAAA;IACdC,MAAA,CAAOoD,KAAK,CAAC,gCAAgC;MAC3CA,KAAA,EAAOA,KAAA,YAAiBC,KAAA;MAAA;MAAA,CAAAxD,cAAA,GAAAuB,CAAA,UAAQgC,KAAA,CAAME,OAAO;MAAA;MAAA,CAAAzD,cAAA,GAAAuB,CAAA,UAAGmC,MAAA,CAAOH,KAAA;IACzD;EACF;AACF;AAEO,MAAMxD,YAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAAe;EAC1ByD,IAAA,EAAM,MAAAA,CAAOF,OAAA,EAAiBG,IAAA;EAAA;EAAA,CAAA5D,cAAA,GAAAuB,CAAA,UAA4B,CAAC,CAAC;IAAA;IAAAvB,cAAA,GAAAC,CAAA;IAC1D,MAAM8C,QAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAW;MACfuD,OAAA;MACA,IAAI,MAAMxC,cAAA,EAAgB;MAC1B,GAAG2C;IACL;IAAA;IAAA5D,cAAA,GAAAE,CAAA;IACAC,MAAA,CAAOwD,IAAI,CAACF,OAAA,EAASV,QAAA;IAAA;IAAA/C,cAAA,GAAAE,CAAA;IACrB,MAAM4C,QAAA,CAASC,QAAA;EACjB;EAEAQ,KAAA,EAAO,MAAAA,CAAOE,OAAA,EAAiBF,KAAA,EAAyBK,IAAA;EAAA;EAAA,CAAA5D,cAAA,GAAAuB,CAAA,UAA4B,CAAC,CAAC;IAAA;IAAAvB,cAAA,GAAAC,CAAA;IACpF,MAAM8C,QAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAW;MACfuD,OAAA;MACAF,KAAA,EACEA,KAAA,YAAiBC,KAAA;MAAA;MAAA,CAAAxD,cAAA,GAAAuB,CAAA,UACb;QACEsC,IAAA,EAAMN,KAAA,CAAMM,IAAI;QAChBJ,OAAA,EAASF,KAAA,CAAME,OAAO;QACtBK,KAAA,EAAOP,KAAA,CAAMO;MACf;MAAA;MAAA,CAAA9D,cAAA,GAAAuB,CAAA,UACAmC,MAAA,CAAOH,KAAA;MACb,IAAI,MAAMtC,cAAA,EAAgB;MAC1B,GAAG2C;IACL;IAAA;IAAA5D,cAAA,GAAAE,CAAA;IACAC,MAAA,CAAOoD,KAAK,CAACE,OAAA,EAASV,QAAA;IAAA;IAAA/C,cAAA,GAAAE,CAAA;IACtB,MAAM4C,QAAA,CAASC,QAAA;EACjB;EAEAgB,QAAA,EAAU,MAAAA,CAAOC,KAAA,EAAeC,OAAA;IAAA;IAAAjE,cAAA,GAAAC,CAAA;IAC9B,MAAM8C,QAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAW;MACf8D,KAAA;MACAC,OAAA;MACA,IAAI,MAAMhD,cAAA,EAAgB;IAC5B;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACAC,MAAA,CAAO+D,IAAI,CAAC,kBAAkBnB,QAAA;IAAA;IAAA/C,cAAA,GAAAE,CAAA;IAC9B,MAAM4C,QAAA,CAASC,QAAA;EACjB;EAEAoB,KAAA,EAAO,MAAAA,CAAOC,MAAA,EAAgBC,IAAA;IAAA;IAAArE,cAAA,GAAAC,CAAA;IAC5B,MAAM8C,QAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAW;MACfkE,MAAA;MACAC,IAAA;MACA,IAAI,MAAMpD,cAAA,EAAgB;IAC5B;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACAC,MAAA,CAAOwD,IAAI,CAAC,aAAaZ,QAAA;IAAA;IAAA/C,cAAA,GAAAE,CAAA;IACzB,MAAM4C,QAAA,CAASC,QAAA;EACjB;AACF;AAAA;AAAA/C,cAAA,GAAAE,CAAA;AAEO,MAAME,gBAAA,GAAmB,MAAAA,CAAOkE,GAAA,EAAcC,GAAA,EAAeC,IAAA;EAAA;EAAAxE,cAAA,GAAAC,CAAA;EAClE,MAAMwE,SAAA;EAAA;EAAA,CAAAzE,cAAA,GAAAE,CAAA,QAAYa,IAAA,CAAK2D,GAAG;EAC1B,MAAMC,SAAA;EAAA;EAAA,CAAA3E,cAAA,GAAAE,CAAA,QAAY+C,OAAA,CAAAtB,OAAM,CAACuB,UAAU;EAAA;EAAAlD,cAAA,GAAAE,CAAA;EAEnC,MAAM0E,UAAA,GAAa,MAAAA,CAAA;IAAA;IAAA5E,cAAA,GAAAC,CAAA;IACjB,MAAM8C,QAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAW;MACfyE,SAAA;MACAE,MAAA,EAAQP,GAAA,CAAIO,MAAM;MAClBrE,GAAA,EAAK8D,GAAA,CAAI9D,GAAG;MACZsE,EAAA,EAAIR,GAAA,CAAIQ,EAAE;MACVC,SAAA,EAAWT,GAAA,CAAIU,GAAG,CAAC;MACnB,IAAI,MAAM/D,cAAA,EAAgB;IAC5B;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACA,MAAMH,YAAA,CAAa4D,IAAI,CAAC,oBAAoBZ,QAAA;EAC9C;EAAA;EAAA/C,cAAA,GAAAE,CAAA;EAEA,MAAM+E,WAAA,GAAc,MAAAA,CAAA;IAAA;IAAAjF,cAAA,GAAAC,CAAA;IAClB,MAAMiF,QAAA;IAAA;IAAA,CAAAlF,cAAA,GAAAE,CAAA,QAAWa,IAAA,CAAK2D,GAAG,KAAKD,SAAA;IAC9B,MAAM1B,QAAA;IAAA;IAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAW;MACfyE,SAAA;MACAE,MAAA,EAAQP,GAAA,CAAIO,MAAM;MAClBrE,GAAA,EAAK8D,GAAA,CAAI9D,GAAG;MACZ2E,UAAA,EAAYZ,GAAA,CAAIY,UAAU;MAC1BD,QAAA;MACA,IAAI,MAAMjE,cAAA,EAAgB;IAC5B;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACA,MAAMH,YAAA,CAAa4D,IAAI,CAAC,iBAAiBZ,QAAA;EAC3C;EAAA;EAAA/C,cAAA,GAAAE,CAAA;EAEA,MAAM0E,UAAA;EAAA;EAAA5E,cAAA,GAAAE,CAAA;EAENqE,GAAA,CAAIa,EAAE,CAAC,UAAU;IAAA;IAAApF,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACf,MAAM+E,WAAA;EACR;EAAA;EAAAjF,cAAA,GAAAE,CAAA;EAEAsE,IAAA;AACF","ignoreList":[]}