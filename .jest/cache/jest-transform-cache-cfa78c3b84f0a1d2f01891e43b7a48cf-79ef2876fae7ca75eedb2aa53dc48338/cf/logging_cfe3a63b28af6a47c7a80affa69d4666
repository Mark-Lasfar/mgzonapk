bd67a39a4a7504f38d67c38c71c3c15c
"use strict";

/* istanbul ignore next */
function cov_22z1trqqma() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/logging.ts";
  var hash = "000ecd5cbe8e80bcbbb2ae6d1b2b827aad1c2769";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/logging.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 22
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 32
        }
      },
      "7": {
        start: {
          line: 22,
          column: 31
        },
        end: {
          line: 22,
          column: 75
        }
      },
      "8": {
        start: {
          line: 23,
          column: 15
        },
        end: {
          line: 23,
          column: 40
        }
      },
      "9": {
        start: {
          line: 24,
          column: 30
        },
        end: {
          line: 24,
          column: 73
        }
      },
      "10": {
        start: {
          line: 25,
          column: 14
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 6
        }
      },
      "12": {
        start: {
          line: 31,
          column: 14
        },
        end: {
          line: 34,
          column: 2
        }
      },
      "13": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 35,
          column: 56
        }
      },
      "14": {
        start: {
          line: 35,
          column: 32
        },
        end: {
          line: 35,
          column: 56
        }
      },
      "15": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 42,
          column: 1
        }
      },
      "16": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 43
        }
      },
      "17": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 41,
          column: 6
        }
      },
      "18": {
        start: {
          line: 43,
          column: 18
        },
        end: {
          line: 49,
          column: 35
        }
      },
      "19": {
        start: {
          line: 50,
          column: 15
        },
        end: {
          line: 72,
          column: 2
        }
      },
      "20": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "21": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 83
        }
      },
      "22": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 78,
          column: 11
        }
      },
      "23": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "24": {
        start: {
          line: 85,
          column: 21
        },
        end: {
          line: 127,
          column: 1
        }
      },
      "25": {
        start: {
          line: 87,
          column: 25
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "26": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 39
        }
      },
      "27": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 33
        }
      },
      "28": {
        start: {
          line: 96,
          column: 25
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "29": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 40
        }
      },
      "30": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 33
        }
      },
      "31": {
        start: {
          line: 110,
          column: 25
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "32": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 48
        }
      },
      "33": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 33
        }
      },
      "34": {
        start: {
          line: 119,
          column: 25
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "35": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 43
        }
      },
      "36": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 33
        }
      },
      "37": {
        start: {
          line: 128,
          column: 25
        },
        end: {
          line: 159,
          column: 1
        }
      },
      "38": {
        start: {
          line: 129,
          column: 22
        },
        end: {
          line: 129,
          column: 32
        }
      },
      "39": {
        start: {
          line: 130,
          column: 22
        },
        end: {
          line: 130,
          column: 50
        }
      },
      "40": {
        start: {
          line: 131,
          column: 23
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "41": {
        start: {
          line: 132,
          column: 25
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "42": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 62
        }
      },
      "43": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 153,
          column: 5
        }
      },
      "44": {
        start: {
          line: 143,
          column: 25
        },
        end: {
          line: 143,
          column: 47
        }
      },
      "45": {
        start: {
          line: 144,
          column: 25
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "46": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 59
        }
      },
      "47": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 154,
          column: 23
        }
      },
      "48": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 157,
          column: 7
        }
      },
      "49": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 28
        }
      },
      "50": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 158,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 12,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 13
          }
        },
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 23
          }
        },
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 33
          }
        },
        loc: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 35,
            column: 28
          },
          end: {
            line: 35,
            column: 29
          }
        },
        loc: {
          start: {
            line: 35,
            column: 32
          },
          end: {
            line: 35,
            column: 56
          }
        },
        line: 35
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 36,
            column: 23
          },
          end: {
            line: 36,
            column: 24
          }
        },
        loc: {
          start: {
            line: 36,
            column: 33
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 36
      },
      "7": {
        name: "storeLog",
        decl: {
          start: {
            line: 73,
            column: 15
          },
          end: {
            line: 73,
            column: 23
          }
        },
        loc: {
          start: {
            line: 73,
            column: 34
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 73
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 86,
            column: 10
          },
          end: {
            line: 86,
            column: 11
          }
        },
        loc: {
          start: {
            line: 86,
            column: 38
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 86
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 95,
            column: 11
          },
          end: {
            line: 95,
            column: 12
          }
        },
        loc: {
          start: {
            line: 95,
            column: 46
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 95
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 109,
            column: 14
          },
          end: {
            line: 109,
            column: 15
          }
        },
        loc: {
          start: {
            line: 109,
            column: 38
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 109
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 118,
            column: 11
          },
          end: {
            line: 118,
            column: 12
          }
        },
        loc: {
          start: {
            line: 118,
            column: 33
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 118
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 128,
            column: 25
          },
          end: {
            line: 128,
            column: 26
          }
        },
        loc: {
          start: {
            line: 128,
            column: 49
          },
          end: {
            line: 159,
            column: 1
          }
        },
        line: 128
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 131,
            column: 23
          },
          end: {
            line: 131,
            column: 24
          }
        },
        loc: {
          start: {
            line: 131,
            column: 33
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 131
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 142,
            column: 24
          },
          end: {
            line: 142,
            column: 25
          }
        },
        loc: {
          start: {
            line: 142,
            column: 34
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 142
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 155,
            column: 21
          },
          end: {
            line: 155,
            column: 22
          }
        },
        loc: {
          start: {
            line: 155,
            column: 31
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 155
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 27,
            column: 38
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 29,
            column: 5
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 14
          }
        }, {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 27,
            column: 32
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 14
          },
          end: {
            line: 40,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 14
          },
          end: {
            line: 40,
            column: 31
          }
        }, {
          start: {
            line: 40,
            column: 35
          },
          end: {
            line: 40,
            column: 46
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 11
          },
          end: {
            line: 51,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 11
          },
          end: {
            line: 51,
            column: 32
          }
        }, {
          start: {
            line: 51,
            column: 36
          },
          end: {
            line: 51,
            column: 42
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 19
          },
          end: {
            line: 81,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 44
          },
          end: {
            line: 81,
            column: 57
          }
        }, {
          start: {
            line: 81,
            column: 60
          },
          end: {
            line: 81,
            column: 73
          }
        }],
        line: 81
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 86,
            column: 33
          },
          end: {
            line: 86,
            column: 35
          }
        }],
        line: 86
      },
      "6": {
        loc: {
          start: {
            line: 95,
            column: 34
          },
          end: {
            line: 95,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 95,
            column: 41
          },
          end: {
            line: 95,
            column: 43
          }
        }],
        line: 95
      },
      "7": {
        loc: {
          start: {
            line: 98,
            column: 19
          },
          end: {
            line: 102,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 44
          },
          end: {
            line: 102,
            column: 13
          }
        }, {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 102,
            column: 29
          }
        }],
        line: 98
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/logging.ts"],
      sourcesContent: ["import winston from 'winston';\nimport { Redis } from '@upstash/redis';\nimport crypto from 'crypto';\nimport { Request, Response, NextFunction } from 'express';\nimport { auth } from '@/auth';\n\nconst redis = new Redis({\n  url: `https://${process.env.UPSTASH_REDIS_URL}`,\n  token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n});\n\nconst getCurrentTimestamp = () => new Date().toISOString();\n\nconst getCurrentUser = async () => {\n  const session = await auth();\n  return {\n    timestamp: getCurrentTimestamp(),\n    user: session?.user?.id || 'anonymous',\n  };\n};\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp(),\n  winston.format.metadata({\n    fillWith: ['user', 'timestamp', 'service'],\n  }),\n  winston.format.json()\n);\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  defaultMeta: {\n    service: 'api',\n  },\n  format: logFormat,\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(winston.format.colorize(), winston.format.simple()),\n    }),\n    new winston.transports.File({\n      filename: 'logs/error.log',\n      level: 'error',\n      maxsize: 5242880,\n      maxFiles: 5,\n    }),\n    new winston.transports.File({\n      filename: 'logs/combined.log',\n      maxsize: 5242880,\n      maxFiles: 5,\n    }),\n  ],\n});\n\nasync function storeLog(logEntry: Record<string, any>) {\n  try {\n    const key = `logs:${getCurrentTimestamp()}:${crypto.randomUUID()}`;\n    await redis.set(key, JSON.stringify(logEntry), { ex: 86400 });\n  } catch (error) {\n    logger.error('Failed to store log in Redis', {\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n}\n\nexport const customLogger = {\n  info: async (message: string, meta: Record<string, any> = {}) => {\n    const logEntry = {\n      message,\n      ...(await getCurrentUser()),\n      ...meta,\n    };\n    logger.info(message, logEntry);\n    await storeLog(logEntry);\n  },\n\n  error: async (message: string, error?: Error | unknown, meta: Record<string, any> = {}) => {\n    const logEntry = {\n      message,\n      error:\n        error instanceof Error\n          ? {\n              name: error.name,\n              message: error.message,\n              stack: error.stack,\n            }\n          : String(error),\n      ...(await getCurrentUser()),\n      ...meta,\n    };\n    logger.error(message, logEntry);\n    await storeLog(logEntry);\n  },\n\n  security: async (event: string, details: Record<string, any>) => {\n    const logEntry = {\n      event,\n      details,\n      ...(await getCurrentUser()),\n    };\n    logger.warn('Security Event', logEntry);\n    await storeLog(logEntry);\n  },\n\n  audit: async (action: string, data: Record<string, any>) => {\n    const logEntry = {\n      action,\n      data,\n      ...(await getCurrentUser()),\n    };\n    logger.info('Audit Log', logEntry);\n    await storeLog(logEntry);\n  },\n};\n\nexport const loggerMiddleware = async (req: Request, res: Response, next: NextFunction) => {\n  const startTime = Date.now();\n  const requestId = crypto.randomUUID();\n\n  const logRequest = async () => {\n    const logEntry = {\n      requestId,\n      method: req.method,\n      url: req.url,\n      ip: req.ip,\n      userAgent: req.get('user-agent'),\n      ...(await getCurrentUser()),\n    };\n    await customLogger.info('Request received', logEntry);\n  };\n\n  const logResponse = async () => {\n    const duration = Date.now() - startTime;\n    const logEntry = {\n      requestId,\n      method: req.method,\n      url: req.url,\n      statusCode: res.statusCode,\n      duration,\n      ...(await getCurrentUser()),\n    };\n    await customLogger.info('Response sent', logEntry);\n  };\n\n  await logRequest();\n\n  res.on('finish', async () => {\n    await logResponse();\n  });\n\n  next();\n};\n\nexport { logger };"],
      names: ["customLogger", "logger", "loggerMiddleware", "redis", "Redis", "url", "process", "env", "UPSTASH_REDIS_URL", "token", "UPSTASH_REDIS_REST_TOKEN", "getCurrentTimestamp", "Date", "toISOString", "getCurrentUser", "session", "auth", "timestamp", "user", "id", "logFormat", "winston", "format", "combine", "metadata", "fillWith", "json", "createLogger", "level", "LOG_LEVEL", "defaultMeta", "service", "transports", "Console", "colorize", "simple", "File", "filename", "maxsize", "maxFiles", "storeLog", "logEntry", "key", "crypto", "randomUUID", "set", "JSON", "stringify", "ex", "error", "Error", "message", "String", "info", "meta", "name", "stack", "security", "event", "details", "warn", "audit", "action", "data", "req", "res", "next", "startTime", "now", "requestId", "logRequest", "method", "ip", "userAgent", "get", "logResponse", "duration", "statusCode", "on"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "000ecd5cbe8e80bcbbb2ae6d1b2b827aad1c2769"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22z1trqqma = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22z1trqqma();
cov_22z1trqqma().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_22z1trqqma().f[0]++;
  cov_22z1trqqma().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_22z1trqqma().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_22z1trqqma().s[3]++;
_export(exports, {
  customLogger: function () {
    /* istanbul ignore next */
    cov_22z1trqqma().f[1]++;
    cov_22z1trqqma().s[4]++;
    return customLogger;
  },
  logger: function () {
    /* istanbul ignore next */
    cov_22z1trqqma().f[2]++;
    cov_22z1trqqma().s[5]++;
    return logger;
  },
  loggerMiddleware: function () {
    /* istanbul ignore next */
    cov_22z1trqqma().f[3]++;
    cov_22z1trqqma().s[6]++;
    return loggerMiddleware;
  }
});
const _winston =
/* istanbul ignore next */
(/*#__PURE__*/cov_22z1trqqma().s[7]++, _interop_require_default(require("winston")));
const _redis =
/* istanbul ignore next */
(cov_22z1trqqma().s[8]++, require("@upstash/redis"));
const _crypto =
/* istanbul ignore next */
(/*#__PURE__*/cov_22z1trqqma().s[9]++, _interop_require_default(require("crypto")));
const _auth =
/* istanbul ignore next */
(cov_22z1trqqma().s[10]++, require("../../../auth"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_22z1trqqma().f[4]++;
  cov_22z1trqqma().s[11]++;
  return /* istanbul ignore next */(cov_22z1trqqma().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_22z1trqqma().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_22z1trqqma().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_22z1trqqma().b[0][1]++, {
    default: obj
  });
}
const redis =
/* istanbul ignore next */
(cov_22z1trqqma().s[12]++, new _redis.Redis({
  url: `https://${process.env.UPSTASH_REDIS_URL}`,
  token: process.env.UPSTASH_REDIS_REST_TOKEN
}));
/* istanbul ignore next */
cov_22z1trqqma().s[13]++;
const getCurrentTimestamp = () => {
  /* istanbul ignore next */
  cov_22z1trqqma().f[5]++;
  cov_22z1trqqma().s[14]++;
  return new Date().toISOString();
};
/* istanbul ignore next */
cov_22z1trqqma().s[15]++;
const getCurrentUser = async () => {
  /* istanbul ignore next */
  cov_22z1trqqma().f[6]++;
  const session =
  /* istanbul ignore next */
  (cov_22z1trqqma().s[16]++, await (0, _auth.auth)());
  /* istanbul ignore next */
  cov_22z1trqqma().s[17]++;
  return {
    timestamp: getCurrentTimestamp(),
    user:
    /* istanbul ignore next */
    (cov_22z1trqqma().b[2][0]++, session?.user?.id) ||
    /* istanbul ignore next */
    (cov_22z1trqqma().b[2][1]++, 'anonymous')
  };
};
const logFormat =
/* istanbul ignore next */
(cov_22z1trqqma().s[18]++, _winston.default.format.combine(_winston.default.format.timestamp(), _winston.default.format.metadata({
  fillWith: ['user', 'timestamp', 'service']
}), _winston.default.format.json()));
const logger =
/* istanbul ignore next */
(cov_22z1trqqma().s[19]++, _winston.default.createLogger({
  level:
  /* istanbul ignore next */
  (cov_22z1trqqma().b[3][0]++, process.env.LOG_LEVEL) ||
  /* istanbul ignore next */
  (cov_22z1trqqma().b[3][1]++, 'info'),
  defaultMeta: {
    service: 'api'
  },
  format: logFormat,
  transports: [new _winston.default.transports.Console({
    format: _winston.default.format.combine(_winston.default.format.colorize(), _winston.default.format.simple())
  }), new _winston.default.transports.File({
    filename: 'logs/error.log',
    level: 'error',
    maxsize: 5242880,
    maxFiles: 5
  }), new _winston.default.transports.File({
    filename: 'logs/combined.log',
    maxsize: 5242880,
    maxFiles: 5
  })]
}));
async function storeLog(logEntry) {
  /* istanbul ignore next */
  cov_22z1trqqma().f[7]++;
  cov_22z1trqqma().s[20]++;
  try {
    const key =
    /* istanbul ignore next */
    (cov_22z1trqqma().s[21]++, `logs:${getCurrentTimestamp()}:${_crypto.default.randomUUID()}`);
    /* istanbul ignore next */
    cov_22z1trqqma().s[22]++;
    await redis.set(key, JSON.stringify(logEntry), {
      ex: 86400
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_22z1trqqma().s[23]++;
    logger.error('Failed to store log in Redis', {
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_22z1trqqma().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_22z1trqqma().b[4][1]++, String(error))
    });
  }
}
const customLogger =
/* istanbul ignore next */
(cov_22z1trqqma().s[24]++, {
  info: async (message, meta =
  /* istanbul ignore next */
  (cov_22z1trqqma().b[5][0]++, {})) => {
    /* istanbul ignore next */
    cov_22z1trqqma().f[8]++;
    const logEntry =
    /* istanbul ignore next */
    (cov_22z1trqqma().s[25]++, {
      message,
      ...(await getCurrentUser()),
      ...meta
    });
    /* istanbul ignore next */
    cov_22z1trqqma().s[26]++;
    logger.info(message, logEntry);
    /* istanbul ignore next */
    cov_22z1trqqma().s[27]++;
    await storeLog(logEntry);
  },
  error: async (message, error, meta =
  /* istanbul ignore next */
  (cov_22z1trqqma().b[6][0]++, {})) => {
    /* istanbul ignore next */
    cov_22z1trqqma().f[9]++;
    const logEntry =
    /* istanbul ignore next */
    (cov_22z1trqqma().s[28]++, {
      message,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_22z1trqqma().b[7][0]++, {
        name: error.name,
        message: error.message,
        stack: error.stack
      }) :
      /* istanbul ignore next */
      (cov_22z1trqqma().b[7][1]++, String(error)),
      ...(await getCurrentUser()),
      ...meta
    });
    /* istanbul ignore next */
    cov_22z1trqqma().s[29]++;
    logger.error(message, logEntry);
    /* istanbul ignore next */
    cov_22z1trqqma().s[30]++;
    await storeLog(logEntry);
  },
  security: async (event, details) => {
    /* istanbul ignore next */
    cov_22z1trqqma().f[10]++;
    const logEntry =
    /* istanbul ignore next */
    (cov_22z1trqqma().s[31]++, {
      event,
      details,
      ...(await getCurrentUser())
    });
    /* istanbul ignore next */
    cov_22z1trqqma().s[32]++;
    logger.warn('Security Event', logEntry);
    /* istanbul ignore next */
    cov_22z1trqqma().s[33]++;
    await storeLog(logEntry);
  },
  audit: async (action, data) => {
    /* istanbul ignore next */
    cov_22z1trqqma().f[11]++;
    const logEntry =
    /* istanbul ignore next */
    (cov_22z1trqqma().s[34]++, {
      action,
      data,
      ...(await getCurrentUser())
    });
    /* istanbul ignore next */
    cov_22z1trqqma().s[35]++;
    logger.info('Audit Log', logEntry);
    /* istanbul ignore next */
    cov_22z1trqqma().s[36]++;
    await storeLog(logEntry);
  }
});
/* istanbul ignore next */
cov_22z1trqqma().s[37]++;
const loggerMiddleware = async (req, res, next) => {
  /* istanbul ignore next */
  cov_22z1trqqma().f[12]++;
  const startTime =
  /* istanbul ignore next */
  (cov_22z1trqqma().s[38]++, Date.now());
  const requestId =
  /* istanbul ignore next */
  (cov_22z1trqqma().s[39]++, _crypto.default.randomUUID());
  /* istanbul ignore next */
  cov_22z1trqqma().s[40]++;
  const logRequest = async () => {
    /* istanbul ignore next */
    cov_22z1trqqma().f[13]++;
    const logEntry =
    /* istanbul ignore next */
    (cov_22z1trqqma().s[41]++, {
      requestId,
      method: req.method,
      url: req.url,
      ip: req.ip,
      userAgent: req.get('user-agent'),
      ...(await getCurrentUser())
    });
    /* istanbul ignore next */
    cov_22z1trqqma().s[42]++;
    await customLogger.info('Request received', logEntry);
  };
  /* istanbul ignore next */
  cov_22z1trqqma().s[43]++;
  const logResponse = async () => {
    /* istanbul ignore next */
    cov_22z1trqqma().f[14]++;
    const duration =
    /* istanbul ignore next */
    (cov_22z1trqqma().s[44]++, Date.now() - startTime);
    const logEntry =
    /* istanbul ignore next */
    (cov_22z1trqqma().s[45]++, {
      requestId,
      method: req.method,
      url: req.url,
      statusCode: res.statusCode,
      duration,
      ...(await getCurrentUser())
    });
    /* istanbul ignore next */
    cov_22z1trqqma().s[46]++;
    await customLogger.info('Response sent', logEntry);
  };
  /* istanbul ignore next */
  cov_22z1trqqma().s[47]++;
  await logRequest();
  /* istanbul ignore next */
  cov_22z1trqqma().s[48]++;
  res.on('finish', async () => {
    /* istanbul ignore next */
    cov_22z1trqqma().f[15]++;
    cov_22z1trqqma().s[49]++;
    await logResponse();
  });
  /* istanbul ignore next */
  cov_22z1trqqma().s[50]++;
  next();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,