{"version":3,"names":["default","cov_tdakun8z2","f","s","RedeemPointsPage","metadata","title","SUBSCRIPTION_PLANS","id","name","pointsCost","searchParams","t","_server","getTranslations","session","_auth","auth","user","b","_navigation","redirect","sellerResult","_selleractions","getSellerByUserId","success","_jsxruntime","jsx","seller","data","planId","plan","find","p","handleRedeem","formData","result","updateSellerSubscription","message","error","jsxs","className","_card","Card","CardContent","pointsBalance","CardFooter","action","_button","Button","type","disabled"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/[locale]/(root)/account/subscriptions/redeem-points/page.tsx"],"sourcesContent":["import { Metadata } from 'next'\nimport { Card, CardContent, CardFooter } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { auth } from '@/auth'\nimport { getSellerByUserId, updateSellerSubscription } from '@/lib/actions/seller.actions'\nimport { redirect } from 'next/navigation'\nimport { getTranslations } from 'next-intl/server'\n\nexport const metadata: Metadata = {\n  title: 'Redeem Points for Subscription',\n}\n\ninterface SubscriptionPlan {\n  id: string\n  name: string\n  pointsCost: number\n}\n\nconst SUBSCRIPTION_PLANS: SubscriptionPlan[] = [\n  { id: 'trial', name: 'Trial', pointsCost: 20 },\n  { id: 'basic', name: 'Basic', pointsCost: 200 },\n  { id: 'pro', name: 'Pro', pointsCost: 600 },\n  { id: 'vip', name: 'VIP', pointsCost: 2000 },\n]\n\nexport default async function RedeemPointsPage({ searchParams }: { searchParams: { planId?: string } }) {\n  const t = await getTranslations('api')\n  const session = await auth()\n  if (!session?.user?.id) {\n    redirect('/sign-in')\n  }\n\n  const sellerResult = await getSellerByUserId(session.user.id)\n  if (!sellerResult.success) {\n    return <div>{t('errors.sellerNotFound')}</div>\n  }\n  const seller = sellerResult.data\n\n  const planId = searchParams.planId\n  const plan = SUBSCRIPTION_PLANS.find((p) => p.id === planId)\n  if (!plan) {\n    return <div>{t('errors.invalidPlan')}</div>\n  }\n\n  async function handleRedeem(formData: FormData) {\n    'use server'\n    try {\n      const result = await updateSellerSubscription(\n        session.user.id,\n        plan.name as 'Trial' | 'Basic' | 'Pro' | 'VIP',\n        plan.pointsCost\n      )\n      if (!result.success) {\n        return { success: false, message: result.error || t('errors.failedToRedeemPoints') }\n      }\n      redirect('/account/subscriptions')\n    } catch (error) {\n      return { success: false, message: t('errors.failedToRedeemPoints') }\n    }\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-4\">\n      <h1 className=\"h1-bold py-4\">Redeem Points for {plan.name}</h1>\n      <Card>\n        <CardContent className=\"p-6\">\n          <p>Plan: {plan.name}</p>\n          <p>Points Required: {plan.pointsCost}</p>\n          <p>Your Points Balance: {seller.pointsBalance}</p>\n          {seller.pointsBalance < plan.pointsCost && (\n            <p className=\"text-destructive\">{t('errors.insufficientPoints')}</p>\n          )}\n        </CardContent>\n        <CardFooter>\n          <form action={handleRedeem}>\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={seller.pointsBalance < plan.pointsCost}\n            >\n              Confirm Redemption\n            </Button>\n          </form>\n        </CardFooter>\n      </Card>\n    </div>\n  )\n}"],"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","ignoreList":[]}