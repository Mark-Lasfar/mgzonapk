{"version":3,"names":["cov_qg4x3g6x6","actualCoverage","s","SyncProgressTracker","constructor","f","SYNC_KEY_PREFIX","SYNC_EXPIRY","CURRENT_USER","CURRENT_TIMESTAMP","redis","_redis","Redis","url","process","env","UPSTASH_REDIS_URL","token","UPSTASH_REDIS_TOKEN","_logging","logger","info","timestamp","user","initializeSync","params","progress","syncId","provider","requestId","status","total","totalItems","processed","succeeded","failed","percentage","timestamps","started","lastUpdated","errors","warnings","metadata","initiatedBy","createdBy","updatedBy","saveProgress","notifyProgress","updateProgress","updates","getProgress","b","Error","undefined","Math","round","completed","error","push","reportedBy","warning","lastUpdatedBy","key","set","JSON","stringify","ex","_webhookdispatcher","WebhookDispatcher","dispatch","notifiedAt","notifiedBy","_pusher","pusher","trigger","updatedAt","data","get","str","parse","listActiveSyncs","keys","syncs","Promise","all","map","filter","sync","cancelSync","cancelledAt","cancelledBy"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/sync-progress.ts"],"sourcesContent":["import { Redis } from '@upstash/redis';\nimport { logger } from './logging';\nimport { WebhookDispatcher } from '../webhook-dispatcher';\nimport { SyncProgress, SyncStatus, SyncError, SyncWarning } from '../types/sync-progress';\nimport { pusher } from './pusher';\n\nexport class SyncProgressTracker {\n  private redis: Redis;\n  private readonly SYNC_KEY_PREFIX = 'sync:progress:';\n  private readonly SYNC_EXPIRY = 24 * 60 * 60; // 24 hours\n  private readonly CURRENT_USER = 'Mark-Lasfar';\n  private readonly CURRENT_TIMESTAMP = '2025-04-27T02:55:27Z';\n\n  constructor() {\n    this.redis = new Redis({\n      url: process.env.UPSTASH_REDIS_URL!,\n      token: process.env.UPSTASH_REDIS_TOKEN!,\n    });\n\n    logger.info('SyncProgressTracker initialized', {\n      timestamp: this.CURRENT_TIMESTAMP,\n      user: this.CURRENT_USER\n    });\n  }\n\n  async initializeSync(params: {\n    syncId: string;\n    provider: string;\n    requestId: string;\n    totalItems: number;\n    metadata?: Record<string, any>;\n  }): Promise<SyncProgress> {\n    const progress: SyncProgress = {\n      syncId: params.syncId,\n      provider: params.provider,\n      requestId: params.requestId,\n      status: 'queued',\n      progress: {\n        total: params.totalItems,\n        processed: 0,\n        succeeded: 0,\n        failed: 0,\n        percentage: 0,\n      },\n      timestamps: {\n        started: this.CURRENT_TIMESTAMP,\n        lastUpdated: this.CURRENT_TIMESTAMP,\n      },\n      errors: [],\n      warnings: [],\n      metadata: {\n        ...params.metadata,\n        initiatedBy: this.CURRENT_USER\n      },\n      createdBy: this.CURRENT_USER,\n      updatedBy: this.CURRENT_USER,\n    };\n\n    await this.saveProgress(progress);\n    await this.notifyProgress(progress);\n\n    logger.info('Sync initialized', {\n      syncId: params.syncId,\n      provider: params.provider,\n      timestamp: this.CURRENT_TIMESTAMP,\n      user: this.CURRENT_USER\n    });\n\n    return progress;\n  }\n\n  async updateProgress(\n    syncId: string,\n    updates: {\n      processed?: number;\n      succeeded?: number;\n      failed?: number;\n      status?: SyncStatus;\n      error?: SyncError;\n      warning?: SyncWarning;\n      metadata?: Record<string, any>;\n    }\n  ): Promise<SyncProgress> {\n    const progress = await this.getProgress(syncId);\n    if (!progress) {\n      throw new Error(`Sync ${syncId} not found`);\n    }\n\n    // Update progress counts\n    if (updates.processed !== undefined) {\n      progress.progress.processed = updates.processed;\n      progress.progress.percentage = Math.round(\n        (progress.progress.processed / progress.progress.total) * 100\n      );\n    }\n    if (updates.succeeded !== undefined) {\n      progress.progress.succeeded = updates.succeeded;\n    }\n    if (updates.failed !== undefined) {\n      progress.progress.failed = updates.failed;\n    }\n\n    // Update status if provided\n    if (updates.status) {\n      progress.status = updates.status;\n      if (updates.status === 'completed' || updates.status === 'failed') {\n        progress.timestamps.completed = this.CURRENT_TIMESTAMP;\n      }\n    }\n\n    // Add error if provided\n    if (updates.error) {\n      progress.errors.push({\n        ...updates.error,\n        timestamp: this.CURRENT_TIMESTAMP,\n        reportedBy: this.CURRENT_USER\n      });\n    }\n\n    // Add warning if provided\n    if (updates.warning) {\n      progress.warnings.push({\n        ...updates.warning,\n        timestamp: this.CURRENT_TIMESTAMP,\n        reportedBy: this.CURRENT_USER\n      });\n    }\n\n    // Update metadata if provided\n    if (updates.metadata) {\n      progress.metadata = {\n        ...progress.metadata,\n        ...updates.metadata,\n        lastUpdatedBy: this.CURRENT_USER\n      };\n    }\n\n    progress.timestamps.lastUpdated = this.CURRENT_TIMESTAMP;\n\n    await this.saveProgress(progress);\n    await this.notifyProgress(progress);\n\n    return progress;\n  }\n\n  private async saveProgress(progress: SyncProgress): Promise<void> {\n    const key = this.SYNC_KEY_PREFIX + progress.syncId;\n    await this.redis.set(\n      key,\n      JSON.stringify(progress),\n      { ex: this.SYNC_EXPIRY }\n    );\n  }\n\n  private async notifyProgress(progress: SyncProgress): Promise<void> {\n    try {\n      // Send webhook notification\n      await WebhookDispatcher.dispatch(\n        'system',\n        'inventory.sync.progress',\n        {\n          ...progress,\n          notifiedAt: this.CURRENT_TIMESTAMP,\n          notifiedBy: this.CURRENT_USER\n        }\n      );\n\n      // Send real-time update via Pusher\n      await pusher.trigger(\n        `sync-${progress.syncId}`,\n        'progress-update',\n        {\n          ...progress,\n          updatedAt: this.CURRENT_TIMESTAMP,\n          updatedBy: this.CURRENT_USER\n        }\n      );\n\n      // Log progress\n      logger.info('Sync progress updated', {\n        syncId: progress.syncId,\n        provider: progress.provider,\n        status: progress.status,\n        progress: progress.progress,\n        timestamp: this.CURRENT_TIMESTAMP,\n        user: this.CURRENT_USER\n      });\n    } catch (error) {\n      logger.error(new Error('Failed to notify progress'), {\n        error,\n        syncId: progress.syncId,\n        timestamp: this.CURRENT_TIMESTAMP,\n        user: this.CURRENT_USER\n      });\n    }\n  }\n\n  async getProgress(syncId: string): Promise<SyncProgress | null> {\n    const key = this.SYNC_KEY_PREFIX + syncId;\n    const data = await this.redis.get(key);\n    if (!data) return null;\n    const str = typeof data === 'string' ? data : JSON.stringify(data);\n    return JSON.parse(str);\n  }\n\n  async listActiveSyncs(): Promise<SyncProgress[]> {\n    const keys = await this.redis.keys(this.SYNC_KEY_PREFIX + '*');\n    const syncs = await Promise.all(\n      keys.map(key => this.redis.get(key))\n    );\n\n    return syncs\n      .filter((data): data is string => data !== null)\n      .map(data => JSON.parse(data))\n      .filter(sync => \n        sync.status === 'queued' || \n        sync.status === 'running' || \n        sync.status === 'paused'\n      );\n  }\n\n  async cancelSync(syncId: string): Promise<SyncProgress> {\n    const progress = await this.getProgress(syncId);\n    if (!progress) {\n      throw new Error(`Sync ${syncId} not found`);\n    }\n\n    return this.updateProgress(syncId, {\n      status: 'cancelled',\n      metadata: {\n        ...progress.metadata,\n        cancelledAt: this.CURRENT_TIMESTAMP,\n        cancelledBy: this.CURRENT_USER\n      },\n    });\n  }\n}"],"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","ignoreList":[]}