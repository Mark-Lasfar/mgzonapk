ac13e682b219a79aac28ddc59b338cb6
"use strict";

/* istanbul ignore next */
function cov_jbxza4yum() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/rate-limit.ts";
  var hash = "8cdb6499b08b6dee5022ac42106890abf516435f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/rate-limit.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 25
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 40
        }
      },
      "5": {
        start: {
          line: 13,
          column: 35
        },
        end: {
          line: 13,
          column: 101
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "7": {
        start: {
          line: 19,
          column: 14
        },
        end: {
          line: 22,
          column: 2
        }
      },
      "8": {
        start: {
          line: 23,
          column: 27
        },
        end: {
          line: 40,
          column: 1
        }
      },
      "9": {
        start: {
          line: 42,
          column: 19
        },
        end: {
          line: 42,
          column: 51
        }
      },
      "10": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "11": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "12": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 38
        }
      },
      "13": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 26
        }
      },
      "14": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "15": {
        start: {
          line: 54,
          column: 26
        },
        end: {
          line: 56,
          column: 10
        }
      },
      "16": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "17": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "18": {
        start: {
          line: 65,
          column: 21
        },
        end: {
          line: 65,
          column: 87
        }
      },
      "19": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 47
        }
      },
      "20": {
        start: {
          line: 67,
          column: 25
        },
        end: {
          line: 67,
          column: 81
        }
      },
      "21": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "22": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "23": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 58
        }
      },
      "24": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 47
        }
      },
      "25": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 79,
          column: 37
        }
      },
      "26": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 69
        }
      },
      "27": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 90
        }
      },
      "28": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 82
        }
      },
      "29": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 85,
          column: 10
        }
      },
      "30": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 53
        }
      },
      "31": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "rateLimit",
        decl: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 24
          }
        },
        loc: {
          start: {
            line: 41,
            column: 34
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 41
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 15,
            column: 38
          }
        }, {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 14
          }
        }, {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 32
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 21
          },
          end: {
            line: 65,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 72
          },
          end: {
            line: 65,
            column: 77
          }
        }, {
          start: {
            line: 65,
            column: 80
          },
          end: {
            line: 65,
            column: 87
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/rate-limit.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { Redis } from '@upstash/redis';\nimport ApiKey from '@/lib/db/models/api-key.model';\n\nconst redis = new Redis({\n  url: process.env.UPSTASH_REDIS_URL!,\n  token: process.env.UPSTASH_REDIS_TOKEN!,\n});\n\nconst RATE_LIMIT_CONFIGS = {\n  FREE: { requests: 100, window: 3600 }, // 100 requests per hour\n  BASIC: { requests: 1000, window: 3600 }, // 1000 requests per hour\n  PRO: { requests: 10000, window: 3600 }, // 10000 requests per hour\n  ENTERPRISE: { requests: 100000, window: 3600 }, // 100000 requests per hour\n};\n\nexport async function rateLimit(request: NextRequest) {\n  const apiKey = request.headers.get('x-api-key');\n  if (!apiKey) {\n    return new NextResponse(\n      JSON.stringify({\n        success: false,\n        error: 'API key required',\n      }),\n      { status: 401 }\n    );\n  }\n\n  const key = `rate-limit:${apiKey}`;\n  const now = Date.now();\n\n  try {\n    const apiKeyDoc = await ApiKey.findOne({ key: apiKey });\n    if (!apiKeyDoc) {\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Invalid API key',\n        }),\n        { status: 401 }\n      );\n    }\n\n    const plan = apiKeyDoc.permissions.includes('analytics:read') ? 'PRO' : 'BASIC';\n    const config = RATE_LIMIT_CONFIGS[plan];\n\n    const requests = await redis.zcount(key, now - (config.window * 1000), now);\n\n    if (requests >= config.requests) {\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Rate limit exceeded',\n          reset: await redis.zscore(key, 'window_expires'),\n        }),\n        { status: 429 }\n      );\n    }\n\n    await redis.zadd(key, now, Date.now().toString());\n    await redis.expire(key, config.window);\n\n    const headers = new Headers();\n    headers.set('X-RateLimit-Limit', config.requests.toString());\n    headers.set('X-RateLimit-Remaining', (config.requests - requests - 1).toString());\n    headers.set('X-RateLimit-Reset', (now + config.window * 1000).toString());\n\n    return { headers };\n  } catch (error) {\n    console.error('Rate limiting error:', error);\n    return null;\n  }\n}"],
      names: ["rateLimit", "redis", "Redis", "url", "process", "env", "UPSTASH_REDIS_URL", "token", "UPSTASH_REDIS_TOKEN", "RATE_LIMIT_CONFIGS", "FREE", "requests", "window", "BASIC", "PRO", "ENTERPRISE", "request", "apiKey", "headers", "get", "NextResponse", "JSON", "stringify", "success", "error", "status", "key", "now", "Date", "apiKeyDoc", "ApiKey", "findOne", "plan", "permissions", "includes", "config", "zcount", "reset", "zscore", "zadd", "toString", "expire", "Headers", "set", "console"],
      mappings: ";;;;+BAgBsBA;;;eAAAA;;;wBAhBoB;uBACpB;oEACH;;;;;;AAEnB,MAAMC,QAAQ,IAAIC,YAAK,CAAC;IACtBC,KAAKC,QAAQC,GAAG,CAACC,iBAAiB;IAClCC,OAAOH,QAAQC,GAAG,CAACG,mBAAmB;AACxC;AAEA,MAAMC,qBAAqB;IACzBC,MAAM;QAAEC,UAAU;QAAKC,QAAQ;IAAK;IACpCC,OAAO;QAAEF,UAAU;QAAMC,QAAQ;IAAK;IACtCE,KAAK;QAAEH,UAAU;QAAOC,QAAQ;IAAK;IACrCG,YAAY;QAAEJ,UAAU;QAAQC,QAAQ;IAAK;AAC/C;AAEO,eAAeZ,UAAUgB,OAAoB;IAClD,MAAMC,SAASD,QAAQE,OAAO,CAACC,GAAG,CAAC;IACnC,IAAI,CAACF,QAAQ;QACX,OAAO,IAAIG,oBAAY,CACrBC,KAAKC,SAAS,CAAC;YACbC,SAAS;YACTC,OAAO;QACT,IACA;YAAEC,QAAQ;QAAI;IAElB;IAEA,MAAMC,MAAM,CAAC,WAAW,EAAET,QAAQ;IAClC,MAAMU,MAAMC,KAAKD,GAAG;IAEpB,IAAI;QACF,MAAME,YAAY,MAAMC,oBAAM,CAACC,OAAO,CAAC;YAAEL,KAAKT;QAAO;QACrD,IAAI,CAACY,WAAW;YACd,OAAO,IAAIT,oBAAY,CACrBC,KAAKC,SAAS,CAAC;gBACbC,SAAS;gBACTC,OAAO;YACT,IACA;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAMO,OAAOH,UAAUI,WAAW,CAACC,QAAQ,CAAC,oBAAoB,QAAQ;QACxE,MAAMC,SAAS1B,kBAAkB,CAACuB,KAAK;QAEvC,MAAMrB,WAAW,MAAMV,MAAMmC,MAAM,CAACV,KAAKC,MAAOQ,OAAOvB,MAAM,GAAG,MAAOe;QAEvE,IAAIhB,YAAYwB,OAAOxB,QAAQ,EAAE;YAC/B,OAAO,IAAIS,oBAAY,CACrBC,KAAKC,SAAS,CAAC;gBACbC,SAAS;gBACTC,OAAO;gBACPa,OAAO,MAAMpC,MAAMqC,MAAM,CAACZ,KAAK;YACjC,IACA;gBAAED,QAAQ;YAAI;QAElB;QAEA,MAAMxB,MAAMsC,IAAI,CAACb,KAAKC,KAAKC,KAAKD,GAAG,GAAGa,QAAQ;QAC9C,MAAMvC,MAAMwC,MAAM,CAACf,KAAKS,OAAOvB,MAAM;QAErC,MAAMM,UAAU,IAAIwB;QACpBxB,QAAQyB,GAAG,CAAC,qBAAqBR,OAAOxB,QAAQ,CAAC6B,QAAQ;QACzDtB,QAAQyB,GAAG,CAAC,yBAAyB,AAACR,CAAAA,OAAOxB,QAAQ,GAAGA,WAAW,CAAA,EAAG6B,QAAQ;QAC9EtB,QAAQyB,GAAG,CAAC,qBAAqB,AAAChB,CAAAA,MAAMQ,OAAOvB,MAAM,GAAG,IAAG,EAAG4B,QAAQ;QAEtE,OAAO;YAAEtB;QAAQ;IACnB,EAAE,OAAOM,OAAO;QACdoB,QAAQpB,KAAK,CAAC,wBAAwBA;QACtC,OAAO;IACT;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8cdb6499b08b6dee5022ac42106890abf516435f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jbxza4yum = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jbxza4yum();
cov_jbxza4yum().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_jbxza4yum().s[1]++;
Object.defineProperty(exports, "rateLimit", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_jbxza4yum().f[0]++;
    cov_jbxza4yum().s[2]++;
    return rateLimit;
  }
});
const _server =
/* istanbul ignore next */
(cov_jbxza4yum().s[3]++, require("next/server"));
const _redis =
/* istanbul ignore next */
(cov_jbxza4yum().s[4]++, require("@upstash/redis"));
const _apikeymodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_jbxza4yum().s[5]++, _interop_require_default(require("../../db/models/api-key.model")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_jbxza4yum().f[1]++;
  cov_jbxza4yum().s[6]++;
  return /* istanbul ignore next */(cov_jbxza4yum().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_jbxza4yum().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_jbxza4yum().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_jbxza4yum().b[0][1]++, {
    default: obj
  });
}
const redis =
/* istanbul ignore next */
(cov_jbxza4yum().s[7]++, new _redis.Redis({
  url: process.env.UPSTASH_REDIS_URL,
  token: process.env.UPSTASH_REDIS_TOKEN
}));
const RATE_LIMIT_CONFIGS =
/* istanbul ignore next */
(cov_jbxza4yum().s[8]++, {
  FREE: {
    requests: 100,
    window: 3600
  },
  BASIC: {
    requests: 1000,
    window: 3600
  },
  PRO: {
    requests: 10000,
    window: 3600
  },
  ENTERPRISE: {
    requests: 100000,
    window: 3600
  }
});
async function rateLimit(request) {
  /* istanbul ignore next */
  cov_jbxza4yum().f[2]++;
  const apiKey =
  /* istanbul ignore next */
  (cov_jbxza4yum().s[9]++, request.headers.get('x-api-key'));
  /* istanbul ignore next */
  cov_jbxza4yum().s[10]++;
  if (!apiKey) {
    /* istanbul ignore next */
    cov_jbxza4yum().b[2][0]++;
    cov_jbxza4yum().s[11]++;
    return new _server.NextResponse(JSON.stringify({
      success: false,
      error: 'API key required'
    }), {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_jbxza4yum().b[2][1]++;
  }
  const key =
  /* istanbul ignore next */
  (cov_jbxza4yum().s[12]++, `rate-limit:${apiKey}`);
  const now =
  /* istanbul ignore next */
  (cov_jbxza4yum().s[13]++, Date.now());
  /* istanbul ignore next */
  cov_jbxza4yum().s[14]++;
  try {
    const apiKeyDoc =
    /* istanbul ignore next */
    (cov_jbxza4yum().s[15]++, await _apikeymodel.default.findOne({
      key: apiKey
    }));
    /* istanbul ignore next */
    cov_jbxza4yum().s[16]++;
    if (!apiKeyDoc) {
      /* istanbul ignore next */
      cov_jbxza4yum().b[3][0]++;
      cov_jbxza4yum().s[17]++;
      return new _server.NextResponse(JSON.stringify({
        success: false,
        error: 'Invalid API key'
      }), {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_jbxza4yum().b[3][1]++;
    }
    const plan =
    /* istanbul ignore next */
    (cov_jbxza4yum().s[18]++, apiKeyDoc.permissions.includes('analytics:read') ?
    /* istanbul ignore next */
    (cov_jbxza4yum().b[4][0]++, 'PRO') :
    /* istanbul ignore next */
    (cov_jbxza4yum().b[4][1]++, 'BASIC'));
    const config =
    /* istanbul ignore next */
    (cov_jbxza4yum().s[19]++, RATE_LIMIT_CONFIGS[plan]);
    const requests =
    /* istanbul ignore next */
    (cov_jbxza4yum().s[20]++, await redis.zcount(key, now - config.window * 1000, now));
    /* istanbul ignore next */
    cov_jbxza4yum().s[21]++;
    if (requests >= config.requests) {
      /* istanbul ignore next */
      cov_jbxza4yum().b[5][0]++;
      cov_jbxza4yum().s[22]++;
      return new _server.NextResponse(JSON.stringify({
        success: false,
        error: 'Rate limit exceeded',
        reset: await redis.zscore(key, 'window_expires')
      }), {
        status: 429
      });
    } else
    /* istanbul ignore next */
    {
      cov_jbxza4yum().b[5][1]++;
    }
    cov_jbxza4yum().s[23]++;
    await redis.zadd(key, now, Date.now().toString());
    /* istanbul ignore next */
    cov_jbxza4yum().s[24]++;
    await redis.expire(key, config.window);
    const headers =
    /* istanbul ignore next */
    (cov_jbxza4yum().s[25]++, new Headers());
    /* istanbul ignore next */
    cov_jbxza4yum().s[26]++;
    headers.set('X-RateLimit-Limit', config.requests.toString());
    /* istanbul ignore next */
    cov_jbxza4yum().s[27]++;
    headers.set('X-RateLimit-Remaining', (config.requests - requests - 1).toString());
    /* istanbul ignore next */
    cov_jbxza4yum().s[28]++;
    headers.set('X-RateLimit-Reset', (now + config.window * 1000).toString());
    /* istanbul ignore next */
    cov_jbxza4yum().s[29]++;
    return {
      headers
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_jbxza4yum().s[30]++;
    console.error('Rate limiting error:', error);
    /* istanbul ignore next */
    cov_jbxza4yum().s[31]++;
    return null;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyYXRlTGltaXQiLCJyZWRpcyIsImNvdl9qYnh6YTR5dW0iLCJzIiwiX3JlZGlzIiwiUmVkaXMiLCJ1cmwiLCJwcm9jZXNzIiwiZW52IiwiVVBTVEFTSF9SRURJU19VUkwiLCJ0b2tlbiIsIlVQU1RBU0hfUkVESVNfVE9LRU4iLCJSQVRFX0xJTUlUX0NPTkZJR1MiLCJGUkVFIiwicmVxdWVzdHMiLCJ3aW5kb3ciLCJCQVNJQyIsIlBSTyIsIkVOVEVSUFJJU0UiLCJyZXF1ZXN0IiwiZiIsImFwaUtleSIsImhlYWRlcnMiLCJnZXQiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdWNjZXNzIiwiZXJyb3IiLCJzdGF0dXMiLCJrZXkiLCJub3ciLCJEYXRlIiwiYXBpS2V5RG9jIiwiX2FwaWtleW1vZGVsIiwiZGVmYXVsdCIsImZpbmRPbmUiLCJwbGFuIiwicGVybWlzc2lvbnMiLCJpbmNsdWRlcyIsImNvbmZpZyIsInpjb3VudCIsInJlc2V0IiwienNjb3JlIiwiemFkZCIsInRvU3RyaW5nIiwiZXhwaXJlIiwiSGVhZGVycyIsInNldCIsImNvbnNvbGUiXSwic291cmNlcyI6WyIvaG9tZS9oYWdlci9uZXcvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyICgzKS9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIvbGliL2FwaS9taWRkbGV3YXJlL3JhdGUtbGltaXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IFJlZGlzIH0gZnJvbSAnQHVwc3Rhc2gvcmVkaXMnO1xuaW1wb3J0IEFwaUtleSBmcm9tICdAL2xpYi9kYi9tb2RlbHMvYXBpLWtleS5tb2RlbCc7XG5cbmNvbnN0IHJlZGlzID0gbmV3IFJlZGlzKHtcbiAgdXJsOiBwcm9jZXNzLmVudi5VUFNUQVNIX1JFRElTX1VSTCEsXG4gIHRva2VuOiBwcm9jZXNzLmVudi5VUFNUQVNIX1JFRElTX1RPS0VOISxcbn0pO1xuXG5jb25zdCBSQVRFX0xJTUlUX0NPTkZJR1MgPSB7XG4gIEZSRUU6IHsgcmVxdWVzdHM6IDEwMCwgd2luZG93OiAzNjAwIH0sIC8vIDEwMCByZXF1ZXN0cyBwZXIgaG91clxuICBCQVNJQzogeyByZXF1ZXN0czogMTAwMCwgd2luZG93OiAzNjAwIH0sIC8vIDEwMDAgcmVxdWVzdHMgcGVyIGhvdXJcbiAgUFJPOiB7IHJlcXVlc3RzOiAxMDAwMCwgd2luZG93OiAzNjAwIH0sIC8vIDEwMDAwIHJlcXVlc3RzIHBlciBob3VyXG4gIEVOVEVSUFJJU0U6IHsgcmVxdWVzdHM6IDEwMDAwMCwgd2luZG93OiAzNjAwIH0sIC8vIDEwMDAwMCByZXF1ZXN0cyBwZXIgaG91clxufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJhdGVMaW1pdChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICBjb25zdCBhcGlLZXkgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCd4LWFwaS1rZXknKTtcbiAgaWYgKCFhcGlLZXkpIHtcbiAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZShcbiAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiAnQVBJIGtleSByZXF1aXJlZCcsXG4gICAgICB9KSxcbiAgICAgIHsgc3RhdHVzOiA0MDEgfVxuICAgICk7XG4gIH1cblxuICBjb25zdCBrZXkgPSBgcmF0ZS1saW1pdDoke2FwaUtleX1gO1xuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgYXBpS2V5RG9jID0gYXdhaXQgQXBpS2V5LmZpbmRPbmUoeyBrZXk6IGFwaUtleSB9KTtcbiAgICBpZiAoIWFwaUtleURvYykge1xuICAgICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogJ0ludmFsaWQgQVBJIGtleScsXG4gICAgICAgIH0pLFxuICAgICAgICB7IHN0YXR1czogNDAxIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgcGxhbiA9IGFwaUtleURvYy5wZXJtaXNzaW9ucy5pbmNsdWRlcygnYW5hbHl0aWNzOnJlYWQnKSA/ICdQUk8nIDogJ0JBU0lDJztcbiAgICBjb25zdCBjb25maWcgPSBSQVRFX0xJTUlUX0NPTkZJR1NbcGxhbl07XG5cbiAgICBjb25zdCByZXF1ZXN0cyA9IGF3YWl0IHJlZGlzLnpjb3VudChrZXksIG5vdyAtIChjb25maWcud2luZG93ICogMTAwMCksIG5vdyk7XG5cbiAgICBpZiAocmVxdWVzdHMgPj0gY29uZmlnLnJlcXVlc3RzKSB7XG4gICAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZShcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiAnUmF0ZSBsaW1pdCBleGNlZWRlZCcsXG4gICAgICAgICAgcmVzZXQ6IGF3YWl0IHJlZGlzLnpzY29yZShrZXksICd3aW5kb3dfZXhwaXJlcycpLFxuICAgICAgICB9KSxcbiAgICAgICAgeyBzdGF0dXM6IDQyOSB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGF3YWl0IHJlZGlzLnphZGQoa2V5LCBub3csIERhdGUubm93KCkudG9TdHJpbmcoKSk7XG4gICAgYXdhaXQgcmVkaXMuZXhwaXJlKGtleSwgY29uZmlnLndpbmRvdyk7XG5cbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICBoZWFkZXJzLnNldCgnWC1SYXRlTGltaXQtTGltaXQnLCBjb25maWcucmVxdWVzdHMudG9TdHJpbmcoKSk7XG4gICAgaGVhZGVycy5zZXQoJ1gtUmF0ZUxpbWl0LVJlbWFpbmluZycsIChjb25maWcucmVxdWVzdHMgLSByZXF1ZXN0cyAtIDEpLnRvU3RyaW5nKCkpO1xuICAgIGhlYWRlcnMuc2V0KCdYLVJhdGVMaW1pdC1SZXNldCcsIChub3cgKyBjb25maWcud2luZG93ICogMTAwMCkudG9TdHJpbmcoKSk7XG5cbiAgICByZXR1cm4geyBoZWFkZXJzIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignUmF0ZSBsaW1pdGluZyBlcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQWdCc0I7Ozs7OztX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