35de8717a61e29861c2f20666702be04
"use strict";

/* istanbul ignore next */
function cov_a0elgoizn() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/rate-limiter.ts";
  var hash = "e884340a9231c40dad746ace9af65046e9e44613";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/rate-limiter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 27
        }
      },
      "3": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 40
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 37
        }
      },
      "5": {
        start: {
          line: 13,
          column: 26
        },
        end: {
          line: 13,
          column: 48
        }
      },
      "6": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 34
        }
      },
      "7": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 47
        }
      },
      "8": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "9": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "10": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 26
        }
      },
      "11": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "12": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 53
        }
      },
      "13": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 51
        }
      },
      "14": {
        start: {
          line: 32,
          column: 30
        },
        end: {
          line: 32,
          column: 117
        }
      },
      "15": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 34,
          column: 60
        }
      },
      "16": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "17": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 61
        }
      },
      "18": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 39,
          column: 50
        }
      },
      "19": {
        start: {
          line: 40,
          column: 30
        },
        end: {
          line: 40,
          column: 66
        }
      },
      "20": {
        start: {
          line: 41,
          column: 28
        },
        end: {
          line: 41,
          column: 55
        }
      },
      "21": {
        start: {
          line: 42,
          column: 30
        },
        end: {
          line: 42,
          column: 69
        }
      },
      "22": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "23": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 56,
          column: 14
        }
      },
      "24": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "25": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 69,
          column: 14
        }
      },
      "26": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "27": {
        start: {
          line: 74,
          column: 26
        },
        end: {
          line: 74,
          column: 53
        }
      },
      "28": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 51
        }
      },
      "29": {
        start: {
          line: 76,
          column: 30
        },
        end: {
          line: 76,
          column: 117
        }
      },
      "30": {
        start: {
          line: 77,
          column: 33
        },
        end: {
          line: 80,
          column: 14
        }
      },
      "31": {
        start: {
          line: 81,
          column: 33
        },
        end: {
          line: 81,
          column: 72
        }
      },
      "32": {
        start: {
          line: 82,
          column: 30
        },
        end: {
          line: 82,
          column: 66
        }
      },
      "33": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "34": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 93,
          column: 15
        }
      },
      "35": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 97,
          column: 14
        }
      },
      "36": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "37": {
        start: {
          line: 102,
          column: 26
        },
        end: {
          line: 102,
          column: 53
        }
      },
      "38": {
        start: {
          line: 103,
          column: 28
        },
        end: {
          line: 103,
          column: 63
        }
      },
      "39": {
        start: {
          line: 105,
          column: 25
        },
        end: {
          line: 105,
          column: 50
        }
      },
      "40": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "41": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 41
        }
      },
      "42": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 114,
          column: 19
        }
      },
      "43": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "44": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 24
        }
      },
      "45": {
        start: {
          line: 127,
          column: 28
        },
        end: {
          line: 127,
          column: 86
        }
      },
      "46": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 24
        }
      },
      "47": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "48": {
        start: {
          line: 132,
          column: 26
        },
        end: {
          line: 132,
          column: 53
        }
      },
      "49": {
        start: {
          line: 133,
          column: 24
        },
        end: {
          line: 133,
          column: 51
        }
      },
      "50": {
        start: {
          line: 134,
          column: 30
        },
        end: {
          line: 134,
          column: 117
        }
      },
      "51": {
        start: {
          line: 135,
          column: 26
        },
        end: {
          line: 135,
          column: 53
        }
      },
      "52": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "53": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 61
        }
      },
      "54": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 25
        }
      },
      "55": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 147,
          column: 15
        }
      },
      "56": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 34
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 65
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 54
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 72
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 37
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 100
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 71
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 126
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 56
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 130
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 60,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 48
          },
          end: {
            line: 60,
            column: 61
          }
        }, {
          start: {
            line: 60,
            column: 64
          },
          end: {
            line: 60,
            column: 77
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 81,
            column: 33
          },
          end: {
            line: 81,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 41
          },
          end: {
            line: 81,
            column: 68
          }
        }, {
          start: {
            line: 81,
            column: 71
          },
          end: {
            line: 81,
            column: 72
          }
        }],
        line: 81
      },
      "4": {
        loc: {
          start: {
            line: 90,
            column: 23
          },
          end: {
            line: 90,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 90,
            column: 48
          },
          end: {
            line: 90,
            column: 61
          }
        }, {
          start: {
            line: 90,
            column: 64
          },
          end: {
            line: 90,
            column: 77
          }
        }],
        line: 90
      },
      "5": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "6": {
        loc: {
          start: {
            line: 119,
            column: 23
          },
          end: {
            line: 119,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 48
          },
          end: {
            line: 119,
            column: 61
          }
        }, {
          start: {
            line: 119,
            column: 64
          },
          end: {
            line: 119,
            column: 77
          }
        }],
        line: 119
      },
      "7": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "8": {
        loc: {
          start: {
            line: 144,
            column: 23
          },
          end: {
            line: 144,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 144,
            column: 48
          },
          end: {
            line: 144,
            column: 61
          }
        }, {
          start: {
            line: 144,
            column: 64
          },
          end: {
            line: 144,
            column: 77
          }
        }],
        line: 144
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/rate-limiter.ts"],
      sourcesContent: ["import { Redis } from '@upstash/redis';\nimport { logger } from './logging';\n\nconst CURRENT_TIMESTAMP = '2025-04-27T12:52:45Z';\nconst CURRENT_USER = 'Mark-Lasfar';\n\nexport class RateLimiter {\n  private static redis: Redis;\n  private static readonly RATE_LIMIT_PREFIX = 'rate-limit:';\n  \n  private static async getRedisClient() {\n    if (!this.redis) {\n      this.redis = new Redis({\n        url: process.env.UPSTASH_REDIS_URL!,\n        token: process.env.UPSTASH_REDIS_REST_TOKEN!\n      });\n    }\n    return this.redis;\n  }\n\n  static async checkRateLimit(\n    key: string,\n    maxRequests: number,\n    windowSeconds: number\n  ): Promise<{\n    allowed: boolean;\n    remaining: number;\n    resetTime: Date;\n  }> {\n    try {\n      const redis = await this.getRedisClient();\n      const now = new Date(CURRENT_TIMESTAMP);\n      const windowKey = `${this.RATE_LIMIT_PREFIX}${key}:${Math.floor(now.getTime() / (windowSeconds * 1000))}`;\n\n      // Get current count\n      const currentCount = await redis.incr(windowKey);\n\n      // Set expiration if this is the first request in the window\n      if (currentCount === 1) {\n        await redis.expire(windowKey, windowSeconds);\n      }\n\n      const ttl = await redis.ttl(windowKey);\n      const resetTime = new Date(now.getTime() + (ttl * 1000));\n\n      const allowed = currentCount <= maxRequests;\n      const remaining = Math.max(0, maxRequests - currentCount);\n\n      // Log rate limit check\n      logger.info('Rate limit check', {\n        key,\n        allowed,\n        remaining,\n        resetTime: resetTime.toISOString(),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n\n      return {\n        allowed,\n        remaining,\n        resetTime\n      };\n    } catch (error) {\n      logger.error(new Error('Rate limit check failed'), {\n        key,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      \n      // Fail open if Redis is unavailable\n      return {\n        allowed: true,\n        remaining: maxRequests,\n        resetTime: new Date(CURRENT_TIMESTAMP)\n      };\n    }\n  }\n\n  static async getRateLimitInfo(\n    key: string,\n    windowSeconds: number\n  ): Promise<{\n    currentCount: number;\n    resetTime: Date;\n  }> {\n    try {\n      const redis = await this.getRedisClient();\n      const now = new Date(CURRENT_TIMESTAMP);\n      const windowKey = `${this.RATE_LIMIT_PREFIX}${key}:${Math.floor(now.getTime() / (windowSeconds * 1000))}`;\n\n      const [count, ttl] = await Promise.all([\n        redis.get(windowKey),\n        redis.ttl(windowKey)\n      ]);\n\n      const currentCount = count ? parseInt(String(count), 10) : 0;\n      const resetTime = new Date(now.getTime() + (ttl * 1000));\n\n      return {\n        currentCount,\n        resetTime\n      };\n    } catch (error) {\n      logger.error(new Error('Get rate limit info failed'), {\n        key,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      \n      return {\n        currentCount: 0,\n        resetTime: new Date(CURRENT_TIMESTAMP)\n      };\n    }\n  }\n\n  static async resetRateLimit(key: string): Promise<void> {\n    try {\n      const redis = await this.getRedisClient();\n      const pattern = `${this.RATE_LIMIT_PREFIX}${key}:*`;\n      \n      // Get all keys matching the pattern\n      const keys = await redis.keys(pattern);\n      \n      if (keys.length > 0) {\n        // Delete all matching keys\n        await redis.del(...keys);\n        \n        logger.info('Rate limit reset', {\n          key,\n          keysDeleted: keys.length,\n          timestamp: CURRENT_TIMESTAMP,\n          user: CURRENT_USER\n        });\n      }\n    } catch (error) {\n      logger.error(new Error('Reset rate limit failed'), {\n        key,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      throw error;\n    }\n  }\n\n  static async hasExceededRateLimit(\n    key: string,\n    maxRequests: number,\n    windowSeconds: number\n  ): Promise<boolean> {\n    const { allowed } = await this.checkRateLimit(key, maxRequests, windowSeconds);\n    return !allowed;\n  }\n\n  static async incrementRateLimit(\n    key: string,\n    windowSeconds: number\n  ): Promise<number> {\n    try {\n      const redis = await this.getRedisClient();\n      const now = new Date(CURRENT_TIMESTAMP);\n      const windowKey = `${this.RATE_LIMIT_PREFIX}${key}:${Math.floor(now.getTime() / (windowSeconds * 1000))}`;\n\n      const count = await redis.incr(windowKey);\n      \n      // Set expiration if this is the first request\n      if (count === 1) {\n        await redis.expire(windowKey, windowSeconds);\n      }\n\n      return count;\n    } catch (error) {\n      logger.error(new Error('Increment rate limit failed'), {\n        key,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      throw error;\n    }\n  }\n}"],
      names: ["RateLimiter", "CURRENT_TIMESTAMP", "CURRENT_USER", "RATE_LIMIT_PREFIX", "getRedisClient", "redis", "Redis", "url", "process", "env", "UPSTASH_REDIS_URL", "token", "UPSTASH_REDIS_REST_TOKEN", "checkRateLimit", "key", "maxRequests", "windowSeconds", "now", "Date", "windowKey", "Math", "floor", "getTime", "currentCount", "incr", "expire", "ttl", "resetTime", "allowed", "remaining", "max", "logger", "info", "toISOString", "timestamp", "user", "error", "Error", "message", "String", "getRateLimitInfo", "count", "Promise", "all", "get", "parseInt", "resetRateLimit", "pattern", "keys", "length", "del", "keysDeleted", "hasExceededRateLimit", "incrementRateLimit"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e884340a9231c40dad746ace9af65046e9e44613"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_a0elgoizn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_a0elgoizn();
cov_a0elgoizn().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_a0elgoizn().s[1]++;
Object.defineProperty(exports, "RateLimiter", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_a0elgoizn().f[0]++;
    cov_a0elgoizn().s[2]++;
    return RateLimiter;
  }
});
const _redis =
/* istanbul ignore next */
(cov_a0elgoizn().s[3]++, require("@upstash/redis"));
const _logging =
/* istanbul ignore next */
(cov_a0elgoizn().s[4]++, require("./logging"));
const CURRENT_TIMESTAMP =
/* istanbul ignore next */
(cov_a0elgoizn().s[5]++, '2025-04-27T12:52:45Z');
const CURRENT_USER =
/* istanbul ignore next */
(cov_a0elgoizn().s[6]++, 'Mark-Lasfar');
class RateLimiter {
  static {
    /* istanbul ignore next */
    cov_a0elgoizn().s[7]++;
    this.RATE_LIMIT_PREFIX = 'rate-limit:';
  }
  static async getRedisClient() {
    /* istanbul ignore next */
    cov_a0elgoizn().f[1]++;
    cov_a0elgoizn().s[8]++;
    if (!this.redis) {
      /* istanbul ignore next */
      cov_a0elgoizn().b[0][0]++;
      cov_a0elgoizn().s[9]++;
      this.redis = new _redis.Redis({
        url: process.env.UPSTASH_REDIS_URL,
        token: process.env.UPSTASH_REDIS_REST_TOKEN
      });
    } else
    /* istanbul ignore next */
    {
      cov_a0elgoizn().b[0][1]++;
    }
    cov_a0elgoizn().s[10]++;
    return this.redis;
  }
  static async checkRateLimit(key, maxRequests, windowSeconds) {
    /* istanbul ignore next */
    cov_a0elgoizn().f[2]++;
    cov_a0elgoizn().s[11]++;
    try {
      const redis =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[12]++, await this.getRedisClient());
      const now =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[13]++, new Date(CURRENT_TIMESTAMP));
      const windowKey =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[14]++, `${this.RATE_LIMIT_PREFIX}${key}:${Math.floor(now.getTime() / (windowSeconds * 1000))}`);
      // Get current count
      const currentCount =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[15]++, await redis.incr(windowKey));
      // Set expiration if this is the first request in the window
      /* istanbul ignore next */
      cov_a0elgoizn().s[16]++;
      if (currentCount === 1) {
        /* istanbul ignore next */
        cov_a0elgoizn().b[1][0]++;
        cov_a0elgoizn().s[17]++;
        await redis.expire(windowKey, windowSeconds);
      } else
      /* istanbul ignore next */
      {
        cov_a0elgoizn().b[1][1]++;
      }
      const ttl =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[18]++, await redis.ttl(windowKey));
      const resetTime =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[19]++, new Date(now.getTime() + ttl * 1000));
      const allowed =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[20]++, currentCount <= maxRequests);
      const remaining =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[21]++, Math.max(0, maxRequests - currentCount));
      // Log rate limit check
      /* istanbul ignore next */
      cov_a0elgoizn().s[22]++;
      _logging.logger.info('Rate limit check', {
        key,
        allowed,
        remaining,
        resetTime: resetTime.toISOString(),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_a0elgoizn().s[23]++;
      return {
        allowed,
        remaining,
        resetTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_a0elgoizn().s[24]++;
      _logging.logger.error(new Error('Rate limit check failed'), {
        key,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_a0elgoizn().b[2][0]++, error.message) :
        /* istanbul ignore next */
        (cov_a0elgoizn().b[2][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      // Fail open if Redis is unavailable
      /* istanbul ignore next */
      cov_a0elgoizn().s[25]++;
      return {
        allowed: true,
        remaining: maxRequests,
        resetTime: new Date(CURRENT_TIMESTAMP)
      };
    }
  }
  static async getRateLimitInfo(key, windowSeconds) {
    /* istanbul ignore next */
    cov_a0elgoizn().f[3]++;
    cov_a0elgoizn().s[26]++;
    try {
      const redis =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[27]++, await this.getRedisClient());
      const now =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[28]++, new Date(CURRENT_TIMESTAMP));
      const windowKey =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[29]++, `${this.RATE_LIMIT_PREFIX}${key}:${Math.floor(now.getTime() / (windowSeconds * 1000))}`);
      const [count, ttl] =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[30]++, await Promise.all([redis.get(windowKey), redis.ttl(windowKey)]));
      const currentCount =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[31]++, count ?
      /* istanbul ignore next */
      (cov_a0elgoizn().b[3][0]++, parseInt(String(count), 10)) :
      /* istanbul ignore next */
      (cov_a0elgoizn().b[3][1]++, 0));
      const resetTime =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[32]++, new Date(now.getTime() + ttl * 1000));
      /* istanbul ignore next */
      cov_a0elgoizn().s[33]++;
      return {
        currentCount,
        resetTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_a0elgoizn().s[34]++;
      _logging.logger.error(new Error('Get rate limit info failed'), {
        key,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_a0elgoizn().b[4][0]++, error.message) :
        /* istanbul ignore next */
        (cov_a0elgoizn().b[4][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_a0elgoizn().s[35]++;
      return {
        currentCount: 0,
        resetTime: new Date(CURRENT_TIMESTAMP)
      };
    }
  }
  static async resetRateLimit(key) {
    /* istanbul ignore next */
    cov_a0elgoizn().f[4]++;
    cov_a0elgoizn().s[36]++;
    try {
      const redis =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[37]++, await this.getRedisClient());
      const pattern =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[38]++, `${this.RATE_LIMIT_PREFIX}${key}:*`);
      // Get all keys matching the pattern
      const keys =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[39]++, await redis.keys(pattern));
      /* istanbul ignore next */
      cov_a0elgoizn().s[40]++;
      if (keys.length > 0) {
        /* istanbul ignore next */
        cov_a0elgoizn().b[5][0]++;
        cov_a0elgoizn().s[41]++;
        // Delete all matching keys
        await redis.del(...keys);
        /* istanbul ignore next */
        cov_a0elgoizn().s[42]++;
        _logging.logger.info('Rate limit reset', {
          key,
          keysDeleted: keys.length,
          timestamp: CURRENT_TIMESTAMP,
          user: CURRENT_USER
        });
      } else
      /* istanbul ignore next */
      {
        cov_a0elgoizn().b[5][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_a0elgoizn().s[43]++;
      _logging.logger.error(new Error('Reset rate limit failed'), {
        key,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_a0elgoizn().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_a0elgoizn().b[6][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_a0elgoizn().s[44]++;
      throw error;
    }
  }
  static async hasExceededRateLimit(key, maxRequests, windowSeconds) {
    /* istanbul ignore next */
    cov_a0elgoizn().f[5]++;
    const {
      allowed
    } =
    /* istanbul ignore next */
    (cov_a0elgoizn().s[45]++, await this.checkRateLimit(key, maxRequests, windowSeconds));
    /* istanbul ignore next */
    cov_a0elgoizn().s[46]++;
    return !allowed;
  }
  static async incrementRateLimit(key, windowSeconds) {
    /* istanbul ignore next */
    cov_a0elgoizn().f[6]++;
    cov_a0elgoizn().s[47]++;
    try {
      const redis =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[48]++, await this.getRedisClient());
      const now =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[49]++, new Date(CURRENT_TIMESTAMP));
      const windowKey =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[50]++, `${this.RATE_LIMIT_PREFIX}${key}:${Math.floor(now.getTime() / (windowSeconds * 1000))}`);
      const count =
      /* istanbul ignore next */
      (cov_a0elgoizn().s[51]++, await redis.incr(windowKey));
      // Set expiration if this is the first request
      /* istanbul ignore next */
      cov_a0elgoizn().s[52]++;
      if (count === 1) {
        /* istanbul ignore next */
        cov_a0elgoizn().b[7][0]++;
        cov_a0elgoizn().s[53]++;
        await redis.expire(windowKey, windowSeconds);
      } else
      /* istanbul ignore next */
      {
        cov_a0elgoizn().b[7][1]++;
      }
      cov_a0elgoizn().s[54]++;
      return count;
    } catch (error) {
      /* istanbul ignore next */
      cov_a0elgoizn().s[55]++;
      _logging.logger.error(new Error('Increment rate limit failed'), {
        key,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_a0elgoizn().b[8][0]++, error.message) :
        /* istanbul ignore next */
        (cov_a0elgoizn().b[8][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_a0elgoizn().s[56]++;
      throw error;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,