{"version":3,"names":["RateLimiter","CURRENT_TIMESTAMP","cov_a0elgoizn","s","CURRENT_USER","RATE_LIMIT_PREFIX","getRedisClient","f","redis","b","_redis","Redis","url","process","env","UPSTASH_REDIS_URL","token","UPSTASH_REDIS_REST_TOKEN","checkRateLimit","key","maxRequests","windowSeconds","now","Date","windowKey","Math","floor","getTime","currentCount","incr","expire","ttl","resetTime","allowed","remaining","max","_logging","logger","info","toISOString","timestamp","user","error","Error","message","String","getRateLimitInfo","count","Promise","all","get","parseInt","resetRateLimit","pattern","keys","length","del","keysDeleted","hasExceededRateLimit","incrementRateLimit"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/rate-limiter.ts"],"sourcesContent":["import { Redis } from '@upstash/redis';\nimport { logger } from './logging';\n\nconst CURRENT_TIMESTAMP = '2025-04-27T12:52:45Z';\nconst CURRENT_USER = 'Mark-Lasfar';\n\nexport class RateLimiter {\n  private static redis: Redis;\n  private static readonly RATE_LIMIT_PREFIX = 'rate-limit:';\n  \n  private static async getRedisClient() {\n    if (!this.redis) {\n      this.redis = new Redis({\n        url: process.env.UPSTASH_REDIS_URL!,\n        token: process.env.UPSTASH_REDIS_REST_TOKEN!\n      });\n    }\n    return this.redis;\n  }\n\n  static async checkRateLimit(\n    key: string,\n    maxRequests: number,\n    windowSeconds: number\n  ): Promise<{\n    allowed: boolean;\n    remaining: number;\n    resetTime: Date;\n  }> {\n    try {\n      const redis = await this.getRedisClient();\n      const now = new Date(CURRENT_TIMESTAMP);\n      const windowKey = `${this.RATE_LIMIT_PREFIX}${key}:${Math.floor(now.getTime() / (windowSeconds * 1000))}`;\n\n      // Get current count\n      const currentCount = await redis.incr(windowKey);\n\n      // Set expiration if this is the first request in the window\n      if (currentCount === 1) {\n        await redis.expire(windowKey, windowSeconds);\n      }\n\n      const ttl = await redis.ttl(windowKey);\n      const resetTime = new Date(now.getTime() + (ttl * 1000));\n\n      const allowed = currentCount <= maxRequests;\n      const remaining = Math.max(0, maxRequests - currentCount);\n\n      // Log rate limit check\n      logger.info('Rate limit check', {\n        key,\n        allowed,\n        remaining,\n        resetTime: resetTime.toISOString(),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n\n      return {\n        allowed,\n        remaining,\n        resetTime\n      };\n    } catch (error) {\n      logger.error(new Error('Rate limit check failed'), {\n        key,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      \n      // Fail open if Redis is unavailable\n      return {\n        allowed: true,\n        remaining: maxRequests,\n        resetTime: new Date(CURRENT_TIMESTAMP)\n      };\n    }\n  }\n\n  static async getRateLimitInfo(\n    key: string,\n    windowSeconds: number\n  ): Promise<{\n    currentCount: number;\n    resetTime: Date;\n  }> {\n    try {\n      const redis = await this.getRedisClient();\n      const now = new Date(CURRENT_TIMESTAMP);\n      const windowKey = `${this.RATE_LIMIT_PREFIX}${key}:${Math.floor(now.getTime() / (windowSeconds * 1000))}`;\n\n      const [count, ttl] = await Promise.all([\n        redis.get(windowKey),\n        redis.ttl(windowKey)\n      ]);\n\n      const currentCount = count ? parseInt(String(count), 10) : 0;\n      const resetTime = new Date(now.getTime() + (ttl * 1000));\n\n      return {\n        currentCount,\n        resetTime\n      };\n    } catch (error) {\n      logger.error(new Error('Get rate limit info failed'), {\n        key,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      \n      return {\n        currentCount: 0,\n        resetTime: new Date(CURRENT_TIMESTAMP)\n      };\n    }\n  }\n\n  static async resetRateLimit(key: string): Promise<void> {\n    try {\n      const redis = await this.getRedisClient();\n      const pattern = `${this.RATE_LIMIT_PREFIX}${key}:*`;\n      \n      // Get all keys matching the pattern\n      const keys = await redis.keys(pattern);\n      \n      if (keys.length > 0) {\n        // Delete all matching keys\n        await redis.del(...keys);\n        \n        logger.info('Rate limit reset', {\n          key,\n          keysDeleted: keys.length,\n          timestamp: CURRENT_TIMESTAMP,\n          user: CURRENT_USER\n        });\n      }\n    } catch (error) {\n      logger.error(new Error('Reset rate limit failed'), {\n        key,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      throw error;\n    }\n  }\n\n  static async hasExceededRateLimit(\n    key: string,\n    maxRequests: number,\n    windowSeconds: number\n  ): Promise<boolean> {\n    const { allowed } = await this.checkRateLimit(key, maxRequests, windowSeconds);\n    return !allowed;\n  }\n\n  static async incrementRateLimit(\n    key: string,\n    windowSeconds: number\n  ): Promise<number> {\n    try {\n      const redis = await this.getRedisClient();\n      const now = new Date(CURRENT_TIMESTAMP);\n      const windowKey = `${this.RATE_LIMIT_PREFIX}${key}:${Math.floor(now.getTime() / (windowSeconds * 1000))}`;\n\n      const count = await redis.incr(windowKey);\n      \n      // Set expiration if this is the first request\n      if (count === 1) {\n        await redis.expire(windowKey, windowSeconds);\n      }\n\n      return count;\n    } catch (error) {\n      logger.error(new Error('Increment rate limit failed'), {\n        key,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      throw error;\n    }\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAMa;;;;;;WAAAA,WAAA;;;;;iCANS;;;iCACC;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","ignoreList":[]}