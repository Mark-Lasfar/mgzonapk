3e324a61ba8cf9319b075a34985b6a4d
"use strict";

/* istanbul ignore next */
function cov_1dbpslmrzp() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/warehouse.model.ts";
  var hash = "702ffb72998380e033700e971f30c6cbc3dce85b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/warehouse.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "3": {
        start: {
          line: 11,
          column: 18
        },
        end: {
          line: 11,
          column: 37
        }
      },
      "4": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 103,
          column: 2
        }
      },
      "5": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 181,
          column: 2
        }
      },
      "6": {
        start: {
          line: 182,
          column: 0
        },
        end: {
          line: 184,
          column: 3
        }
      },
      "7": {
        start: {
          line: 185,
          column: 0
        },
        end: {
          line: 187,
          column: 3
        }
      },
      "8": {
        start: {
          line: 188,
          column: 0
        },
        end: {
          line: 190,
          column: 3
        }
      },
      "9": {
        start: {
          line: 191,
          column: 0
        },
        end: {
          line: 193,
          column: 3
        }
      },
      "10": {
        start: {
          line: 194,
          column: 0
        },
        end: {
          line: 196,
          column: 3
        }
      },
      "11": {
        start: {
          line: 197,
          column: 0
        },
        end: {
          line: 255,
          column: 2
        }
      },
      "12": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 254,
          column: 5
        }
      },
      "13": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 100
        }
      },
      "14": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "15": {
        start: {
          line: 201,
          column: 26
        },
        end: {
          line: 201,
          column: 59
        }
      },
      "16": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "17": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 84
        }
      },
      "18": {
        start: {
          line: 206,
          column: 25
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "19": {
        start: {
          line: 208,
          column: 39
        },
        end: {
          line: 210,
          column: 17
        }
      },
      "20": {
        start: {
          line: 211,
          column: 42
        },
        end: {
          line: 215,
          column: 17
        }
      },
      "21": {
        start: {
          line: 216,
          column: 37
        },
        end: {
          line: 222,
          column: 17
        }
      },
      "22": {
        start: {
          line: 225,
          column: 31
        },
        end: {
          line: 225,
          column: 69
        }
      },
      "23": {
        start: {
          line: 226,
          column: 25
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "24": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 38
        }
      },
      "25": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 26
        }
      },
      "26": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "27": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 119
        }
      },
      "28": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 250,
          column: 10
        }
      },
      "29": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 87
        }
      },
      "30": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 20
        }
      },
      "31": {
        start: {
          line: 256,
          column: 0
        },
        end: {
          line: 268,
          column: 2
        }
      },
      "32": {
        start: {
          line: 257,
          column: 21
        },
        end: {
          line: 257,
          column: 74
        }
      },
      "33": {
        start: {
          line: 257,
          column: 46
        },
        end: {
          line: 257,
          column: 73
        }
      },
      "34": {
        start: {
          line: 258,
          column: 4
        },
        end: {
          line: 260,
          column: 5
        }
      },
      "35": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 46
        }
      },
      "36": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 267,
          column: 6
        }
      },
      "37": {
        start: {
          line: 269,
          column: 0
        },
        end: {
          line: 318,
          column: 2
        }
      },
      "38": {
        start: {
          line: 270,
          column: 21
        },
        end: {
          line: 288,
          column: 5
        }
      },
      "39": {
        start: {
          line: 272,
          column: 35
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "40": {
        start: {
          line: 275,
          column: 38
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "41": {
        start: {
          line: 280,
          column: 33
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "42": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 317,
          column: 5
        }
      },
      "43": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 98
        }
      },
      "44": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "45": {
        start: {
          line: 292,
          column: 30
        },
        end: {
          line: 292,
          column: 68
        }
      },
      "46": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 299,
          column: 15
        }
      },
      "47": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 310,
          column: 13
        }
      },
      "48": {
        start: {
          line: 302,
          column: 34
        },
        end: {
          line: 302,
          column: 72
        }
      },
      "49": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 309,
          column: 19
        }
      },
      "50": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 46
        }
      },
      "51": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 26
        }
      },
      "52": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 84
        }
      },
      "53": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 20
        }
      },
      "54": {
        start: {
          line: 319,
          column: 0
        },
        end: {
          line: 355,
          column: 2
        }
      },
      "55": {
        start: {
          line: 320,
          column: 4
        },
        end: {
          line: 354,
          column: 5
        }
      },
      "56": {
        start: {
          line: 321,
          column: 25
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "57": {
        start: {
          line: 323,
          column: 39
        },
        end: {
          line: 325,
          column: 17
        }
      },
      "58": {
        start: {
          line: 326,
          column: 42
        },
        end: {
          line: 330,
          column: 17
        }
      },
      "59": {
        start: {
          line: 331,
          column: 37
        },
        end: {
          line: 337,
          column: 17
        }
      },
      "60": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 60
        }
      },
      "61": {
        start: {
          line: 341,
          column: 22
        },
        end: {
          line: 341,
          column: 50
        }
      },
      "62": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "63": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 348,
          column: 15
        }
      },
      "64": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 350,
          column: 26
        }
      },
      "65": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 82
        }
      },
      "66": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 353,
          column: 20
        }
      },
      "67": {
        start: {
          line: 356,
          column: 18
        },
        end: {
          line: 356,
          column: 98
        }
      },
      "68": {
        start: {
          line: 357,
          column: 17
        },
        end: {
          line: 357,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 197,
            column: 41
          },
          end: {
            line: 197,
            column: 42
          }
        },
        loc: {
          start: {
            line: 197,
            column: 65
          },
          end: {
            line: 255,
            column: 1
          }
        },
        line: 197
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 208,
            column: 28
          },
          end: {
            line: 208,
            column: 29
          }
        },
        loc: {
          start: {
            line: 208,
            column: 39
          },
          end: {
            line: 210,
            column: 17
          }
        },
        line: 208
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 211,
            column: 31
          },
          end: {
            line: 211,
            column: 32
          }
        },
        loc: {
          start: {
            line: 211,
            column: 42
          },
          end: {
            line: 215,
            column: 17
          }
        },
        line: 211
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 216,
            column: 26
          },
          end: {
            line: 216,
            column: 27
          }
        },
        loc: {
          start: {
            line: 216,
            column: 37
          },
          end: {
            line: 222,
            column: 17
          }
        },
        line: 216
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 223,
            column: 29
          },
          end: {
            line: 223,
            column: 30
          }
        },
        loc: {
          start: {
            line: 223,
            column: 39
          },
          end: {
            line: 223,
            column: 41
          }
        },
        line: 223
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 256,
            column: 44
          },
          end: {
            line: 256,
            column: 45
          }
        },
        loc: {
          start: {
            line: 256,
            column: 71
          },
          end: {
            line: 268,
            column: 1
          }
        },
        line: 256
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 257,
            column: 41
          },
          end: {
            line: 257,
            column: 42
          }
        },
        loc: {
          start: {
            line: 257,
            column: 46
          },
          end: {
            line: 257,
            column: 73
          }
        },
        line: 257
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 269,
            column: 40
          },
          end: {
            line: 269,
            column: 41
          }
        },
        loc: {
          start: {
            line: 269,
            column: 66
          },
          end: {
            line: 318,
            column: 1
          }
        },
        line: 269
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 272,
            column: 24
          },
          end: {
            line: 272,
            column: 25
          }
        },
        loc: {
          start: {
            line: 272,
            column: 35
          },
          end: {
            line: 274,
            column: 13
          }
        },
        line: 272
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 275,
            column: 27
          },
          end: {
            line: 275,
            column: 28
          }
        },
        loc: {
          start: {
            line: 275,
            column: 38
          },
          end: {
            line: 279,
            column: 13
          }
        },
        line: 275
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 280,
            column: 22
          },
          end: {
            line: 280,
            column: 23
          }
        },
        loc: {
          start: {
            line: 280,
            column: 33
          },
          end: {
            line: 286,
            column: 13
          }
        },
        line: 280
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 287,
            column: 25
          },
          end: {
            line: 287,
            column: 26
          }
        },
        loc: {
          start: {
            line: 287,
            column: 35
          },
          end: {
            line: 287,
            column: 37
          }
        },
        line: 287
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 319,
            column: 38
          },
          end: {
            line: 319,
            column: 39
          }
        },
        loc: {
          start: {
            line: 319,
            column: 74
          },
          end: {
            line: 355,
            column: 1
          }
        },
        line: 319
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 323,
            column: 28
          },
          end: {
            line: 323,
            column: 29
          }
        },
        loc: {
          start: {
            line: 323,
            column: 39
          },
          end: {
            line: 325,
            column: 17
          }
        },
        line: 323
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 326,
            column: 31
          },
          end: {
            line: 326,
            column: 32
          }
        },
        loc: {
          start: {
            line: 326,
            column: 42
          },
          end: {
            line: 330,
            column: 17
          }
        },
        line: 326
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 331,
            column: 26
          },
          end: {
            line: 331,
            column: 27
          }
        },
        loc: {
          start: {
            line: 331,
            column: 37
          },
          end: {
            line: 337,
            column: 17
          }
        },
        line: 331
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 338,
            column: 29
          },
          end: {
            line: 338,
            column: 30
          }
        },
        loc: {
          start: {
            line: 338,
            column: 39
          },
          end: {
            line: 338,
            column: 41
          }
        },
        line: 338
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "1": {
        loc: {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 22
          }
        }, {
          start: {
            line: 202,
            column: 26
          },
          end: {
            line: 202,
            column: 56
          }
        }],
        line: 202
      },
      "2": {
        loc: {
          start: {
            line: 246,
            column: 52
          },
          end: {
            line: 246,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 52
          },
          end: {
            line: 246,
            column: 95
          }
        }, {
          start: {
            line: 246,
            column: 99
          },
          end: {
            line: 246,
            column: 100
          }
        }],
        line: 246
      },
      "3": {
        loc: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "4": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 311,
            column: 9
          }
        }, {
          start: {
            line: 300,
            column: 15
          },
          end: {
            line: 311,
            column: 9
          }
        }],
        line: 291
      },
      "5": {
        loc: {
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "6": {
        loc: {
          start: {
            line: 356,
            column: 18
          },
          end: {
            line: 356,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 356,
            column: 18
          },
          end: {
            line: 356,
            column: 44
          }
        }, {
          start: {
            line: 356,
            column: 48
          },
          end: {
            line: 356,
            column: 98
          }
        }],
        line: 356
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/warehouse.model.ts"],
      sourcesContent: ["import { Schema, model, models, Document, Model } from 'mongoose';\nimport {\n  WarehouseProduct,\n  ShipmentStatus,\n  CreateShipmentRequest,\n  WarehouseProvider,\n} from '@/lib/services/warehouse/types';\n\nexport interface IShipmentEvent {\n  date: Date;\n  status: string;\n  location: string;\n}\n\nexport interface IShipment extends Document {\n  trackingId: string;\n  orderId: string;\n  status: 'pending' | 'processing' | 'shipped' | 'delivered';\n  location?: string;\n  estimatedDeliveryDate?: Date;\n  events: IShipmentEvent[];\n  shippingAddress: {\n    name: string;\n    street: string;\n    city: string;\n    state: string;\n    country: string;\n    postalCode: string;\n    phone: string;\n  };\n  items: {\n    productId: Schema.Types.ObjectId;\n    quantity: number;\n  }[];\n  warehouseId: Schema.Types.ObjectId;\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n  updatedBy: string;\n}\n\nexport interface IWarehouseStock {\n  productId: Schema.Types.ObjectId;\n  sku: string;\n  name: string;\n  quantity: number;\n  location: string;\n  lastSync: Date;\n  lastUpdated: Date;\n  updatedBy: string;\n}\n\nexport interface IWarehouse extends Document {\n  name: string;\n  code: string;\n  provider: string;\n  apiKey: string;\n  apiUrl: string;\n  location: string;\n  isActive: boolean;\n  products: Map<string, IWarehouseStock>;\n  shipments: IShipment[];\n  settings: {\n    autoSync: boolean;\n    syncInterval: number;\n    lastSyncAt?: Date;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n  updatedBy: string;\n  createShipment(request: CreateShipmentRequest): Promise<{ trackingId: string }>;\n  getShipmentStatus(trackingId: string): Promise<ShipmentStatus>;\n  syncInventory(productId?: string): Promise<void>;\n  updateStock(productId: string, quantity: number): Promise<void>;\n}\n\nconst shipmentSchema = new Schema<IShipment>({\n  trackingId: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  orderId: {\n    type: String,\n    required: true,\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'processing', 'shipped', 'delivered'],\n    default: 'pending',\n  },\n  location: String,\n  estimatedDeliveryDate: Date,\n  events: [\n    {\n      date: { type: Date, required: true },\n      status: { type: String, required: true },\n      location: { type: String, required: true },\n    },\n  ],\n  shippingAddress: {\n    name: { type: String, required: true },\n    street: { type: String, required: true },\n    city: { type: String, required: true },\n    state: { type: String, required: true },\n    country: { type: String, required: true },\n    postalCode: { type: String, required: true },\n    phone: { type: String, required: true },\n  },\n  items: [\n    {\n      productId: { type: Schema.Types.ObjectId, ref: 'Product', required: true },\n      quantity: { type: Number, required: true, min: 1 },\n    },\n  ],\n  warehouseId: {\n    type: Schema.Types.ObjectId,\n    ref: 'Warehouse',\n    required: true,\n  },\n  createdBy: String,\n  updatedBy: String,\n}, { timestamps: true });\n\nconst warehouseSchema = new Schema<IWarehouse>({\n  name: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  code: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n  },\n  provider: {\n    type: String,\n    required: true,\n  },\n  apiKey: {\n    type: String,\n    required: true,\n  },\n  apiUrl: {\n    type: String,\n    required: true,\n  },\n  location: {\n    type: String,\n    required: true,\n  },\n  isActive: {\n    type: Boolean,\n    default: true,\n  },\n  products: {\n    type: Map,\n    of: new Schema({\n      productId: { type: Schema.Types.ObjectId, ref: 'Product', required: true },\n      sku: { type: String, required: true },\n      name: { type: String, required: true },\n      quantity: { type: Number, default: 0 },\n      location: String,\n      lastSync: Date,\n      lastUpdated: Date,\n      updatedBy: String,\n    }),\n    default: new Map(),\n  },\n  shipments: [shipmentSchema],\n  settings: {\n    autoSync: { type: Boolean, default: true },\n    syncInterval: { type: Number, default: 3600000 },\n    lastSyncAt: Date,\n  },\n  createdBy: String,\n  updatedBy: String,\n}, { timestamps: true });\n\nwarehouseSchema.index({ provider: 1 });\nwarehouseSchema.index({ isActive: 1 });\nwarehouseSchema.index({ 'shipments.trackingId': 1 });\nwarehouseSchema.index({ 'products.sku': 1 });\nwarehouseSchema.index({ updatedAt: -1 });\n\nwarehouseSchema.methods.createShipment = async function (request: CreateShipmentRequest) {\n  try {\n    console.log(`[${new Date().toISOString()}] Creating shipment for order ${request.orderId}`);\n\n    for (const item of request.items) {\n      const stock = this.products.get(item.productId);\n      if (!stock || stock.quantity < item.quantity) {\n        throw new Error(`Insufficient stock for product ${item.productId}`);\n      }\n    }\n\n    const provider: WarehouseProvider = {\n      name: this.provider,\n      createShipment: async () => ({ trackingId: `TRK-${Date.now()}` }),\n      getShipmentStatus: async () => ({\n        trackingId: '',\n        status: 'pending',\n        events: [],\n      }),\n      getInventory: async () => ({\n        id: '',\n        sku: '',\n        name: '',\n        quantity: 0,\n        location: '',\n      }),\n      updateInventory: async () => {},\n    };\n\n    const { trackingId } = await provider.createShipment(request);\n\n    const shipment = {\n      trackingId,\n      orderId: request.orderId,\n      status: 'pending' as const,\n      shippingAddress: request.shippingAddress,\n      items: request.items,\n      warehouseId: this._id,\n      events: [{\n        date: new Date(),\n        status: 'created',\n        location: this.location,\n      }],\n      createdBy: 'SYSTEM',\n      updatedBy: 'SYSTEM',\n    };\n\n    this.shipments.push(shipment);\n    await this.save();\n\n    for (const item of request.items) {\n      await this.updateStock(\n        item.productId,\n        (this.products.get(item.productId)?.quantity || 0) - item.quantity\n      );\n    }\n\n    return { trackingId };\n  } catch (error) {\n    console.error(`[${new Date().toISOString()}] Shipment creation error:`, error);\n    throw error;\n  }\n};\n\nwarehouseSchema.methods.getShipmentStatus = async function (trackingId: string) {\n  const shipment = this.shipments.find((s) => s.trackingId === trackingId);\n  if (!shipment) {\n    throw new Error('Shipment not found');\n  }\n\n  return {\n    trackingId: shipment.trackingId,\n    status: shipment.status,\n    location: shipment.location,\n    estimatedDeliveryDate: shipment.estimatedDeliveryDate,\n    events: shipment.events,\n  };\n};\n\nwarehouseSchema.methods.syncInventory = async function (productId?: string) {\n  const provider: WarehouseProvider = {\n    name: this.provider,\n    createShipment: async () => ({ trackingId: '' }),\n    getShipmentStatus: async () => ({\n      trackingId: '',\n      status: 'pending',\n      events: [],\n    }),\n    getInventory: async () => ({\n      id: '',\n      sku: '',\n      name: '',\n      quantity: 0,\n      location: '',\n    }),\n    updateInventory: async () => {},\n  };\n\n  try {\n    console.log(`[${new Date().toISOString()}] Syncing inventory for warehouse ${this.name}`);\n\n    if (productId) {\n      const inventory = await provider.getInventory(productId);\n      this.products.set(productId, {\n        ...inventory,\n        productId,\n        lastSync: new Date(),\n        lastUpdated: new Date(),\n        updatedBy: 'SYSTEM',\n      });\n    } else {\n      for (const [productId] of this.products) {\n        const inventory = await provider.getInventory(productId);\n        this.products.set(productId, {\n          ...inventory,\n          productId,\n          lastSync: new Date(),\n          lastUpdated: new Date(),\n          updatedBy: 'SYSTEM',\n        });\n      }\n    }\n\n    this.settings.lastSyncAt = new Date();\n    await this.save();\n  } catch (error) {\n    console.error(`[${new Date().toISOString()}] Inventory sync error:`, error);\n    throw error;\n  }\n};\n\nwarehouseSchema.methods.updateStock = async function (productId: string, quantity: number) {\n  try {\n    const provider: WarehouseProvider = {\n      name: this.provider,\n      createShipment: async () => ({ trackingId: '' }),\n      getShipmentStatus: async () => ({\n        trackingId: '',\n        status: 'pending',\n        events: [],\n      }),\n      getInventory: async () => ({\n        id: '',\n        sku: '',\n        name: '',\n        quantity: 0,\n        location: '',\n      }),\n      updateInventory: async () => {},\n    };\n\n    await provider.updateInventory(productId, quantity);\n\n    const stock = this.products.get(productId);\n    if (stock) {\n      this.products.set(productId, {\n        ...stock,\n        quantity,\n        lastUpdated: new Date(),\n        updatedBy: 'SYSTEM',\n      });\n    }\n\n    await this.save();\n  } catch (error) {\n    console.error(`[${new Date().toISOString()}] Stock update error:`, error);\n    throw error;\n  }\n};\n\nconst Warehouse = (models.Warehouse as Model<IWarehouse>) || model<IWarehouse>('Warehouse', warehouseSchema);\n\nexport default Warehouse;"],
      names: ["shipmentSchema", "Schema", "trackingId", "type", "String", "required", "unique", "orderId", "status", "enum", "default", "location", "estimatedDeliveryDate", "Date", "events", "date", "shippingAddress", "name", "street", "city", "state", "country", "postalCode", "phone", "items", "productId", "Types", "ObjectId", "ref", "quantity", "Number", "min", "warehouseId", "createdBy", "updatedBy", "timestamps", "warehouseSchema", "trim", "code", "provider", "apiKey", "apiUrl", "isActive", "Boolean", "products", "Map", "of", "sku", "lastSync", "lastUpdated", "shipments", "settings", "autoSync", "syncInterval", "lastSyncAt", "index", "updatedAt", "methods", "createShipment", "request", "console", "log", "toISOString", "item", "stock", "get", "Error", "now", "getShipmentStatus", "getInventory", "id", "updateInventory", "shipment", "_id", "push", "save", "updateStock", "error", "find", "s", "syncInventory", "inventory", "set", "Warehouse", "models", "model"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "702ffb72998380e033700e971f30c6cbc3dce85b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1dbpslmrzp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1dbpslmrzp();
cov_1dbpslmrzp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1dbpslmrzp().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1dbpslmrzp().f[0]++;
    cov_1dbpslmrzp().s[2]++;
    return _default;
  }
});
const _mongoose =
/* istanbul ignore next */
(cov_1dbpslmrzp().s[3]++, require("mongoose"));
const shipmentSchema =
/* istanbul ignore next */
(cov_1dbpslmrzp().s[4]++, new _mongoose.Schema({
  trackingId: {
    type: String,
    required: true,
    unique: true
  },
  orderId: {
    type: String,
    required: true
  },
  status: {
    type: String,
    enum: ['pending', 'processing', 'shipped', 'delivered'],
    default: 'pending'
  },
  location: String,
  estimatedDeliveryDate: Date,
  events: [{
    date: {
      type: Date,
      required: true
    },
    status: {
      type: String,
      required: true
    },
    location: {
      type: String,
      required: true
    }
  }],
  shippingAddress: {
    name: {
      type: String,
      required: true
    },
    street: {
      type: String,
      required: true
    },
    city: {
      type: String,
      required: true
    },
    state: {
      type: String,
      required: true
    },
    country: {
      type: String,
      required: true
    },
    postalCode: {
      type: String,
      required: true
    },
    phone: {
      type: String,
      required: true
    }
  },
  items: [{
    productId: {
      type: _mongoose.Schema.Types.ObjectId,
      ref: 'Product',
      required: true
    },
    quantity: {
      type: Number,
      required: true,
      min: 1
    }
  }],
  warehouseId: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Warehouse',
    required: true
  },
  createdBy: String,
  updatedBy: String
}, {
  timestamps: true
}));
const warehouseSchema =
/* istanbul ignore next */
(cov_1dbpslmrzp().s[5]++, new _mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true
  },
  code: {
    type: String,
    required: true,
    unique: true,
    trim: true
  },
  provider: {
    type: String,
    required: true
  },
  apiKey: {
    type: String,
    required: true
  },
  apiUrl: {
    type: String,
    required: true
  },
  location: {
    type: String,
    required: true
  },
  isActive: {
    type: Boolean,
    default: true
  },
  products: {
    type: Map,
    of: new _mongoose.Schema({
      productId: {
        type: _mongoose.Schema.Types.ObjectId,
        ref: 'Product',
        required: true
      },
      sku: {
        type: String,
        required: true
      },
      name: {
        type: String,
        required: true
      },
      quantity: {
        type: Number,
        default: 0
      },
      location: String,
      lastSync: Date,
      lastUpdated: Date,
      updatedBy: String
    }),
    default: new Map()
  },
  shipments: [shipmentSchema],
  settings: {
    autoSync: {
      type: Boolean,
      default: true
    },
    syncInterval: {
      type: Number,
      default: 3600000
    },
    lastSyncAt: Date
  },
  createdBy: String,
  updatedBy: String
}, {
  timestamps: true
}));
/* istanbul ignore next */
cov_1dbpslmrzp().s[6]++;
warehouseSchema.index({
  provider: 1
});
/* istanbul ignore next */
cov_1dbpslmrzp().s[7]++;
warehouseSchema.index({
  isActive: 1
});
/* istanbul ignore next */
cov_1dbpslmrzp().s[8]++;
warehouseSchema.index({
  'shipments.trackingId': 1
});
/* istanbul ignore next */
cov_1dbpslmrzp().s[9]++;
warehouseSchema.index({
  'products.sku': 1
});
/* istanbul ignore next */
cov_1dbpslmrzp().s[10]++;
warehouseSchema.index({
  updatedAt: -1
});
/* istanbul ignore next */
cov_1dbpslmrzp().s[11]++;
warehouseSchema.methods.createShipment = async function (request) {
  /* istanbul ignore next */
  cov_1dbpslmrzp().f[1]++;
  cov_1dbpslmrzp().s[12]++;
  try {
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[13]++;
    console.log(`[${new Date().toISOString()}] Creating shipment for order ${request.orderId}`);
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[14]++;
    for (const item of request.items) {
      const stock =
      /* istanbul ignore next */
      (cov_1dbpslmrzp().s[15]++, this.products.get(item.productId));
      /* istanbul ignore next */
      cov_1dbpslmrzp().s[16]++;
      if (
      /* istanbul ignore next */
      (cov_1dbpslmrzp().b[1][0]++, !stock) ||
      /* istanbul ignore next */
      (cov_1dbpslmrzp().b[1][1]++, stock.quantity < item.quantity)) {
        /* istanbul ignore next */
        cov_1dbpslmrzp().b[0][0]++;
        cov_1dbpslmrzp().s[17]++;
        throw new Error(`Insufficient stock for product ${item.productId}`);
      } else
      /* istanbul ignore next */
      {
        cov_1dbpslmrzp().b[0][1]++;
      }
    }
    const provider =
    /* istanbul ignore next */
    (cov_1dbpslmrzp().s[18]++, {
      name: this.provider,
      createShipment: async () => {
        /* istanbul ignore next */
        cov_1dbpslmrzp().f[2]++;
        cov_1dbpslmrzp().s[19]++;
        return {
          trackingId: `TRK-${Date.now()}`
        };
      },
      getShipmentStatus: async () => {
        /* istanbul ignore next */
        cov_1dbpslmrzp().f[3]++;
        cov_1dbpslmrzp().s[20]++;
        return {
          trackingId: '',
          status: 'pending',
          events: []
        };
      },
      getInventory: async () => {
        /* istanbul ignore next */
        cov_1dbpslmrzp().f[4]++;
        cov_1dbpslmrzp().s[21]++;
        return {
          id: '',
          sku: '',
          name: '',
          quantity: 0,
          location: ''
        };
      },
      updateInventory: async () => {
        /* istanbul ignore next */
        cov_1dbpslmrzp().f[5]++;
      }
    });
    const {
      trackingId
    } =
    /* istanbul ignore next */
    (cov_1dbpslmrzp().s[22]++, await provider.createShipment(request));
    const shipment =
    /* istanbul ignore next */
    (cov_1dbpslmrzp().s[23]++, {
      trackingId,
      orderId: request.orderId,
      status: 'pending',
      shippingAddress: request.shippingAddress,
      items: request.items,
      warehouseId: this._id,
      events: [{
        date: new Date(),
        status: 'created',
        location: this.location
      }],
      createdBy: 'SYSTEM',
      updatedBy: 'SYSTEM'
    });
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[24]++;
    this.shipments.push(shipment);
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[25]++;
    await this.save();
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[26]++;
    for (const item of request.items) {
      /* istanbul ignore next */
      cov_1dbpslmrzp().s[27]++;
      await this.updateStock(item.productId, (
      /* istanbul ignore next */
      (cov_1dbpslmrzp().b[2][0]++, this.products.get(item.productId)?.quantity) ||
      /* istanbul ignore next */
      (cov_1dbpslmrzp().b[2][1]++, 0)) - item.quantity);
    }
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[28]++;
    return {
      trackingId
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[29]++;
    console.error(`[${new Date().toISOString()}] Shipment creation error:`, error);
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[30]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_1dbpslmrzp().s[31]++;
warehouseSchema.methods.getShipmentStatus = async function (trackingId) {
  /* istanbul ignore next */
  cov_1dbpslmrzp().f[6]++;
  const shipment =
  /* istanbul ignore next */
  (cov_1dbpslmrzp().s[32]++, this.shipments.find(s => {
    /* istanbul ignore next */
    cov_1dbpslmrzp().f[7]++;
    cov_1dbpslmrzp().s[33]++;
    return s.trackingId === trackingId;
  }));
  /* istanbul ignore next */
  cov_1dbpslmrzp().s[34]++;
  if (!shipment) {
    /* istanbul ignore next */
    cov_1dbpslmrzp().b[3][0]++;
    cov_1dbpslmrzp().s[35]++;
    throw new Error('Shipment not found');
  } else
  /* istanbul ignore next */
  {
    cov_1dbpslmrzp().b[3][1]++;
  }
  cov_1dbpslmrzp().s[36]++;
  return {
    trackingId: shipment.trackingId,
    status: shipment.status,
    location: shipment.location,
    estimatedDeliveryDate: shipment.estimatedDeliveryDate,
    events: shipment.events
  };
};
/* istanbul ignore next */
cov_1dbpslmrzp().s[37]++;
warehouseSchema.methods.syncInventory = async function (productId) {
  /* istanbul ignore next */
  cov_1dbpslmrzp().f[8]++;
  const provider =
  /* istanbul ignore next */
  (cov_1dbpslmrzp().s[38]++, {
    name: this.provider,
    createShipment: async () => {
      /* istanbul ignore next */
      cov_1dbpslmrzp().f[9]++;
      cov_1dbpslmrzp().s[39]++;
      return {
        trackingId: ''
      };
    },
    getShipmentStatus: async () => {
      /* istanbul ignore next */
      cov_1dbpslmrzp().f[10]++;
      cov_1dbpslmrzp().s[40]++;
      return {
        trackingId: '',
        status: 'pending',
        events: []
      };
    },
    getInventory: async () => {
      /* istanbul ignore next */
      cov_1dbpslmrzp().f[11]++;
      cov_1dbpslmrzp().s[41]++;
      return {
        id: '',
        sku: '',
        name: '',
        quantity: 0,
        location: ''
      };
    },
    updateInventory: async () => {
      /* istanbul ignore next */
      cov_1dbpslmrzp().f[12]++;
    }
  });
  /* istanbul ignore next */
  cov_1dbpslmrzp().s[42]++;
  try {
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[43]++;
    console.log(`[${new Date().toISOString()}] Syncing inventory for warehouse ${this.name}`);
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[44]++;
    if (productId) {
      /* istanbul ignore next */
      cov_1dbpslmrzp().b[4][0]++;
      const inventory =
      /* istanbul ignore next */
      (cov_1dbpslmrzp().s[45]++, await provider.getInventory(productId));
      /* istanbul ignore next */
      cov_1dbpslmrzp().s[46]++;
      this.products.set(productId, {
        ...inventory,
        productId,
        lastSync: new Date(),
        lastUpdated: new Date(),
        updatedBy: 'SYSTEM'
      });
    } else {
      /* istanbul ignore next */
      cov_1dbpslmrzp().b[4][1]++;
      cov_1dbpslmrzp().s[47]++;
      for (const [productId] of this.products) {
        const inventory =
        /* istanbul ignore next */
        (cov_1dbpslmrzp().s[48]++, await provider.getInventory(productId));
        /* istanbul ignore next */
        cov_1dbpslmrzp().s[49]++;
        this.products.set(productId, {
          ...inventory,
          productId,
          lastSync: new Date(),
          lastUpdated: new Date(),
          updatedBy: 'SYSTEM'
        });
      }
    }
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[50]++;
    this.settings.lastSyncAt = new Date();
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[51]++;
    await this.save();
  } catch (error) {
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[52]++;
    console.error(`[${new Date().toISOString()}] Inventory sync error:`, error);
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[53]++;
    throw error;
  }
};
/* istanbul ignore next */
cov_1dbpslmrzp().s[54]++;
warehouseSchema.methods.updateStock = async function (productId, quantity) {
  /* istanbul ignore next */
  cov_1dbpslmrzp().f[13]++;
  cov_1dbpslmrzp().s[55]++;
  try {
    const provider =
    /* istanbul ignore next */
    (cov_1dbpslmrzp().s[56]++, {
      name: this.provider,
      createShipment: async () => {
        /* istanbul ignore next */
        cov_1dbpslmrzp().f[14]++;
        cov_1dbpslmrzp().s[57]++;
        return {
          trackingId: ''
        };
      },
      getShipmentStatus: async () => {
        /* istanbul ignore next */
        cov_1dbpslmrzp().f[15]++;
        cov_1dbpslmrzp().s[58]++;
        return {
          trackingId: '',
          status: 'pending',
          events: []
        };
      },
      getInventory: async () => {
        /* istanbul ignore next */
        cov_1dbpslmrzp().f[16]++;
        cov_1dbpslmrzp().s[59]++;
        return {
          id: '',
          sku: '',
          name: '',
          quantity: 0,
          location: ''
        };
      },
      updateInventory: async () => {
        /* istanbul ignore next */
        cov_1dbpslmrzp().f[17]++;
      }
    });
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[60]++;
    await provider.updateInventory(productId, quantity);
    const stock =
    /* istanbul ignore next */
    (cov_1dbpslmrzp().s[61]++, this.products.get(productId));
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[62]++;
    if (stock) {
      /* istanbul ignore next */
      cov_1dbpslmrzp().b[5][0]++;
      cov_1dbpslmrzp().s[63]++;
      this.products.set(productId, {
        ...stock,
        quantity,
        lastUpdated: new Date(),
        updatedBy: 'SYSTEM'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dbpslmrzp().b[5][1]++;
    }
    cov_1dbpslmrzp().s[64]++;
    await this.save();
  } catch (error) {
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[65]++;
    console.error(`[${new Date().toISOString()}] Stock update error:`, error);
    /* istanbul ignore next */
    cov_1dbpslmrzp().s[66]++;
    throw error;
  }
};
const Warehouse =
/* istanbul ignore next */
(cov_1dbpslmrzp().s[67]++,
/* istanbul ignore next */
(cov_1dbpslmrzp().b[6][0]++, _mongoose.models.Warehouse) ||
/* istanbul ignore next */
(cov_1dbpslmrzp().b[6][1]++, (0, _mongoose.model)('Warehouse', warehouseSchema)));
const _default =
/* istanbul ignore next */
(cov_1dbpslmrzp().s[68]++, Warehouse);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,