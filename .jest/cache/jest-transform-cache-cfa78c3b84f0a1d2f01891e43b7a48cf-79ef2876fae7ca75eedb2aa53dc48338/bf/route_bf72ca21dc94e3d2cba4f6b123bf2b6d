741dd90ec7e6ef8dee163bba0184373d
"use strict";

/* istanbul ignore next */
function cov_1bj6ir6qhc() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/reset-password/route.ts";
  var hash = "987256f5c3daa2d2d6b9544e7612234e49040f47";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/reset-password/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 64
        }
      },
      "5": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 13,
          column: 67
        }
      },
      "6": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "7": {
        start: {
          line: 15,
          column: 45
        },
        end: {
          line: 15,
          column: 131
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "9": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "10": {
        start: {
          line: 23,
          column: 31
        },
        end: {
          line: 23,
          column: 47
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "12": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 43
        }
      },
      "14": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 32,
          column: 70
        }
      },
      "15": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 33,
          column: 63
        }
      },
      "16": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "17": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "18": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "19": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 61
        }
      },
      "20": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 33
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 21,
            column: 15
          },
          end: {
            line: 21,
            column: 19
          }
        },
        loc: {
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 21
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 38
          }
        }, {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 19,
            column: 5
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 14
          }
        }, {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 32
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/reset-password/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { emailService } from '@/lib/services/email/mailer';\nimport { generateRecoveryCode } from '@/lib/utils/verification';\nimport { connectToDatabase } from '@/lib/db';\nimport VerificationCode from '@/lib/db/models/verification-code.model';\n\nexport async function POST(req: Request) {\n  try {\n    const { identifier } = await req.json();\n\n    if (!identifier) {\n      return NextResponse.json({ error: 'Identifier is required' }, { status: 400 });\n    }\n\n    await connectToDatabase();\n\n    const recoveryCode = generateRecoveryCode();\n    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n\n    // Store recovery code\n    await VerificationCode.create({\n      email: identifier,\n      code: recoveryCode,\n      type: 'PASSWORD_RESET',\n      expiresAt,\n      verified: false,\n    });\n\n    // Send email\n    await emailService.send({\n      to: identifier,\n      subject: 'Password Recovery Code - MGZon',\n      html: `<p>Your recovery code is: <strong>${recoveryCode}</strong></p>`,\n      text: `Your recovery code is: ${recoveryCode}`,\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error sending recovery code:', error);\n    return NextResponse.json({ error: 'Failed to send recovery code' }, { status: 500 });\n  }\n}"],
      names: ["POST", "req", "identifier", "json", "NextResponse", "error", "status", "connectToDatabase", "recoveryCode", "generateRecoveryCode", "expiresAt", "Date", "now", "VerificationCode", "create", "email", "code", "type", "verified", "emailService", "send", "to", "subject", "html", "text", "success", "console"],
      mappings: ";;;;+BAMsBA;;;eAAAA;;;wBANO;wBACA;8BACQ;oBACH;8EACL;;;;;;AAEtB,eAAeA,KAAKC,GAAY;IACrC,IAAI;QACF,MAAM,EAAEC,UAAU,EAAE,GAAG,MAAMD,IAAIE,IAAI;QAErC,IAAI,CAACD,YAAY;YACf,OAAOE,oBAAY,CAACD,IAAI,CAAC;gBAAEE,OAAO;YAAyB,GAAG;gBAAEC,QAAQ;YAAI;QAC9E;QAEA,MAAMC,IAAAA,qBAAiB;QAEvB,MAAMC,eAAeC,IAAAA,kCAAoB;QACzC,MAAMC,YAAY,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,OAAO,aAAa;QAEtE,sBAAsB;QACtB,MAAMC,8BAAgB,CAACC,MAAM,CAAC;YAC5BC,OAAOb;YACPc,MAAMR;YACNS,MAAM;YACNP;YACAQ,UAAU;QACZ;QAEA,aAAa;QACb,MAAMC,oBAAY,CAACC,IAAI,CAAC;YACtBC,IAAInB;YACJoB,SAAS;YACTC,MAAM,CAAC,kCAAkC,EAAEf,aAAa,aAAa,CAAC;YACtEgB,MAAM,CAAC,uBAAuB,EAAEhB,cAAc;QAChD;QAEA,OAAOJ,oBAAY,CAACD,IAAI,CAAC;YAAEsB,SAAS;QAAK;IAC3C,EAAE,OAAOpB,OAAO;QACdqB,QAAQrB,KAAK,CAAC,gCAAgCA;QAC9C,OAAOD,oBAAY,CAACD,IAAI,CAAC;YAAEE,OAAO;QAA+B,GAAG;YAAEC,QAAQ;QAAI;IACpF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "987256f5c3daa2d2d6b9544e7612234e49040f47"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1bj6ir6qhc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1bj6ir6qhc();
cov_1bj6ir6qhc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1bj6ir6qhc().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1bj6ir6qhc().f[0]++;
    cov_1bj6ir6qhc().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1bj6ir6qhc().s[3]++, require("next/server"));
const _mailer =
/* istanbul ignore next */
(cov_1bj6ir6qhc().s[4]++, require("../../../../lib/services/email/mailer"));
const _verification =
/* istanbul ignore next */
(cov_1bj6ir6qhc().s[5]++, require("../../../../lib/utils/verification"));
const _db =
/* istanbul ignore next */
(cov_1bj6ir6qhc().s[6]++, require("../../../../lib/db"));
const _verificationcodemodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_1bj6ir6qhc().s[7]++, _interop_require_default(require("../../../../lib/db/models/verification-code.model")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1bj6ir6qhc().f[1]++;
  cov_1bj6ir6qhc().s[8]++;
  return /* istanbul ignore next */(cov_1bj6ir6qhc().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1bj6ir6qhc().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1bj6ir6qhc().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1bj6ir6qhc().b[0][1]++, {
    default: obj
  });
}
async function POST(req) {
  /* istanbul ignore next */
  cov_1bj6ir6qhc().f[2]++;
  cov_1bj6ir6qhc().s[9]++;
  try {
    const {
      identifier
    } =
    /* istanbul ignore next */
    (cov_1bj6ir6qhc().s[10]++, await req.json());
    /* istanbul ignore next */
    cov_1bj6ir6qhc().s[11]++;
    if (!identifier) {
      /* istanbul ignore next */
      cov_1bj6ir6qhc().b[2][0]++;
      cov_1bj6ir6qhc().s[12]++;
      return _server.NextResponse.json({
        error: 'Identifier is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1bj6ir6qhc().b[2][1]++;
    }
    cov_1bj6ir6qhc().s[13]++;
    await (0, _db.connectToDatabase)();
    const recoveryCode =
    /* istanbul ignore next */
    (cov_1bj6ir6qhc().s[14]++, (0, _verification.generateRecoveryCode)());
    const expiresAt =
    /* istanbul ignore next */
    (cov_1bj6ir6qhc().s[15]++, new Date(Date.now() + 10 * 60 * 1000)); // 10 minutes
    // Store recovery code
    /* istanbul ignore next */
    cov_1bj6ir6qhc().s[16]++;
    await _verificationcodemodel.default.create({
      email: identifier,
      code: recoveryCode,
      type: 'PASSWORD_RESET',
      expiresAt,
      verified: false
    });
    // Send email
    /* istanbul ignore next */
    cov_1bj6ir6qhc().s[17]++;
    await _mailer.emailService.send({
      to: identifier,
      subject: 'Password Recovery Code - MGZon',
      html: `<p>Your recovery code is: <strong>${recoveryCode}</strong></p>`,
      text: `Your recovery code is: ${recoveryCode}`
    });
    /* istanbul ignore next */
    cov_1bj6ir6qhc().s[18]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1bj6ir6qhc().s[19]++;
    console.error('Error sending recovery code:', error);
    /* istanbul ignore next */
    cov_1bj6ir6qhc().s[20]++;
    return _server.NextResponse.json({
      error: 'Failed to send recovery code'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQT1NUIiwicmVxIiwiY292XzFiajZpcjZxaGMiLCJmIiwicyIsImlkZW50aWZpZXIiLCJqc29uIiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJlcnJvciIsInN0YXR1cyIsIl9kYiIsImNvbm5lY3RUb0RhdGFiYXNlIiwicmVjb3ZlcnlDb2RlIiwiX3ZlcmlmaWNhdGlvbiIsImdlbmVyYXRlUmVjb3ZlcnlDb2RlIiwiZXhwaXJlc0F0IiwiRGF0ZSIsIm5vdyIsIl92ZXJpZmljYXRpb25jb2RlbW9kZWwiLCJkZWZhdWx0IiwiY3JlYXRlIiwiZW1haWwiLCJjb2RlIiwidHlwZSIsInZlcmlmaWVkIiwiX21haWxlciIsImVtYWlsU2VydmljZSIsInNlbmQiLCJ0byIsInN1YmplY3QiLCJodG1sIiwidGV4dCIsInN1Y2Nlc3MiLCJjb25zb2xlIl0sInNvdXJjZXMiOlsiL2hvbWUvaGFnZXIvbmV3L215LW5leHRqcy1wcm9qZWN0LW1hc3RlciAoMykvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyL2FwcC9hcGkvYXV0aC9yZXNldC1wYXNzd29yZC9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBlbWFpbFNlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9lbWFpbC9tYWlsZXInO1xuaW1wb3J0IHsgZ2VuZXJhdGVSZWNvdmVyeUNvZGUgfSBmcm9tICdAL2xpYi91dGlscy92ZXJpZmljYXRpb24nO1xuaW1wb3J0IHsgY29ubmVjdFRvRGF0YWJhc2UgfSBmcm9tICdAL2xpYi9kYic7XG5pbXBvcnQgVmVyaWZpY2F0aW9uQ29kZSBmcm9tICdAL2xpYi9kYi9tb2RlbHMvdmVyaWZpY2F0aW9uLWNvZGUubW9kZWwnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXE6IFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGlkZW50aWZpZXIgfSA9IGF3YWl0IHJlcS5qc29uKCk7XG5cbiAgICBpZiAoIWlkZW50aWZpZXIpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnSWRlbnRpZmllciBpcyByZXF1aXJlZCcgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG5cbiAgICBhd2FpdCBjb25uZWN0VG9EYXRhYmFzZSgpO1xuXG4gICAgY29uc3QgcmVjb3ZlcnlDb2RlID0gZ2VuZXJhdGVSZWNvdmVyeUNvZGUoKTtcbiAgICBjb25zdCBleHBpcmVzQXQgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgMTAgKiA2MCAqIDEwMDApOyAvLyAxMCBtaW51dGVzXG5cbiAgICAvLyBTdG9yZSByZWNvdmVyeSBjb2RlXG4gICAgYXdhaXQgVmVyaWZpY2F0aW9uQ29kZS5jcmVhdGUoe1xuICAgICAgZW1haWw6IGlkZW50aWZpZXIsXG4gICAgICBjb2RlOiByZWNvdmVyeUNvZGUsXG4gICAgICB0eXBlOiAnUEFTU1dPUkRfUkVTRVQnLFxuICAgICAgZXhwaXJlc0F0LFxuICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxuICAgIH0pO1xuXG4gICAgLy8gU2VuZCBlbWFpbFxuICAgIGF3YWl0IGVtYWlsU2VydmljZS5zZW5kKHtcbiAgICAgIHRvOiBpZGVudGlmaWVyLFxuICAgICAgc3ViamVjdDogJ1Bhc3N3b3JkIFJlY292ZXJ5IENvZGUgLSBNR1pvbicsXG4gICAgICBodG1sOiBgPHA+WW91ciByZWNvdmVyeSBjb2RlIGlzOiA8c3Ryb25nPiR7cmVjb3ZlcnlDb2RlfTwvc3Ryb25nPjwvcD5gLFxuICAgICAgdGV4dDogYFlvdXIgcmVjb3ZlcnkgY29kZSBpczogJHtyZWNvdmVyeUNvZGV9YCxcbiAgICB9KTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VuZGluZyByZWNvdmVyeSBjb2RlOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBzZW5kIHJlY292ZXJ5IGNvZGUnIH0sIHsgc3RhdHVzOiA1MDAgfSk7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBTXNCOzs7Ozs7V0FBQUEsSUFBQTs7Ozs7a0NBTk87OztrQ0FDQTs7O2tDQUNROzs7a0NBQ0g7Ozt3RUFDTDs7Ozs7Ozs7Ozs7Ozs7O0FBRXRCLGVBQWVBLEtBQUtDLEdBQVk7RUFBQTtFQUFBQyxjQUFBLEdBQUFDLENBQUE7RUFBQUQsY0FBQSxHQUFBRSxDQUFBO0VBQ3JDLElBQUk7SUFDRixNQUFNO01BQUVDO0lBQVUsQ0FBRTtJQUFBO0lBQUEsQ0FBQUgsY0FBQSxHQUFBRSxDQUFBLFFBQUcsTUFBTUgsR0FBQSxDQUFJSyxJQUFJO0lBQUE7SUFBQUosY0FBQSxHQUFBRSxDQUFBO0lBRXJDLElBQUksQ0FBQ0MsVUFBQSxFQUFZO01BQUE7TUFBQUgsY0FBQSxHQUFBSyxDQUFBO01BQUFMLGNBQUEsR0FBQUUsQ0FBQTtNQUNmLE9BQU9JLE9BQUEsQ0FBQUMsWUFBWSxDQUFDSCxJQUFJLENBQUM7UUFBRUksS0FBQSxFQUFPO01BQXlCLEdBQUc7UUFBRUMsTUFBQSxFQUFRO01BQUk7SUFDOUU7SUFBQTtJQUFBO01BQUFULGNBQUEsR0FBQUssQ0FBQTtJQUFBO0lBQUFMLGNBQUEsR0FBQUUsQ0FBQTtJQUVBLE1BQU0sSUFBQVEsR0FBQSxDQUFBQyxpQkFBaUI7SUFFdkIsTUFBTUMsWUFBQTtJQUFBO0lBQUEsQ0FBQVosY0FBQSxHQUFBRSxDQUFBLFFBQWUsSUFBQVcsYUFBQSxDQUFBQyxvQkFBb0I7SUFDekMsTUFBTUMsU0FBQTtJQUFBO0lBQUEsQ0FBQWYsY0FBQSxHQUFBRSxDQUFBLFFBQVksSUFBSWMsSUFBQSxDQUFLQSxJQUFBLENBQUtDLEdBQUcsS0FBSyxLQUFLLEtBQUssUUFBTztJQUV6RDtJQUFBO0lBQUFqQixjQUFBLEdBQUFFLENBQUE7SUFDQSxNQUFNZ0Isc0JBQUEsQ0FBQUMsT0FBZ0IsQ0FBQ0MsTUFBTSxDQUFDO01BQzVCQyxLQUFBLEVBQU9sQixVQUFBO01BQ1BtQixJQUFBLEVBQU1WLFlBQUE7TUFDTlcsSUFBQSxFQUFNO01BQ05SLFNBQUE7TUFDQVMsUUFBQSxFQUFVO0lBQ1o7SUFFQTtJQUFBO0lBQUF4QixjQUFBLEdBQUFFLENBQUE7SUFDQSxNQUFNdUIsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FBQztNQUN0QkMsRUFBQSxFQUFJekIsVUFBQTtNQUNKMEIsT0FBQSxFQUFTO01BQ1RDLElBQUEsRUFBTSxxQ0FBcUNsQixZQUFBLGVBQTJCO01BQ3RFbUIsSUFBQSxFQUFNLDBCQUEwQm5CLFlBQUE7SUFDbEM7SUFBQTtJQUFBWixjQUFBLEdBQUFFLENBQUE7SUFFQSxPQUFPSSxPQUFBLENBQUFDLFlBQVksQ0FBQ0gsSUFBSSxDQUFDO01BQUU0QixPQUFBLEVBQVM7SUFBSztFQUMzQyxFQUFFLE9BQU94QixLQUFBLEVBQU87SUFBQTtJQUFBUixjQUFBLEdBQUFFLENBQUE7SUFDZCtCLE9BQUEsQ0FBUXpCLEtBQUssQ0FBQyxnQ0FBZ0NBLEtBQUE7SUFBQTtJQUFBUixjQUFBLEdBQUFFLENBQUE7SUFDOUMsT0FBT0ksT0FBQSxDQUFBQyxZQUFZLENBQUNILElBQUksQ0FBQztNQUFFSSxLQUFBLEVBQU87SUFBK0IsR0FBRztNQUFFQyxNQUFBLEVBQVE7SUFBSTtFQUNwRjtBQUNGIiwiaWdub3JlTGlzdCI6W119