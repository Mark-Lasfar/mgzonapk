{"version":3,"names":["POST","req","cov_1bj6ir6qhc","f","s","identifier","json","b","_server","NextResponse","error","status","_db","connectToDatabase","recoveryCode","_verification","generateRecoveryCode","expiresAt","Date","now","_verificationcodemodel","default","create","email","code","type","verified","_mailer","emailService","send","to","subject","html","text","success","console"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/reset-password/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { emailService } from '@/lib/services/email/mailer';\nimport { generateRecoveryCode } from '@/lib/utils/verification';\nimport { connectToDatabase } from '@/lib/db';\nimport VerificationCode from '@/lib/db/models/verification-code.model';\n\nexport async function POST(req: Request) {\n  try {\n    const { identifier } = await req.json();\n\n    if (!identifier) {\n      return NextResponse.json({ error: 'Identifier is required' }, { status: 400 });\n    }\n\n    await connectToDatabase();\n\n    const recoveryCode = generateRecoveryCode();\n    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n\n    // Store recovery code\n    await VerificationCode.create({\n      email: identifier,\n      code: recoveryCode,\n      type: 'PASSWORD_RESET',\n      expiresAt,\n      verified: false,\n    });\n\n    // Send email\n    await emailService.send({\n      to: identifier,\n      subject: 'Password Recovery Code - MGZon',\n      html: `<p>Your recovery code is: <strong>${recoveryCode}</strong></p>`,\n      text: `Your recovery code is: ${recoveryCode}`,\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error sending recovery code:', error);\n    return NextResponse.json({ error: 'Failed to send recovery code' }, { status: 500 });\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAMsB;;;;;;WAAAA,IAAA;;;;;kCANO;;;kCACA;;;kCACQ;;;kCACH;;;wEACL;;;;;;;;;;;;;;;AAEtB,eAAeA,KAAKC,GAAY;EAAA;EAAAC,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACrC,IAAI;IACF,MAAM;MAAEC;IAAU,CAAE;IAAA;IAAA,CAAAH,cAAA,GAAAE,CAAA,QAAG,MAAMH,GAAA,CAAIK,IAAI;IAAA;IAAAJ,cAAA,GAAAE,CAAA;IAErC,IAAI,CAACC,UAAA,EAAY;MAAA;MAAAH,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAE,CAAA;MACf,OAAOI,OAAA,CAAAC,YAAY,CAACH,IAAI,CAAC;QAAEI,KAAA,EAAO;MAAyB,GAAG;QAAEC,MAAA,EAAQ;MAAI;IAC9E;IAAA;IAAA;MAAAT,cAAA,GAAAK,CAAA;IAAA;IAAAL,cAAA,GAAAE,CAAA;IAEA,MAAM,IAAAQ,GAAA,CAAAC,iBAAiB;IAEvB,MAAMC,YAAA;IAAA;IAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAe,IAAAW,aAAA,CAAAC,oBAAoB;IACzC,MAAMC,SAAA;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,QAAY,IAAIc,IAAA,CAAKA,IAAA,CAAKC,GAAG,KAAK,KAAK,KAAK,QAAO;IAEzD;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IACA,MAAMgB,sBAAA,CAAAC,OAAgB,CAACC,MAAM,CAAC;MAC5BC,KAAA,EAAOlB,UAAA;MACPmB,IAAA,EAAMV,YAAA;MACNW,IAAA,EAAM;MACNR,SAAA;MACAS,QAAA,EAAU;IACZ;IAEA;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IACA,MAAMuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MACtBC,EAAA,EAAIzB,UAAA;MACJ0B,OAAA,EAAS;MACTC,IAAA,EAAM,qCAAqClB,YAAA,eAA2B;MACtEmB,IAAA,EAAM,0BAA0BnB,YAAA;IAClC;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAEA,OAAOI,OAAA,CAAAC,YAAY,CAACH,IAAI,CAAC;MAAE4B,OAAA,EAAS;IAAK;EAC3C,EAAE,OAAOxB,KAAA,EAAO;IAAA;IAAAR,cAAA,GAAAE,CAAA;IACd+B,OAAA,CAAQzB,KAAK,CAAC,gCAAgCA,KAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAC9C,OAAOI,OAAA,CAAAC,YAAY,CAACH,IAAI,CAAC;MAAEI,KAAA,EAAO;IAA+B,GAAG;MAAEC,MAAA,EAAQ;IAAI;EACpF;AACF","ignoreList":[]}