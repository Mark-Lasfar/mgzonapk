{"version":3,"names":["cov_1fb5vzkx1b","actualCoverage","s","_default","userSchema","_mongoose","Schema","email","type","String","required","unique","trim","lowercase","name","role","default","enum","password","image","emailVerified","Boolean","isActive","lastLogin","Date","businessProfile","Types","ObjectId","ref","notifications","title","message","data","Mixed","channels","priority","status","expiresAt","metadata","browser","device","ip","read","readAt","queuedAt","createdAt","now","updatedAt","fcmToken","phone","locale","timestamps","index","pre","next","f","isModified","b","toLowerCase","User","models","model"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/user.model.ts"],"sourcesContent":["import { IUserInput, INotification } from '@/types';\nimport { Document, Model, model, models, Schema } from 'mongoose';\n\nexport interface IUser extends Document, IUserInput {\n  _id: string;\n  password?: string;\n  emailVerified: boolean;\n  isActive: boolean;\n  lastLogin?: Date;\n  businessProfile?: string;\n  notifications: INotification[];\n  fcmToken?: string;\n  phone?: string;\n  locale: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst userSchema = new Schema<IUser>(\n  {\n    email: {\n      type: String,\n      required: true,\n      unique: true,\n      trim: true,\n      lowercase: true,\n    },\n    name: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    role: {\n      type: String,\n      required: true,\n      default: 'USER',\n      enum: ['USER', 'Admin', 'SELLER'],\n    },\n    password: { type: String },\n    image: { type: String },\n    emailVerified: { type: Boolean, default: false },\n    isActive: { type: Boolean, default: true },\n    lastLogin: { type: Date },\n    businessProfile: { type: Schema.Types.ObjectId, ref: 'Seller', default: null },\n    notifications: [\n      {\n        type: {\n          type: String,\n          required: true,\n        },\n        title: {\n          type: String,\n          required: true,\n        },\n        message: {\n          type: String,\n          required: true,\n        },\n        data: {\n          type: Schema.Types.Mixed,\n        },\n        channels: [\n          {\n            type: String,\n            enum: ['email', 'push', 'sms', 'in_app'],\n            required: true,\n          },\n        ],\n        priority: {\n          type: String,\n          enum: ['low', 'medium', 'high', 'urgent'],\n          default: 'medium',\n        },\n        status: {\n          type: String,\n          enum: ['pending', 'sent', 'failed', 'queued', 'read'],\n          default: 'pending',\n        },\n        expiresAt: {\n          type: Date,\n        },\n        metadata: {\n          browser: { type: String },\n          device: { type: String },\n          ip: { type: String },\n        },\n        read: {\n          type: Boolean,\n          default: false,\n        },\n        readAt: {\n          type: Date,\n        },\n        queuedAt: {\n          type: Date,\n        },\n        createdAt: {\n          type: Date,\n          default: Date.now,\n        },\n        updatedAt: {\n          type: Date,\n          default: Date.now,\n        },\n      },\n    ],\n    fcmToken: { type: String },\n    phone: { type: String },\n    locale: { type: String, default: 'en' },\n  },\n  {\n    timestamps: true,\n  }\n);\n\n// Indexes\nuserSchema.index({ email: 1 });\nuserSchema.index({ role: 1 });\nuserSchema.index({ createdAt: 1 });\n\n// Pre-save middleware\nuserSchema.pre('save', function (next) {\n  if (this.isModified('email')) {\n    this.email = this.email.toLowerCase().trim();\n  }\n  if (this.isModified('name')) {\n    this.name = this.name.trim();\n  }\n  next();\n});\n\n// Prevent redefining the model\nconst User = models.User || model<IUser>('User', userSchema);\nexport default User as Model<IUser>;"],"mappings":"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","ignoreList":[]}