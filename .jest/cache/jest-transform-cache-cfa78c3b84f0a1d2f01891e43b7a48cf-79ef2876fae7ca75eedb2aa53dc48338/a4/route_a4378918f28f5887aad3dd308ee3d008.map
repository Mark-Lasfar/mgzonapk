{"version":3,"names":["GET","cov_1dnkynp480","f","s","POST","req","session","_auth","auth","b","_server","NextResponse","json","success","message","status","sellerResponse","_selleractions","getSellerByUserId","user","id","data","seller","subscription","productsCount","metrics","productsLimit","features","productData","sellerId","_id","commission","name","businessName","email","plan","result","_productactions","createProduct","error","console","Error","searchParams","URL","url","page","parseInt","get","limit","search","category","sortBy","sortOrder","filters","getSellerProducts"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/seller/products/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/auth'\nimport { createProduct } from '@/lib/actions/product.actions'\nimport { getSellerByUserId } from '@/lib/actions/seller.actions'\n\nexport async function POST(req: NextRequest) {\n  try {\n    const session = await auth()\n    if (!session) {\n      return NextResponse.json(\n        { success: false, message: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Check if user is a seller\n    const sellerResponse = await getSellerByUserId(session.user.id!)\n    if (!sellerResponse.success || !sellerResponse.data) {\n      return NextResponse.json(\n        { success: false, message: 'Seller account required' },\n        { status: 403 }\n      )\n    }\n\n    const seller = sellerResponse.data\n\n    // Check seller subscription status and plan\n    if (seller.subscription.status !== 'active') {\n      return NextResponse.json(\n        { success: false, message: 'Subscription required' },\n        { status: 403 }\n      )\n    }\n\n    // Check product limits based on subscription plan\n    const productsCount = seller.metrics.productsCount || 0\n    const productsLimit = seller.subscription.features.productsLimit\n    if (productsCount >= productsLimit) {\n      return NextResponse.json(\n        { \n          success: false, \n          message: `Product limit (${productsLimit}) reached for your subscription plan` \n        },\n        { status: 403 }\n      )\n    }\n\n    const data = await req.json()\n\n    // Add seller data to product\n    const productData = {\n      ...data,\n      sellerId: seller._id,\n      commission: seller.subscription.features.commission || 3, // Default 3% if not set\n      seller: {\n        name: seller.businessName,\n        email: seller.email,\n        subscription: seller.subscription.plan\n      }\n    }\n\n    const result = await createProduct(productData)\n    \n    if (!result.success) {\n      return NextResponse.json(\n        { success: false, message: result.error },\n        { status: 400 }\n      )\n    }\n\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Create product error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to create product'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(req: NextRequest) {\n  try {\n    const session = await auth()\n    if (!session) {\n      return NextResponse.json(\n        { success: false, message: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Parse query parameters\n    const { searchParams } = new URL(req.url)\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '10')\n    const search = searchParams.get('search') || ''\n    const status = searchParams.get('status') as 'active' | 'draft' | 'outOfStock' | undefined\n    const category = searchParams.get('category') || ''\n    const sortBy = searchParams.get('sortBy') as 'createdAt' | 'price' | 'stock' | 'sales' | undefined\n    const sortOrder = searchParams.get('sortOrder') as 'asc' | 'desc' | undefined\n\n    // Check if user is a seller\n    const sellerResponse = await getSellerByUserId(session.user.id!)\n    if (!sellerResponse.success || !sellerResponse.data) {\n      return NextResponse.json(\n        { success: false, message: 'Seller account required' },\n        { status: 403 }\n      )\n    }\n\n    const filters = {\n      page,\n      limit,\n      search,\n      status,\n      category,\n      sortBy,\n      sortOrder\n    }\n\n    const result = await getSellerProducts(session.user.id!, filters)\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Get products error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to get products'\n      },\n      { status: 500 }\n    )\n  }\n}"],"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","ignoreList":[]}