86613fea93097544103e6c1215e2a09a
"use strict";

/* istanbul ignore next */
function cov_1dnkynp480() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/seller/products/route.ts";
  var hash = "0adc248f8778fb25c38dcef290d6348d2d2f7b78";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/seller/products/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "8": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 21,
          column: 74
        }
      },
      "9": {
        start: {
          line: 22,
          column: 23
        },
        end: {
          line: 22,
          column: 72
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "11": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 47
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "13": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "14": {
        start: {
          line: 35,
          column: 31
        },
        end: {
          line: 35,
          column: 91
        }
      },
      "15": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "16": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "17": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 42
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "19": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "20": {
        start: {
          line: 55,
          column: 30
        },
        end: {
          line: 55,
          column: 63
        }
      },
      "21": {
        start: {
          line: 56,
          column: 30
        },
        end: {
          line: 56,
          column: 72
        }
      },
      "22": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "23": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "24": {
        start: {
          line: 65,
          column: 21
        },
        end: {
          line: 65,
          column: 37
        }
      },
      "25": {
        start: {
          line: 67,
          column: 28
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "26": {
        start: {
          line: 77,
          column: 23
        },
        end: {
          line: 77,
          column: 76
        }
      },
      "27": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "28": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "29": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 49
        }
      },
      "30": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 54
        }
      },
      "31": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 94,
          column: 11
        }
      },
      "32": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "33": {
        start: {
          line: 99,
          column: 24
        },
        end: {
          line: 99,
          column: 47
        }
      },
      "34": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "35": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "36": {
        start: {
          line: 109,
          column: 33
        },
        end: {
          line: 109,
          column: 49
        }
      },
      "37": {
        start: {
          line: 110,
          column: 21
        },
        end: {
          line: 110,
          column: 62
        }
      },
      "38": {
        start: {
          line: 111,
          column: 22
        },
        end: {
          line: 111,
          column: 65
        }
      },
      "39": {
        start: {
          line: 112,
          column: 23
        },
        end: {
          line: 112,
          column: 55
        }
      },
      "40": {
        start: {
          line: 113,
          column: 23
        },
        end: {
          line: 113,
          column: 49
        }
      },
      "41": {
        start: {
          line: 114,
          column: 25
        },
        end: {
          line: 114,
          column: 59
        }
      },
      "42": {
        start: {
          line: 115,
          column: 23
        },
        end: {
          line: 115,
          column: 49
        }
      },
      "43": {
        start: {
          line: 116,
          column: 26
        },
        end: {
          line: 116,
          column: 55
        }
      },
      "44": {
        start: {
          line: 118,
          column: 31
        },
        end: {
          line: 118,
          column: 91
        }
      },
      "45": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "46": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "47": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "48": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 136,
          column: 72
        }
      },
      "49": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 49
        }
      },
      "50": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 52
        }
      },
      "51": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 19
          }
        },
        loc: {
          start: {
            line: 23,
            column: 25
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 97,
            column: 15
          },
          end: {
            line: 97,
            column: 18
          }
        },
        loc: {
          start: {
            line: 97,
            column: 24
          },
          end: {
            line: 147,
            column: 1
          }
        },
        line: 97
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 35
          }
        }, {
          start: {
            line: 36,
            column: 39
          },
          end: {
            line: 36,
            column: 59
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 30
          },
          end: {
            line: 55,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 30
          },
          end: {
            line: 55,
            column: 58
          }
        }, {
          start: {
            line: 55,
            column: 62
          },
          end: {
            line: 55,
            column: 63
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 24
          },
          end: {
            line: 70,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 24
          },
          end: {
            line: 70,
            column: 63
          }
        }, {
          start: {
            line: 70,
            column: 67
          },
          end: {
            line: 70,
            column: 68
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "8": {
        loc: {
          start: {
            line: 91,
            column: 21
          },
          end: {
            line: 91,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 46
          },
          end: {
            line: 91,
            column: 59
          }
        }, {
          start: {
            line: 91,
            column: 62
          },
          end: {
            line: 91,
            column: 88
          }
        }],
        line: 91
      },
      "9": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 30
          },
          end: {
            line: 110,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 30
          },
          end: {
            line: 110,
            column: 54
          }
        }, {
          start: {
            line: 110,
            column: 58
          },
          end: {
            line: 110,
            column: 61
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 111,
            column: 31
          },
          end: {
            line: 111,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 31
          },
          end: {
            line: 111,
            column: 56
          }
        }, {
          start: {
            line: 111,
            column: 60
          },
          end: {
            line: 111,
            column: 64
          }
        }],
        line: 111
      },
      "12": {
        loc: {
          start: {
            line: 112,
            column: 23
          },
          end: {
            line: 112,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 23
          },
          end: {
            line: 112,
            column: 49
          }
        }, {
          start: {
            line: 112,
            column: 53
          },
          end: {
            line: 112,
            column: 55
          }
        }],
        line: 112
      },
      "13": {
        loc: {
          start: {
            line: 114,
            column: 25
          },
          end: {
            line: 114,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 25
          },
          end: {
            line: 114,
            column: 53
          }
        }, {
          start: {
            line: 114,
            column: 57
          },
          end: {
            line: 114,
            column: 59
          }
        }],
        line: 114
      },
      "14": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "15": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 119,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 119,
            column: 35
          }
        }, {
          start: {
            line: 119,
            column: 39
          },
          end: {
            line: 119,
            column: 59
          }
        }],
        line: 119
      },
      "16": {
        loc: {
          start: {
            line: 142,
            column: 21
          },
          end: {
            line: 142,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 46
          },
          end: {
            line: 142,
            column: 59
          }
        }, {
          start: {
            line: 142,
            column: 62
          },
          end: {
            line: 142,
            column: 86
          }
        }],
        line: 142
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/seller/products/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/auth'\nimport { createProduct } from '@/lib/actions/product.actions'\nimport { getSellerByUserId } from '@/lib/actions/seller.actions'\n\nexport async function POST(req: NextRequest) {\n  try {\n    const session = await auth()\n    if (!session) {\n      return NextResponse.json(\n        { success: false, message: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Check if user is a seller\n    const sellerResponse = await getSellerByUserId(session.user.id!)\n    if (!sellerResponse.success || !sellerResponse.data) {\n      return NextResponse.json(\n        { success: false, message: 'Seller account required' },\n        { status: 403 }\n      )\n    }\n\n    const seller = sellerResponse.data\n\n    // Check seller subscription status and plan\n    if (seller.subscription.status !== 'active') {\n      return NextResponse.json(\n        { success: false, message: 'Subscription required' },\n        { status: 403 }\n      )\n    }\n\n    // Check product limits based on subscription plan\n    const productsCount = seller.metrics.productsCount || 0\n    const productsLimit = seller.subscription.features.productsLimit\n    if (productsCount >= productsLimit) {\n      return NextResponse.json(\n        { \n          success: false, \n          message: `Product limit (${productsLimit}) reached for your subscription plan` \n        },\n        { status: 403 }\n      )\n    }\n\n    const data = await req.json()\n\n    // Add seller data to product\n    const productData = {\n      ...data,\n      sellerId: seller._id,\n      commission: seller.subscription.features.commission || 3, // Default 3% if not set\n      seller: {\n        name: seller.businessName,\n        email: seller.email,\n        subscription: seller.subscription.plan\n      }\n    }\n\n    const result = await createProduct(productData)\n    \n    if (!result.success) {\n      return NextResponse.json(\n        { success: false, message: result.error },\n        { status: 400 }\n      )\n    }\n\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Create product error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to create product'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(req: NextRequest) {\n  try {\n    const session = await auth()\n    if (!session) {\n      return NextResponse.json(\n        { success: false, message: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Parse query parameters\n    const { searchParams } = new URL(req.url)\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '10')\n    const search = searchParams.get('search') || ''\n    const status = searchParams.get('status') as 'active' | 'draft' | 'outOfStock' | undefined\n    const category = searchParams.get('category') || ''\n    const sortBy = searchParams.get('sortBy') as 'createdAt' | 'price' | 'stock' | 'sales' | undefined\n    const sortOrder = searchParams.get('sortOrder') as 'asc' | 'desc' | undefined\n\n    // Check if user is a seller\n    const sellerResponse = await getSellerByUserId(session.user.id!)\n    if (!sellerResponse.success || !sellerResponse.data) {\n      return NextResponse.json(\n        { success: false, message: 'Seller account required' },\n        { status: 403 }\n      )\n    }\n\n    const filters = {\n      page,\n      limit,\n      search,\n      status,\n      category,\n      sortBy,\n      sortOrder\n    }\n\n    const result = await getSellerProducts(session.user.id!, filters)\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Get products error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to get products'\n      },\n      { status: 500 }\n    )\n  }\n}"],
      names: ["GET", "POST", "req", "session", "auth", "NextResponse", "json", "success", "message", "status", "sellerResponse", "getSellerByUserId", "user", "id", "data", "seller", "subscription", "productsCount", "metrics", "productsLimit", "features", "productData", "sellerId", "_id", "commission", "name", "businessName", "email", "plan", "result", "createProduct", "error", "console", "Error", "searchParams", "URL", "url", "page", "parseInt", "get", "limit", "search", "category", "sortBy", "sortOrder", "filters", "getSellerProducts"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0adc248f8778fb25c38dcef290d6348d2d2f7b78"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1dnkynp480 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1dnkynp480();
cov_1dnkynp480().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1dnkynp480().f[0]++;
  cov_1dnkynp480().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1dnkynp480().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1dnkynp480().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_1dnkynp480().f[1]++;
    cov_1dnkynp480().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_1dnkynp480().f[2]++;
    cov_1dnkynp480().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1dnkynp480().s[6]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_1dnkynp480().s[7]++, require("../../../../auth"));
const _productactions =
/* istanbul ignore next */
(cov_1dnkynp480().s[8]++, require("../../../../lib/actions/product.actions"));
const _selleractions =
/* istanbul ignore next */
(cov_1dnkynp480().s[9]++, require("../../../../lib/actions/seller.actions"));
async function POST(req) {
  /* istanbul ignore next */
  cov_1dnkynp480().f[3]++;
  cov_1dnkynp480().s[10]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[11]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_1dnkynp480().s[12]++;
    if (!session) {
      /* istanbul ignore next */
      cov_1dnkynp480().b[0][0]++;
      cov_1dnkynp480().s[13]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dnkynp480().b[0][1]++;
    }
    // Check if user is a seller
    const sellerResponse =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[14]++, await (0, _selleractions.getSellerByUserId)(session.user.id));
    /* istanbul ignore next */
    cov_1dnkynp480().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_1dnkynp480().b[2][0]++, !sellerResponse.success) ||
    /* istanbul ignore next */
    (cov_1dnkynp480().b[2][1]++, !sellerResponse.data)) {
      /* istanbul ignore next */
      cov_1dnkynp480().b[1][0]++;
      cov_1dnkynp480().s[16]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Seller account required'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dnkynp480().b[1][1]++;
    }
    const seller =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[17]++, sellerResponse.data);
    // Check seller subscription status and plan
    /* istanbul ignore next */
    cov_1dnkynp480().s[18]++;
    if (seller.subscription.status !== 'active') {
      /* istanbul ignore next */
      cov_1dnkynp480().b[3][0]++;
      cov_1dnkynp480().s[19]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Subscription required'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dnkynp480().b[3][1]++;
    }
    // Check product limits based on subscription plan
    const productsCount =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[20]++,
    /* istanbul ignore next */
    (cov_1dnkynp480().b[4][0]++, seller.metrics.productsCount) ||
    /* istanbul ignore next */
    (cov_1dnkynp480().b[4][1]++, 0));
    const productsLimit =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[21]++, seller.subscription.features.productsLimit);
    /* istanbul ignore next */
    cov_1dnkynp480().s[22]++;
    if (productsCount >= productsLimit) {
      /* istanbul ignore next */
      cov_1dnkynp480().b[5][0]++;
      cov_1dnkynp480().s[23]++;
      return _server.NextResponse.json({
        success: false,
        message: `Product limit (${productsLimit}) reached for your subscription plan`
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dnkynp480().b[5][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[24]++, await req.json());
    // Add seller data to product
    const productData =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[25]++, {
      ...data,
      sellerId: seller._id,
      commission:
      /* istanbul ignore next */
      (cov_1dnkynp480().b[6][0]++, seller.subscription.features.commission) ||
      /* istanbul ignore next */
      (cov_1dnkynp480().b[6][1]++, 3),
      seller: {
        name: seller.businessName,
        email: seller.email,
        subscription: seller.subscription.plan
      }
    });
    const result =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[26]++, await (0, _productactions.createProduct)(productData));
    /* istanbul ignore next */
    cov_1dnkynp480().s[27]++;
    if (!result.success) {
      /* istanbul ignore next */
      cov_1dnkynp480().b[7][0]++;
      cov_1dnkynp480().s[28]++;
      return _server.NextResponse.json({
        success: false,
        message: result.error
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dnkynp480().b[7][1]++;
    }
    cov_1dnkynp480().s[29]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_1dnkynp480().s[30]++;
    console.error('Create product error:', error);
    /* istanbul ignore next */
    cov_1dnkynp480().s[31]++;
    return _server.NextResponse.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1dnkynp480().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1dnkynp480().b[8][1]++, 'Failed to create product')
    }, {
      status: 500
    });
  }
}
async function GET(req) {
  /* istanbul ignore next */
  cov_1dnkynp480().f[4]++;
  cov_1dnkynp480().s[32]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[33]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_1dnkynp480().s[34]++;
    if (!session) {
      /* istanbul ignore next */
      cov_1dnkynp480().b[9][0]++;
      cov_1dnkynp480().s[35]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dnkynp480().b[9][1]++;
    }
    // Parse query parameters
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[36]++, new URL(req.url));
    const page =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[37]++, parseInt(
    /* istanbul ignore next */
    (cov_1dnkynp480().b[10][0]++, searchParams.get('page')) ||
    /* istanbul ignore next */
    (cov_1dnkynp480().b[10][1]++, '1')));
    const limit =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[38]++, parseInt(
    /* istanbul ignore next */
    (cov_1dnkynp480().b[11][0]++, searchParams.get('limit')) ||
    /* istanbul ignore next */
    (cov_1dnkynp480().b[11][1]++, '10')));
    const search =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[39]++,
    /* istanbul ignore next */
    (cov_1dnkynp480().b[12][0]++, searchParams.get('search')) ||
    /* istanbul ignore next */
    (cov_1dnkynp480().b[12][1]++, ''));
    const status =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[40]++, searchParams.get('status'));
    const category =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[41]++,
    /* istanbul ignore next */
    (cov_1dnkynp480().b[13][0]++, searchParams.get('category')) ||
    /* istanbul ignore next */
    (cov_1dnkynp480().b[13][1]++, ''));
    const sortBy =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[42]++, searchParams.get('sortBy'));
    const sortOrder =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[43]++, searchParams.get('sortOrder'));
    // Check if user is a seller
    const sellerResponse =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[44]++, await (0, _selleractions.getSellerByUserId)(session.user.id));
    /* istanbul ignore next */
    cov_1dnkynp480().s[45]++;
    if (
    /* istanbul ignore next */
    (cov_1dnkynp480().b[15][0]++, !sellerResponse.success) ||
    /* istanbul ignore next */
    (cov_1dnkynp480().b[15][1]++, !sellerResponse.data)) {
      /* istanbul ignore next */
      cov_1dnkynp480().b[14][0]++;
      cov_1dnkynp480().s[46]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Seller account required'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dnkynp480().b[14][1]++;
    }
    const filters =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[47]++, {
      page,
      limit,
      search,
      status,
      category,
      sortBy,
      sortOrder
    });
    const result =
    /* istanbul ignore next */
    (cov_1dnkynp480().s[48]++, await getSellerProducts(session.user.id, filters));
    /* istanbul ignore next */
    cov_1dnkynp480().s[49]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_1dnkynp480().s[50]++;
    console.error('Get products error:', error);
    /* istanbul ignore next */
    cov_1dnkynp480().s[51]++;
    return _server.NextResponse.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1dnkynp480().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1dnkynp480().b[16][1]++, 'Failed to get products')
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,