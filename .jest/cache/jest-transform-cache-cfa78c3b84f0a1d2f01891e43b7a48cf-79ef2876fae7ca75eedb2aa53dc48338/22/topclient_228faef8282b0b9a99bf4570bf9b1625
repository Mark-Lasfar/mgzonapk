9599bb9d3a3514923bd7da30c706071b
"use strict";

/* istanbul ignore next */
function cov_24shqx0duj() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/integrations/aliexpress/top-client.ts";
  var hash = "9495cba752b4030555e3de44893a17489fa69275";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/integrations/aliexpress/top-client.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 32
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 114
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 18,
          column: 10
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "6": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 50
        }
      },
      "7": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 64
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "9": {
        start: {
          line: 26,
          column: 29
        },
        end: {
          line: 28,
          column: 14
        }
      },
      "10": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "11": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 80
        }
      },
      "12": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 41
        }
      },
      "13": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 58
        }
      },
      "14": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 24
        }
      },
      "15": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "16": {
        start: {
          line: 40,
          column: 29
        },
        end: {
          line: 46,
          column: 14
        }
      },
      "17": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "18": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 81
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 41
        }
      },
      "20": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 58
        }
      },
      "21": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 24
        }
      },
      "22": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "23": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 63,
          column: 14
        }
      },
      "24": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "25": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 84
        }
      },
      "26": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 41
        }
      },
      "27": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 62
        }
      },
      "28": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 24
        }
      },
      "29": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 104,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 24
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 34
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 35
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 57
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 39
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 73
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 13,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 40
          },
          end: {
            line: 13,
            column: 79
          }
        }, {
          start: {
            line: 13,
            column: 82
          },
          end: {
            line: 13,
            column: 113
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "4": {
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/integrations/aliexpress/top-client.ts"],
      sourcesContent: ["import { IProductInput } from '@/types';\n\nexport interface AliExpressProduct {\n  id: string;\n  title: string;\n  price: number;\n  inventory: number;\n  shipping: {\n    method: string;\n    cost: number;\n  };\n  variations: Array<{\n    sku: string;\n    attributes: Record<string, string>;\n    price: number;\n    inventory: number;\n  }>;\n  metadata: Record<string, any>;\n}\n\nexport interface SyncResult {\n  success: boolean;\n  synced: number;\n  failed: number;\n  errors: Array<{\n    sku: string;\n    error: string;\n  }>;\n}\n\nexport interface AliExpressClientConfig {\n  apiKey: string;\n  apiSecret: string;\n  accessToken?: string;\n  sandbox?: boolean;\n}\n\nexport class AliExpressClient {\n  private baseUrl: string;\n  private headers: HeadersInit;\n  private accessToken?: string;\n\n  constructor(config: AliExpressClientConfig) {\n    this.baseUrl = config.sandbox\n      ? 'https://api.sandbox.aliexpress.com/v2'\n      : 'https://api.aliexpress.com/v2';\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${config.apiKey}`,\n      'X-API-Secret': config.apiSecret\n    };\n\n    if (config.accessToken) {\n      this.accessToken = config.accessToken;\n      this.headers['X-Access-Token'] = config.accessToken;\n    }\n  }\n\n  async getProducts(): Promise<AliExpressProduct[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/products`, {\n        headers: this.headers\n      });\n\n      if (!response.ok) {\n        throw new Error(`AliExpress API error: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('AliExpress API Error:', error);\n      throw error;\n    }\n  }\n\n  async syncInventory(products: Array<{\n    sku: string;\n    quantity: number;\n  }>): Promise<SyncResult> {\n    try {\n      const response = await fetch(`${this.baseUrl}/inventory/batch`, {\n        method: 'POST',\n        headers: this.headers,\n        body: JSON.stringify({ products })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Inventory sync failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Inventory sync error:', error);\n      throw error;\n    }\n  }\n\n  // Execute a generic API call (used for fulfillment, etc)\n  async execute(apiName: string, params: Record<string, any>): Promise<any> {\n    try {\n      const response = await fetch(`${this.baseUrl}/topapi/${apiName}`, {\n        method: 'POST',\n        headers: this.headers,\n        body: JSON.stringify(params)\n      });\n\n      if (!response.ok) {\n        throw new Error(`AliExpress execute error: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('AliExpress execute error:', error);\n      throw error;\n    }\n  }\n\n  async convertToProduct(aliProduct: AliExpressProduct): Promise<IProductInput> {\n    return {\n      name: aliProduct.title,\n      slug: aliProduct.title.toLowerCase().replace(/\\s+/g, '-'),\n      category: 'Imported',\n      images: [], // Need to implement image handling\n      brand: 'AliExpress',\n      description: '',  // You can populate this if available from aliProduct.metadata\n      isPublished: true,\n      price: aliProduct.price,\n      listPrice: aliProduct.price,\n      countInStock: aliProduct.inventory,\n      tags: ['aliexpress'],\n      sizes: [],\n      colors: [],\n      avgRating: 0,\n      numReviews: 0,\n      discount: 0,\n      weight: 0,\n      dimensions: { length: 0, width: 0, height: 0 },\n      warehouse: {\n        provider: \"4PX\", // or \"ShipBob\", depending on your integration\n        sku: aliProduct.id,\n        availableQuantity: aliProduct.inventory,\n        // Add additional warehouse-specific fields here if needed\n      }\n    };\n  }\n}"],
      names: ["AliExpressClient", "constructor", "config", "baseUrl", "sandbox", "headers", "apiKey", "apiSecret", "accessToken", "getProducts", "response", "fetch", "ok", "Error", "statusText", "json", "error", "console", "syncInventory", "products", "method", "body", "JSON", "stringify", "execute", "apiName", "params", "convertToProduct", "aliProduct", "name", "title", "slug", "toLowerCase", "replace", "category", "images", "brand", "description", "isPublished", "price", "listPrice", "countInStock", "inventory", "tags", "sizes", "colors", "avgRating", "numReviews", "discount", "weight", "dimensions", "length", "width", "height", "warehouse", "provider", "sku", "id", "availableQuantity"],
      mappings: ";;;;+BAqCaA;;;eAAAA;;;AAAN,MAAMA;IAKXC,YAAYC,MAA8B,CAAE;QAC1C,IAAI,CAACC,OAAO,GAAGD,OAAOE,OAAO,GACzB,0CACA;QAEJ,IAAI,CAACC,OAAO,GAAG;YACb,gBAAgB;YAChB,iBAAiB,CAAC,OAAO,EAAEH,OAAOI,MAAM,EAAE;YAC1C,gBAAgBJ,OAAOK,SAAS;QAClC;QAEA,IAAIL,OAAOM,WAAW,EAAE;YACtB,IAAI,CAACA,WAAW,GAAGN,OAAOM,WAAW;YACrC,IAAI,CAACH,OAAO,CAAC,iBAAiB,GAAGH,OAAOM,WAAW;QACrD;IACF;IAEA,MAAMC,cAA4C;QAChD,IAAI;YACF,MAAMC,WAAW,MAAMC,MAAM,GAAG,IAAI,CAACR,OAAO,CAAC,SAAS,CAAC,EAAE;gBACvDE,SAAS,IAAI,CAACA,OAAO;YACvB;YAEA,IAAI,CAACK,SAASE,EAAE,EAAE;gBAChB,MAAM,IAAIC,MAAM,CAAC,sBAAsB,EAAEH,SAASI,UAAU,EAAE;YAChE;YAEA,OAAO,MAAMJ,SAASK,IAAI;QAC5B,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,yBAAyBA;YACvC,MAAMA;QACR;IACF;IAEA,MAAME,cAAcC,QAGlB,EAAuB;QACvB,IAAI;YACF,MAAMT,WAAW,MAAMC,MAAM,GAAG,IAAI,CAACR,OAAO,CAAC,gBAAgB,CAAC,EAAE;gBAC9DiB,QAAQ;gBACRf,SAAS,IAAI,CAACA,OAAO;gBACrBgB,MAAMC,KAAKC,SAAS,CAAC;oBAAEJ;gBAAS;YAClC;YAEA,IAAI,CAACT,SAASE,EAAE,EAAE;gBAChB,MAAM,IAAIC,MAAM,CAAC,uBAAuB,EAAEH,SAASI,UAAU,EAAE;YACjE;YAEA,OAAO,MAAMJ,SAASK,IAAI;QAC5B,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,yBAAyBA;YACvC,MAAMA;QACR;IACF;IAEA,yDAAyD;IACzD,MAAMQ,QAAQC,OAAe,EAAEC,MAA2B,EAAgB;QACxE,IAAI;YACF,MAAMhB,WAAW,MAAMC,MAAM,GAAG,IAAI,CAACR,OAAO,CAAC,QAAQ,EAAEsB,SAAS,EAAE;gBAChEL,QAAQ;gBACRf,SAAS,IAAI,CAACA,OAAO;gBACrBgB,MAAMC,KAAKC,SAAS,CAACG;YACvB;YAEA,IAAI,CAAChB,SAASE,EAAE,EAAE;gBAChB,MAAM,IAAIC,MAAM,CAAC,0BAA0B,EAAEH,SAASI,UAAU,EAAE;YACpE;YAEA,OAAO,MAAMJ,SAASK,IAAI;QAC5B,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,6BAA6BA;YAC3C,MAAMA;QACR;IACF;IAEA,MAAMW,iBAAiBC,UAA6B,EAA0B;QAC5E,OAAO;YACLC,MAAMD,WAAWE,KAAK;YACtBC,MAAMH,WAAWE,KAAK,CAACE,WAAW,GAAGC,OAAO,CAAC,QAAQ;YACrDC,UAAU;YACVC,QAAQ,EAAE;YACVC,OAAO;YACPC,aAAa;YACbC,aAAa;YACbC,OAAOX,WAAWW,KAAK;YACvBC,WAAWZ,WAAWW,KAAK;YAC3BE,cAAcb,WAAWc,SAAS;YAClCC,MAAM;gBAAC;aAAa;YACpBC,OAAO,EAAE;YACTC,QAAQ,EAAE;YACVC,WAAW;YACXC,YAAY;YACZC,UAAU;YACVC,QAAQ;YACRC,YAAY;gBAAEC,QAAQ;gBAAGC,OAAO;gBAAGC,QAAQ;YAAE;YAC7CC,WAAW;gBACTC,UAAU;gBACVC,KAAK5B,WAAW6B,EAAE;gBAClBC,mBAAmB9B,WAAWc,SAAS;YAEzC;QACF;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9495cba752b4030555e3de44893a17489fa69275"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_24shqx0duj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_24shqx0duj();
cov_24shqx0duj().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_24shqx0duj().s[1]++;
Object.defineProperty(exports, "AliExpressClient", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_24shqx0duj().f[0]++;
    cov_24shqx0duj().s[2]++;
    return AliExpressClient;
  }
});
class AliExpressClient {
  constructor(config) {
    /* istanbul ignore next */
    cov_24shqx0duj().f[1]++;
    cov_24shqx0duj().s[3]++;
    this.baseUrl = config.sandbox ?
    /* istanbul ignore next */
    (cov_24shqx0duj().b[0][0]++, 'https://api.sandbox.aliexpress.com/v2') :
    /* istanbul ignore next */
    (cov_24shqx0duj().b[0][1]++, 'https://api.aliexpress.com/v2');
    /* istanbul ignore next */
    cov_24shqx0duj().s[4]++;
    this.headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${config.apiKey}`,
      'X-API-Secret': config.apiSecret
    };
    /* istanbul ignore next */
    cov_24shqx0duj().s[5]++;
    if (config.accessToken) {
      /* istanbul ignore next */
      cov_24shqx0duj().b[1][0]++;
      cov_24shqx0duj().s[6]++;
      this.accessToken = config.accessToken;
      /* istanbul ignore next */
      cov_24shqx0duj().s[7]++;
      this.headers['X-Access-Token'] = config.accessToken;
    } else
    /* istanbul ignore next */
    {
      cov_24shqx0duj().b[1][1]++;
    }
  }
  async getProducts() {
    /* istanbul ignore next */
    cov_24shqx0duj().f[2]++;
    cov_24shqx0duj().s[8]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_24shqx0duj().s[9]++, await fetch(`${this.baseUrl}/products`, {
        headers: this.headers
      }));
      /* istanbul ignore next */
      cov_24shqx0duj().s[10]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_24shqx0duj().b[2][0]++;
        cov_24shqx0duj().s[11]++;
        throw new Error(`AliExpress API error: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_24shqx0duj().b[2][1]++;
      }
      cov_24shqx0duj().s[12]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_24shqx0duj().s[13]++;
      console.error('AliExpress API Error:', error);
      /* istanbul ignore next */
      cov_24shqx0duj().s[14]++;
      throw error;
    }
  }
  async syncInventory(products) {
    /* istanbul ignore next */
    cov_24shqx0duj().f[3]++;
    cov_24shqx0duj().s[15]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_24shqx0duj().s[16]++, await fetch(`${this.baseUrl}/inventory/batch`, {
        method: 'POST',
        headers: this.headers,
        body: JSON.stringify({
          products
        })
      }));
      /* istanbul ignore next */
      cov_24shqx0duj().s[17]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_24shqx0duj().b[3][0]++;
        cov_24shqx0duj().s[18]++;
        throw new Error(`Inventory sync failed: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_24shqx0duj().b[3][1]++;
      }
      cov_24shqx0duj().s[19]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_24shqx0duj().s[20]++;
      console.error('Inventory sync error:', error);
      /* istanbul ignore next */
      cov_24shqx0duj().s[21]++;
      throw error;
    }
  }
  // Execute a generic API call (used for fulfillment, etc)
  async execute(apiName, params) {
    /* istanbul ignore next */
    cov_24shqx0duj().f[4]++;
    cov_24shqx0duj().s[22]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_24shqx0duj().s[23]++, await fetch(`${this.baseUrl}/topapi/${apiName}`, {
        method: 'POST',
        headers: this.headers,
        body: JSON.stringify(params)
      }));
      /* istanbul ignore next */
      cov_24shqx0duj().s[24]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_24shqx0duj().b[4][0]++;
        cov_24shqx0duj().s[25]++;
        throw new Error(`AliExpress execute error: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_24shqx0duj().b[4][1]++;
      }
      cov_24shqx0duj().s[26]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_24shqx0duj().s[27]++;
      console.error('AliExpress execute error:', error);
      /* istanbul ignore next */
      cov_24shqx0duj().s[28]++;
      throw error;
    }
  }
  async convertToProduct(aliProduct) {
    /* istanbul ignore next */
    cov_24shqx0duj().f[5]++;
    cov_24shqx0duj().s[29]++;
    return {
      name: aliProduct.title,
      slug: aliProduct.title.toLowerCase().replace(/\s+/g, '-'),
      category: 'Imported',
      images: [],
      brand: 'AliExpress',
      description: '',
      isPublished: true,
      price: aliProduct.price,
      listPrice: aliProduct.price,
      countInStock: aliProduct.inventory,
      tags: ['aliexpress'],
      sizes: [],
      colors: [],
      avgRating: 0,
      numReviews: 0,
      discount: 0,
      weight: 0,
      dimensions: {
        length: 0,
        width: 0,
        height: 0
      },
      warehouse: {
        provider: "4PX",
        sku: aliProduct.id,
        availableQuantity: aliProduct.inventory
      }
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,