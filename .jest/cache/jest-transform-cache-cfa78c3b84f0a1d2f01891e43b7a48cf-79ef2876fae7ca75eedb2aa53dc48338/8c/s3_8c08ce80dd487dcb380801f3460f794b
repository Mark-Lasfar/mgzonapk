a84e8e56fae1569c6f063c792fe361e2
"use strict";

/* istanbul ignore next */
function cov_25u500hs8() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/s3.ts";
  var hash = "808977df07eacaf6ad8ac1f7cb678e115b2b736f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/s3.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 33
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 34
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 31
        }
      },
      "8": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "9": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 58
        }
      },
      "10": {
        start: {
          line: 27,
          column: 0
        },
        end: {
          line: 31,
          column: 3
        }
      },
      "11": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "12": {
        start: {
          line: 35,
          column: 23
        },
        end: {
          line: 35,
          column: 77
        }
      },
      "13": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 90
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 84
        }
      },
      "16": {
        start: {
          line: 41,
          column: 31
        },
        end: {
          line: 41,
          column: 105
        }
      },
      "17": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "18": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 94
        }
      },
      "19": {
        start: {
          line: 45,
          column: 29
        },
        end: {
          line: 64,
          column: 10
        }
      },
      "20": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 63,
          column: 40
        }
      },
      "21": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 62,
          column: 37
        }
      },
      "22": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 61,
          column: 41
        }
      },
      "23": {
        start: {
          line: 62,
          column: 21
        },
        end: {
          line: 62,
          column: 37
        }
      },
      "24": {
        start: {
          line: 65,
          column: 26
        },
        end: {
          line: 65,
          column: 49
        }
      },
      "25": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 65
        }
      },
      "26": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 25
        }
      },
      "27": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 46
        }
      },
      "28": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 90
        }
      },
      "29": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "30": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 56
        }
      },
      "31": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 65
        }
      },
      "32": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 46
        }
      },
      "33": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 49
        }
      },
      "34": {
        start: {
          line: 83,
          column: 21
        },
        end: {
          line: 83,
          column: 35
        }
      },
      "35": {
        start: {
          line: 84,
          column: 21
        },
        end: {
          line: 84,
          column: 50
        }
      },
      "36": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 34
        }
      },
      "37": {
        start: {
          line: 87,
          column: 21
        },
        end: {
          line: 91,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 12,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 15,
            column: 24
          }
        },
        loc: {
          start: {
            line: 15,
            column: 34
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 18,
            column: 25
          }
        },
        loc: {
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 21,
            column: 22
          }
        },
        loc: {
          start: {
            line: 21,
            column: 32
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "uploadToStorage",
        decl: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 30
          }
        },
        loc: {
          start: {
            line: 32,
            column: 57
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 32
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 45,
            column: 47
          },
          end: {
            line: 45,
            column: 48
          }
        },
        loc: {
          start: {
            line: 45,
            column: 66
          },
          end: {
            line: 64,
            column: 9
          }
        },
        line: 45
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 15
          },
          end: {
            line: 60,
            column: 16
          }
        },
        loc: {
          start: {
            line: 60,
            column: 32
          },
          end: {
            line: 63,
            column: 13
          }
        },
        line: 60
      },
      "8": {
        name: "deleteFromStorage",
        decl: {
          start: {
            line: 73,
            column: 15
          },
          end: {
            line: 73,
            column: 32
          }
        },
        loc: {
          start: {
            line: 73,
            column: 43
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 73
      },
      "9": {
        name: "getPublicIdFromUrl",
        decl: {
          start: {
            line: 82,
            column: 9
          },
          end: {
            line: 82,
            column: 27
          }
        },
        loc: {
          start: {
            line: 82,
            column: 33
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 82
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 43
          },
          end: {
            line: 32,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 32,
            column: 53
          },
          end: {
            line: 32,
            column: 55
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 35,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 35,
            column: 46
          },
          end: {
            line: 35,
            column: 70
          }
        }, {
          start: {
            line: 35,
            column: 73
          },
          end: {
            line: 35,
            column: 77
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 24
          },
          end: {
            line: 37,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 24
          },
          end: {
            line: 37,
            column: 39
          }
        }, {
          start: {
            line: 37,
            column: 43
          },
          end: {
            line: 37,
            column: 90
          }
        }],
        line: 37
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 31
          },
          end: {
            line: 41,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 31
          },
          end: {
            line: 41,
            column: 53
          }
        }, {
          start: {
            line: 41,
            column: 57
          },
          end: {
            line: 41,
            column: 105
          }
        }],
        line: 41
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "6": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 32
          }
        }, {
          start: {
            line: 42,
            column: 36
          },
          end: {
            line: 42,
            column: 71
          }
        }],
        line: 42
      },
      "7": {
        loc: {
          start: {
            line: 47,
            column: 24
          },
          end: {
            line: 47,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 24
          },
          end: {
            line: 47,
            column: 38
          }
        }, {
          start: {
            line: 47,
            column: 42
          },
          end: {
            line: 47,
            column: 85
          }
        }],
        line: 47
      },
      "8": {
        loc: {
          start: {
            line: 48,
            column: 27
          },
          end: {
            line: 48,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 27
          },
          end: {
            line: 48,
            column: 44
          }
        }, {
          start: {
            line: 48,
            column: 48
          },
          end: {
            line: 48,
            column: 71
          }
        }],
        line: 48
      },
      "9": {
        loc: {
          start: {
            line: 49,
            column: 31
          },
          end: {
            line: 49,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 31
          },
          end: {
            line: 49,
            column: 52
          }
        }, {
          start: {
            line: 49,
            column: 56
          },
          end: {
            line: 49,
            column: 63
          }
        }],
        line: 49
      },
      "10": {
        loc: {
          start: {
            line: 50,
            column: 27
          },
          end: {
            line: 50,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 27
          },
          end: {
            line: 50,
            column: 44
          }
        }, {
          start: {
            line: 50,
            column: 48
          },
          end: {
            line: 50,
            column: 52
          }
        }],
        line: 50
      },
      "11": {
        loc: {
          start: {
            line: 61,
            column: 16
          },
          end: {
            line: 62,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 16
          },
          end: {
            line: 62,
            column: 37
          }
        }, {
          start: {
            line: 62,
            column: 21
          },
          end: {
            line: 62,
            column: 37
          }
        }],
        line: 61
      },
      "12": {
        loc: {
          start: {
            line: 70,
            column: 24
          },
          end: {
            line: 70,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 70,
            column: 49
          },
          end: {
            line: 70,
            column: 62
          }
        }, {
          start: {
            line: 70,
            column: 65
          },
          end: {
            line: 70,
            column: 88
          }
        }],
        line: 70
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/s3.ts"],
      sourcesContent: ["import { v2 as cloudinary } from 'cloudinary';\nimport { STORAGE_CONFIG } from '@/lib/config/storage.config';\n\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\ninterface UploadOptions {\n  folder?: string;\n  public_id?: string;\n  overwrite?: boolean;\n  resource_type?: 'auto' | 'image' | 'video' | 'raw';\n  maxSize?: number;\n  allowedFormats?: string[];\n}\n\nexport async function uploadToStorage(\n  file: File | Buffer,\n  path: string,\n  options: UploadOptions = {}\n): Promise<string> {\n  try {\n    // Convert File to Buffer if needed\n    const buffer = file instanceof File ? await file.arrayBuffer() : file;\n\n    // Validate file size and type\n    const maxSize = options.maxSize || STORAGE_CONFIG.image.maxFileSize;\n    if (buffer.byteLength > maxSize) {\n      throw new Error(`File size exceeds ${maxSize / (1024 * 1024)}MB limit`);\n    }\n\n    const allowedFormats = options.allowedFormats || STORAGE_CONFIG.image.allowedTypes;\n    if (file instanceof File && !allowedFormats.includes(file.type)) {\n      throw new Error(`Invalid file type. Allowed types: ${allowedFormats.join(', ')}`);\n    }\n\n    const uploadResult = await new Promise((resolve, reject) => {\n      cloudinary.uploader\n        .upload_stream(\n          {\n            folder: options.folder || STORAGE_CONFIG.products.path,\n            public_id: options.public_id || `${Date.now()}-${path}`,\n            resource_type: options.resource_type || 'image',\n            overwrite: options.overwrite ?? true,\n            allowed_formats: allowedFormats,\n            transformation: [\n              { quality: STORAGE_CONFIG.image.compressionQuality },\n              { fetch_format: 'auto' },\n            ],\n          },\n          (error, result) => {\n            if (error) reject(error);\n            else resolve(result);\n          }\n        )\n        .end(Buffer.from(buffer));\n    });\n\n    const secureUrl = (uploadResult as { secure_url: string }).secure_url;\n    console.log(`Uploaded file to Cloudinary: ${secureUrl}`);\n    return secureUrl;\n  } catch (error) {\n    console.error('Upload error:', error);\n    throw new Error(error instanceof Error ? error.message : 'Failed to upload file');\n  }\n}\n\nexport async function deleteFromStorage(publicId: string): Promise<void> {\n  try {\n    await cloudinary.uploader.destroy(publicId);\n    console.log(`Deleted file from Cloudinary: ${publicId}`);\n  } catch (error) {\n    console.error('Delete error:', error);\n    throw new Error('Failed to delete file');\n  }\n}\n\nexport function getPublicIdFromUrl(url: string): string {\n  const urlParts = url.split('/');\n  const filename = urlParts[urlParts.length - 1];\n  return filename.split('.')[0];\n}\n\nexport const StorageUtils = {\n  uploadToStorage,\n  deleteFromStorage,\n  getPublicIdFromUrl,\n};"],
      names: ["StorageUtils", "deleteFromStorage", "getPublicIdFromUrl", "uploadToStorage", "cloudinary", "config", "cloud_name", "process", "env", "CLOUDINARY_CLOUD_NAME", "api_key", "CLOUDINARY_API_KEY", "api_secret", "CLOUDINARY_API_SECRET", "file", "path", "options", "buffer", "File", "arrayBuffer", "maxSize", "STORAGE_CONFIG", "image", "maxFileSize", "byteLength", "Error", "allowedFormats", "allowedTypes", "includes", "type", "join", "uploadResult", "Promise", "resolve", "reject", "uploader", "upload_stream", "folder", "products", "public_id", "Date", "now", "resource_type", "overwrite", "allowed_formats", "transformation", "quality", "compressionQuality", "fetch_format", "error", "result", "end", "Buffer", "from", "secureUrl", "secure_url", "console", "log", "message", "publicId", "destroy", "url", "urlParts", "split", "filename", "length"],
      mappings: ";;;;;;;;;;;IAqFaA,YAAY;eAAZA;;IAhBSC,iBAAiB;eAAjBA;;IAUNC,kBAAkB;eAAlBA;;IA7DMC,eAAe;eAAfA;;;4BAlBW;+BACF;AAE/BC,cAAU,CAACC,MAAM,CAAC;IAChBC,YAAYC,QAAQC,GAAG,CAACC,qBAAqB;IAC7CC,SAASH,QAAQC,GAAG,CAACG,kBAAkB;IACvCC,YAAYL,QAAQC,GAAG,CAACK,qBAAqB;AAC/C;AAWO,eAAeV,gBACpBW,IAAmB,EACnBC,IAAY,EACZC,UAAyB,CAAC,CAAC;IAE3B,IAAI;QACF,mCAAmC;QACnC,MAAMC,SAASH,gBAAgBI,OAAO,MAAMJ,KAAKK,WAAW,KAAKL;QAEjE,8BAA8B;QAC9B,MAAMM,UAAUJ,QAAQI,OAAO,IAAIC,6BAAc,CAACC,KAAK,CAACC,WAAW;QACnE,IAAIN,OAAOO,UAAU,GAAGJ,SAAS;YAC/B,MAAM,IAAIK,MAAM,CAAC,kBAAkB,EAAEL,UAAW,CAAA,OAAO,IAAG,EAAG,QAAQ,CAAC;QACxE;QAEA,MAAMM,iBAAiBV,QAAQU,cAAc,IAAIL,6BAAc,CAACC,KAAK,CAACK,YAAY;QAClF,IAAIb,gBAAgBI,QAAQ,CAACQ,eAAeE,QAAQ,CAACd,KAAKe,IAAI,GAAG;YAC/D,MAAM,IAAIJ,MAAM,CAAC,kCAAkC,EAAEC,eAAeI,IAAI,CAAC,OAAO;QAClF;QAEA,MAAMC,eAAe,MAAM,IAAIC,QAAQ,CAACC,SAASC;YAC/C9B,cAAU,CAAC+B,QAAQ,CAChBC,aAAa,CACZ;gBACEC,QAAQrB,QAAQqB,MAAM,IAAIhB,6BAAc,CAACiB,QAAQ,CAACvB,IAAI;gBACtDwB,WAAWvB,QAAQuB,SAAS,IAAI,GAAGC,KAAKC,GAAG,GAAG,CAAC,EAAE1B,MAAM;gBACvD2B,eAAe1B,QAAQ0B,aAAa,IAAI;gBACxCC,WAAW3B,QAAQ2B,SAAS,IAAI;gBAChCC,iBAAiBlB;gBACjBmB,gBAAgB;oBACd;wBAAEC,SAASzB,6BAAc,CAACC,KAAK,CAACyB,kBAAkB;oBAAC;oBACnD;wBAAEC,cAAc;oBAAO;iBACxB;YACH,GACA,CAACC,OAAOC;gBACN,IAAID,OAAOf,OAAOe;qBACbhB,QAAQiB;YACf,GAEDC,GAAG,CAACC,OAAOC,IAAI,CAACpC;QACrB;QAEA,MAAMqC,YAAY,AAACvB,aAAwCwB,UAAU;QACrEC,QAAQC,GAAG,CAAC,CAAC,6BAA6B,EAAEH,WAAW;QACvD,OAAOA;IACT,EAAE,OAAOL,OAAO;QACdO,QAAQP,KAAK,CAAC,iBAAiBA;QAC/B,MAAM,IAAIxB,MAAMwB,iBAAiBxB,QAAQwB,MAAMS,OAAO,GAAG;IAC3D;AACF;AAEO,eAAezD,kBAAkB0D,QAAgB;IACtD,IAAI;QACF,MAAMvD,cAAU,CAAC+B,QAAQ,CAACyB,OAAO,CAACD;QAClCH,QAAQC,GAAG,CAAC,CAAC,8BAA8B,EAAEE,UAAU;IACzD,EAAE,OAAOV,OAAO;QACdO,QAAQP,KAAK,CAAC,iBAAiBA;QAC/B,MAAM,IAAIxB,MAAM;IAClB;AACF;AAEO,SAASvB,mBAAmB2D,GAAW;IAC5C,MAAMC,WAAWD,IAAIE,KAAK,CAAC;IAC3B,MAAMC,WAAWF,QAAQ,CAACA,SAASG,MAAM,GAAG,EAAE;IAC9C,OAAOD,SAASD,KAAK,CAAC,IAAI,CAAC,EAAE;AAC/B;AAEO,MAAM/D,eAAe;IAC1BG;IACAF;IACAC;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "808977df07eacaf6ad8ac1f7cb678e115b2b736f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25u500hs8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25u500hs8();
cov_25u500hs8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_25u500hs8().f[0]++;
  cov_25u500hs8().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_25u500hs8().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_25u500hs8().s[3]++;
_export(exports, {
  StorageUtils: function () {
    /* istanbul ignore next */
    cov_25u500hs8().f[1]++;
    cov_25u500hs8().s[4]++;
    return StorageUtils;
  },
  deleteFromStorage: function () {
    /* istanbul ignore next */
    cov_25u500hs8().f[2]++;
    cov_25u500hs8().s[5]++;
    return deleteFromStorage;
  },
  getPublicIdFromUrl: function () {
    /* istanbul ignore next */
    cov_25u500hs8().f[3]++;
    cov_25u500hs8().s[6]++;
    return getPublicIdFromUrl;
  },
  uploadToStorage: function () {
    /* istanbul ignore next */
    cov_25u500hs8().f[4]++;
    cov_25u500hs8().s[7]++;
    return uploadToStorage;
  }
});
const _cloudinary =
/* istanbul ignore next */
(cov_25u500hs8().s[8]++, require("cloudinary"));
const _storageconfig =
/* istanbul ignore next */
(cov_25u500hs8().s[9]++, require("../config/storage.config"));
/* istanbul ignore next */
cov_25u500hs8().s[10]++;
_cloudinary.v2.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});
async function uploadToStorage(file, path, options =
/* istanbul ignore next */
(cov_25u500hs8().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_25u500hs8().f[5]++;
  cov_25u500hs8().s[11]++;
  try {
    // Convert File to Buffer if needed
    const buffer =
    /* istanbul ignore next */
    (cov_25u500hs8().s[12]++, file instanceof File ?
    /* istanbul ignore next */
    (cov_25u500hs8().b[1][0]++, await file.arrayBuffer()) :
    /* istanbul ignore next */
    (cov_25u500hs8().b[1][1]++, file));
    // Validate file size and type
    const maxSize =
    /* istanbul ignore next */
    (cov_25u500hs8().s[13]++,
    /* istanbul ignore next */
    (cov_25u500hs8().b[2][0]++, options.maxSize) ||
    /* istanbul ignore next */
    (cov_25u500hs8().b[2][1]++, _storageconfig.STORAGE_CONFIG.image.maxFileSize));
    /* istanbul ignore next */
    cov_25u500hs8().s[14]++;
    if (buffer.byteLength > maxSize) {
      /* istanbul ignore next */
      cov_25u500hs8().b[3][0]++;
      cov_25u500hs8().s[15]++;
      throw new Error(`File size exceeds ${maxSize / (1024 * 1024)}MB limit`);
    } else
    /* istanbul ignore next */
    {
      cov_25u500hs8().b[3][1]++;
    }
    const allowedFormats =
    /* istanbul ignore next */
    (cov_25u500hs8().s[16]++,
    /* istanbul ignore next */
    (cov_25u500hs8().b[4][0]++, options.allowedFormats) ||
    /* istanbul ignore next */
    (cov_25u500hs8().b[4][1]++, _storageconfig.STORAGE_CONFIG.image.allowedTypes));
    /* istanbul ignore next */
    cov_25u500hs8().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_25u500hs8().b[6][0]++, file instanceof File) &&
    /* istanbul ignore next */
    (cov_25u500hs8().b[6][1]++, !allowedFormats.includes(file.type))) {
      /* istanbul ignore next */
      cov_25u500hs8().b[5][0]++;
      cov_25u500hs8().s[18]++;
      throw new Error(`Invalid file type. Allowed types: ${allowedFormats.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_25u500hs8().b[5][1]++;
    }
    const uploadResult =
    /* istanbul ignore next */
    (cov_25u500hs8().s[19]++, await new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_25u500hs8().f[6]++;
      cov_25u500hs8().s[20]++;
      _cloudinary.v2.uploader.upload_stream({
        folder:
        /* istanbul ignore next */
        (cov_25u500hs8().b[7][0]++, options.folder) ||
        /* istanbul ignore next */
        (cov_25u500hs8().b[7][1]++, _storageconfig.STORAGE_CONFIG.products.path),
        public_id:
        /* istanbul ignore next */
        (cov_25u500hs8().b[8][0]++, options.public_id) ||
        /* istanbul ignore next */
        (cov_25u500hs8().b[8][1]++, `${Date.now()}-${path}`),
        resource_type:
        /* istanbul ignore next */
        (cov_25u500hs8().b[9][0]++, options.resource_type) ||
        /* istanbul ignore next */
        (cov_25u500hs8().b[9][1]++, 'image'),
        overwrite:
        /* istanbul ignore next */
        (cov_25u500hs8().b[10][0]++, options.overwrite) ??
        /* istanbul ignore next */
        (cov_25u500hs8().b[10][1]++, true),
        allowed_formats: allowedFormats,
        transformation: [{
          quality: _storageconfig.STORAGE_CONFIG.image.compressionQuality
        }, {
          fetch_format: 'auto'
        }]
      }, (error, result) => {
        /* istanbul ignore next */
        cov_25u500hs8().f[7]++;
        cov_25u500hs8().s[21]++;
        if (error) {
          /* istanbul ignore next */
          cov_25u500hs8().b[11][0]++;
          cov_25u500hs8().s[22]++;
          reject(error);
        } else {
          /* istanbul ignore next */
          cov_25u500hs8().b[11][1]++;
          cov_25u500hs8().s[23]++;
          resolve(result);
        }
      }).end(Buffer.from(buffer));
    }));
    const secureUrl =
    /* istanbul ignore next */
    (cov_25u500hs8().s[24]++, uploadResult.secure_url);
    /* istanbul ignore next */
    cov_25u500hs8().s[25]++;
    console.log(`Uploaded file to Cloudinary: ${secureUrl}`);
    /* istanbul ignore next */
    cov_25u500hs8().s[26]++;
    return secureUrl;
  } catch (error) {
    /* istanbul ignore next */
    cov_25u500hs8().s[27]++;
    console.error('Upload error:', error);
    /* istanbul ignore next */
    cov_25u500hs8().s[28]++;
    throw new Error(error instanceof Error ?
    /* istanbul ignore next */
    (cov_25u500hs8().b[12][0]++, error.message) :
    /* istanbul ignore next */
    (cov_25u500hs8().b[12][1]++, 'Failed to upload file'));
  }
}
async function deleteFromStorage(publicId) {
  /* istanbul ignore next */
  cov_25u500hs8().f[8]++;
  cov_25u500hs8().s[29]++;
  try {
    /* istanbul ignore next */
    cov_25u500hs8().s[30]++;
    await _cloudinary.v2.uploader.destroy(publicId);
    /* istanbul ignore next */
    cov_25u500hs8().s[31]++;
    console.log(`Deleted file from Cloudinary: ${publicId}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_25u500hs8().s[32]++;
    console.error('Delete error:', error);
    /* istanbul ignore next */
    cov_25u500hs8().s[33]++;
    throw new Error('Failed to delete file');
  }
}
function getPublicIdFromUrl(url) {
  /* istanbul ignore next */
  cov_25u500hs8().f[9]++;
  const urlParts =
  /* istanbul ignore next */
  (cov_25u500hs8().s[34]++, url.split('/'));
  const filename =
  /* istanbul ignore next */
  (cov_25u500hs8().s[35]++, urlParts[urlParts.length - 1]);
  /* istanbul ignore next */
  cov_25u500hs8().s[36]++;
  return filename.split('.')[0];
}
const StorageUtils =
/* istanbul ignore next */
(cov_25u500hs8().s[37]++, {
  uploadToStorage,
  deleteFromStorage,
  getPublicIdFromUrl
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,