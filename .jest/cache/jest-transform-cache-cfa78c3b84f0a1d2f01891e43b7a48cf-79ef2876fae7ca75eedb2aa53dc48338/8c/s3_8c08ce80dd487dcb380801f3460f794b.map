{"version":3,"names":["StorageUtils","cov_25u500hs8","f","s","deleteFromStorage","getPublicIdFromUrl","uploadToStorage","_cloudinary","v2","config","cloud_name","process","env","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","file","path","options","b","buffer","File","arrayBuffer","maxSize","_storageconfig","STORAGE_CONFIG","image","maxFileSize","byteLength","Error","allowedFormats","allowedTypes","includes","type","join","uploadResult","Promise","resolve","reject","uploader","upload_stream","folder","products","public_id","Date","now","resource_type","overwrite","allowed_formats","transformation","quality","compressionQuality","fetch_format","error","result","end","Buffer","from","secureUrl","secure_url","console","log","message","publicId","destroy","url","urlParts","split","filename","length"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/s3.ts"],"sourcesContent":["import { v2 as cloudinary } from 'cloudinary';\nimport { STORAGE_CONFIG } from '@/lib/config/storage.config';\n\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\ninterface UploadOptions {\n  folder?: string;\n  public_id?: string;\n  overwrite?: boolean;\n  resource_type?: 'auto' | 'image' | 'video' | 'raw';\n  maxSize?: number;\n  allowedFormats?: string[];\n}\n\nexport async function uploadToStorage(\n  file: File | Buffer,\n  path: string,\n  options: UploadOptions = {}\n): Promise<string> {\n  try {\n    // Convert File to Buffer if needed\n    const buffer = file instanceof File ? await file.arrayBuffer() : file;\n\n    // Validate file size and type\n    const maxSize = options.maxSize || STORAGE_CONFIG.image.maxFileSize;\n    if (buffer.byteLength > maxSize) {\n      throw new Error(`File size exceeds ${maxSize / (1024 * 1024)}MB limit`);\n    }\n\n    const allowedFormats = options.allowedFormats || STORAGE_CONFIG.image.allowedTypes;\n    if (file instanceof File && !allowedFormats.includes(file.type)) {\n      throw new Error(`Invalid file type. Allowed types: ${allowedFormats.join(', ')}`);\n    }\n\n    const uploadResult = await new Promise((resolve, reject) => {\n      cloudinary.uploader\n        .upload_stream(\n          {\n            folder: options.folder || STORAGE_CONFIG.products.path,\n            public_id: options.public_id || `${Date.now()}-${path}`,\n            resource_type: options.resource_type || 'image',\n            overwrite: options.overwrite ?? true,\n            allowed_formats: allowedFormats,\n            transformation: [\n              { quality: STORAGE_CONFIG.image.compressionQuality },\n              { fetch_format: 'auto' },\n            ],\n          },\n          (error, result) => {\n            if (error) reject(error);\n            else resolve(result);\n          }\n        )\n        .end(Buffer.from(buffer));\n    });\n\n    const secureUrl = (uploadResult as { secure_url: string }).secure_url;\n    console.log(`Uploaded file to Cloudinary: ${secureUrl}`);\n    return secureUrl;\n  } catch (error) {\n    console.error('Upload error:', error);\n    throw new Error(error instanceof Error ? error.message : 'Failed to upload file');\n  }\n}\n\nexport async function deleteFromStorage(publicId: string): Promise<void> {\n  try {\n    await cloudinary.uploader.destroy(publicId);\n    console.log(`Deleted file from Cloudinary: ${publicId}`);\n  } catch (error) {\n    console.error('Delete error:', error);\n    throw new Error('Failed to delete file');\n  }\n}\n\nexport function getPublicIdFromUrl(url: string): string {\n  const urlParts = url.split('/');\n  const filename = urlParts[urlParts.length - 1];\n  return filename.split('.')[0];\n}\n\nexport const StorageUtils = {\n  uploadToStorage,\n  deleteFromStorage,\n  getPublicIdFromUrl,\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqFaA,YAAY,WAAAA,CAAA;IAAA;IAAAC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","ignoreList":[]}