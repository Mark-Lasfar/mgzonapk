50af5c9c1623775c6169838e1eb36eaf
"use strict";

/* istanbul ignore next */
function cov_1vr42f0cgp() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/auth.ts";
  var hash = "ef6b9311b0890b90736fdb866333a04254e99916";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/auth.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 20
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 35
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "9": {
        start: {
          line: 24,
          column: 35
        },
        end: {
          line: 24,
          column: 101
        }
      },
      "10": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 25,
          column: 73
        }
      },
      "11": {
        start: {
          line: 26,
          column: 17
        },
        end: {
          line: 26,
          column: 40
        }
      },
      "12": {
        start: {
          line: 27,
          column: 17
        },
        end: {
          line: 27,
          column: 47
        }
      },
      "13": {
        start: {
          line: 28,
          column: 13
        },
        end: {
          line: 28,
          column: 37
        }
      },
      "14": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 6
        }
      },
      "15": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "16": {
        start: {
          line: 37,
          column: 22
        },
        end: {
          line: 39,
          column: 10
        }
      },
      "17": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 43,
          column: 10
        }
      },
      "18": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 48,
          column: 10
        }
      },
      "19": {
        start: {
          line: 52,
          column: 32
        },
        end: {
          line: 52,
          column: 65
        }
      },
      "20": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "21": {
        start: {
          line: 54,
          column: 23
        },
        end: {
          line: 54,
          column: 55
        }
      },
      "22": {
        start: {
          line: 55,
          column: 26
        },
        end: {
          line: 55,
          column: 61
        }
      },
      "23": {
        start: {
          line: 56,
          column: 33
        },
        end: {
          line: 56,
          column: 67
        }
      },
      "24": {
        start: {
          line: 57,
          column: 26
        },
        end: {
          line: 57,
          column: 60
        }
      },
      "25": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "26": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "27": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "28": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 43
        }
      },
      "29": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 75,
          column: 10
        }
      },
      "30": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "31": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "32": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "33": {
        start: {
          line: 91,
          column: 28
        },
        end: {
          line: 91,
          column: 54
        }
      },
      "34": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 92,
          column: 30
        }
      },
      "35": {
        start: {
          line: 93,
          column: 25
        },
        end: {
          line: 93,
          column: 72
        }
      },
      "36": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "37": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 100,
          column: 15
        }
      },
      "38": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 107,
          column: 15
        }
      },
      "39": {
        start: {
          line: 110,
          column: 34
        },
        end: {
          line: 110,
          column: 135
        }
      },
      "40": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "41": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 116,
          column: 15
        }
      },
      "42": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "43": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      },
      "44": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 20
        }
      },
      "45": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "46": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "47": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 217,
          column: 6
        }
      },
      "48": {
        start: {
          line: 149,
          column: 36
        },
        end: {
          line: 149,
          column: 69
        }
      },
      "49": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "50": {
        start: {
          line: 151,
          column: 27
        },
        end: {
          line: 151,
          column: 59
        }
      },
      "51": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "52": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 156,
          column: 19
        }
      },
      "53": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 163,
          column: 19
        }
      },
      "54": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 47
        }
      },
      "55": {
        start: {
          line: 166,
          column: 24
        },
        end: {
          line: 168,
          column: 14
        }
      },
      "56": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "57": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 174,
          column: 19
        }
      },
      "58": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 181,
          column: 19
        }
      },
      "59": {
        start: {
          line: 183,
          column: 34
        },
        end: {
          line: 185,
          column: 14
        }
      },
      "60": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 74
        }
      },
      "61": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "62": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 193,
          column: 19
        }
      },
      "63": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 200,
          column: 19
        }
      },
      "64": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 24
        }
      },
      "65": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "66": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 215,
          column: 15
        }
      },
      "67": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 220,
          column: 53
        }
      },
      "68": {
        start: {
          line: 221,
          column: 19
        },
        end: {
          line: 221,
          column: 51
        }
      },
      "69": {
        start: {
          line: 222,
          column: 4
        },
        end: {
          line: 228,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 10
          },
          end: {
            line: 12,
            column: 11
          }
        },
        loc: {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 21
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 18,
            column: 26
          }
        },
        loc: {
          start: {
            line: 18,
            column: 36
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 33
          }
        },
        loc: {
          start: {
            line: 29,
            column: 39
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 29
      },
      "5": {
        name: "getCurrentUserInfo",
        decl: {
          start: {
            line: 35,
            column: 15
          },
          end: {
            line: 35,
            column: 33
          }
        },
        loc: {
          start: {
            line: 35,
            column: 43
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 35
      },
      "6": {
        name: "validateApiKey",
        decl: {
          start: {
            line: 51,
            column: 15
          },
          end: {
            line: 51,
            column: 29
          }
        },
        loc: {
          start: {
            line: 51,
            column: 39
          },
          end: {
            line: 146,
            column: 1
          }
        },
        line: 51
      },
      "7": {
        name: "validatePermissions",
        decl: {
          start: {
            line: 147,
            column: 9
          },
          end: {
            line: 147,
            column: 28
          }
        },
        loc: {
          start: {
            line: 147,
            column: 50
          },
          end: {
            line: 218,
            column: 1
          }
        },
        line: 147
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 148,
            column: 11
          },
          end: {
            line: 148,
            column: 12
          }
        },
        loc: {
          start: {
            line: 148,
            column: 28
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 148
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 183,
            column: 60
          },
          end: {
            line: 183,
            column: 61
          }
        },
        loc: {
          start: {
            line: 183,
            column: 74
          },
          end: {
            line: 185,
            column: 13
          }
        },
        line: 183
      },
      "10": {
        name: "cors",
        decl: {
          start: {
            line: 219,
            column: 15
          },
          end: {
            line: 219,
            column: 19
          }
        },
        loc: {
          start: {
            line: 219,
            column: 22
          },
          end: {
            line: 229,
            column: 1
          }
        },
        line: 219
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 35
          },
          end: {
            line: 30,
            column: 38
          }
        }, {
          start: {
            line: 30,
            column: 41
          },
          end: {
            line: 32,
            column: 5
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 30,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 11
          },
          end: {
            line: 30,
            column: 14
          }
        }, {
          start: {
            line: 30,
            column: 18
          },
          end: {
            line: 30,
            column: 32
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 18
          },
          end: {
            line: 42,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 18
          },
          end: {
            line: 42,
            column: 30
          }
        }, {
          start: {
            line: 42,
            column: 34
          },
          end: {
            line: 42,
            column: 45
          }
        }, {
          start: {
            line: 42,
            column: 49
          },
          end: {
            line: 42,
            column: 58
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 19
          }
        }, {
          start: {
            line: 58,
            column: 23
          },
          end: {
            line: 58,
            column: 33
          }
        }, {
          start: {
            line: 58,
            column: 37
          },
          end: {
            line: 58,
            column: 54
          }
        }, {
          start: {
            line: 58,
            column: 58
          },
          end: {
            line: 58,
            column: 68
          }
        }],
        line: 58
      },
      "5": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "6": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "7": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "8": {
        loc: {
          start: {
            line: 134,
            column: 19
          },
          end: {
            line: 134,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 134,
            column: 44
          },
          end: {
            line: 134,
            column: 57
          }
        }, {
          start: {
            line: 134,
            column: 60
          },
          end: {
            line: 134,
            column: 73
          }
        }],
        line: 134
      },
      "9": {
        loc: {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "10": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "11": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "12": {
        loc: {
          start: {
            line: 205,
            column: 23
          },
          end: {
            line: 205,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 205,
            column: 48
          },
          end: {
            line: 205,
            column: 61
          }
        }, {
          start: {
            line: 205,
            column: 64
          },
          end: {
            line: 205,
            column: 77
          }
        }],
        line: 205
      },
      "13": {
        loc: {
          start: {
            line: 221,
            column: 19
          },
          end: {
            line: 221,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 19
          },
          end: {
            line: 221,
            column: 44
          }
        }, {
          start: {
            line: 221,
            column: 48
          },
          end: {
            line: 221,
            column: 51
          }
        }],
        line: 221
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/auth.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport ApiKeyModel from '@/lib/db/models/api-key.model';\nimport crypto from 'crypto';\nimport { headers } from 'next/headers';\nimport { logger } from '../services/logging';\nimport { getToken } from 'next-auth/jwt';\n\n// Helper function to get current user info\nasync function getCurrentUserInfo(request: NextRequest) {\n  try {\n    const token = await getToken({ req: request });\n    return {\n      timestamp: new Date().toISOString(),\n      user: token?.email || token?.name || 'unknown'\n    };\n  } catch (error) {\n    return {\n      timestamp: new Date().toISOString(),\n      user: 'unknown'\n    };\n  }\n}\n\n/**\n * Validate the API key, secret, timestamp, and signature.\n * Returns `NextResponse` if validation fails, otherwise `null`.\n */\nexport async function validateApiKey(request: NextRequest) {\n  const { timestamp, user } = await getCurrentUserInfo(request);\n  \n  try {\n    const apiKey = request.headers.get('x-api-key');\n    const apiSecret = request.headers.get('x-api-secret');\n    const requestTimestamp = request.headers.get('x-timestamp');\n    const signature = request.headers.get('x-signature');\n\n    if (!apiKey || !apiSecret || !requestTimestamp || !signature) {\n      logger.security('Missing authentication headers', {\n        timestamp,\n        user\n      });\n\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Missing authentication headers',\n          timestamp\n        }),\n        { status: 401 }\n      );\n    }\n\n    await connectToDatabase();\n\n    const key = await ApiKeyModel.findOne({\n      key: apiKey,\n      isActive: true,\n    });\n\n    if (!key) {\n      logger.security('Invalid API key', {\n        apiKey,\n        timestamp,\n        user\n      });\n\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Invalid API key',\n          timestamp\n        }),\n        { status: 401 }\n      );\n    }\n\n    // Check if timestamp is within 5 minutes\n    const requestTime = new Date(requestTimestamp);\n    const now = new Date();\n    const timeDiff = Math.abs(now.getTime() - requestTime.getTime());\n    if (timeDiff > 5 * 60 * 1000) {\n      logger.security('Request timestamp expired', {\n        apiKey,\n        requestTime,\n        timestamp,\n        user\n      });\n\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Request timestamp expired',\n          timestamp\n        }),\n        { status: 401 }\n      );\n    }\n\n    // Verify signature\n    const expectedSignature = crypto\n      .createHmac('sha256', key.secret)\n      .update(`${apiKey}${requestTimestamp}`)\n      .digest('hex');\n\n    if (signature !== expectedSignature) {\n      logger.security('Invalid signature', {\n        apiKey,\n        timestamp,\n        user\n      });\n\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Invalid signature',\n          timestamp\n        }),\n        { status: 401 }\n      );\n    }\n\n    // Update last used timestamp\n    await ApiKeyModel.findByIdAndUpdate(key._id, {\n      lastUsed: now,\n      updatedAt: now,\n      updatedBy: user\n    });\n\n    return null;\n  } catch (error) {\n    logger.error(new Error('API key validation error'), {\n      error: error instanceof Error ? error.message : String(error),\n      timestamp,\n      user\n    });\n\n    return new NextResponse(\n      JSON.stringify({\n        success: false,\n        error: 'Authentication error',\n        timestamp\n      }),\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Validate required permissions for an API key.\n */\nexport function validatePermissions(requiredPermissions: string[]) {\n  return async (request: NextRequest) => {\n    const { timestamp, user } = await getCurrentUserInfo(request);\n    \n    try {\n      const apiKey = request.headers.get('x-api-key');\n\n      if (!apiKey) {\n        logger.security('Missing API key', {\n          timestamp,\n          user\n        });\n\n        return new NextResponse(\n          JSON.stringify({\n            success: false,\n            error: 'API key required',\n            timestamp\n          }),\n          { status: 401 }\n        );\n      }\n\n      await connectToDatabase();\n\n      const key = await ApiKeyModel.findOne({ key: apiKey });\n\n      if (!key) {\n        logger.security('Invalid API key', {\n          apiKey,\n          timestamp,\n          user\n        });\n\n        return new NextResponse(\n          JSON.stringify({\n            success: false,\n            error: 'Invalid API key',\n            timestamp\n          }),\n          { status: 401 }\n        );\n      }\n\n      const hasPermission = requiredPermissions.every((permission) => {\n        return key.permissions.includes(permission.toLowerCase());\n      });\n\n      if (!hasPermission) {\n        logger.security('Insufficient permissions', {\n          apiKey,\n          requiredPermissions,\n          providedPermissions: key.permissions,\n          timestamp,\n          user\n        });\n\n        return new NextResponse(\n          JSON.stringify({\n            success: false,\n            error: 'Insufficient permissions',\n            timestamp\n          }),\n          { status: 403 }\n        );\n      }\n\n      return null;\n    } catch (error) {\n      logger.error(new Error('Permission validation error'), {\n        error: error instanceof Error ? error.message : String(error),\n        timestamp,\n        user\n      });\n\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Permission validation error',\n          timestamp\n        }),\n        { status: 500 }\n      );\n    }\n  };\n}\n\n/**\n * CORS Middleware\n */\nexport async function cors() {\n  const headersList = await headers();\n  const origin = headersList.get('origin') || '*';\n\n  return {\n    'Access-Control-Allow-Origin': origin,\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-api-key, x-api-secret, x-timestamp, x-signature',\n    'Access-Control-Allow-Credentials': 'true',\n    'Access-Control-Max-Age': '86400',\n  };\n}"],
      names: ["cors", "validateApiKey", "validatePermissions", "getCurrentUserInfo", "request", "token", "getToken", "req", "timestamp", "Date", "toISOString", "user", "email", "name", "error", "apiKey", "headers", "get", "apiSecret", "requestTimestamp", "signature", "logger", "security", "NextResponse", "JSON", "stringify", "success", "status", "connectToDatabase", "key", "ApiKeyModel", "findOne", "isActive", "requestTime", "now", "timeDiff", "Math", "abs", "getTime", "expectedSignature", "crypto", "createHmac", "secret", "update", "digest", "findByIdAndUpdate", "_id", "lastUsed", "updatedAt", "updatedBy", "Error", "message", "String", "requiredPermissions", "hasPermission", "every", "permission", "permissions", "includes", "toLowerCase", "providedPermissions", "headersList", "origin"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ef6b9311b0890b90736fdb866333a04254e99916"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vr42f0cgp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vr42f0cgp();
cov_1vr42f0cgp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1vr42f0cgp().f[0]++;
  cov_1vr42f0cgp().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1vr42f0cgp().s[3]++;
_export(exports, {
  cors: function () {
    /* istanbul ignore next */
    cov_1vr42f0cgp().f[1]++;
    cov_1vr42f0cgp().s[4]++;
    return cors;
  },
  validateApiKey: function () {
    /* istanbul ignore next */
    cov_1vr42f0cgp().f[2]++;
    cov_1vr42f0cgp().s[5]++;
    return validateApiKey;
  },
  validatePermissions: function () {
    /* istanbul ignore next */
    cov_1vr42f0cgp().f[3]++;
    cov_1vr42f0cgp().s[6]++;
    return validatePermissions;
  }
});
const _server =
/* istanbul ignore next */
(cov_1vr42f0cgp().s[7]++, require("next/server"));
const _db =
/* istanbul ignore next */
(cov_1vr42f0cgp().s[8]++, require("../../db"));
const _apikeymodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_1vr42f0cgp().s[9]++, _interop_require_default(require("../../db/models/api-key.model")));
const _crypto =
/* istanbul ignore next */
(/*#__PURE__*/cov_1vr42f0cgp().s[10]++, _interop_require_default(require("crypto")));
const _headers =
/* istanbul ignore next */
(cov_1vr42f0cgp().s[11]++, require("next/headers"));
const _logging =
/* istanbul ignore next */
(cov_1vr42f0cgp().s[12]++, require("../services/logging"));
const _jwt =
/* istanbul ignore next */
(cov_1vr42f0cgp().s[13]++, require("next-auth/jwt"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1vr42f0cgp().f[4]++;
  cov_1vr42f0cgp().s[14]++;
  return /* istanbul ignore next */(cov_1vr42f0cgp().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1vr42f0cgp().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1vr42f0cgp().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1vr42f0cgp().b[0][1]++, {
    default: obj
  });
}
// Helper function to get current user info
async function getCurrentUserInfo(request) {
  /* istanbul ignore next */
  cov_1vr42f0cgp().f[5]++;
  cov_1vr42f0cgp().s[15]++;
  try {
    const token =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[16]++, await (0, _jwt.getToken)({
      req: request
    }));
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[17]++;
    return {
      timestamp: new Date().toISOString(),
      user:
      /* istanbul ignore next */
      (cov_1vr42f0cgp().b[2][0]++, token?.email) ||
      /* istanbul ignore next */
      (cov_1vr42f0cgp().b[2][1]++, token?.name) ||
      /* istanbul ignore next */
      (cov_1vr42f0cgp().b[2][2]++, 'unknown')
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[18]++;
    return {
      timestamp: new Date().toISOString(),
      user: 'unknown'
    };
  }
}
async function validateApiKey(request) {
  /* istanbul ignore next */
  cov_1vr42f0cgp().f[6]++;
  const {
    timestamp,
    user
  } =
  /* istanbul ignore next */
  (cov_1vr42f0cgp().s[19]++, await getCurrentUserInfo(request));
  /* istanbul ignore next */
  cov_1vr42f0cgp().s[20]++;
  try {
    const apiKey =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[21]++, request.headers.get('x-api-key'));
    const apiSecret =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[22]++, request.headers.get('x-api-secret'));
    const requestTimestamp =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[23]++, request.headers.get('x-timestamp'));
    const signature =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[24]++, request.headers.get('x-signature'));
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_1vr42f0cgp().b[4][0]++, !apiKey) ||
    /* istanbul ignore next */
    (cov_1vr42f0cgp().b[4][1]++, !apiSecret) ||
    /* istanbul ignore next */
    (cov_1vr42f0cgp().b[4][2]++, !requestTimestamp) ||
    /* istanbul ignore next */
    (cov_1vr42f0cgp().b[4][3]++, !signature)) {
      /* istanbul ignore next */
      cov_1vr42f0cgp().b[3][0]++;
      cov_1vr42f0cgp().s[26]++;
      _logging.logger.security('Missing authentication headers', {
        timestamp,
        user
      });
      /* istanbul ignore next */
      cov_1vr42f0cgp().s[27]++;
      return new _server.NextResponse(JSON.stringify({
        success: false,
        error: 'Missing authentication headers',
        timestamp
      }), {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vr42f0cgp().b[3][1]++;
    }
    cov_1vr42f0cgp().s[28]++;
    await (0, _db.connectToDatabase)();
    const key =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[29]++, await _apikeymodel.default.findOne({
      key: apiKey,
      isActive: true
    }));
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[30]++;
    if (!key) {
      /* istanbul ignore next */
      cov_1vr42f0cgp().b[5][0]++;
      cov_1vr42f0cgp().s[31]++;
      _logging.logger.security('Invalid API key', {
        apiKey,
        timestamp,
        user
      });
      /* istanbul ignore next */
      cov_1vr42f0cgp().s[32]++;
      return new _server.NextResponse(JSON.stringify({
        success: false,
        error: 'Invalid API key',
        timestamp
      }), {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vr42f0cgp().b[5][1]++;
    }
    // Check if timestamp is within 5 minutes
    const requestTime =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[33]++, new Date(requestTimestamp));
    const now =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[34]++, new Date());
    const timeDiff =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[35]++, Math.abs(now.getTime() - requestTime.getTime()));
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[36]++;
    if (timeDiff > 5 * 60 * 1000) {
      /* istanbul ignore next */
      cov_1vr42f0cgp().b[6][0]++;
      cov_1vr42f0cgp().s[37]++;
      _logging.logger.security('Request timestamp expired', {
        apiKey,
        requestTime,
        timestamp,
        user
      });
      /* istanbul ignore next */
      cov_1vr42f0cgp().s[38]++;
      return new _server.NextResponse(JSON.stringify({
        success: false,
        error: 'Request timestamp expired',
        timestamp
      }), {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vr42f0cgp().b[6][1]++;
    }
    // Verify signature
    const expectedSignature =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[39]++, _crypto.default.createHmac('sha256', key.secret).update(`${apiKey}${requestTimestamp}`).digest('hex'));
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[40]++;
    if (signature !== expectedSignature) {
      /* istanbul ignore next */
      cov_1vr42f0cgp().b[7][0]++;
      cov_1vr42f0cgp().s[41]++;
      _logging.logger.security('Invalid signature', {
        apiKey,
        timestamp,
        user
      });
      /* istanbul ignore next */
      cov_1vr42f0cgp().s[42]++;
      return new _server.NextResponse(JSON.stringify({
        success: false,
        error: 'Invalid signature',
        timestamp
      }), {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vr42f0cgp().b[7][1]++;
    }
    // Update last used timestamp
    cov_1vr42f0cgp().s[43]++;
    await _apikeymodel.default.findByIdAndUpdate(key._id, {
      lastUsed: now,
      updatedAt: now,
      updatedBy: user
    });
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[44]++;
    return null;
  } catch (error) {
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[45]++;
    _logging.logger.error(new Error('API key validation error'), {
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1vr42f0cgp().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1vr42f0cgp().b[8][1]++, String(error)),
      timestamp,
      user
    });
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[46]++;
    return new _server.NextResponse(JSON.stringify({
      success: false,
      error: 'Authentication error',
      timestamp
    }), {
      status: 500
    });
  }
}
function validatePermissions(requiredPermissions) {
  /* istanbul ignore next */
  cov_1vr42f0cgp().f[7]++;
  cov_1vr42f0cgp().s[47]++;
  return async request => {
    /* istanbul ignore next */
    cov_1vr42f0cgp().f[8]++;
    const {
      timestamp,
      user
    } =
    /* istanbul ignore next */
    (cov_1vr42f0cgp().s[48]++, await getCurrentUserInfo(request));
    /* istanbul ignore next */
    cov_1vr42f0cgp().s[49]++;
    try {
      const apiKey =
      /* istanbul ignore next */
      (cov_1vr42f0cgp().s[50]++, request.headers.get('x-api-key'));
      /* istanbul ignore next */
      cov_1vr42f0cgp().s[51]++;
      if (!apiKey) {
        /* istanbul ignore next */
        cov_1vr42f0cgp().b[9][0]++;
        cov_1vr42f0cgp().s[52]++;
        _logging.logger.security('Missing API key', {
          timestamp,
          user
        });
        /* istanbul ignore next */
        cov_1vr42f0cgp().s[53]++;
        return new _server.NextResponse(JSON.stringify({
          success: false,
          error: 'API key required',
          timestamp
        }), {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_1vr42f0cgp().b[9][1]++;
      }
      cov_1vr42f0cgp().s[54]++;
      await (0, _db.connectToDatabase)();
      const key =
      /* istanbul ignore next */
      (cov_1vr42f0cgp().s[55]++, await _apikeymodel.default.findOne({
        key: apiKey
      }));
      /* istanbul ignore next */
      cov_1vr42f0cgp().s[56]++;
      if (!key) {
        /* istanbul ignore next */
        cov_1vr42f0cgp().b[10][0]++;
        cov_1vr42f0cgp().s[57]++;
        _logging.logger.security('Invalid API key', {
          apiKey,
          timestamp,
          user
        });
        /* istanbul ignore next */
        cov_1vr42f0cgp().s[58]++;
        return new _server.NextResponse(JSON.stringify({
          success: false,
          error: 'Invalid API key',
          timestamp
        }), {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_1vr42f0cgp().b[10][1]++;
      }
      const hasPermission =
      /* istanbul ignore next */
      (cov_1vr42f0cgp().s[59]++, requiredPermissions.every(permission => {
        /* istanbul ignore next */
        cov_1vr42f0cgp().f[9]++;
        cov_1vr42f0cgp().s[60]++;
        return key.permissions.includes(permission.toLowerCase());
      }));
      /* istanbul ignore next */
      cov_1vr42f0cgp().s[61]++;
      if (!hasPermission) {
        /* istanbul ignore next */
        cov_1vr42f0cgp().b[11][0]++;
        cov_1vr42f0cgp().s[62]++;
        _logging.logger.security('Insufficient permissions', {
          apiKey,
          requiredPermissions,
          providedPermissions: key.permissions,
          timestamp,
          user
        });
        /* istanbul ignore next */
        cov_1vr42f0cgp().s[63]++;
        return new _server.NextResponse(JSON.stringify({
          success: false,
          error: 'Insufficient permissions',
          timestamp
        }), {
          status: 403
        });
      } else
      /* istanbul ignore next */
      {
        cov_1vr42f0cgp().b[11][1]++;
      }
      cov_1vr42f0cgp().s[64]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_1vr42f0cgp().s[65]++;
      _logging.logger.error(new Error('Permission validation error'), {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1vr42f0cgp().b[12][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1vr42f0cgp().b[12][1]++, String(error)),
        timestamp,
        user
      });
      /* istanbul ignore next */
      cov_1vr42f0cgp().s[66]++;
      return new _server.NextResponse(JSON.stringify({
        success: false,
        error: 'Permission validation error',
        timestamp
      }), {
        status: 500
      });
    }
  };
}
async function cors() {
  /* istanbul ignore next */
  cov_1vr42f0cgp().f[10]++;
  const headersList =
  /* istanbul ignore next */
  (cov_1vr42f0cgp().s[67]++, await (0, _headers.headers)());
  const origin =
  /* istanbul ignore next */
  (cov_1vr42f0cgp().s[68]++,
  /* istanbul ignore next */
  (cov_1vr42f0cgp().b[13][0]++, headersList.get('origin')) ||
  /* istanbul ignore next */
  (cov_1vr42f0cgp().b[13][1]++, '*'));
  /* istanbul ignore next */
  cov_1vr42f0cgp().s[69]++;
  return {
    'Access-Control-Allow-Origin': origin,
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-api-key, x-api-secret, x-timestamp, x-signature',
    'Access-Control-Allow-Credentials': 'true',
    'Access-Control-Max-Age': '86400'
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,