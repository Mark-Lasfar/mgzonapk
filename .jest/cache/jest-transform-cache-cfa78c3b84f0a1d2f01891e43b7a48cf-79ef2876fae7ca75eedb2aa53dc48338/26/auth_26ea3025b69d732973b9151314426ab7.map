{"version":3,"names":["cors","cov_1vr42f0cgp","f","s","validateApiKey","validatePermissions","getCurrentUserInfo","request","token","_jwt","getToken","req","timestamp","Date","toISOString","user","b","email","name","error","apiKey","headers","get","apiSecret","requestTimestamp","signature","_logging","logger","security","_server","NextResponse","JSON","stringify","success","status","_db","connectToDatabase","key","_apikeymodel","default","findOne","isActive","requestTime","now","timeDiff","Math","abs","getTime","expectedSignature","_crypto","createHmac","secret","update","digest","findByIdAndUpdate","_id","lastUsed","updatedAt","updatedBy","Error","message","String","requiredPermissions","hasPermission","every","permission","permissions","includes","toLowerCase","providedPermissions","headersList","_headers","origin"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/middleware/auth.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport ApiKeyModel from '@/lib/db/models/api-key.model';\nimport crypto from 'crypto';\nimport { headers } from 'next/headers';\nimport { logger } from '../services/logging';\nimport { getToken } from 'next-auth/jwt';\n\n// Helper function to get current user info\nasync function getCurrentUserInfo(request: NextRequest) {\n  try {\n    const token = await getToken({ req: request });\n    return {\n      timestamp: new Date().toISOString(),\n      user: token?.email || token?.name || 'unknown'\n    };\n  } catch (error) {\n    return {\n      timestamp: new Date().toISOString(),\n      user: 'unknown'\n    };\n  }\n}\n\n/**\n * Validate the API key, secret, timestamp, and signature.\n * Returns `NextResponse` if validation fails, otherwise `null`.\n */\nexport async function validateApiKey(request: NextRequest) {\n  const { timestamp, user } = await getCurrentUserInfo(request);\n  \n  try {\n    const apiKey = request.headers.get('x-api-key');\n    const apiSecret = request.headers.get('x-api-secret');\n    const requestTimestamp = request.headers.get('x-timestamp');\n    const signature = request.headers.get('x-signature');\n\n    if (!apiKey || !apiSecret || !requestTimestamp || !signature) {\n      logger.security('Missing authentication headers', {\n        timestamp,\n        user\n      });\n\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Missing authentication headers',\n          timestamp\n        }),\n        { status: 401 }\n      );\n    }\n\n    await connectToDatabase();\n\n    const key = await ApiKeyModel.findOne({\n      key: apiKey,\n      isActive: true,\n    });\n\n    if (!key) {\n      logger.security('Invalid API key', {\n        apiKey,\n        timestamp,\n        user\n      });\n\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Invalid API key',\n          timestamp\n        }),\n        { status: 401 }\n      );\n    }\n\n    // Check if timestamp is within 5 minutes\n    const requestTime = new Date(requestTimestamp);\n    const now = new Date();\n    const timeDiff = Math.abs(now.getTime() - requestTime.getTime());\n    if (timeDiff > 5 * 60 * 1000) {\n      logger.security('Request timestamp expired', {\n        apiKey,\n        requestTime,\n        timestamp,\n        user\n      });\n\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Request timestamp expired',\n          timestamp\n        }),\n        { status: 401 }\n      );\n    }\n\n    // Verify signature\n    const expectedSignature = crypto\n      .createHmac('sha256', key.secret)\n      .update(`${apiKey}${requestTimestamp}`)\n      .digest('hex');\n\n    if (signature !== expectedSignature) {\n      logger.security('Invalid signature', {\n        apiKey,\n        timestamp,\n        user\n      });\n\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Invalid signature',\n          timestamp\n        }),\n        { status: 401 }\n      );\n    }\n\n    // Update last used timestamp\n    await ApiKeyModel.findByIdAndUpdate(key._id, {\n      lastUsed: now,\n      updatedAt: now,\n      updatedBy: user\n    });\n\n    return null;\n  } catch (error) {\n    logger.error(new Error('API key validation error'), {\n      error: error instanceof Error ? error.message : String(error),\n      timestamp,\n      user\n    });\n\n    return new NextResponse(\n      JSON.stringify({\n        success: false,\n        error: 'Authentication error',\n        timestamp\n      }),\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Validate required permissions for an API key.\n */\nexport function validatePermissions(requiredPermissions: string[]) {\n  return async (request: NextRequest) => {\n    const { timestamp, user } = await getCurrentUserInfo(request);\n    \n    try {\n      const apiKey = request.headers.get('x-api-key');\n\n      if (!apiKey) {\n        logger.security('Missing API key', {\n          timestamp,\n          user\n        });\n\n        return new NextResponse(\n          JSON.stringify({\n            success: false,\n            error: 'API key required',\n            timestamp\n          }),\n          { status: 401 }\n        );\n      }\n\n      await connectToDatabase();\n\n      const key = await ApiKeyModel.findOne({ key: apiKey });\n\n      if (!key) {\n        logger.security('Invalid API key', {\n          apiKey,\n          timestamp,\n          user\n        });\n\n        return new NextResponse(\n          JSON.stringify({\n            success: false,\n            error: 'Invalid API key',\n            timestamp\n          }),\n          { status: 401 }\n        );\n      }\n\n      const hasPermission = requiredPermissions.every((permission) => {\n        return key.permissions.includes(permission.toLowerCase());\n      });\n\n      if (!hasPermission) {\n        logger.security('Insufficient permissions', {\n          apiKey,\n          requiredPermissions,\n          providedPermissions: key.permissions,\n          timestamp,\n          user\n        });\n\n        return new NextResponse(\n          JSON.stringify({\n            success: false,\n            error: 'Insufficient permissions',\n            timestamp\n          }),\n          { status: 403 }\n        );\n      }\n\n      return null;\n    } catch (error) {\n      logger.error(new Error('Permission validation error'), {\n        error: error instanceof Error ? error.message : String(error),\n        timestamp,\n        user\n      });\n\n      return new NextResponse(\n        JSON.stringify({\n          success: false,\n          error: 'Permission validation error',\n          timestamp\n        }),\n        { status: 500 }\n      );\n    }\n  };\n}\n\n/**\n * CORS Middleware\n */\nexport async function cors() {\n  const headersList = await headers();\n  const origin = headersList.get('origin') || '*';\n\n  return {\n    'Access-Control-Allow-Origin': origin,\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-api-key, x-api-secret, x-timestamp, x-signature',\n    'Access-Control-Allow-Credentials': 'true',\n    'Access-Control-Max-Age': '86400',\n  };\n}"],"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","ignoreList":[]}