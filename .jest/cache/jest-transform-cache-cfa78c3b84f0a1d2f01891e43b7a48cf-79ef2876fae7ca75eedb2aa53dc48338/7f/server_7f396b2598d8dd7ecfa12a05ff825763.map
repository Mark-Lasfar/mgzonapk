{"version":3,"names":["cov_4qwonq4qo","actualCoverage","s","TrackingWebSocketServer","constructor","server","f","clients","Map","wss","_ws","Server","noServer","on","request","socket","head","pathname","query","_url","parse","url","b","authError","_auth","validateApiKey","headers","Headers","apiKey","write","destroy","handleUpgrade","ws","emit","error","_logging","logger","userId","has","set","Set","get","add","delete","size","send","JSON","stringify","type","status","timestamp","Date","toISOString","broadcastToUser","data","userClients","message","forEach","client","readyState","WebSocket","OPEN"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/websocket/server.ts"],"sourcesContent":["import { Server as WebSocketServer } from 'ws';\nimport { Server as HTTPServer } from 'http';\nimport { parse } from 'url';\nimport { validateApiKey } from '../middleware/auth';\nimport { logger } from '../services/logging';\n\nexport class TrackingWebSocketServer {\n  private wss: WebSocketServer;\n  private clients: Map<string, Set<WebSocket>> = new Map();\n\n  constructor(server: HTTPServer) {\n    this.wss = new WebSocketServer({ noServer: true });\n    \n    server.on('upgrade', async (request, socket, head) => {\n      try {\n        const { pathname, query } = parse(request.url!, true);\n        \n        if (pathname === '/api/v1/tracking') {\n          // Validate API key from query\n          const authError = await validateApiKey({\n            headers: new Headers({ 'x-api-key': query.apiKey as string })\n          });\n\n          if (authError) {\n            socket.write('HTTP/1.1 401 Unauthorized\\r\\n\\r\\n');\n            socket.destroy();\n            return;\n          }\n\n          this.wss.handleUpgrade(request, socket, head, (ws) => {\n            this.wss.emit('connection', ws, request);\n          });\n        }\n      } catch (error) {\n        logger.error('WebSocket upgrade error:', error);\n        socket.destroy();\n      }\n    });\n\n    this.wss.on('connection', (ws, request) => {\n      const { query } = parse(request.url!, true);\n      const userId = query.userId as string;\n\n      if (!this.clients.has(userId)) {\n        this.clients.set(userId, new Set());\n      }\n      this.clients.get(userId)!.add(ws);\n\n      ws.on('close', () => {\n        this.clients.get(userId)?.delete(ws);\n        if (this.clients.get(userId)?.size === 0) {\n          this.clients.delete(userId);\n        }\n      });\n\n      // Send initial connection success message\n      ws.send(JSON.stringify({\n        type: 'connection',\n        status: 'connected',\n        timestamp: new Date().toISOString()\n      }));\n    });\n  }\n\n  public broadcastToUser(userId: string, data: any) {\n    const userClients = this.clients.get(userId);\n    if (userClients) {\n      const message = JSON.stringify(data);\n      userClients.forEach(client => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(message);\n        }\n      });\n    }\n  }\n}"],"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","ignoreList":[]}