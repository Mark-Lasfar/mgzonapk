{"version":3,"names":["RecommendationService","openai","cov_1abs7a46np","s","_openai","OpenAI","apiKey","process","env","OPENAI_API_KEY","getPersonalizedRecommendations","userId","limit","b","f","_db","connectToDatabase","orders","_ordermodel","default","find","isPaid","populate","purchasedProducts","flatMap","order","items","map","item","name","category","price","userPreferences","generateUserPreferences","recommendedProducts","getSimilarProducts","p","success","data","error","message","getTrendingProducts","match","trending","aggregate","$match","$unwind","$group","_id","totalSales","$sum","totalRevenue","$multiply","$sort","$limit","$lookup","from","localField","foreignField","as","$project","prompt","JSON","stringify","completion","chat","completions","create","model","messages","role","content","parse","choices","excludeProducts","query","$nin","isPublished","categories","length","$in","priceRange","$gte","min","$lte","max","products","_productmodel","sort","avgRating","generateProductDescription","product"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/services/ai/recommendations.ts"],"sourcesContent":["import { OpenAI } from 'openai'\nimport { connectToDatabase } from '@/lib/db'\nimport Product from '@/lib/db/models/product.model'\nimport Order from '@/lib/db/models/order.model'\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n})\n\nexport class RecommendationService {\n  async getPersonalizedRecommendations(userId: string, limit = 10) {\n    try {\n      await connectToDatabase()\n\n      // Get user's purchase history\n      const orders = await Order.find({ \n        userId, \n        isPaid: true \n      }).populate('items.product')\n\n      // Extract product details and categories\n      const purchasedProducts = orders.flatMap(order => \n        order.items.map(item => ({\n          name: item.name,\n          category: item.category,\n          price: item.price\n        }))\n      )\n\n      // Generate embedding for user preferences\n      const userPreferences = await this.generateUserPreferences(purchasedProducts)\n\n      // Get similar products\n      const recommendedProducts = await this.getSimilarProducts(\n        userPreferences,\n        purchasedProducts.map(p => p.name),\n        limit\n      )\n\n      return { success: true, data: recommendedProducts }\n    } catch (error) {\n      return { success: false, error: error.message }\n    }\n  }\n\n  async getTrendingProducts(category?: string, limit = 10) {\n    try {\n      await connectToDatabase()\n\n      const match = category ? { category } : {}\n      \n      const trending = await Order.aggregate([\n        { $match: { isPaid: true } },\n        { $unwind: '$items' },\n        {\n          $group: {\n            _id: '$items.product',\n            totalSales: { $sum: '$items.quantity' },\n            totalRevenue: { $sum: { $multiply: ['$items.price', '$items.quantity'] } }\n          }\n        },\n        { $sort: { totalSales: -1 } },\n        { $limit: limit },\n        {\n          $lookup: {\n            from: 'products',\n            localField: '_id',\n            foreignField: '_id',\n            as: 'product'\n          }\n        },\n        { $unwind: '$product' },\n        {\n          $project: {\n            _id: '$product._id',\n            name: '$product.name',\n            category: '$product.category',\n            price: '$product.price',\n            totalSales: 1,\n            totalRevenue: 1\n          }\n        }\n      ])\n\n      return { success: true, data: trending }\n    } catch (error) {\n      return { success: false, error: error.message }\n    }\n  }\n\n  private async generateUserPreferences(purchasedProducts: any[]) {\n    const prompt = `\n      Analyze these purchased products and create a user preference profile:\n      ${JSON.stringify(purchasedProducts)}\n      \n      Consider:\n      1. Preferred categories\n      2. Price range\n      3. Style preferences\n      4. Brand preferences\n      \n      Return the analysis as a concise JSON object.\n    `\n\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [{ role: \"user\", content: prompt }],\n    })\n\n    return JSON.parse(completion.choices[0].message.content)\n  }\n\n  private async getSimilarProducts(\n    userPreferences: any,\n    excludeProducts: string[],\n    limit: number\n  ) {\n    const query: any = {\n      name: { $nin: excludeProducts },\n      isPublished: true,\n    }\n\n    if (userPreferences.categories?.length) {\n      query.category = { $in: userPreferences.categories }\n    }\n\n    if (userPreferences.priceRange) {\n      query.price = {\n        $gte: userPreferences.priceRange.min,\n        $lte: userPreferences.priceRange.max,\n      }\n    }\n\n    const products = await Product.find(query)\n      .sort({ avgRating: -1 })\n      .limit(limit)\n\n    return products\n  }\n\n  async generateProductDescription(\n    product: {\n      name: string\n      category: string\n      features: string[]\n      specifications: any\n    }\n  ) {\n    const prompt = `\n      Generate an engaging product description for:\n      ${JSON.stringify(product)}\n      \n      Include:\n      1. Compelling opening\n      2. Key features and benefits\n      3. Technical specifications\n      4. Ideal use cases\n      5. Call to action\n      \n      Make it persuasive but honest, around 200 words.\n    `\n\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [{ role: \"user\", content: prompt }],\n    })\n\n    return completion.choices[0].message.content\n  }\n}"],"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","ignoreList":[]}