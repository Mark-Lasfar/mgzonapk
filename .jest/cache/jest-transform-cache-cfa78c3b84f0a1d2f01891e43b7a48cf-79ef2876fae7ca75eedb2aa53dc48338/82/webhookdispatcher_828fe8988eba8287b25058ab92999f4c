b13f94affea30108af996ea5c79d791b
"use strict";

/* istanbul ignore next */
function cov_1sgt6cty7u() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/webhook-dispatcher.ts";
  var hash = "0fdcc4214d8da7580a458701e61b12d9c944dee6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/webhook-dispatcher.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "3": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 40
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 46
        }
      },
      "5": {
        start: {
          line: 13,
          column: 29
        },
        end: {
          line: 13,
          column: 71
        }
      },
      "6": {
        start: {
          line: 14,
          column: 30
        },
        end: {
          line: 14,
          column: 73
        }
      },
      "7": {
        start: {
          line: 15,
          column: 36
        },
        end: {
          line: 15,
          column: 99
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "9": {
        start: {
          line: 21,
          column: 26
        },
        end: {
          line: 21,
          column: 48
        }
      },
      "10": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 34
        }
      },
      "11": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 59
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 58
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 30
        }
      },
      "14": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "16": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "17": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 26
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "19": {
        start: {
          line: 48,
          column: 34
        },
        end: {
          line: 48,
          column: 80
        }
      },
      "20": {
        start: {
          line: 49,
          column: 35
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "21": {
        start: {
          line: 55,
          column: 37
        },
        end: {
          line: 97,
          column: 14
        }
      },
      "22": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 96,
          column: 17
        }
      },
      "23": {
        start: {
          line: 58,
          column: 37
        },
        end: {
          line: 58,
          column: 80
        }
      },
      "24": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 62,
          column: 21
        }
      },
      "25": {
        start: {
          line: 60,
          column: 24
        },
        end: {
          line: 60,
          column: 75
        }
      },
      "26": {
        start: {
          line: 61,
          column: 24
        },
        end: {
          line: 61,
          column: 31
        }
      },
      "27": {
        start: {
          line: 64,
          column: 37
        },
        end: {
          line: 72,
          column: 22
        }
      },
      "28": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 85,
          column: 21
        }
      },
      "29": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 70
        }
      },
      "30": {
        start: {
          line: 76,
          column: 24
        },
        end: {
          line: 82,
          column: 27
        }
      },
      "31": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 86
        }
      },
      "32": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 87,
          column: 62
        }
      },
      "33": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 95,
          column: 23
        }
      },
      "34": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 48
        }
      },
      "35": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "36": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 24
        }
      },
      "37": {
        start: {
          line: 111,
          column: 22
        },
        end: {
          line: 111,
          column: 49
        }
      },
      "38": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 112,
          column: 70
        }
      },
      "39": {
        start: {
          line: 113,
          column: 30
        },
        end: {
          line: 113,
          column: 50
        }
      },
      "40": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 70
        }
      },
      "41": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 106
        }
      },
      "42": {
        start: {
          line: 120,
          column: 22
        },
        end: {
          line: 120,
          column: 49
        }
      },
      "43": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 69
        }
      },
      "44": {
        start: {
          line: 122,
          column: 22
        },
        end: {
          line: 122,
          column: 42
        }
      },
      "45": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 55
        }
      },
      "46": {
        start: {
          line: 126,
          column: 22
        },
        end: {
          line: 126,
          column: 49
        }
      },
      "47": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 127,
          column: 69
        }
      },
      "48": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 30
        }
      },
      "49": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 53
        }
      },
      "50": {
        start: {
          line: 132,
          column: 22
        },
        end: {
          line: 132,
          column: 49
        }
      },
      "51": {
        start: {
          line: 133,
          column: 20
        },
        end: {
          line: 133,
          column: 69
        }
      },
      "52": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 29
        }
      },
      "53": {
        start: {
          line: 137,
          column: 22
        },
        end: {
          line: 137,
          column: 49
        }
      },
      "54": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 71
        }
      },
      "55": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "56": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "57": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "58": {
        start: {
          line: 154,
          column: 26
        },
        end: {
          line: 154,
          column: 53
        }
      },
      "59": {
        start: {
          line: 155,
          column: 33
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "60": {
        start: {
          line: 163,
          column: 24
        },
        end: {
          line: 163,
          column: 74
        }
      },
      "61": {
        start: {
          line: 164,
          column: 42
        },
        end: {
          line: 164,
          column: 88
        }
      },
      "62": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 168,
          column: 16
        }
      },
      "63": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 175,
          column: 15
        }
      },
      "64": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 32
        }
      },
      "65": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 185,
          column: 15
        }
      },
      "66": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 16,
            column: 9
          },
          end: {
            line: 16,
            column: 33
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 34
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 37
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 54
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 46
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 55,
            column: 55
          },
          end: {
            line: 55,
            column: 56
          }
        },
        loc: {
          start: {
            line: 55,
            column: 77
          },
          end: {
            line: 97,
            column: 13
          }
        },
        line: 55
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 53
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 110
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 46
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 116
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 49
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 119
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 47
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 125
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 51
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 131
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 56
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 136
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 74
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 152
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 17,
            column: 38
          }
        }, {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 19,
            column: 5
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 14
          }
        }, {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 32
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 62,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 62,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 73,
            column: 20
          },
          end: {
            line: 85,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 20
          },
          end: {
            line: 85,
            column: 21
          }
        }, {
          start: {
            line: 83,
            column: 27
          },
          end: {
            line: 85,
            column: 21
          }
        }],
        line: 73
      },
      "5": {
        loc: {
          start: {
            line: 73,
            column: 24
          },
          end: {
            line: 73,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 24
          },
          end: {
            line: 73,
            column: 46
          }
        }, {
          start: {
            line: 73,
            column: 50
          },
          end: {
            line: 73,
            column: 71
          }
        }],
        line: 73
      },
      "6": {
        loc: {
          start: {
            line: 92,
            column: 31
          },
          end: {
            line: 92,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 92,
            column: 56
          },
          end: {
            line: 92,
            column: 69
          }
        }, {
          start: {
            line: 92,
            column: 72
          },
          end: {
            line: 92,
            column: 85
          }
        }],
        line: 92
      },
      "7": {
        loc: {
          start: {
            line: 103,
            column: 23
          },
          end: {
            line: 103,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 48
          },
          end: {
            line: 103,
            column: 61
          }
        }, {
          start: {
            line: 103,
            column: 64
          },
          end: {
            line: 103,
            column: 77
          }
        }],
        line: 103
      },
      "8": {
        loc: {
          start: {
            line: 114,
            column: 15
          },
          end: {
            line: 114,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 31
          },
          end: {
            line: 114,
            column: 64
          }
        }, {
          start: {
            line: 114,
            column: 67
          },
          end: {
            line: 114,
            column: 69
          }
        }],
        line: 114
      },
      "9": {
        loc: {
          start: {
            line: 123,
            column: 15
          },
          end: {
            line: 123,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 23
          },
          end: {
            line: 123,
            column: 50
          }
        }, {
          start: {
            line: 123,
            column: 53
          },
          end: {
            line: 123,
            column: 54
          }
        }],
        line: 123
      },
      "10": {
        loc: {
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 32
          }
        }, {
          start: {
            line: 159,
            column: 36
          },
          end: {
            line: 159,
            column: 38
          }
        }],
        line: 159
      },
      "11": {
        loc: {
          start: {
            line: 182,
            column: 23
          },
          end: {
            line: 182,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 48
          },
          end: {
            line: 182,
            column: 61
          }
        }, {
          start: {
            line: 182,
            column: 64
          },
          end: {
            line: 182,
            column: 77
          }
        }],
        line: 182
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/webhook-dispatcher.ts"],
      sourcesContent: ["import { Redis } from '@upstash/redis';\nimport { logger } from './services/logging';\nimport axios from 'axios';\nimport crypto from 'crypto';\nimport Webhook from '../db/models/webhook.model';\n\nconst CURRENT_TIMESTAMP = '2025-04-27T12:24:36Z';\nconst CURRENT_USER = 'Mark-Lasfar';\n\nexport class WebhookDispatcher {\n  private static redis: Redis;\n  private static readonly WEBHOOK_KEY_PREFIX = 'webhook:subscriptions:';\n  private static readonly WEBHOOK_FAILURE_PREFIX = 'webhook:failures:';\n  private static readonly MAX_FAILURES = 3;\n  private static readonly FAILURE_WINDOW = 3600; // 1 hour in seconds\n\n  private static async getRedisClient() {\n    if (!this.redis) {\n      this.redis = new Redis({\n        url: process.env.UPSTASH_REDIS_URL!,\n        token: process.env.UPSTASH_REDIS_REST_TOKEN!\n      });\n    }\n    return this.redis;\n  }\n\n  static async dispatch(\n    userId: string,\n    eventType: string,\n    payload: any\n  ): Promise<void> {\n    try {\n      const subscriptions = await this.getSubscriptions(userId, eventType);\n      \n      const webhookPayload = {\n        eventType,\n        timestamp: CURRENT_TIMESTAMP,\n        triggeredBy: CURRENT_USER,\n        data: payload\n      };\n\n      const dispatchPromises = subscriptions.map(async (subscription: { id: string; url: string; secret: string; headers: Record<string, string> }) => {\n        try {\n          // Check failure count\n          const failures = await this.getFailureCount(subscription.id);\n          if (failures >= this.MAX_FAILURES) {\n            await this.deactivateSubscription(subscription.id);\n            return;\n          }\n\n          // Send webhook\n          const response = await axios.post(subscription.url, webhookPayload, {\n            headers: {\n              'Content-Type': 'application/json',\n              'X-Webhook-Timestamp': CURRENT_TIMESTAMP,\n              'X-Webhook-Signature': this.generateSignature(subscription.secret, webhookPayload),\n              ...subscription.headers\n            },\n            timeout: 5000\n          });\n\n          if (response.status >= 200 && response.status < 300) {\n            // Reset failure count on success\n            await this.resetFailureCount(subscription.id);\n\n            logger.info('Webhook dispatched successfully', {\n              userId,\n              eventType,\n              url: subscription.url,\n              timestamp: CURRENT_TIMESTAMP,\n              user: CURRENT_USER\n            });\n          } else {\n            throw new Error(`Webhook returned status ${response.status}`);\n          }\n        } catch (error) {\n          await this.recordFailure(subscription.id);\n          \n          logger.error(new Error('Webhook dispatch failed'), {\n            userId,\n            eventType,\n            url: subscription.url,\n            error: error instanceof Error ? error.message : String(error),\n            timestamp: CURRENT_TIMESTAMP,\n            user: CURRENT_USER\n          });\n        }\n      });\n\n      await Promise.all(dispatchPromises);\n    } catch (error) {\n      logger.error(new Error('Webhook dispatch error'), {\n        userId,\n        eventType,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      throw error;\n    }\n  }\n\n  private static async getSubscriptions(userId: string, eventType: string) {\n    const redis = await this.getRedisClient();\n    const key = `${this.WEBHOOK_KEY_PREFIX}${userId}:${eventType}`;\n    const subscriptions = await redis.get(key);\n    return subscriptions ? JSON.parse(String(subscriptions)) : [];\n  }\n\n  private static generateSignature(secret: string, payload: any): string {\n    return crypto\n      .createHmac('sha256', secret)\n      .update(JSON.stringify(payload))\n      .digest('hex');\n  }\n\n  private static async getFailureCount(subscriptionId: string): Promise<number> {\n    const redis = await this.getRedisClient();\n    const key = `${this.WEBHOOK_FAILURE_PREFIX}${subscriptionId}`;\n    const count = await redis.get(key);\n    return count ? parseInt(String(count), 10) : 0;\n  }\n\n  private static async recordFailure(subscriptionId: string): Promise<void> {\n    const redis = await this.getRedisClient();\n    const key = `${this.WEBHOOK_FAILURE_PREFIX}${subscriptionId}`;\n    await redis.incr(key);\n    await redis.expire(key, this.FAILURE_WINDOW);\n  }\n\n  private static async resetFailureCount(subscriptionId: string): Promise<void> {\n    const redis = await this.getRedisClient();\n    const key = `${this.WEBHOOK_FAILURE_PREFIX}${subscriptionId}`;\n    await redis.del(key);\n  }\n\n  private static async deactivateSubscription(subscriptionId: string): Promise<void> {\n    const redis = await this.getRedisClient();\n    await redis.del(`${this.WEBHOOK_KEY_PREFIX}${subscriptionId}`);\n    await Webhook.findOneAndUpdate({ _id: subscriptionId }, { isActive: false });\n\n    logger.warn('Webhook subscription deactivated due to failures', {\n      subscriptionId,\n      timestamp: CURRENT_TIMESTAMP,\n      user: CURRENT_USER\n    });\n    // Implementation for deactivating webhook subscription\n    // This could involve updating a database record or removing from Redis\n  }\n\n  static async registerWebhook(\n    userId: string,\n    eventType: string,\n    url: string,\n    secret: string,\n    headers?: Record<string, string>\n  ) {\n    try {\n      const redis = await this.getRedisClient();\n\n      const subscription = {\n        id: crypto.randomBytes(16).toString('hex'),\n        url,\n        secret,\n        headers: headers || {},\n        createdAt: CURRENT_TIMESTAMP,\n        createdBy: CURRENT_USER\n      };\n\n      const key = `${this.WEBHOOK_KEY_PREFIX}${userId}:${eventType}`;\n      const existingSubscriptions = await this.getSubscriptions(userId, eventType);\n      \n      await redis.set(\n        key,\n        JSON.stringify([...existingSubscriptions, subscription])\n      );\n\n      logger.info('Webhook subscription registered', {\n        userId,\n        eventType,\n        url,\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n\n      return subscription;\n    } catch (error) {\n      logger.error(new Error('Failed to register webhook'), {\n        userId,\n        eventType,\n        url,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      throw error;\n    }\n  }\n}"],
      names: ["WebhookDispatcher", "CURRENT_TIMESTAMP", "CURRENT_USER", "WEBHOOK_KEY_PREFIX", "WEBHOOK_FAILURE_PREFIX", "MAX_FAILURES", "FAILURE_WINDOW", "getRedisClient", "redis", "Redis", "url", "process", "env", "UPSTASH_REDIS_URL", "token", "UPSTASH_REDIS_REST_TOKEN", "dispatch", "userId", "eventType", "payload", "subscriptions", "getSubscriptions", "webhookPayload", "timestamp", "triggeredBy", "data", "dispatchPromises", "map", "subscription", "failures", "getFailureCount", "id", "deactivateSubscription", "response", "axios", "post", "headers", "generateSignature", "secret", "timeout", "status", "resetFailureCount", "logger", "info", "user", "Error", "error", "recordFailure", "message", "String", "Promise", "all", "key", "get", "JSON", "parse", "crypto", "createHmac", "update", "stringify", "digest", "subscriptionId", "count", "parseInt", "incr", "expire", "del", "Webhook", "findOneAndUpdate", "_id", "isActive", "warn", "registerWebhook", "randomBytes", "toString", "createdAt", "createdBy", "existingSubscriptions", "set"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0fdcc4214d8da7580a458701e61b12d9c944dee6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1sgt6cty7u = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1sgt6cty7u();
cov_1sgt6cty7u().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1sgt6cty7u().s[1]++;
Object.defineProperty(exports, "WebhookDispatcher", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1sgt6cty7u().f[0]++;
    cov_1sgt6cty7u().s[2]++;
    return WebhookDispatcher;
  }
});
const _redis =
/* istanbul ignore next */
(cov_1sgt6cty7u().s[3]++, require("@upstash/redis"));
const _logging =
/* istanbul ignore next */
(cov_1sgt6cty7u().s[4]++, require("./services/logging"));
const _axios =
/* istanbul ignore next */
(/*#__PURE__*/cov_1sgt6cty7u().s[5]++, _interop_require_default(require("axios")));
const _crypto =
/* istanbul ignore next */
(/*#__PURE__*/cov_1sgt6cty7u().s[6]++, _interop_require_default(require("crypto")));
const _webhookmodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_1sgt6cty7u().s[7]++, _interop_require_default(require("../db/models/webhook.model")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1sgt6cty7u().f[1]++;
  cov_1sgt6cty7u().s[8]++;
  return /* istanbul ignore next */(cov_1sgt6cty7u().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1sgt6cty7u().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1sgt6cty7u().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1sgt6cty7u().b[0][1]++, {
    default: obj
  });
}
const CURRENT_TIMESTAMP =
/* istanbul ignore next */
(cov_1sgt6cty7u().s[9]++, '2025-04-27T12:24:36Z');
const CURRENT_USER =
/* istanbul ignore next */
(cov_1sgt6cty7u().s[10]++, 'Mark-Lasfar');
class WebhookDispatcher {
  static {
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[11]++;
    this.WEBHOOK_KEY_PREFIX = 'webhook:subscriptions:';
  }
  static {
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[12]++;
    this.WEBHOOK_FAILURE_PREFIX = 'webhook:failures:';
  }
  static {
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[13]++;
    this.MAX_FAILURES = 3;
  }
  static {
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[14]++;
    this.FAILURE_WINDOW = 3600 // 1 hour in seconds
    ;
  }
  static async getRedisClient() {
    /* istanbul ignore next */
    cov_1sgt6cty7u().f[2]++;
    cov_1sgt6cty7u().s[15]++;
    if (!this.redis) {
      /* istanbul ignore next */
      cov_1sgt6cty7u().b[2][0]++;
      cov_1sgt6cty7u().s[16]++;
      this.redis = new _redis.Redis({
        url: process.env.UPSTASH_REDIS_URL,
        token: process.env.UPSTASH_REDIS_REST_TOKEN
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sgt6cty7u().b[2][1]++;
    }
    cov_1sgt6cty7u().s[17]++;
    return this.redis;
  }
  static async dispatch(userId, eventType, payload) {
    /* istanbul ignore next */
    cov_1sgt6cty7u().f[3]++;
    cov_1sgt6cty7u().s[18]++;
    try {
      const subscriptions =
      /* istanbul ignore next */
      (cov_1sgt6cty7u().s[19]++, await this.getSubscriptions(userId, eventType));
      const webhookPayload =
      /* istanbul ignore next */
      (cov_1sgt6cty7u().s[20]++, {
        eventType,
        timestamp: CURRENT_TIMESTAMP,
        triggeredBy: CURRENT_USER,
        data: payload
      });
      const dispatchPromises =
      /* istanbul ignore next */
      (cov_1sgt6cty7u().s[21]++, subscriptions.map(async subscription => {
        /* istanbul ignore next */
        cov_1sgt6cty7u().f[4]++;
        cov_1sgt6cty7u().s[22]++;
        try {
          // Check failure count
          const failures =
          /* istanbul ignore next */
          (cov_1sgt6cty7u().s[23]++, await this.getFailureCount(subscription.id));
          /* istanbul ignore next */
          cov_1sgt6cty7u().s[24]++;
          if (failures >= this.MAX_FAILURES) {
            /* istanbul ignore next */
            cov_1sgt6cty7u().b[3][0]++;
            cov_1sgt6cty7u().s[25]++;
            await this.deactivateSubscription(subscription.id);
            /* istanbul ignore next */
            cov_1sgt6cty7u().s[26]++;
            return;
          } else
          /* istanbul ignore next */
          {
            cov_1sgt6cty7u().b[3][1]++;
          }
          // Send webhook
          const response =
          /* istanbul ignore next */
          (cov_1sgt6cty7u().s[27]++, await _axios.default.post(subscription.url, webhookPayload, {
            headers: {
              'Content-Type': 'application/json',
              'X-Webhook-Timestamp': CURRENT_TIMESTAMP,
              'X-Webhook-Signature': this.generateSignature(subscription.secret, webhookPayload),
              ...subscription.headers
            },
            timeout: 5000
          }));
          /* istanbul ignore next */
          cov_1sgt6cty7u().s[28]++;
          if (
          /* istanbul ignore next */
          (cov_1sgt6cty7u().b[5][0]++, response.status >= 200) &&
          /* istanbul ignore next */
          (cov_1sgt6cty7u().b[5][1]++, response.status < 300)) {
            /* istanbul ignore next */
            cov_1sgt6cty7u().b[4][0]++;
            cov_1sgt6cty7u().s[29]++;
            // Reset failure count on success
            await this.resetFailureCount(subscription.id);
            /* istanbul ignore next */
            cov_1sgt6cty7u().s[30]++;
            _logging.logger.info('Webhook dispatched successfully', {
              userId,
              eventType,
              url: subscription.url,
              timestamp: CURRENT_TIMESTAMP,
              user: CURRENT_USER
            });
          } else {
            /* istanbul ignore next */
            cov_1sgt6cty7u().b[4][1]++;
            cov_1sgt6cty7u().s[31]++;
            throw new Error(`Webhook returned status ${response.status}`);
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1sgt6cty7u().s[32]++;
          await this.recordFailure(subscription.id);
          /* istanbul ignore next */
          cov_1sgt6cty7u().s[33]++;
          _logging.logger.error(new Error('Webhook dispatch failed'), {
            userId,
            eventType,
            url: subscription.url,
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_1sgt6cty7u().b[6][0]++, error.message) :
            /* istanbul ignore next */
            (cov_1sgt6cty7u().b[6][1]++, String(error)),
            timestamp: CURRENT_TIMESTAMP,
            user: CURRENT_USER
          });
        }
      }));
      /* istanbul ignore next */
      cov_1sgt6cty7u().s[34]++;
      await Promise.all(dispatchPromises);
    } catch (error) {
      /* istanbul ignore next */
      cov_1sgt6cty7u().s[35]++;
      _logging.logger.error(new Error('Webhook dispatch error'), {
        userId,
        eventType,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1sgt6cty7u().b[7][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1sgt6cty7u().b[7][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_1sgt6cty7u().s[36]++;
      throw error;
    }
  }
  static async getSubscriptions(userId, eventType) {
    /* istanbul ignore next */
    cov_1sgt6cty7u().f[5]++;
    const redis =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[37]++, await this.getRedisClient());
    const key =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[38]++, `${this.WEBHOOK_KEY_PREFIX}${userId}:${eventType}`);
    const subscriptions =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[39]++, await redis.get(key));
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[40]++;
    return subscriptions ?
    /* istanbul ignore next */
    (cov_1sgt6cty7u().b[8][0]++, JSON.parse(String(subscriptions))) :
    /* istanbul ignore next */
    (cov_1sgt6cty7u().b[8][1]++, []);
  }
  static generateSignature(secret, payload) {
    /* istanbul ignore next */
    cov_1sgt6cty7u().f[6]++;
    cov_1sgt6cty7u().s[41]++;
    return _crypto.default.createHmac('sha256', secret).update(JSON.stringify(payload)).digest('hex');
  }
  static async getFailureCount(subscriptionId) {
    /* istanbul ignore next */
    cov_1sgt6cty7u().f[7]++;
    const redis =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[42]++, await this.getRedisClient());
    const key =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[43]++, `${this.WEBHOOK_FAILURE_PREFIX}${subscriptionId}`);
    const count =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[44]++, await redis.get(key));
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[45]++;
    return count ?
    /* istanbul ignore next */
    (cov_1sgt6cty7u().b[9][0]++, parseInt(String(count), 10)) :
    /* istanbul ignore next */
    (cov_1sgt6cty7u().b[9][1]++, 0);
  }
  static async recordFailure(subscriptionId) {
    /* istanbul ignore next */
    cov_1sgt6cty7u().f[8]++;
    const redis =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[46]++, await this.getRedisClient());
    const key =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[47]++, `${this.WEBHOOK_FAILURE_PREFIX}${subscriptionId}`);
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[48]++;
    await redis.incr(key);
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[49]++;
    await redis.expire(key, this.FAILURE_WINDOW);
  }
  static async resetFailureCount(subscriptionId) {
    /* istanbul ignore next */
    cov_1sgt6cty7u().f[9]++;
    const redis =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[50]++, await this.getRedisClient());
    const key =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[51]++, `${this.WEBHOOK_FAILURE_PREFIX}${subscriptionId}`);
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[52]++;
    await redis.del(key);
  }
  static async deactivateSubscription(subscriptionId) {
    /* istanbul ignore next */
    cov_1sgt6cty7u().f[10]++;
    const redis =
    /* istanbul ignore next */
    (cov_1sgt6cty7u().s[53]++, await this.getRedisClient());
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[54]++;
    await redis.del(`${this.WEBHOOK_KEY_PREFIX}${subscriptionId}`);
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[55]++;
    await _webhookmodel.default.findOneAndUpdate({
      _id: subscriptionId
    }, {
      isActive: false
    });
    /* istanbul ignore next */
    cov_1sgt6cty7u().s[56]++;
    _logging.logger.warn('Webhook subscription deactivated due to failures', {
      subscriptionId,
      timestamp: CURRENT_TIMESTAMP,
      user: CURRENT_USER
    });
    // Implementation for deactivating webhook subscription
    // This could involve updating a database record or removing from Redis
  }
  static async registerWebhook(userId, eventType, url, secret, headers) {
    /* istanbul ignore next */
    cov_1sgt6cty7u().f[11]++;
    cov_1sgt6cty7u().s[57]++;
    try {
      const redis =
      /* istanbul ignore next */
      (cov_1sgt6cty7u().s[58]++, await this.getRedisClient());
      const subscription =
      /* istanbul ignore next */
      (cov_1sgt6cty7u().s[59]++, {
        id: _crypto.default.randomBytes(16).toString('hex'),
        url,
        secret,
        headers:
        /* istanbul ignore next */
        (cov_1sgt6cty7u().b[10][0]++, headers) ||
        /* istanbul ignore next */
        (cov_1sgt6cty7u().b[10][1]++, {}),
        createdAt: CURRENT_TIMESTAMP,
        createdBy: CURRENT_USER
      });
      const key =
      /* istanbul ignore next */
      (cov_1sgt6cty7u().s[60]++, `${this.WEBHOOK_KEY_PREFIX}${userId}:${eventType}`);
      const existingSubscriptions =
      /* istanbul ignore next */
      (cov_1sgt6cty7u().s[61]++, await this.getSubscriptions(userId, eventType));
      /* istanbul ignore next */
      cov_1sgt6cty7u().s[62]++;
      await redis.set(key, JSON.stringify([...existingSubscriptions, subscription]));
      /* istanbul ignore next */
      cov_1sgt6cty7u().s[63]++;
      _logging.logger.info('Webhook subscription registered', {
        userId,
        eventType,
        url,
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_1sgt6cty7u().s[64]++;
      return subscription;
    } catch (error) {
      /* istanbul ignore next */
      cov_1sgt6cty7u().s[65]++;
      _logging.logger.error(new Error('Failed to register webhook'), {
        userId,
        eventType,
        url,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1sgt6cty7u().b[11][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1sgt6cty7u().b[11][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_1sgt6cty7u().s[66]++;
      throw error;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJXZWJob29rRGlzcGF0Y2hlciIsIkNVUlJFTlRfVElNRVNUQU1QIiwiY292XzFzZ3Q2Y3R5N3UiLCJzIiwiQ1VSUkVOVF9VU0VSIiwiV0VCSE9PS19LRVlfUFJFRklYIiwiV0VCSE9PS19GQUlMVVJFX1BSRUZJWCIsIk1BWF9GQUlMVVJFUyIsIkZBSUxVUkVfV0lORE9XIiwiZ2V0UmVkaXNDbGllbnQiLCJmIiwicmVkaXMiLCJiIiwiX3JlZGlzIiwiUmVkaXMiLCJ1cmwiLCJwcm9jZXNzIiwiZW52IiwiVVBTVEFTSF9SRURJU19VUkwiLCJ0b2tlbiIsIlVQU1RBU0hfUkVESVNfUkVTVF9UT0tFTiIsImRpc3BhdGNoIiwidXNlcklkIiwiZXZlbnRUeXBlIiwicGF5bG9hZCIsInN1YnNjcmlwdGlvbnMiLCJnZXRTdWJzY3JpcHRpb25zIiwid2ViaG9va1BheWxvYWQiLCJ0aW1lc3RhbXAiLCJ0cmlnZ2VyZWRCeSIsImRhdGEiLCJkaXNwYXRjaFByb21pc2VzIiwibWFwIiwic3Vic2NyaXB0aW9uIiwiZmFpbHVyZXMiLCJnZXRGYWlsdXJlQ291bnQiLCJpZCIsImRlYWN0aXZhdGVTdWJzY3JpcHRpb24iLCJyZXNwb25zZSIsIl9heGlvcyIsImRlZmF1bHQiLCJwb3N0IiwiaGVhZGVycyIsImdlbmVyYXRlU2lnbmF0dXJlIiwic2VjcmV0IiwidGltZW91dCIsInN0YXR1cyIsInJlc2V0RmFpbHVyZUNvdW50IiwiX2xvZ2dpbmciLCJsb2dnZXIiLCJpbmZvIiwidXNlciIsIkVycm9yIiwiZXJyb3IiLCJyZWNvcmRGYWlsdXJlIiwibWVzc2FnZSIsIlN0cmluZyIsIlByb21pc2UiLCJhbGwiLCJrZXkiLCJnZXQiLCJKU09OIiwicGFyc2UiLCJfY3J5cHRvIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsInN0cmluZ2lmeSIsImRpZ2VzdCIsInN1YnNjcmlwdGlvbklkIiwiY291bnQiLCJwYXJzZUludCIsImluY3IiLCJleHBpcmUiLCJkZWwiLCJfd2ViaG9va21vZGVsIiwiZmluZE9uZUFuZFVwZGF0ZSIsIl9pZCIsImlzQWN0aXZlIiwid2FybiIsInJlZ2lzdGVyV2ViaG9vayIsInJhbmRvbUJ5dGVzIiwidG9TdHJpbmciLCJjcmVhdGVkQXQiLCJjcmVhdGVkQnkiLCJleGlzdGluZ1N1YnNjcmlwdGlvbnMiLCJzZXQiXSwic291cmNlcyI6WyIvaG9tZS9oYWdlci9uZXcvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyICgzKS9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIvbGliL2FwaS93ZWJob29rLWRpc3BhdGNoZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVkaXMgfSBmcm9tICdAdXBzdGFzaC9yZWRpcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL3NlcnZpY2VzL2xvZ2dpbmcnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCBXZWJob29rIGZyb20gJy4uL2RiL21vZGVscy93ZWJob29rLm1vZGVsJztcblxuY29uc3QgQ1VSUkVOVF9USU1FU1RBTVAgPSAnMjAyNS0wNC0yN1QxMjoyNDozNlonO1xuY29uc3QgQ1VSUkVOVF9VU0VSID0gJ01hcmstTGFzZmFyJztcblxuZXhwb3J0IGNsYXNzIFdlYmhvb2tEaXNwYXRjaGVyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVkaXM6IFJlZGlzO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBXRUJIT09LX0tFWV9QUkVGSVggPSAnd2ViaG9vazpzdWJzY3JpcHRpb25zOic7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFdFQkhPT0tfRkFJTFVSRV9QUkVGSVggPSAnd2ViaG9vazpmYWlsdXJlczonO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNQVhfRkFJTFVSRVMgPSAzO1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBGQUlMVVJFX1dJTkRPVyA9IDM2MDA7IC8vIDEgaG91ciBpbiBzZWNvbmRzXG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgZ2V0UmVkaXNDbGllbnQoKSB7XG4gICAgaWYgKCF0aGlzLnJlZGlzKSB7XG4gICAgICB0aGlzLnJlZGlzID0gbmV3IFJlZGlzKHtcbiAgICAgICAgdXJsOiBwcm9jZXNzLmVudi5VUFNUQVNIX1JFRElTX1VSTCEsXG4gICAgICAgIHRva2VuOiBwcm9jZXNzLmVudi5VUFNUQVNIX1JFRElTX1JFU1RfVE9LRU4hXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucmVkaXM7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZGlzcGF0Y2goXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gICAgcGF5bG9hZDogYW55XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gYXdhaXQgdGhpcy5nZXRTdWJzY3JpcHRpb25zKHVzZXJJZCwgZXZlbnRUeXBlKTtcbiAgICAgIFxuICAgICAgY29uc3Qgd2ViaG9va1BheWxvYWQgPSB7XG4gICAgICAgIGV2ZW50VHlwZSxcbiAgICAgICAgdGltZXN0YW1wOiBDVVJSRU5UX1RJTUVTVEFNUCxcbiAgICAgICAgdHJpZ2dlcmVkQnk6IENVUlJFTlRfVVNFUixcbiAgICAgICAgZGF0YTogcGF5bG9hZFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZGlzcGF0Y2hQcm9taXNlcyA9IHN1YnNjcmlwdGlvbnMubWFwKGFzeW5jIChzdWJzY3JpcHRpb246IHsgaWQ6IHN0cmluZzsgdXJsOiBzdHJpbmc7IHNlY3JldDogc3RyaW5nOyBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IH0pID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBDaGVjayBmYWlsdXJlIGNvdW50XG4gICAgICAgICAgY29uc3QgZmFpbHVyZXMgPSBhd2FpdCB0aGlzLmdldEZhaWx1cmVDb3VudChzdWJzY3JpcHRpb24uaWQpO1xuICAgICAgICAgIGlmIChmYWlsdXJlcyA+PSB0aGlzLk1BWF9GQUlMVVJFUykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5kZWFjdGl2YXRlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbi5pZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2VuZCB3ZWJob29rXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KHN1YnNjcmlwdGlvbi51cmwsIHdlYmhvb2tQYXlsb2FkLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICdYLVdlYmhvb2stVGltZXN0YW1wJzogQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICAgICAgICAgICdYLVdlYmhvb2stU2lnbmF0dXJlJzogdGhpcy5nZW5lcmF0ZVNpZ25hdHVyZShzdWJzY3JpcHRpb24uc2VjcmV0LCB3ZWJob29rUGF5bG9hZCksXG4gICAgICAgICAgICAgIC4uLnN1YnNjcmlwdGlvbi5oZWFkZXJzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGltZW91dDogNTAwMFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgICAvLyBSZXNldCBmYWlsdXJlIGNvdW50IG9uIHN1Y2Nlc3NcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVzZXRGYWlsdXJlQ291bnQoc3Vic2NyaXB0aW9uLmlkKTtcblxuICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ1dlYmhvb2sgZGlzcGF0Y2hlZCBzdWNjZXNzZnVsbHknLCB7XG4gICAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICAgICAgICB1cmw6IHN1YnNjcmlwdGlvbi51cmwsXG4gICAgICAgICAgICAgIHRpbWVzdGFtcDogQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICAgICAgICAgIHVzZXI6IENVUlJFTlRfVVNFUlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV2ViaG9vayByZXR1cm5lZCBzdGF0dXMgJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGF3YWl0IHRoaXMucmVjb3JkRmFpbHVyZShzdWJzY3JpcHRpb24uaWQpO1xuICAgICAgICAgIFxuICAgICAgICAgIGxvZ2dlci5lcnJvcihuZXcgRXJyb3IoJ1dlYmhvb2sgZGlzcGF0Y2ggZmFpbGVkJyksIHtcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIGV2ZW50VHlwZSxcbiAgICAgICAgICAgIHVybDogc3Vic2NyaXB0aW9uLnVybCxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvciksXG4gICAgICAgICAgICB0aW1lc3RhbXA6IENVUlJFTlRfVElNRVNUQU1QLFxuICAgICAgICAgICAgdXNlcjogQ1VSUkVOVF9VU0VSXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChkaXNwYXRjaFByb21pc2VzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKG5ldyBFcnJvcignV2ViaG9vayBkaXNwYXRjaCBlcnJvcicpLCB7XG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgICB0aW1lc3RhbXA6IENVUlJFTlRfVElNRVNUQU1QLFxuICAgICAgICB1c2VyOiBDVVJSRU5UX1VTRVJcbiAgICAgIH0pO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgZ2V0U3Vic2NyaXB0aW9ucyh1c2VySWQ6IHN0cmluZywgZXZlbnRUeXBlOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZWRpcyA9IGF3YWl0IHRoaXMuZ2V0UmVkaXNDbGllbnQoKTtcbiAgICBjb25zdCBrZXkgPSBgJHt0aGlzLldFQkhPT0tfS0VZX1BSRUZJWH0ke3VzZXJJZH06JHtldmVudFR5cGV9YDtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gYXdhaXQgcmVkaXMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbnMgPyBKU09OLnBhcnNlKFN0cmluZyhzdWJzY3JpcHRpb25zKSkgOiBbXTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGdlbmVyYXRlU2lnbmF0dXJlKHNlY3JldDogc3RyaW5nLCBwYXlsb2FkOiBhbnkpOiBzdHJpbmcge1xuICAgIHJldHVybiBjcnlwdG9cbiAgICAgIC5jcmVhdGVIbWFjKCdzaGEyNTYnLCBzZWNyZXQpXG4gICAgICAudXBkYXRlKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKVxuICAgICAgLmRpZ2VzdCgnaGV4Jyk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBnZXRGYWlsdXJlQ291bnQoc3Vic2NyaXB0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3QgcmVkaXMgPSBhd2FpdCB0aGlzLmdldFJlZGlzQ2xpZW50KCk7XG4gICAgY29uc3Qga2V5ID0gYCR7dGhpcy5XRUJIT09LX0ZBSUxVUkVfUFJFRklYfSR7c3Vic2NyaXB0aW9uSWR9YDtcbiAgICBjb25zdCBjb3VudCA9IGF3YWl0IHJlZGlzLmdldChrZXkpO1xuICAgIHJldHVybiBjb3VudCA/IHBhcnNlSW50KFN0cmluZyhjb3VudCksIDEwKSA6IDA7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyByZWNvcmRGYWlsdXJlKHN1YnNjcmlwdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCByZWRpcyA9IGF3YWl0IHRoaXMuZ2V0UmVkaXNDbGllbnQoKTtcbiAgICBjb25zdCBrZXkgPSBgJHt0aGlzLldFQkhPT0tfRkFJTFVSRV9QUkVGSVh9JHtzdWJzY3JpcHRpb25JZH1gO1xuICAgIGF3YWl0IHJlZGlzLmluY3Ioa2V5KTtcbiAgICBhd2FpdCByZWRpcy5leHBpcmUoa2V5LCB0aGlzLkZBSUxVUkVfV0lORE9XKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIHJlc2V0RmFpbHVyZUNvdW50KHN1YnNjcmlwdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCByZWRpcyA9IGF3YWl0IHRoaXMuZ2V0UmVkaXNDbGllbnQoKTtcbiAgICBjb25zdCBrZXkgPSBgJHt0aGlzLldFQkhPT0tfRkFJTFVSRV9QUkVGSVh9JHtzdWJzY3JpcHRpb25JZH1gO1xuICAgIGF3YWl0IHJlZGlzLmRlbChrZXkpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgZGVhY3RpdmF0ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcmVkaXMgPSBhd2FpdCB0aGlzLmdldFJlZGlzQ2xpZW50KCk7XG4gICAgYXdhaXQgcmVkaXMuZGVsKGAke3RoaXMuV0VCSE9PS19LRVlfUFJFRklYfSR7c3Vic2NyaXB0aW9uSWR9YCk7XG4gICAgYXdhaXQgV2ViaG9vay5maW5kT25lQW5kVXBkYXRlKHsgX2lkOiBzdWJzY3JpcHRpb25JZCB9LCB7IGlzQWN0aXZlOiBmYWxzZSB9KTtcblxuICAgIGxvZ2dlci53YXJuKCdXZWJob29rIHN1YnNjcmlwdGlvbiBkZWFjdGl2YXRlZCBkdWUgdG8gZmFpbHVyZXMnLCB7XG4gICAgICBzdWJzY3JpcHRpb25JZCxcbiAgICAgIHRpbWVzdGFtcDogQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICB1c2VyOiBDVVJSRU5UX1VTRVJcbiAgICB9KTtcbiAgICAvLyBJbXBsZW1lbnRhdGlvbiBmb3IgZGVhY3RpdmF0aW5nIHdlYmhvb2sgc3Vic2NyaXB0aW9uXG4gICAgLy8gVGhpcyBjb3VsZCBpbnZvbHZlIHVwZGF0aW5nIGEgZGF0YWJhc2UgcmVjb3JkIG9yIHJlbW92aW5nIGZyb20gUmVkaXNcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyByZWdpc3RlcldlYmhvb2soXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgc2VjcmV0OiBzdHJpbmcsXG4gICAgaGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlZGlzID0gYXdhaXQgdGhpcy5nZXRSZWRpc0NsaWVudCgpO1xuXG4gICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB7XG4gICAgICAgIGlkOiBjcnlwdG8ucmFuZG9tQnl0ZXMoMTYpLnRvU3RyaW5nKCdoZXgnKSxcbiAgICAgICAgdXJsLFxuICAgICAgICBzZWNyZXQsXG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnMgfHwge30sXG4gICAgICAgIGNyZWF0ZWRBdDogQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICAgIGNyZWF0ZWRCeTogQ1VSUkVOVF9VU0VSXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBrZXkgPSBgJHt0aGlzLldFQkhPT0tfS0VZX1BSRUZJWH0ke3VzZXJJZH06JHtldmVudFR5cGV9YDtcbiAgICAgIGNvbnN0IGV4aXN0aW5nU3Vic2NyaXB0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0U3Vic2NyaXB0aW9ucyh1c2VySWQsIGV2ZW50VHlwZSk7XG4gICAgICBcbiAgICAgIGF3YWl0IHJlZGlzLnNldChcbiAgICAgICAga2V5LFxuICAgICAgICBKU09OLnN0cmluZ2lmeShbLi4uZXhpc3RpbmdTdWJzY3JpcHRpb25zLCBzdWJzY3JpcHRpb25dKVxuICAgICAgKTtcblxuICAgICAgbG9nZ2VyLmluZm8oJ1dlYmhvb2sgc3Vic2NyaXB0aW9uIHJlZ2lzdGVyZWQnLCB7XG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICB1cmwsXG4gICAgICAgIHRpbWVzdGFtcDogQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICAgIHVzZXI6IENVUlJFTlRfVVNFUlxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZWdpc3RlciB3ZWJob29rJyksIHtcbiAgICAgICAgdXNlcklkLFxuICAgICAgICBldmVudFR5cGUsXG4gICAgICAgIHVybCxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgdGltZXN0YW1wOiBDVVJSRU5UX1RJTUVTVEFNUCxcbiAgICAgICAgdXNlcjogQ1VSUkVOVF9VU0VSXG4gICAgICB9KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQVNhOzs7Ozs7V0FBQUEsaUJBQUE7Ozs7O2tDQVRTOzs7a0NBQ0M7Ozt3RUFDTDs7O3dFQUNDOzs7d0VBQ0M7Ozs7Ozs7Ozs7Ozs7OztBQUVwQixNQUFNQyxpQkFBQTtBQUFBO0FBQUEsQ0FBQUMsY0FBQSxHQUFBQyxDQUFBLE9BQW9CO0FBQzFCLE1BQU1DLFlBQUE7QUFBQTtBQUFBLENBQUFGLGNBQUEsR0FBQUMsQ0FBQSxRQUFlO0FBRWQsTUFBTUgsaUJBQUE7Ozs7U0FFYUssa0JBQUEsR0FBcUI7Ozs7O1NBQ3JCQyxzQkFBQSxHQUF5Qjs7Ozs7U0FDekJDLFlBQUEsR0FBZTs7Ozs7U0FDZkMsY0FBQSxHQUFpQixLQUFNO0lBQUE7O0VBRS9DLGFBQXFCQyxlQUFBLEVBQWlCO0lBQUE7SUFBQVAsY0FBQSxHQUFBUSxDQUFBO0lBQUFSLGNBQUEsR0FBQUMsQ0FBQTtJQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDUSxLQUFLLEVBQUU7TUFBQTtNQUFBVCxjQUFBLEdBQUFVLENBQUE7TUFBQVYsY0FBQSxHQUFBQyxDQUFBO01BQ2YsSUFBSSxDQUFDUSxLQUFLLEdBQUcsSUFBSUUsTUFBQSxDQUFBQyxLQUFLLENBQUM7UUFDckJDLEdBQUEsRUFBS0MsT0FBQSxDQUFRQyxHQUFHLENBQUNDLGlCQUFpQjtRQUNsQ0MsS0FBQSxFQUFPSCxPQUFBLENBQVFDLEdBQUcsQ0FBQ0c7TUFDckI7SUFDRjtJQUFBO0lBQUE7TUFBQWxCLGNBQUEsR0FBQVUsQ0FBQTtJQUFBO0lBQUFWLGNBQUEsR0FBQUMsQ0FBQTtJQUNBLE9BQU8sSUFBSSxDQUFDUSxLQUFLO0VBQ25CO0VBRUEsYUFBYVUsU0FDWEMsTUFBYyxFQUNkQyxTQUFpQixFQUNqQkMsT0FBWSxFQUNHO0lBQUE7SUFBQXRCLGNBQUEsR0FBQVEsQ0FBQTtJQUFBUixjQUFBLEdBQUFDLENBQUE7SUFDZixJQUFJO01BQ0YsTUFBTXNCLGFBQUE7TUFBQTtNQUFBLENBQUF2QixjQUFBLEdBQUFDLENBQUEsUUFBZ0IsTUFBTSxJQUFJLENBQUN1QixnQkFBZ0IsQ0FBQ0osTUFBQSxFQUFRQyxTQUFBO01BRTFELE1BQU1JLGNBQUE7TUFBQTtNQUFBLENBQUF6QixjQUFBLEdBQUFDLENBQUEsUUFBaUI7UUFDckJvQixTQUFBO1FBQ0FLLFNBQUEsRUFBVzNCLGlCQUFBO1FBQ1g0QixXQUFBLEVBQWF6QixZQUFBO1FBQ2IwQixJQUFBLEVBQU1OO01BQ1I7TUFFQSxNQUFNTyxnQkFBQTtNQUFBO01BQUEsQ0FBQTdCLGNBQUEsR0FBQUMsQ0FBQSxRQUFtQnNCLGFBQUEsQ0FBY08sR0FBRyxDQUFDLE1BQU9DLFlBQUE7UUFBQTtRQUFBL0IsY0FBQSxHQUFBUSxDQUFBO1FBQUFSLGNBQUEsR0FBQUMsQ0FBQTtRQUNoRCxJQUFJO1VBQ0Y7VUFDQSxNQUFNK0IsUUFBQTtVQUFBO1VBQUEsQ0FBQWhDLGNBQUEsR0FBQUMsQ0FBQSxRQUFXLE1BQU0sSUFBSSxDQUFDZ0MsZUFBZSxDQUFDRixZQUFBLENBQWFHLEVBQUU7VUFBQTtVQUFBbEMsY0FBQSxHQUFBQyxDQUFBO1VBQzNELElBQUkrQixRQUFBLElBQVksSUFBSSxDQUFDM0IsWUFBWSxFQUFFO1lBQUE7WUFBQUwsY0FBQSxHQUFBVSxDQUFBO1lBQUFWLGNBQUEsR0FBQUMsQ0FBQTtZQUNqQyxNQUFNLElBQUksQ0FBQ2tDLHNCQUFzQixDQUFDSixZQUFBLENBQWFHLEVBQUU7WUFBQTtZQUFBbEMsY0FBQSxHQUFBQyxDQUFBO1lBQ2pEO1VBQ0Y7VUFBQTtVQUFBO1lBQUFELGNBQUEsR0FBQVUsQ0FBQTtVQUFBO1VBRUE7VUFDQSxNQUFNMEIsUUFBQTtVQUFBO1VBQUEsQ0FBQXBDLGNBQUEsR0FBQUMsQ0FBQSxRQUFXLE1BQU1vQyxNQUFBLENBQUFDLE9BQUssQ0FBQ0MsSUFBSSxDQUFDUixZQUFBLENBQWFsQixHQUFHLEVBQUVZLGNBQUEsRUFBZ0I7WUFDbEVlLE9BQUEsRUFBUztjQUNQLGdCQUFnQjtjQUNoQix1QkFBdUJ6QyxpQkFBQTtjQUN2Qix1QkFBdUIsSUFBSSxDQUFDMEMsaUJBQWlCLENBQUNWLFlBQUEsQ0FBYVcsTUFBTSxFQUFFakIsY0FBQTtjQUNuRSxHQUFHTSxZQUFBLENBQWFTO1lBQ2xCO1lBQ0FHLE9BQUEsRUFBUztVQUNYO1VBQUE7VUFBQTNDLGNBQUEsR0FBQUMsQ0FBQTtVQUVBO1VBQUk7VUFBQSxDQUFBRCxjQUFBLEdBQUFVLENBQUEsVUFBQTBCLFFBQUEsQ0FBU1EsTUFBTSxJQUFJO1VBQUE7VUFBQSxDQUFBNUMsY0FBQSxHQUFBVSxDQUFBLFVBQU8wQixRQUFBLENBQVNRLE1BQU0sR0FBRyxNQUFLO1lBQUE7WUFBQTVDLGNBQUEsR0FBQVUsQ0FBQTtZQUFBVixjQUFBLEdBQUFDLENBQUE7WUFDbkQ7WUFDQSxNQUFNLElBQUksQ0FBQzRDLGlCQUFpQixDQUFDZCxZQUFBLENBQWFHLEVBQUU7WUFBQTtZQUFBbEMsY0FBQSxHQUFBQyxDQUFBO1lBRTVDNkMsUUFBQSxDQUFBQyxNQUFNLENBQUNDLElBQUksQ0FBQyxtQ0FBbUM7Y0FDN0M1QixNQUFBO2NBQ0FDLFNBQUE7Y0FDQVIsR0FBQSxFQUFLa0IsWUFBQSxDQUFhbEIsR0FBRztjQUNyQmEsU0FBQSxFQUFXM0IsaUJBQUE7Y0FDWGtELElBQUEsRUFBTS9DO1lBQ1I7VUFDRixPQUFPO1lBQUE7WUFBQUYsY0FBQSxHQUFBVSxDQUFBO1lBQUFWLGNBQUEsR0FBQUMsQ0FBQTtZQUNMLE1BQU0sSUFBSWlELEtBQUEsQ0FBTSwyQkFBMkJkLFFBQUEsQ0FBU1EsTUFBTSxFQUFFO1VBQzlEO1FBQ0YsRUFBRSxPQUFPTyxLQUFBLEVBQU87VUFBQTtVQUFBbkQsY0FBQSxHQUFBQyxDQUFBO1VBQ2QsTUFBTSxJQUFJLENBQUNtRCxhQUFhLENBQUNyQixZQUFBLENBQWFHLEVBQUU7VUFBQTtVQUFBbEMsY0FBQSxHQUFBQyxDQUFBO1VBRXhDNkMsUUFBQSxDQUFBQyxNQUFNLENBQUNJLEtBQUssQ0FBQyxJQUFJRCxLQUFBLENBQU0sNEJBQTRCO1lBQ2pEOUIsTUFBQTtZQUNBQyxTQUFBO1lBQ0FSLEdBQUEsRUFBS2tCLFlBQUEsQ0FBYWxCLEdBQUc7WUFDckJzQyxLQUFBLEVBQU9BLEtBQUEsWUFBaUJELEtBQUE7WUFBQTtZQUFBLENBQUFsRCxjQUFBLEdBQUFVLENBQUEsVUFBUXlDLEtBQUEsQ0FBTUUsT0FBTztZQUFBO1lBQUEsQ0FBQXJELGNBQUEsR0FBQVUsQ0FBQSxVQUFHNEMsTUFBQSxDQUFPSCxLQUFBO1lBQ3ZEekIsU0FBQSxFQUFXM0IsaUJBQUE7WUFDWGtELElBQUEsRUFBTS9DO1VBQ1I7UUFDRjtNQUNGO01BQUE7TUFBQUYsY0FBQSxHQUFBQyxDQUFBO01BRUEsTUFBTXNELE9BQUEsQ0FBUUMsR0FBRyxDQUFDM0IsZ0JBQUE7SUFDcEIsRUFBRSxPQUFPc0IsS0FBQSxFQUFPO01BQUE7TUFBQW5ELGNBQUEsR0FBQUMsQ0FBQTtNQUNkNkMsUUFBQSxDQUFBQyxNQUFNLENBQUNJLEtBQUssQ0FBQyxJQUFJRCxLQUFBLENBQU0sMkJBQTJCO1FBQ2hEOUIsTUFBQTtRQUNBQyxTQUFBO1FBQ0E4QixLQUFBLEVBQU9BLEtBQUEsWUFBaUJELEtBQUE7UUFBQTtRQUFBLENBQUFsRCxjQUFBLEdBQUFVLENBQUEsVUFBUXlDLEtBQUEsQ0FBTUUsT0FBTztRQUFBO1FBQUEsQ0FBQXJELGNBQUEsR0FBQVUsQ0FBQSxVQUFHNEMsTUFBQSxDQUFPSCxLQUFBO1FBQ3ZEekIsU0FBQSxFQUFXM0IsaUJBQUE7UUFDWGtELElBQUEsRUFBTS9DO01BQ1I7TUFBQTtNQUFBRixjQUFBLEdBQUFDLENBQUE7TUFDQSxNQUFNa0QsS0FBQTtJQUNSO0VBQ0Y7RUFFQSxhQUFxQjNCLGlCQUFpQkosTUFBYyxFQUFFQyxTQUFpQixFQUFFO0lBQUE7SUFBQXJCLGNBQUEsR0FBQVEsQ0FBQTtJQUN2RSxNQUFNQyxLQUFBO0lBQUE7SUFBQSxDQUFBVCxjQUFBLEdBQUFDLENBQUEsUUFBUSxNQUFNLElBQUksQ0FBQ00sY0FBYztJQUN2QyxNQUFNa0QsR0FBQTtJQUFBO0lBQUEsQ0FBQXpELGNBQUEsR0FBQUMsQ0FBQSxRQUFNLEdBQUcsSUFBSSxDQUFDRSxrQkFBa0IsR0FBR2lCLE1BQUEsSUFBVUMsU0FBQSxFQUFXO0lBQzlELE1BQU1FLGFBQUE7SUFBQTtJQUFBLENBQUF2QixjQUFBLEdBQUFDLENBQUEsUUFBZ0IsTUFBTVEsS0FBQSxDQUFNaUQsR0FBRyxDQUFDRCxHQUFBO0lBQUE7SUFBQXpELGNBQUEsR0FBQUMsQ0FBQTtJQUN0QyxPQUFPc0IsYUFBQTtJQUFBO0lBQUEsQ0FBQXZCLGNBQUEsR0FBQVUsQ0FBQSxVQUFnQmlELElBQUEsQ0FBS0MsS0FBSyxDQUFDTixNQUFBLENBQU8vQixhQUFBO0lBQUE7SUFBQSxDQUFBdkIsY0FBQSxHQUFBVSxDQUFBLFVBQWtCLEVBQUU7RUFDL0Q7RUFFQSxPQUFlK0Isa0JBQWtCQyxNQUFjLEVBQUVwQixPQUFZLEVBQVU7SUFBQTtJQUFBdEIsY0FBQSxHQUFBUSxDQUFBO0lBQUFSLGNBQUEsR0FBQUMsQ0FBQTtJQUNyRSxPQUFPNEQsT0FBQSxDQUFBdkIsT0FBTSxDQUNWd0IsVUFBVSxDQUFDLFVBQVVwQixNQUFBLEVBQ3JCcUIsTUFBTSxDQUFDSixJQUFBLENBQUtLLFNBQVMsQ0FBQzFDLE9BQUEsR0FDdEIyQyxNQUFNLENBQUM7RUFDWjtFQUVBLGFBQXFCaEMsZ0JBQWdCaUMsY0FBc0IsRUFBbUI7SUFBQTtJQUFBbEUsY0FBQSxHQUFBUSxDQUFBO0lBQzVFLE1BQU1DLEtBQUE7SUFBQTtJQUFBLENBQUFULGNBQUEsR0FBQUMsQ0FBQSxRQUFRLE1BQU0sSUFBSSxDQUFDTSxjQUFjO0lBQ3ZDLE1BQU1rRCxHQUFBO0lBQUE7SUFBQSxDQUFBekQsY0FBQSxHQUFBQyxDQUFBLFFBQU0sR0FBRyxJQUFJLENBQUNHLHNCQUFzQixHQUFHOEQsY0FBQSxFQUFnQjtJQUM3RCxNQUFNQyxLQUFBO0lBQUE7SUFBQSxDQUFBbkUsY0FBQSxHQUFBQyxDQUFBLFFBQVEsTUFBTVEsS0FBQSxDQUFNaUQsR0FBRyxDQUFDRCxHQUFBO0lBQUE7SUFBQXpELGNBQUEsR0FBQUMsQ0FBQTtJQUM5QixPQUFPa0UsS0FBQTtJQUFBO0lBQUEsQ0FBQW5FLGNBQUEsR0FBQVUsQ0FBQSxVQUFRMEQsUUFBQSxDQUFTZCxNQUFBLENBQU9hLEtBQUEsR0FBUTtJQUFBO0lBQUEsQ0FBQW5FLGNBQUEsR0FBQVUsQ0FBQSxVQUFNO0VBQy9DO0VBRUEsYUFBcUIwQyxjQUFjYyxjQUFzQixFQUFpQjtJQUFBO0lBQUFsRSxjQUFBLEdBQUFRLENBQUE7SUFDeEUsTUFBTUMsS0FBQTtJQUFBO0lBQUEsQ0FBQVQsY0FBQSxHQUFBQyxDQUFBLFFBQVEsTUFBTSxJQUFJLENBQUNNLGNBQWM7SUFDdkMsTUFBTWtELEdBQUE7SUFBQTtJQUFBLENBQUF6RCxjQUFBLEdBQUFDLENBQUEsUUFBTSxHQUFHLElBQUksQ0FBQ0csc0JBQXNCLEdBQUc4RCxjQUFBLEVBQWdCO0lBQUE7SUFBQWxFLGNBQUEsR0FBQUMsQ0FBQTtJQUM3RCxNQUFNUSxLQUFBLENBQU00RCxJQUFJLENBQUNaLEdBQUE7SUFBQTtJQUFBekQsY0FBQSxHQUFBQyxDQUFBO0lBQ2pCLE1BQU1RLEtBQUEsQ0FBTTZELE1BQU0sQ0FBQ2IsR0FBQSxFQUFLLElBQUksQ0FBQ25ELGNBQWM7RUFDN0M7RUFFQSxhQUFxQnVDLGtCQUFrQnFCLGNBQXNCLEVBQWlCO0lBQUE7SUFBQWxFLGNBQUEsR0FBQVEsQ0FBQTtJQUM1RSxNQUFNQyxLQUFBO0lBQUE7SUFBQSxDQUFBVCxjQUFBLEdBQUFDLENBQUEsUUFBUSxNQUFNLElBQUksQ0FBQ00sY0FBYztJQUN2QyxNQUFNa0QsR0FBQTtJQUFBO0lBQUEsQ0FBQXpELGNBQUEsR0FBQUMsQ0FBQSxRQUFNLEdBQUcsSUFBSSxDQUFDRyxzQkFBc0IsR0FBRzhELGNBQUEsRUFBZ0I7SUFBQTtJQUFBbEUsY0FBQSxHQUFBQyxDQUFBO0lBQzdELE1BQU1RLEtBQUEsQ0FBTThELEdBQUcsQ0FBQ2QsR0FBQTtFQUNsQjtFQUVBLGFBQXFCdEIsdUJBQXVCK0IsY0FBc0IsRUFBaUI7SUFBQTtJQUFBbEUsY0FBQSxHQUFBUSxDQUFBO0lBQ2pGLE1BQU1DLEtBQUE7SUFBQTtJQUFBLENBQUFULGNBQUEsR0FBQUMsQ0FBQSxRQUFRLE1BQU0sSUFBSSxDQUFDTSxjQUFjO0lBQUE7SUFBQVAsY0FBQSxHQUFBQyxDQUFBO0lBQ3ZDLE1BQU1RLEtBQUEsQ0FBTThELEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQ3BFLGtCQUFrQixHQUFHK0QsY0FBQSxFQUFnQjtJQUFBO0lBQUFsRSxjQUFBLEdBQUFDLENBQUE7SUFDN0QsTUFBTXVFLGFBQUEsQ0FBQWxDLE9BQU8sQ0FBQ21DLGdCQUFnQixDQUFDO01BQUVDLEdBQUEsRUFBS1I7SUFBZSxHQUFHO01BQUVTLFFBQUEsRUFBVTtJQUFNO0lBQUE7SUFBQTNFLGNBQUEsR0FBQUMsQ0FBQTtJQUUxRTZDLFFBQUEsQ0FBQUMsTUFBTSxDQUFDNkIsSUFBSSxDQUFDLG9EQUFvRDtNQUM5RFYsY0FBQTtNQUNBeEMsU0FBQSxFQUFXM0IsaUJBQUE7TUFDWGtELElBQUEsRUFBTS9DO0lBQ1I7SUFDQTtJQUNBO0VBQ0Y7RUFFQSxhQUFhMkUsZ0JBQ1h6RCxNQUFjLEVBQ2RDLFNBQWlCLEVBQ2pCUixHQUFXLEVBQ1g2QixNQUFjLEVBQ2RGLE9BQWdDLEVBQ2hDO0lBQUE7SUFBQXhDLGNBQUEsR0FBQVEsQ0FBQTtJQUFBUixjQUFBLEdBQUFDLENBQUE7SUFDQSxJQUFJO01BQ0YsTUFBTVEsS0FBQTtNQUFBO01BQUEsQ0FBQVQsY0FBQSxHQUFBQyxDQUFBLFFBQVEsTUFBTSxJQUFJLENBQUNNLGNBQWM7TUFFdkMsTUFBTXdCLFlBQUE7TUFBQTtNQUFBLENBQUEvQixjQUFBLEdBQUFDLENBQUEsUUFBZTtRQUNuQmlDLEVBQUEsRUFBSTJCLE9BQUEsQ0FBQXZCLE9BQU0sQ0FBQ3dDLFdBQVcsQ0FBQyxJQUFJQyxRQUFRLENBQUM7UUFDcENsRSxHQUFBO1FBQ0E2QixNQUFBO1FBQ0FGLE9BQUE7UUFBUztRQUFBLENBQUF4QyxjQUFBLEdBQUFVLENBQUEsV0FBQThCLE9BQUE7UUFBQTtRQUFBLENBQUF4QyxjQUFBLEdBQUFVLENBQUEsV0FBVyxDQUFDO1FBQ3JCc0UsU0FBQSxFQUFXakYsaUJBQUE7UUFDWGtGLFNBQUEsRUFBVy9FO01BQ2I7TUFFQSxNQUFNdUQsR0FBQTtNQUFBO01BQUEsQ0FBQXpELGNBQUEsR0FBQUMsQ0FBQSxRQUFNLEdBQUcsSUFBSSxDQUFDRSxrQkFBa0IsR0FBR2lCLE1BQUEsSUFBVUMsU0FBQSxFQUFXO01BQzlELE1BQU02RCxxQkFBQTtNQUFBO01BQUEsQ0FBQWxGLGNBQUEsR0FBQUMsQ0FBQSxRQUF3QixNQUFNLElBQUksQ0FBQ3VCLGdCQUFnQixDQUFDSixNQUFBLEVBQVFDLFNBQUE7TUFBQTtNQUFBckIsY0FBQSxHQUFBQyxDQUFBO01BRWxFLE1BQU1RLEtBQUEsQ0FBTTBFLEdBQUcsQ0FDYjFCLEdBQUEsRUFDQUUsSUFBQSxDQUFLSyxTQUFTLENBQUMsQyxHQUFJa0IscUJBQUEsRUFBdUJuRCxZQUFBLENBQWE7TUFBQTtNQUFBL0IsY0FBQSxHQUFBQyxDQUFBO01BR3pENkMsUUFBQSxDQUFBQyxNQUFNLENBQUNDLElBQUksQ0FBQyxtQ0FBbUM7UUFDN0M1QixNQUFBO1FBQ0FDLFNBQUE7UUFDQVIsR0FBQTtRQUNBYSxTQUFBLEVBQVczQixpQkFBQTtRQUNYa0QsSUFBQSxFQUFNL0M7TUFDUjtNQUFBO01BQUFGLGNBQUEsR0FBQUMsQ0FBQTtNQUVBLE9BQU84QixZQUFBO0lBQ1QsRUFBRSxPQUFPb0IsS0FBQSxFQUFPO01BQUE7TUFBQW5ELGNBQUEsR0FBQUMsQ0FBQTtNQUNkNkMsUUFBQSxDQUFBQyxNQUFNLENBQUNJLEtBQUssQ0FBQyxJQUFJRCxLQUFBLENBQU0sK0JBQStCO1FBQ3BEOUIsTUFBQTtRQUNBQyxTQUFBO1FBQ0FSLEdBQUE7UUFDQXNDLEtBQUEsRUFBT0EsS0FBQSxZQUFpQkQsS0FBQTtRQUFBO1FBQUEsQ0FBQWxELGNBQUEsR0FBQVUsQ0FBQSxXQUFReUMsS0FBQSxDQUFNRSxPQUFPO1FBQUE7UUFBQSxDQUFBckQsY0FBQSxHQUFBVSxDQUFBLFdBQUc0QyxNQUFBLENBQU9ILEtBQUE7UUFDdkR6QixTQUFBLEVBQVczQixpQkFBQTtRQUNYa0QsSUFBQSxFQUFNL0M7TUFDUjtNQUFBO01BQUFGLGNBQUEsR0FBQUMsQ0FBQTtNQUNBLE1BQU1rRCxLQUFBO0lBQ1I7RUFDRjtBQUNGIiwiaWdub3JlTGlzdCI6W119