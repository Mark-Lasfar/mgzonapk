637b65ffb60deed4777d3d44a070f42d
"use strict";

/* istanbul ignore next */
function cov_w4yi74cig() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/register/route.ts";
  var hash = "061589ece39319d3e1f9dcfc2e9139a77cf0aee4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/register/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "5": {
        start: {
          line: 13,
          column: 33
        },
        end: {
          line: 13,
          column: 106
        }
      },
      "6": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 14,
          column: 67
        }
      },
      "7": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 67
        }
      },
      "8": {
        start: {
          line: 16,
          column: 45
        },
        end: {
          line: 16,
          column: 131
        }
      },
      "9": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 20,
          column: 6
        }
      },
      "10": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "12": {
        start: {
          line: 25,
          column: 42
        },
        end: {
          line: 25,
          column: 58
        }
      },
      "13": {
        start: {
          line: 26,
          column: 29
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "15": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "16": {
        start: {
          line: 37,
          column: 21
        },
        end: {
          line: 51,
          column: 10
        }
      },
      "17": {
        start: {
          line: 52,
          column: 21
        },
        end: {
          line: 52,
          column: 62
        }
      },
      "18": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "19": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "20": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "21": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "22": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 52
        }
      },
      "23": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 33
          }
        },
        loc: {
          start: {
            line: 17,
            column: 39
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 22,
            column: 15
          },
          end: {
            line: 22,
            column: 19
          }
        },
        loc: {
          start: {
            line: 22,
            column: 25
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 22
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 20,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 18,
            column: 38
          }
        }, {
          start: {
            line: 18,
            column: 41
          },
          end: {
            line: 20,
            column: 5
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 11
          },
          end: {
            line: 18,
            column: 14
          }
        }, {
          start: {
            line: 18,
            column: 18
          },
          end: {
            line: 18,
            column: 32
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/register/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport User from '@/lib/db/models/user.model';\nimport { generateRecoveryCode } from '@/lib/utils/verification';\nimport { sendNotification } from '@/lib/utils/notification';\nimport VerificationCode from '@/lib/db/models/verification-code.model';\n\nexport async function POST(req: NextRequest) {\n  try {\n    await connectToDatabase();\n    const { name, email, password } = await req.json();\n\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return NextResponse.json({ success: false, error: 'Email already exists' }, { status: 400 });\n    }\n\n    const user = await User.create({\n      name,\n      email,\n      password, // Assume password is hashed in User model pre-save hook\n      role: 'USER',\n      pointsBalance: 50, // Welcome bonus for new user\n      pointsTransactions: [\n        {\n          amount: 50,\n          type: 'earn',\n          description: 'Welcome bonus for new user registration',\n          createdAt: new Date(),\n        },\n      ],\n    });\n\n    const code = generateRecoveryCode();\n    await VerificationCode.create({\n      userId: user._id,\n      code,\n      email,\n      type: 'registration',\n      expiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15 minutes\n    });\n\n    await sendNotification({\n      userId: user._id,\n      type: 'registration',\n      title: 'Verify Your Email',\n      message: `Your verification code is ${code}. It expires in 15 minutes.`,\n      channels: ['email'],\n    });\n\n    console.log('New user registered:', { userId: user._id, pointsBalance: user.pointsBalance });\n\n    return NextResponse.json({ success: true, userId: user._id });\n  } catch (error) {\n    console.error('Registration error:', error);\n    return NextResponse.json({ success: false, error: 'Registration failed' }, { status: 500 });\n  }\n}"],
      names: ["POST", "req", "connectToDatabase", "name", "email", "password", "json", "existingUser", "User", "findOne", "NextResponse", "success", "error", "status", "user", "create", "role", "pointsBalance", "pointsTransactions", "amount", "type", "description", "createdAt", "Date", "code", "generateRecoveryCode", "VerificationCode", "userId", "_id", "expiresAt", "now", "sendNotification", "title", "message", "channels", "console", "log"],
      mappings: ";;;;+BAOsBA;;;eAAAA;;;wBAPoB;oBACR;kEACjB;8BACoB;8BACJ;8EACJ;;;;;;AAEtB,eAAeA,KAAKC,GAAgB;IACzC,IAAI;QACF,MAAMC,IAAAA,qBAAiB;QACvB,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAG,MAAMJ,IAAIK,IAAI;QAEhD,MAAMC,eAAe,MAAMC,kBAAI,CAACC,OAAO,CAAC;YAAEL;QAAM;QAChD,IAAIG,cAAc;YAChB,OAAOG,oBAAY,CAACJ,IAAI,CAAC;gBAAEK,SAAS;gBAAOC,OAAO;YAAuB,GAAG;gBAAEC,QAAQ;YAAI;QAC5F;QAEA,MAAMC,OAAO,MAAMN,kBAAI,CAACO,MAAM,CAAC;YAC7BZ;YACAC;YACAC;YACAW,MAAM;YACNC,eAAe;YACfC,oBAAoB;gBAClB;oBACEC,QAAQ;oBACRC,MAAM;oBACNC,aAAa;oBACbC,WAAW,IAAIC;gBACjB;aACD;QACH;QAEA,MAAMC,OAAOC,IAAAA,kCAAoB;QACjC,MAAMC,8BAAgB,CAACX,MAAM,CAAC;YAC5BY,QAAQb,KAAKc,GAAG;YAChBJ;YACApB;YACAgB,MAAM;YACNS,WAAW,IAAIN,KAAKA,KAAKO,GAAG,KAAK,KAAK,KAAK;QAC7C;QAEA,MAAMC,IAAAA,8BAAgB,EAAC;YACrBJ,QAAQb,KAAKc,GAAG;YAChBR,MAAM;YACNY,OAAO;YACPC,SAAS,CAAC,0BAA0B,EAAET,KAAK,2BAA2B,CAAC;YACvEU,UAAU;gBAAC;aAAQ;QACrB;QAEAC,QAAQC,GAAG,CAAC,wBAAwB;YAAET,QAAQb,KAAKc,GAAG;YAAEX,eAAeH,KAAKG,aAAa;QAAC;QAE1F,OAAOP,oBAAY,CAACJ,IAAI,CAAC;YAAEK,SAAS;YAAMgB,QAAQb,KAAKc,GAAG;QAAC;IAC7D,EAAE,OAAOhB,OAAO;QACduB,QAAQvB,KAAK,CAAC,uBAAuBA;QACrC,OAAOF,oBAAY,CAACJ,IAAI,CAAC;YAAEK,SAAS;YAAOC,OAAO;QAAsB,GAAG;YAAEC,QAAQ;QAAI;IAC3F;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "061589ece39319d3e1f9dcfc2e9139a77cf0aee4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_w4yi74cig = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_w4yi74cig();
cov_w4yi74cig().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_w4yi74cig().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_w4yi74cig().f[0]++;
    cov_w4yi74cig().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_w4yi74cig().s[3]++, require("next/server"));
const _db =
/* istanbul ignore next */
(cov_w4yi74cig().s[4]++, require("../../../../lib/db"));
const _usermodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_w4yi74cig().s[5]++, _interop_require_default(require("../../../../lib/db/models/user.model")));
const _verification =
/* istanbul ignore next */
(cov_w4yi74cig().s[6]++, require("../../../../lib/utils/verification"));
const _notification =
/* istanbul ignore next */
(cov_w4yi74cig().s[7]++, require("../../../../lib/utils/notification"));
const _verificationcodemodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_w4yi74cig().s[8]++, _interop_require_default(require("../../../../lib/db/models/verification-code.model")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_w4yi74cig().f[1]++;
  cov_w4yi74cig().s[9]++;
  return /* istanbul ignore next */(cov_w4yi74cig().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_w4yi74cig().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_w4yi74cig().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_w4yi74cig().b[0][1]++, {
    default: obj
  });
}
async function POST(req) {
  /* istanbul ignore next */
  cov_w4yi74cig().f[2]++;
  cov_w4yi74cig().s[10]++;
  try {
    /* istanbul ignore next */
    cov_w4yi74cig().s[11]++;
    await (0, _db.connectToDatabase)();
    const {
      name,
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_w4yi74cig().s[12]++, await req.json());
    const existingUser =
    /* istanbul ignore next */
    (cov_w4yi74cig().s[13]++, await _usermodel.default.findOne({
      email
    }));
    /* istanbul ignore next */
    cov_w4yi74cig().s[14]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_w4yi74cig().b[2][0]++;
      cov_w4yi74cig().s[15]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Email already exists'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_w4yi74cig().b[2][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_w4yi74cig().s[16]++, await _usermodel.default.create({
      name,
      email,
      password,
      role: 'USER',
      pointsBalance: 50,
      pointsTransactions: [{
        amount: 50,
        type: 'earn',
        description: 'Welcome bonus for new user registration',
        createdAt: new Date()
      }]
    }));
    const code =
    /* istanbul ignore next */
    (cov_w4yi74cig().s[17]++, (0, _verification.generateRecoveryCode)());
    /* istanbul ignore next */
    cov_w4yi74cig().s[18]++;
    await _verificationcodemodel.default.create({
      userId: user._id,
      code,
      email,
      type: 'registration',
      expiresAt: new Date(Date.now() + 15 * 60 * 1000)
    });
    /* istanbul ignore next */
    cov_w4yi74cig().s[19]++;
    await (0, _notification.sendNotification)({
      userId: user._id,
      type: 'registration',
      title: 'Verify Your Email',
      message: `Your verification code is ${code}. It expires in 15 minutes.`,
      channels: ['email']
    });
    /* istanbul ignore next */
    cov_w4yi74cig().s[20]++;
    console.log('New user registered:', {
      userId: user._id,
      pointsBalance: user.pointsBalance
    });
    /* istanbul ignore next */
    cov_w4yi74cig().s[21]++;
    return _server.NextResponse.json({
      success: true,
      userId: user._id
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_w4yi74cig().s[22]++;
    console.error('Registration error:', error);
    /* istanbul ignore next */
    cov_w4yi74cig().s[23]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Registration failed'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQT1NUIiwicmVxIiwiY292X3c0eWk3NGNpZyIsImYiLCJzIiwiX2RiIiwiY29ubmVjdFRvRGF0YWJhc2UiLCJuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImpzb24iLCJleGlzdGluZ1VzZXIiLCJfdXNlcm1vZGVsIiwiZGVmYXVsdCIsImZpbmRPbmUiLCJiIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsInN1Y2Nlc3MiLCJlcnJvciIsInN0YXR1cyIsInVzZXIiLCJjcmVhdGUiLCJyb2xlIiwicG9pbnRzQmFsYW5jZSIsInBvaW50c1RyYW5zYWN0aW9ucyIsImFtb3VudCIsInR5cGUiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZWRBdCIsIkRhdGUiLCJjb2RlIiwiX3ZlcmlmaWNhdGlvbiIsImdlbmVyYXRlUmVjb3ZlcnlDb2RlIiwiX3ZlcmlmaWNhdGlvbmNvZGVtb2RlbCIsInVzZXJJZCIsIl9pZCIsImV4cGlyZXNBdCIsIm5vdyIsIl9ub3RpZmljYXRpb24iLCJzZW5kTm90aWZpY2F0aW9uIiwidGl0bGUiLCJtZXNzYWdlIiwiY2hhbm5lbHMiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsiL2hvbWUvaGFnZXIvbmV3L215LW5leHRqcy1wcm9qZWN0LW1hc3RlciAoMykvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyL2FwcC9hcGkvYXV0aC9yZWdpc3Rlci9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgY29ubmVjdFRvRGF0YWJhc2UgfSBmcm9tICdAL2xpYi9kYic7XG5pbXBvcnQgVXNlciBmcm9tICdAL2xpYi9kYi9tb2RlbHMvdXNlci5tb2RlbCc7XG5pbXBvcnQgeyBnZW5lcmF0ZVJlY292ZXJ5Q29kZSB9IGZyb20gJ0AvbGliL3V0aWxzL3ZlcmlmaWNhdGlvbic7XG5pbXBvcnQgeyBzZW5kTm90aWZpY2F0aW9uIH0gZnJvbSAnQC9saWIvdXRpbHMvbm90aWZpY2F0aW9uJztcbmltcG9ydCBWZXJpZmljYXRpb25Db2RlIGZyb20gJ0AvbGliL2RiL21vZGVscy92ZXJpZmljYXRpb24tY29kZS5tb2RlbCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcTogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBjb25uZWN0VG9EYXRhYmFzZSgpO1xuICAgIGNvbnN0IHsgbmFtZSwgZW1haWwsIHBhc3N3b3JkIH0gPSBhd2FpdCByZXEuanNvbigpO1xuXG4gICAgY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgVXNlci5maW5kT25lKHsgZW1haWwgfSk7XG4gICAgaWYgKGV4aXN0aW5nVXNlcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnRW1haWwgYWxyZWFkeSBleGlzdHMnIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuY3JlYXRlKHtcbiAgICAgIG5hbWUsXG4gICAgICBlbWFpbCxcbiAgICAgIHBhc3N3b3JkLCAvLyBBc3N1bWUgcGFzc3dvcmQgaXMgaGFzaGVkIGluIFVzZXIgbW9kZWwgcHJlLXNhdmUgaG9va1xuICAgICAgcm9sZTogJ1VTRVInLFxuICAgICAgcG9pbnRzQmFsYW5jZTogNTAsIC8vIFdlbGNvbWUgYm9udXMgZm9yIG5ldyB1c2VyXG4gICAgICBwb2ludHNUcmFuc2FjdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGFtb3VudDogNTAsXG4gICAgICAgICAgdHlwZTogJ2Vhcm4nLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnV2VsY29tZSBib251cyBmb3IgbmV3IHVzZXIgcmVnaXN0cmF0aW9uJyxcbiAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgY29uc3QgY29kZSA9IGdlbmVyYXRlUmVjb3ZlcnlDb2RlKCk7XG4gICAgYXdhaXQgVmVyaWZpY2F0aW9uQ29kZS5jcmVhdGUoe1xuICAgICAgdXNlcklkOiB1c2VyLl9pZCxcbiAgICAgIGNvZGUsXG4gICAgICBlbWFpbCxcbiAgICAgIHR5cGU6ICdyZWdpc3RyYXRpb24nLFxuICAgICAgZXhwaXJlc0F0OiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMTUgKiA2MCAqIDEwMDApLCAvLyAxNSBtaW51dGVzXG4gICAgfSk7XG5cbiAgICBhd2FpdCBzZW5kTm90aWZpY2F0aW9uKHtcbiAgICAgIHVzZXJJZDogdXNlci5faWQsXG4gICAgICB0eXBlOiAncmVnaXN0cmF0aW9uJyxcbiAgICAgIHRpdGxlOiAnVmVyaWZ5IFlvdXIgRW1haWwnLFxuICAgICAgbWVzc2FnZTogYFlvdXIgdmVyaWZpY2F0aW9uIGNvZGUgaXMgJHtjb2RlfS4gSXQgZXhwaXJlcyBpbiAxNSBtaW51dGVzLmAsXG4gICAgICBjaGFubmVsczogWydlbWFpbCddLFxuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coJ05ldyB1c2VyIHJlZ2lzdGVyZWQ6JywgeyB1c2VySWQ6IHVzZXIuX2lkLCBwb2ludHNCYWxhbmNlOiB1c2VyLnBvaW50c0JhbGFuY2UgfSk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBzdWNjZXNzOiB0cnVlLCB1c2VySWQ6IHVzZXIuX2lkIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1JlZ2lzdHJhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnUmVnaXN0cmF0aW9uIGZhaWxlZCcgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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