{"version":3,"names":["WebhookDispatcher","CURRENT_TIMESTAMP","cov_1sgt6cty7u","s","CURRENT_USER","WEBHOOK_KEY_PREFIX","WEBHOOK_FAILURE_PREFIX","MAX_FAILURES","FAILURE_WINDOW","getRedisClient","f","redis","b","_redis","Redis","url","process","env","UPSTASH_REDIS_URL","token","UPSTASH_REDIS_REST_TOKEN","dispatch","userId","eventType","payload","subscriptions","getSubscriptions","webhookPayload","timestamp","triggeredBy","data","dispatchPromises","map","subscription","failures","getFailureCount","id","deactivateSubscription","response","_axios","default","post","headers","generateSignature","secret","timeout","status","resetFailureCount","_logging","logger","info","user","Error","error","recordFailure","message","String","Promise","all","key","get","JSON","parse","_crypto","createHmac","update","stringify","digest","subscriptionId","count","parseInt","incr","expire","del","_webhookmodel","findOneAndUpdate","_id","isActive","warn","registerWebhook","randomBytes","toString","createdAt","createdBy","existingSubscriptions","set"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/webhook-dispatcher.ts"],"sourcesContent":["import { Redis } from '@upstash/redis';\nimport { logger } from './services/logging';\nimport axios from 'axios';\nimport crypto from 'crypto';\nimport Webhook from '../db/models/webhook.model';\n\nconst CURRENT_TIMESTAMP = '2025-04-27T12:24:36Z';\nconst CURRENT_USER = 'Mark-Lasfar';\n\nexport class WebhookDispatcher {\n  private static redis: Redis;\n  private static readonly WEBHOOK_KEY_PREFIX = 'webhook:subscriptions:';\n  private static readonly WEBHOOK_FAILURE_PREFIX = 'webhook:failures:';\n  private static readonly MAX_FAILURES = 3;\n  private static readonly FAILURE_WINDOW = 3600; // 1 hour in seconds\n\n  private static async getRedisClient() {\n    if (!this.redis) {\n      this.redis = new Redis({\n        url: process.env.UPSTASH_REDIS_URL!,\n        token: process.env.UPSTASH_REDIS_REST_TOKEN!\n      });\n    }\n    return this.redis;\n  }\n\n  static async dispatch(\n    userId: string,\n    eventType: string,\n    payload: any\n  ): Promise<void> {\n    try {\n      const subscriptions = await this.getSubscriptions(userId, eventType);\n      \n      const webhookPayload = {\n        eventType,\n        timestamp: CURRENT_TIMESTAMP,\n        triggeredBy: CURRENT_USER,\n        data: payload\n      };\n\n      const dispatchPromises = subscriptions.map(async (subscription: { id: string; url: string; secret: string; headers: Record<string, string> }) => {\n        try {\n          // Check failure count\n          const failures = await this.getFailureCount(subscription.id);\n          if (failures >= this.MAX_FAILURES) {\n            await this.deactivateSubscription(subscription.id);\n            return;\n          }\n\n          // Send webhook\n          const response = await axios.post(subscription.url, webhookPayload, {\n            headers: {\n              'Content-Type': 'application/json',\n              'X-Webhook-Timestamp': CURRENT_TIMESTAMP,\n              'X-Webhook-Signature': this.generateSignature(subscription.secret, webhookPayload),\n              ...subscription.headers\n            },\n            timeout: 5000\n          });\n\n          if (response.status >= 200 && response.status < 300) {\n            // Reset failure count on success\n            await this.resetFailureCount(subscription.id);\n\n            logger.info('Webhook dispatched successfully', {\n              userId,\n              eventType,\n              url: subscription.url,\n              timestamp: CURRENT_TIMESTAMP,\n              user: CURRENT_USER\n            });\n          } else {\n            throw new Error(`Webhook returned status ${response.status}`);\n          }\n        } catch (error) {\n          await this.recordFailure(subscription.id);\n          \n          logger.error(new Error('Webhook dispatch failed'), {\n            userId,\n            eventType,\n            url: subscription.url,\n            error: error instanceof Error ? error.message : String(error),\n            timestamp: CURRENT_TIMESTAMP,\n            user: CURRENT_USER\n          });\n        }\n      });\n\n      await Promise.all(dispatchPromises);\n    } catch (error) {\n      logger.error(new Error('Webhook dispatch error'), {\n        userId,\n        eventType,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      throw error;\n    }\n  }\n\n  private static async getSubscriptions(userId: string, eventType: string) {\n    const redis = await this.getRedisClient();\n    const key = `${this.WEBHOOK_KEY_PREFIX}${userId}:${eventType}`;\n    const subscriptions = await redis.get(key);\n    return subscriptions ? JSON.parse(String(subscriptions)) : [];\n  }\n\n  private static generateSignature(secret: string, payload: any): string {\n    return crypto\n      .createHmac('sha256', secret)\n      .update(JSON.stringify(payload))\n      .digest('hex');\n  }\n\n  private static async getFailureCount(subscriptionId: string): Promise<number> {\n    const redis = await this.getRedisClient();\n    const key = `${this.WEBHOOK_FAILURE_PREFIX}${subscriptionId}`;\n    const count = await redis.get(key);\n    return count ? parseInt(String(count), 10) : 0;\n  }\n\n  private static async recordFailure(subscriptionId: string): Promise<void> {\n    const redis = await this.getRedisClient();\n    const key = `${this.WEBHOOK_FAILURE_PREFIX}${subscriptionId}`;\n    await redis.incr(key);\n    await redis.expire(key, this.FAILURE_WINDOW);\n  }\n\n  private static async resetFailureCount(subscriptionId: string): Promise<void> {\n    const redis = await this.getRedisClient();\n    const key = `${this.WEBHOOK_FAILURE_PREFIX}${subscriptionId}`;\n    await redis.del(key);\n  }\n\n  private static async deactivateSubscription(subscriptionId: string): Promise<void> {\n    const redis = await this.getRedisClient();\n    await redis.del(`${this.WEBHOOK_KEY_PREFIX}${subscriptionId}`);\n    await Webhook.findOneAndUpdate({ _id: subscriptionId }, { isActive: false });\n\n    logger.warn('Webhook subscription deactivated due to failures', {\n      subscriptionId,\n      timestamp: CURRENT_TIMESTAMP,\n      user: CURRENT_USER\n    });\n    // Implementation for deactivating webhook subscription\n    // This could involve updating a database record or removing from Redis\n  }\n\n  static async registerWebhook(\n    userId: string,\n    eventType: string,\n    url: string,\n    secret: string,\n    headers?: Record<string, string>\n  ) {\n    try {\n      const redis = await this.getRedisClient();\n\n      const subscription = {\n        id: crypto.randomBytes(16).toString('hex'),\n        url,\n        secret,\n        headers: headers || {},\n        createdAt: CURRENT_TIMESTAMP,\n        createdBy: CURRENT_USER\n      };\n\n      const key = `${this.WEBHOOK_KEY_PREFIX}${userId}:${eventType}`;\n      const existingSubscriptions = await this.getSubscriptions(userId, eventType);\n      \n      await redis.set(\n        key,\n        JSON.stringify([...existingSubscriptions, subscription])\n      );\n\n      logger.info('Webhook subscription registered', {\n        userId,\n        eventType,\n        url,\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n\n      return subscription;\n    } catch (error) {\n      logger.error(new Error('Failed to register webhook'), {\n        userId,\n        eventType,\n        url,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n      throw error;\n    }\n  }\n}"],"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","ignoreList":[]}