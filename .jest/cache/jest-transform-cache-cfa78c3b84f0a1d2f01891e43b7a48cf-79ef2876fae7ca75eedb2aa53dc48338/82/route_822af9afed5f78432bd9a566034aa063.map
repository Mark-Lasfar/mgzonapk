{"version":3,"names":["POST","req","cov_w4yi74cig","f","s","_db","connectToDatabase","name","email","password","json","existingUser","_usermodel","default","findOne","b","_server","NextResponse","success","error","status","user","create","role","pointsBalance","pointsTransactions","amount","type","description","createdAt","Date","code","_verification","generateRecoveryCode","_verificationcodemodel","userId","_id","expiresAt","now","_notification","sendNotification","title","message","channels","console","log"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport User from '@/lib/db/models/user.model';\nimport { generateRecoveryCode } from '@/lib/utils/verification';\nimport { sendNotification } from '@/lib/utils/notification';\nimport VerificationCode from '@/lib/db/models/verification-code.model';\n\nexport async function POST(req: NextRequest) {\n  try {\n    await connectToDatabase();\n    const { name, email, password } = await req.json();\n\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return NextResponse.json({ success: false, error: 'Email already exists' }, { status: 400 });\n    }\n\n    const user = await User.create({\n      name,\n      email,\n      password, // Assume password is hashed in User model pre-save hook\n      role: 'USER',\n      pointsBalance: 50, // Welcome bonus for new user\n      pointsTransactions: [\n        {\n          amount: 50,\n          type: 'earn',\n          description: 'Welcome bonus for new user registration',\n          createdAt: new Date(),\n        },\n      ],\n    });\n\n    const code = generateRecoveryCode();\n    await VerificationCode.create({\n      userId: user._id,\n      code,\n      email,\n      type: 'registration',\n      expiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15 minutes\n    });\n\n    await sendNotification({\n      userId: user._id,\n      type: 'registration',\n      title: 'Verify Your Email',\n      message: `Your verification code is ${code}. It expires in 15 minutes.`,\n      channels: ['email'],\n    });\n\n    console.log('New user registered:', { userId: user._id, pointsBalance: user.pointsBalance });\n\n    return NextResponse.json({ success: true, userId: user._id });\n  } catch (error) {\n    console.error('Registration error:', error);\n    return NextResponse.json({ success: false, error: 'Registration failed' }, { status: 500 });\n  }\n}"],"mappingssB;;;;;;WAAAA,IAAA;;;;;iCAPoB;;;iCACR;;;uEACjB;;;iCACoB;;;iCACJ;;;uEACJ;;;;;;;;;;;;;;;AAEtB,eAAeA,KAAKC,GAAgB;EAAA;EAAAC,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACzC,IAAI;IAAA;IAAAF,aAAA,GAAAE,CAAA;IACF,MAAM,IAAAC,GAAA,CAAAC,iBAAiB;IACvB,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAQ,CAAE;IAAA;IAAA,CAAAP,aAAA,GAAAE,CAAA,QAAG,MAAMH,GAAA,CAAIS,IAAI;IAEhD,MAAMC,YAAA;IAAA;IAAA,CAAAT,aAAA,GAAAE,CAAA,QAAe,MAAMQ,UAAA,CAAAC,OAAI,CAACC,OAAO,CAAC;MAAEN;IAAM;IAAA;IAAAN,aAAA,GAAAE,CAAA;IAChD,IAAIO,YAAA,EAAc;MAAA;MAAAT,aAAA,GAAAa,CAAA;MAAAb,aAAA,GAAAE,CAAA;MAChB,OAAOY,OAAA,CAAAC,YAAY,CAACP,IAAI,CAAC;QAAEQ,OAAA,EAAS;QAAOC,KAAA,EAAO;MAAuB,GAAG;QAAEC,MAAA,EAAQ;MAAI;IAC5F;IAAA;IAAA;MAAAlB,aAAA,GAAAa,CAAA;IAAA;IAEA,MAAMM,IAAA;IAAA;IAAA,CAAAnB,aAAA,GAAAE,CAAA,QAAO,MAAMQ,UAAA,CAAAC,OAAI,CAACS,MAAM,CAAC;MAC7Bf,IAAA;MACAC,KAAA;MACAC,QAAA;MACAc,IAAA,EAAM;MACNC,aAAA,EAAe;MACfC,kBAAA,EAAoB,CAClB;QACEC,MAAA,EAAQ;QACRC,IAAA,EAAM;QACNC,WAAA,EAAa;QACbC,SAAA,EAAW,IAAIC,IAAA;MACjB;IAEJ;IAEA,MAAMC,IAAA;IAAA;IAAA,CAAA7B,aAAA,GAAAE,CAAA,QAAO,IAAA4B,aAAA,CAAAC,oBAAoB;IAAA;IAAA/B,aAAA,GAAAE,CAAA;IACjC,MAAM8B,sBAAA,CAAArB,OAAgB,CAACS,MAAM,CAAC;MAC5Ba,MAAA,EAAQd,IAAA,CAAKe,GAAG;MAChBL,IAAA;MACAvB,KAAA;MACAmB,IAAA,EAAM;MACNU,SAAA,EAAW,IAAIP,IAAA,CAAKA,IAAA,CAAKQ,GAAG,KAAK,KAAK,KAAK;IAC7C;IAAA;IAAApC,aAAA,GAAAE,CAAA;IAEA,MAAM,IAAAmC,aAAA,CAAAC,gBAAgB,EAAC;MACrBL,MAAA,EAAQd,IAAA,CAAKe,GAAG;MAChBT,IAAA,EAAM;MACNc,KAAA,EAAO;MACPC,OAAA,EAAS,6BAA6BX,IAAA,6BAAiC;MACvEY,QAAA,EAAU,CAAC;IACb;IAAA;IAAAzC,aAAA,GAAAE,CAAA;IAEAwC,OAAA,CAAQC,GAAG,CAAC,wBAAwB;MAAEV,MAAA,EAAQd,IAAA,CAAKe,GAAG;MAAEZ,aAAA,EAAeH,IAAA,CAAKG;IAAc;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IAE1F,OAAOY,OAAA,CAAAC,YAAY,CAACP,IAAI,CAAC;MAAEQ,OAAA,EAAS;MAAMiB,MAAA,EAAQd,IAAA,CAAKe;IAAI;EAC7D,EAAE,OAAOjB,KAAA,EAAO;IAAA;IAAAjB,aAAA,GAAAE,CAAA;IACdwC,OAAA,CAAQzB,KAAK,CAAC,uBAAuBA,KAAA;IAAA;IAAAjB,aAAA,GAAAE,CAAA;IACrC,OAAOY,OAAA,CAAAC,YAAY,CAACP,IAAI,CAAC;MAAEQ,OAAA,EAAS;MAAOC,KAAA,EAAO;IAAsB,GAAG;MAAEC,MAAA,EAAQ;IAAI;EAC3F;AACF","ignoreList":[]}