636e85b7f1fb84e0f1a796219b624dd1
"use strict";

/* istanbul ignore next */
function cov_1nsruwy1kx() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/keys/route.ts";
  var hash = "07717db14dc0061f361f01f2a96789c62162cc87";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/keys/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "8": {
        start: {
          line: 21,
          column: 35
        },
        end: {
          line: 21,
          column: 111
        }
      },
      "9": {
        start: {
          line: 22,
          column: 14
        },
        end: {
          line: 22,
          column: 41
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 26,
          column: 6
        }
      },
      "11": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "12": {
        start: {
          line: 30,
          column: 24
        },
        end: {
          line: 30,
          column: 47
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "14": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "15": {
        start: {
          line: 39,
          column: 21
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "16": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 43
        }
      },
      "17": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "18": {
        start: {
          line: 51,
          column: 32
        },
        end: {
          line: 51,
          column: 38
        }
      },
      "19": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "20": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "21": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "22": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 73,
          column: 47
        }
      },
      "23": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "24": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "25": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 43
        }
      },
      "26": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 85,
          column: 28
        }
      },
      "27": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "28": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 23,
            column: 9
          },
          end: {
            line: 23,
            column: 33
          }
        },
        loc: {
          start: {
            line: 23,
            column: 39
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 19
          }
        },
        loc: {
          start: {
            line: 28,
            column: 29
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 28
      },
      "5": {
        name: "GET",
        decl: {
          start: {
            line: 71,
            column: 15
          },
          end: {
            line: 71,
            column: 18
          }
        },
        loc: {
          start: {
            line: 71,
            column: 28
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 71
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 26,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 24,
            column: 38
          }
        }, {
          start: {
            line: 24,
            column: 41
          },
          end: {
            line: 26,
            column: 5
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 24,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 11
          },
          end: {
            line: 24,
            column: 14
          }
        }, {
          start: {
            line: 24,
            column: 18
          },
          end: {
            line: 24,
            column: 32
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 44,
            column: 25
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 25
          },
          end: {
            line: 44,
            column: 41
          }
        }, {
          start: {
            line: 44,
            column: 45
          },
          end: {
            line: 47,
            column: 13
          }
        }],
        line: 44
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/keys/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport ApiKeyModel from '@/lib/db/models/api-key.model';\nimport { auth } from '@/auth';\nimport { ApiKeyRequest } from '@/lib/api/types';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session) {\n      return NextResponse.json(\n        { success: false, error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const body: ApiKeyRequest = await request.json();\n\n    await connectToDatabase();\n\n    const apiKey = await ApiKeyModel.create({\n      userId: session.user.id,\n      name: body.name,\n      permissions: body.permissions || ['products:read', 'orders:read'],\n      expiresAt: body.expiresAt,\n    });\n\n    // Only return the key and secret once\n    const { key, secret } = apiKey;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        key,\n        secret,\n        name: apiKey.name,\n        permissions: apiKey.permissions,\n        expiresAt: apiKey.expiresAt,\n      },\n    });\n  } catch (error) {\n    return NextResponse.json(\n      { success: false, error: error.message },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session) {\n      return NextResponse.json(\n        { success: false, error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    await connectToDatabase();\n\n    const apiKeys = await ApiKeyModel.find({\n      userId: session.user.id,\n    }).select('-secret');\n\n    return NextResponse.json({\n      success: true,\n      data: apiKeys,\n    });\n  } catch (error) {\n    return NextResponse.json(\n      { success: false, error: error.message },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["GET", "POST", "request", "session", "auth", "NextResponse", "json", "success", "error", "status", "body", "connectToDatabase", "apiKey", "ApiKeyModel", "create", "userId", "user", "id", "name", "permissions", "expiresAt", "key", "secret", "data", "message", "apiKeys", "find", "select"],
      mappings: ";;;;;;;;;;;IAgDsBA,GAAG;eAAHA;;IA1CAC,IAAI;eAAJA;;;wBANoB;oBACR;oEACV;sBACH;;;;;;AAGd,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAMC,UAAU,MAAMC,IAAAA,UAAI;QAC1B,IAAI,CAACD,SAAS;YACZ,OAAOE,oBAAY,CAACC,IAAI,CACtB;gBAAEC,SAAS;gBAAOC,OAAO;YAAe,GACxC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAMC,OAAsB,MAAMR,QAAQI,IAAI;QAE9C,MAAMK,IAAAA,qBAAiB;QAEvB,MAAMC,SAAS,MAAMC,oBAAW,CAACC,MAAM,CAAC;YACtCC,QAAQZ,QAAQa,IAAI,CAACC,EAAE;YACvBC,MAAMR,KAAKQ,IAAI;YACfC,aAAaT,KAAKS,WAAW,IAAI;gBAAC;gBAAiB;aAAc;YACjEC,WAAWV,KAAKU,SAAS;QAC3B;QAEA,sCAAsC;QACtC,MAAM,EAAEC,GAAG,EAAEC,MAAM,EAAE,GAAGV;QAExB,OAAOP,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTgB,MAAM;gBACJF;gBACAC;gBACAJ,MAAMN,OAAOM,IAAI;gBACjBC,aAAaP,OAAOO,WAAW;gBAC/BC,WAAWR,OAAOQ,SAAS;YAC7B;QACF;IACF,EAAE,OAAOZ,OAAO;QACd,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,SAAS;YAAOC,OAAOA,MAAMgB,OAAO;QAAC,GACvC;YAAEf,QAAQ;QAAI;IAElB;AACF;AAEO,eAAeT,IAAIE,OAAoB;IAC5C,IAAI;QACF,MAAMC,UAAU,MAAMC,IAAAA,UAAI;QAC1B,IAAI,CAACD,SAAS;YACZ,OAAOE,oBAAY,CAACC,IAAI,CACtB;gBAAEC,SAAS;gBAAOC,OAAO;YAAe,GACxC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAME,IAAAA,qBAAiB;QAEvB,MAAMc,UAAU,MAAMZ,oBAAW,CAACa,IAAI,CAAC;YACrCX,QAAQZ,QAAQa,IAAI,CAACC,EAAE;QACzB,GAAGU,MAAM,CAAC;QAEV,OAAOtB,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTgB,MAAME;QACR;IACF,EAAE,OAAOjB,OAAO;QACd,OAAOH,oBAAY,CAACC,IAAI,CACtB;YAAEC,SAAS;YAAOC,OAAOA,MAAMgB,OAAO;QAAC,GACvC;YAAEf,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "07717db14dc0061f361f01f2a96789c62162cc87"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1nsruwy1kx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1nsruwy1kx();
cov_1nsruwy1kx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1nsruwy1kx().f[0]++;
  cov_1nsruwy1kx().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1nsruwy1kx().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1nsruwy1kx().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_1nsruwy1kx().f[1]++;
    cov_1nsruwy1kx().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_1nsruwy1kx().f[2]++;
    cov_1nsruwy1kx().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1nsruwy1kx().s[6]++, require("next/server"));
const _db =
/* istanbul ignore next */
(cov_1nsruwy1kx().s[7]++, require("../../../../lib/db"));
const _apikeymodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_1nsruwy1kx().s[8]++, _interop_require_default(require("../../../../lib/db/models/api-key.model")));
const _auth =
/* istanbul ignore next */
(cov_1nsruwy1kx().s[9]++, require("../../../../auth"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1nsruwy1kx().f[3]++;
  cov_1nsruwy1kx().s[10]++;
  return /* istanbul ignore next */(cov_1nsruwy1kx().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1nsruwy1kx().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1nsruwy1kx().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1nsruwy1kx().b[0][1]++, {
    default: obj
  });
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1nsruwy1kx().f[4]++;
  cov_1nsruwy1kx().s[11]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_1nsruwy1kx().s[12]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_1nsruwy1kx().s[13]++;
    if (!session) {
      /* istanbul ignore next */
      cov_1nsruwy1kx().b[2][0]++;
      cov_1nsruwy1kx().s[14]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1nsruwy1kx().b[2][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1nsruwy1kx().s[15]++, await request.json());
    /* istanbul ignore next */
    cov_1nsruwy1kx().s[16]++;
    await (0, _db.connectToDatabase)();
    const apiKey =
    /* istanbul ignore next */
    (cov_1nsruwy1kx().s[17]++, await _apikeymodel.default.create({
      userId: session.user.id,
      name: body.name,
      permissions:
      /* istanbul ignore next */
      (cov_1nsruwy1kx().b[3][0]++, body.permissions) ||
      /* istanbul ignore next */
      (cov_1nsruwy1kx().b[3][1]++, ['products:read', 'orders:read']),
      expiresAt: body.expiresAt
    }));
    // Only return the key and secret once
    const {
      key,
      secret
    } =
    /* istanbul ignore next */
    (cov_1nsruwy1kx().s[18]++, apiKey);
    /* istanbul ignore next */
    cov_1nsruwy1kx().s[19]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        key,
        secret,
        name: apiKey.name,
        permissions: apiKey.permissions,
        expiresAt: apiKey.expiresAt
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1nsruwy1kx().s[20]++;
    return _server.NextResponse.json({
      success: false,
      error: error.message
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_1nsruwy1kx().f[5]++;
  cov_1nsruwy1kx().s[21]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_1nsruwy1kx().s[22]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_1nsruwy1kx().s[23]++;
    if (!session) {
      /* istanbul ignore next */
      cov_1nsruwy1kx().b[4][0]++;
      cov_1nsruwy1kx().s[24]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1nsruwy1kx().b[4][1]++;
    }
    cov_1nsruwy1kx().s[25]++;
    await (0, _db.connectToDatabase)();
    const apiKeys =
    /* istanbul ignore next */
    (cov_1nsruwy1kx().s[26]++, await _apikeymodel.default.find({
      userId: session.user.id
    }).select('-secret'));
    /* istanbul ignore next */
    cov_1nsruwy1kx().s[27]++;
    return _server.NextResponse.json({
      success: true,
      data: apiKeys
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1nsruwy1kx().s[28]++;
    return _server.NextResponse.json({
      success: false,
      error: error.message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfMW5zcnV3eTFreCIsImYiLCJzIiwiUE9TVCIsInJlcXVlc3QiLCJzZXNzaW9uIiwiX2F1dGgiLCJhdXRoIiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3VjY2VzcyIsImVycm9yIiwic3RhdHVzIiwiYm9keSIsIl9kYiIsImNvbm5lY3RUb0RhdGFiYXNlIiwiYXBpS2V5IiwiX2FwaWtleW1vZGVsIiwiZGVmYXVsdCIsImNyZWF0ZSIsInVzZXJJZCIsInVzZXIiLCJpZCIsIm5hbWUiLCJwZXJtaXNzaW9ucyIsImV4cGlyZXNBdCIsImtleSIsInNlY3JldCIsImRhdGEiLCJtZXNzYWdlIiwiYXBpS2V5cyIsImZpbmQiLCJzZWxlY3QiXSwic291cmNlcyI6WyIvaG9tZS9oYWdlci9uZXcvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyICgzKS9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIvYXBwL2FwaS92MS9rZXlzL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBjb25uZWN0VG9EYXRhYmFzZSB9IGZyb20gJ0AvbGliL2RiJztcbmltcG9ydCBBcGlLZXlNb2RlbCBmcm9tICdAL2xpYi9kYi9tb2RlbHMvYXBpLWtleS5tb2RlbCc7XG5pbXBvcnQgeyBhdXRoIH0gZnJvbSAnQC9hdXRoJztcbmltcG9ydCB7IEFwaUtleVJlcXVlc3QgfSBmcm9tICdAL2xpYi9hcGkvdHlwZXMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBhdXRoKCk7XG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnVW5hdXRob3JpemVkJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAxIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgYm9keTogQXBpS2V5UmVxdWVzdCA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuXG4gICAgYXdhaXQgY29ubmVjdFRvRGF0YWJhc2UoKTtcblxuICAgIGNvbnN0IGFwaUtleSA9IGF3YWl0IEFwaUtleU1vZGVsLmNyZWF0ZSh7XG4gICAgICB1c2VySWQ6IHNlc3Npb24udXNlci5pZCxcbiAgICAgIG5hbWU6IGJvZHkubmFtZSxcbiAgICAgIHBlcm1pc3Npb25zOiBib2R5LnBlcm1pc3Npb25zIHx8IFsncHJvZHVjdHM6cmVhZCcsICdvcmRlcnM6cmVhZCddLFxuICAgICAgZXhwaXJlc0F0OiBib2R5LmV4cGlyZXNBdCxcbiAgICB9KTtcblxuICAgIC8vIE9ubHkgcmV0dXJuIHRoZSBrZXkgYW5kIHNlY3JldCBvbmNlXG4gICAgY29uc3QgeyBrZXksIHNlY3JldCB9ID0gYXBpS2V5O1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGtleSxcbiAgICAgICAgc2VjcmV0LFxuICAgICAgICBuYW1lOiBhcGlLZXkubmFtZSxcbiAgICAgICAgcGVybWlzc2lvbnM6IGFwaUtleS5wZXJtaXNzaW9ucyxcbiAgICAgICAgZXhwaXJlc0F0OiBhcGlLZXkuZXhwaXJlc0F0LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGF1dGgoKTtcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDEgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBhd2FpdCBjb25uZWN0VG9EYXRhYmFzZSgpO1xuXG4gICAgY29uc3QgYXBpS2V5cyA9IGF3YWl0IEFwaUtleU1vZGVsLmZpbmQoe1xuICAgICAgdXNlcklkOiBzZXNzaW9uLnVzZXIuaWQsXG4gICAgfSkuc2VsZWN0KCctc2VjcmV0Jyk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IGFwaUtleXMsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QU9kLEtBQUEsRUFBTztJQUFBO0lBQUFiLGNBQUEsR0FBQUUsQ0FBQTtJQUNkLE9BQU9PLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQ3RCO01BQUVDLE9BQUEsRUFBUztNQUFPQyxLQUFBLEVBQU9BLEtBQUEsQ0FBTWtCO0lBQVEsR0FDdkM7TUFBRWpCLE1BQUEsRUFBUTtJQUFJO0VBRWxCO0FBQ0Y7QUFFTyxlQUFlZixJQUFJSyxPQUFvQjtFQUFBO0VBQUFKLGNBQUEsR0FBQUMsQ0FBQTtFQUFBRCxjQUFBLEdBQUFFLENBQUE7RUFDNUMsSUFBSTtJQUNGLE1BQU1HLE9BQUE7SUFBQTtJQUFBLENBQUFMLGNBQUEsR0FBQUUsQ0FBQSxRQUFVLE1BQU0sSUFBQUksS0FBQSxDQUFBQyxJQUFJO0lBQUE7SUFBQVAsY0FBQSxHQUFBRSxDQUFBO0lBQzFCLElBQUksQ0FBQ0csT0FBQSxFQUFTO01BQUE7TUFBQUwsY0FBQSxHQUFBUSxDQUFBO01BQUFSLGNBQUEsR0FBQUUsQ0FBQTtNQUNaLE9BQU9PLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQ3RCO1FBQUVDLE9BQUEsRUFBUztRQUFPQyxLQUFBLEVBQU87TUFBZSxHQUN4QztRQUFFQyxNQUFBLEVBQVE7TUFBSTtJQUVsQjtJQUFBO0lBQUE7TUFBQWQsY0FBQSxHQUFBUSxDQUFBO0lBQUE7SUFBQVIsY0FBQSxHQUFBRSxDQUFBO0lBRUEsTUFBTSxJQUFBYyxHQUFBLENBQUFDLGlCQUFpQjtJQUV2QixNQUFNZSxPQUFBO0lBQUE7SUFBQSxDQUFBaEMsY0FBQSxHQUFBRSxDQUFBLFFBQVUsTUFBTWlCLFlBQUEsQ0FBQUMsT0FBVyxDQUFDYSxJQUFJLENBQUM7TUFDckNYLE1BQUEsRUFBUWpCLE9BQUEsQ0FBUWtCLElBQUksQ0FBQ0M7SUFDdkIsR0FBR1UsTUFBTSxDQUFDO0lBQUE7SUFBQWxDLGNBQUEsR0FBQUUsQ0FBQTtJQUVWLE9BQU9PLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7TUFDdkJDLE9BQUEsRUFBUztNQUNUa0IsSUFBQSxFQUFNRTtJQUNSO0VBQ0YsRUFBRSxPQUFPbkIsS0FBQSxFQUFPO0lBQUE7SUFBQWIsY0FBQSxHQUFBRSxDQUFBO0lBQ2QsT0FBT08sT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FDdEI7TUFBRUMsT0FBQSxFQUFTO01BQU9DLEtBQUEsRUFBT0EsS0FBQSxDQUFNa0I7SUFBUSxHQUN2QztNQUFFakIsTUFBQSxFQUFRO0lBQUk7RUFFbEI7QUFDRiIsImlnbm9yZUxpc3QiOltdfQ==