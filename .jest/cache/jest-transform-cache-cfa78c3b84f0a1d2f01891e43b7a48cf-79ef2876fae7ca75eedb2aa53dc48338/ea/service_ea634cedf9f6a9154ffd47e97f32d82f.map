{"version":3,"names":["cov_131rl14ds1","actualCoverage","s","AliExpressFulfillmentService","constructor","config","f","client","_topclient","AliExpressClient","apiKey","credentials","apiSecret","accessToken","sandbox","createFulfillmentOrder","order","response","execute","logistics_address","contact_person","shippingAddress","firstName","lastName","address","address1","address2","city","province","state","zip","postalCode","country","mobile_no","phone","product_items","items","map","item","product_id","sku","quantity","sku_attr","logistics_service_name","shippingMethod","success","data","orderId","order_id","status","error","Error","b","message","getFulfillmentOrder","order_status","trackingNumber","logistics_info","tracking_number","updatedAt","gmt_modified"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/integrations/aliexpress/service.ts"],"sourcesContent":["import { FulfillmentOrder, FulfillmentConfig } from '../../types/fulfillment';\nimport { AliExpressClient } from './top-client';\n\nexport class AliExpressFulfillmentService {\n  private client: AliExpressClient;\n\n  constructor(config: FulfillmentConfig) {\n    this.client = new AliExpressClient({\n      apiKey: config.credentials.apiKey!,\n      apiSecret: config.credentials.apiSecret!,\n      accessToken: config.credentials.accessToken,\n      sandbox: config.sandbox,\n    });\n  }\n\n  async createFulfillmentOrder(order: FulfillmentOrder) {\n    try {\n      const response = await this.client.execute('aliexpress.trade.order.place', {\n        logistics_address: {\n          contact_person: `${order.shippingAddress.firstName} ${order.shippingAddress.lastName}`,\n          address: order.shippingAddress.address1,\n          address2: order.shippingAddress.address2,\n          city: order.shippingAddress.city,\n          province: order.shippingAddress.state,\n          zip: order.shippingAddress.postalCode,\n          country: order.shippingAddress.country,\n          mobile_no: order.shippingAddress.phone,\n        },\n        product_items: order.items.map(item => ({\n          product_id: item.sku,\n          quantity: item.quantity,\n          sku_attr: '',\n        })),\n        logistics_service_name: order.shippingMethod,\n      });\n\n      return {\n        success: true,\n        data: {\n          orderId: response.order_id,\n          status: 'processing',\n        },\n      };\n    } catch (error: any) {\n      throw new Error(`AliExpress fulfillment error: ${error?.message || error}`);\n    }\n  }\n\n  async getFulfillmentOrder(orderId: string) {\n    try {\n      const response = await this.client.execute('aliexpress.trade.order.get', {\n        order_id: orderId,\n      });\n\n      return {\n        success: true,\n        data: {\n          status: response.order_status,\n          trackingNumber: response.logistics_info?.tracking_number,\n          updatedAt: response.gmt_modified,\n        },\n      };\n    } catch (error: any) {\n      throw new Error(`AliExpress tracking error: ${error?.message || error}`);\n    }\n  }\n}"],"mappings":"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","ignoreList":[]}