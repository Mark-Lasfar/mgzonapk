{"version":3,"names":["DELETE","cov_16s8hmk0lx","f","s","GET","progressTracker","_syncprogress","SyncProgressTracker","request","authError","_auth","validateApiKey","b","rateLimitResult","_ratelimit","rateLimit","_server","NextResponse","searchParams","URL","url","syncId","get","progress","getProgress","json","success","error","status","data","activeSyncs","listActiveSyncs","syncs","count","length","_logging","logger","message","cancelSync"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/inventory/sync/progress/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateApiKey } from '@/lib/api/middleware/auth';\nimport { rateLimit } from '@/lib/api/middleware/rate-limit';\nimport { SyncProgressTracker } from '@/lib/api/services/sync-progress';\nimport { logger } from '@/lib/api/services/logging';\n\nconst progressTracker = new SyncProgressTracker();\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Validate API key\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    // Check rate limits\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    const { searchParams } = new URL(request.url);\n    const syncId = searchParams.get('syncId');\n\n    if (syncId) {\n      // Get specific sync progress\n      const progress = await progressTracker.getProgress(syncId);\n      \n      if (!progress) {\n        return NextResponse.json(\n          { success: false, error: 'Sync not found' },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json({\n        success: true,\n        data: progress,\n      });\n    } else {\n      // List active syncs\n      const activeSyncs = await progressTracker.listActiveSyncs();\n      \n      return NextResponse.json({\n        success: true,\n        data: {\n          syncs: activeSyncs,\n          count: activeSyncs.length,\n        },\n      });\n    }\n\n  } catch (error) {\n    logger.error('Error fetching sync progress', { error });\n    return NextResponse.json(\n      { success: false, error: error.message },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Validate API key\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    // Check rate limits\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    const { searchParams } = new URL(request.url);\n    const syncId = searchParams.get('syncId');\n\n    if (!syncId) {\n      return NextResponse.json(\n        { success: false, error: 'Sync ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const progress = await progressTracker.cancelSync(syncId);\n\n    return NextResponse.json({\n      success: true,\n      data: progress,\n    });\n\n  } catch (error) {\n    logger.error('Error cancelling sync', { error });\n    return NextResponse.json(\n      { success: false, error: error.message },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}