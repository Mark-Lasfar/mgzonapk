fd27472b8b887b8e5d3a76697e8e2853
"use strict";

/* istanbul ignore next */
function cov_16s8hmk0lx() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/inventory/sync/progress/route.ts";
  var hash = "fa620a9d7d45b2584628c1162e3074e559fe864f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/inventory/sync/progress/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 66
        }
      },
      "8": {
        start: {
          line: 21,
          column: 19
        },
        end: {
          line: 21,
          column: 77
        }
      },
      "9": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 81
        }
      },
      "10": {
        start: {
          line: 23,
          column: 17
        },
        end: {
          line: 23,
          column: 70
        }
      },
      "11": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 24,
          column: 63
        }
      },
      "12": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "13": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 28,
          column: 66
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 40
        }
      },
      "15": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 29,
          column: 40
        }
      },
      "16": {
        start: {
          line: 31,
          column: 32
        },
        end: {
          line: 31,
          column: 72
        }
      },
      "17": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 84
        }
      },
      "18": {
        start: {
          line: 32,
          column: 61
        },
        end: {
          line: 32,
          column: 84
        }
      },
      "19": {
        start: {
          line: 33,
          column: 33
        },
        end: {
          line: 33,
          column: 53
        }
      },
      "20": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 49
        }
      },
      "21": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "22": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 70
        }
      },
      "23": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "24": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 44,
          column: 19
        }
      },
      "25": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "26": {
        start: {
          line: 52,
          column: 32
        },
        end: {
          line: 52,
          column: 71
        }
      },
      "27": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "29": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "30": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "31": {
        start: {
          line: 76,
          column: 26
        },
        end: {
          line: 76,
          column: 66
        }
      },
      "32": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 40
        }
      },
      "33": {
        start: {
          line: 77,
          column: 23
        },
        end: {
          line: 77,
          column: 40
        }
      },
      "34": {
        start: {
          line: 79,
          column: 32
        },
        end: {
          line: 79,
          column: 72
        }
      },
      "35": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 84
        }
      },
      "36": {
        start: {
          line: 80,
          column: 61
        },
        end: {
          line: 80,
          column: 84
        }
      },
      "37": {
        start: {
          line: 81,
          column: 33
        },
        end: {
          line: 81,
          column: 53
        }
      },
      "38": {
        start: {
          line: 82,
          column: 23
        },
        end: {
          line: 82,
          column: 49
        }
      },
      "39": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "40": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "41": {
        start: {
          line: 91,
          column: 25
        },
        end: {
          line: 91,
          column: 65
        }
      },
      "42": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "43": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "44": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 10
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 25,
            column: 15
          },
          end: {
            line: 25,
            column: 18
          }
        },
        loc: {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 25
      },
      "4": {
        name: "DELETE",
        decl: {
          start: {
            line: 73,
            column: 15
          },
          end: {
            line: 73,
            column: 21
          }
        },
        loc: {
          start: {
            line: 73,
            column: 31
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 73
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 84
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 84
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: 50,
            column: 15
          },
          end: {
            line: 60,
            column: 9
          }
        }],
        line: 35
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 45,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 80,
            column: 84
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 80,
            column: 84
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/inventory/sync/progress/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateApiKey } from '@/lib/api/middleware/auth';\nimport { rateLimit } from '@/lib/api/middleware/rate-limit';\nimport { SyncProgressTracker } from '@/lib/api/services/sync-progress';\nimport { logger } from '@/lib/api/services/logging';\n\nconst progressTracker = new SyncProgressTracker();\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Validate API key\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    // Check rate limits\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    const { searchParams } = new URL(request.url);\n    const syncId = searchParams.get('syncId');\n\n    if (syncId) {\n      // Get specific sync progress\n      const progress = await progressTracker.getProgress(syncId);\n      \n      if (!progress) {\n        return NextResponse.json(\n          { success: false, error: 'Sync not found' },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json({\n        success: true,\n        data: progress,\n      });\n    } else {\n      // List active syncs\n      const activeSyncs = await progressTracker.listActiveSyncs();\n      \n      return NextResponse.json({\n        success: true,\n        data: {\n          syncs: activeSyncs,\n          count: activeSyncs.length,\n        },\n      });\n    }\n\n  } catch (error) {\n    logger.error('Error fetching sync progress', { error });\n    return NextResponse.json(\n      { success: false, error: error.message },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Validate API key\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    // Check rate limits\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    const { searchParams } = new URL(request.url);\n    const syncId = searchParams.get('syncId');\n\n    if (!syncId) {\n      return NextResponse.json(\n        { success: false, error: 'Sync ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const progress = await progressTracker.cancelSync(syncId);\n\n    return NextResponse.json({\n      success: true,\n      data: progress,\n    });\n\n  } catch (error) {\n    logger.error('Error cancelling sync', { error });\n    return NextResponse.json(\n      { success: false, error: error.message },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["DELETE", "GET", "progressTracker", "SyncProgressTracker", "request", "authError", "validateApiKey", "rateLimitResult", "rateLimit", "NextResponse", "searchParams", "URL", "url", "syncId", "get", "progress", "getProgress", "json", "success", "error", "status", "data", "activeSyncs", "listActiveSyncs", "syncs", "count", "length", "logger", "message", "cancelSync"],
      mappings: ";;;;;;;;;;;IA0DsBA,MAAM;eAANA;;IAlDAC,GAAG;eAAHA;;;wBARoB;sBACX;2BACL;8BACU;yBACb;AAEvB,MAAMC,kBAAkB,IAAIC,iCAAmB;AAExC,eAAeF,IAAIG,OAAoB;IAC5C,IAAI;QACF,mBAAmB;QACnB,MAAMC,YAAY,MAAMC,IAAAA,oBAAc,EAACF;QACvC,IAAIC,WAAW,OAAOA;QAEtB,oBAAoB;QACpB,MAAME,kBAAkB,MAAMC,IAAAA,oBAAS,EAACJ;QACxC,IAAIG,2BAA2BE,oBAAY,EAAE,OAAOF;QAEpD,MAAM,EAAEG,YAAY,EAAE,GAAG,IAAIC,IAAIP,QAAQQ,GAAG;QAC5C,MAAMC,SAASH,aAAaI,GAAG,CAAC;QAEhC,IAAID,QAAQ;YACV,6BAA6B;YAC7B,MAAME,WAAW,MAAMb,gBAAgBc,WAAW,CAACH;YAEnD,IAAI,CAACE,UAAU;gBACb,OAAON,oBAAY,CAACQ,IAAI,CACtB;oBAAEC,SAAS;oBAAOC,OAAO;gBAAiB,GAC1C;oBAAEC,QAAQ;gBAAI;YAElB;YAEA,OAAOX,oBAAY,CAACQ,IAAI,CAAC;gBACvBC,SAAS;gBACTG,MAAMN;YACR;QACF,OAAO;YACL,oBAAoB;YACpB,MAAMO,cAAc,MAAMpB,gBAAgBqB,eAAe;YAEzD,OAAOd,oBAAY,CAACQ,IAAI,CAAC;gBACvBC,SAAS;gBACTG,MAAM;oBACJG,OAAOF;oBACPG,OAAOH,YAAYI,MAAM;gBAC3B;YACF;QACF;IAEF,EAAE,OAAOP,OAAO;QACdQ,eAAM,CAACR,KAAK,CAAC,gCAAgC;YAAEA;QAAM;QACrD,OAAOV,oBAAY,CAACQ,IAAI,CACtB;YAAEC,SAAS;YAAOC,OAAOA,MAAMS,OAAO;QAAC,GACvC;YAAER,QAAQ;QAAI;IAElB;AACF;AAEO,eAAepB,OAAOI,OAAoB;IAC/C,IAAI;QACF,mBAAmB;QACnB,MAAMC,YAAY,MAAMC,IAAAA,oBAAc,EAACF;QACvC,IAAIC,WAAW,OAAOA;QAEtB,oBAAoB;QACpB,MAAME,kBAAkB,MAAMC,IAAAA,oBAAS,EAACJ;QACxC,IAAIG,2BAA2BE,oBAAY,EAAE,OAAOF;QAEpD,MAAM,EAAEG,YAAY,EAAE,GAAG,IAAIC,IAAIP,QAAQQ,GAAG;QAC5C,MAAMC,SAASH,aAAaI,GAAG,CAAC;QAEhC,IAAI,CAACD,QAAQ;YACX,OAAOJ,oBAAY,CAACQ,IAAI,CACtB;gBAAEC,SAAS;gBAAOC,OAAO;YAAsB,GAC/C;gBAAEC,QAAQ;YAAI;QAElB;QAEA,MAAML,WAAW,MAAMb,gBAAgB2B,UAAU,CAAChB;QAElD,OAAOJ,oBAAY,CAACQ,IAAI,CAAC;YACvBC,SAAS;YACTG,MAAMN;QACR;IAEF,EAAE,OAAOI,OAAO;QACdQ,eAAM,CAACR,KAAK,CAAC,yBAAyB;YAAEA;QAAM;QAC9C,OAAOV,oBAAY,CAACQ,IAAI,CACtB;YAAEC,SAAS;YAAOC,OAAOA,MAAMS,OAAO;QAAC,GACvC;YAAER,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fa620a9d7d45b2584628c1162e3074e559fe864f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_16s8hmk0lx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_16s8hmk0lx();
cov_16s8hmk0lx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_16s8hmk0lx().f[0]++;
  cov_16s8hmk0lx().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_16s8hmk0lx().s[3]++;
_export(exports, {
  DELETE: function () {
    /* istanbul ignore next */
    cov_16s8hmk0lx().f[1]++;
    cov_16s8hmk0lx().s[4]++;
    return DELETE;
  },
  GET: function () {
    /* istanbul ignore next */
    cov_16s8hmk0lx().f[2]++;
    cov_16s8hmk0lx().s[5]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_16s8hmk0lx().s[6]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_16s8hmk0lx().s[7]++, require("../../../../../../lib/api/middleware/auth"));
const _ratelimit =
/* istanbul ignore next */
(cov_16s8hmk0lx().s[8]++, require("../../../../../../lib/api/middleware/rate-limit"));
const _syncprogress =
/* istanbul ignore next */
(cov_16s8hmk0lx().s[9]++, require("../../../../../../lib/api/services/sync-progress"));
const _logging =
/* istanbul ignore next */
(cov_16s8hmk0lx().s[10]++, require("../../../../../../lib/api/services/logging"));
const progressTracker =
/* istanbul ignore next */
(cov_16s8hmk0lx().s[11]++, new _syncprogress.SyncProgressTracker());
async function GET(request) {
  /* istanbul ignore next */
  cov_16s8hmk0lx().f[3]++;
  cov_16s8hmk0lx().s[12]++;
  try {
    // Validate API key
    const authError =
    /* istanbul ignore next */
    (cov_16s8hmk0lx().s[13]++, await (0, _auth.validateApiKey)(request));
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[14]++;
    if (authError) {
      /* istanbul ignore next */
      cov_16s8hmk0lx().b[0][0]++;
      cov_16s8hmk0lx().s[15]++;
      return authError;
    } else
    /* istanbul ignore next */
    {
      cov_16s8hmk0lx().b[0][1]++;
    }
    // Check rate limits
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_16s8hmk0lx().s[16]++, await (0, _ratelimit.rateLimit)(request));
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[17]++;
    if (rateLimitResult instanceof _server.NextResponse) {
      /* istanbul ignore next */
      cov_16s8hmk0lx().b[1][0]++;
      cov_16s8hmk0lx().s[18]++;
      return rateLimitResult;
    } else
    /* istanbul ignore next */
    {
      cov_16s8hmk0lx().b[1][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_16s8hmk0lx().s[19]++, new URL(request.url));
    const syncId =
    /* istanbul ignore next */
    (cov_16s8hmk0lx().s[20]++, searchParams.get('syncId'));
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[21]++;
    if (syncId) {
      /* istanbul ignore next */
      cov_16s8hmk0lx().b[2][0]++;
      // Get specific sync progress
      const progress =
      /* istanbul ignore next */
      (cov_16s8hmk0lx().s[22]++, await progressTracker.getProgress(syncId));
      /* istanbul ignore next */
      cov_16s8hmk0lx().s[23]++;
      if (!progress) {
        /* istanbul ignore next */
        cov_16s8hmk0lx().b[3][0]++;
        cov_16s8hmk0lx().s[24]++;
        return _server.NextResponse.json({
          success: false,
          error: 'Sync not found'
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_16s8hmk0lx().b[3][1]++;
      }
      cov_16s8hmk0lx().s[25]++;
      return _server.NextResponse.json({
        success: true,
        data: progress
      });
    } else {
      /* istanbul ignore next */
      cov_16s8hmk0lx().b[2][1]++;
      // List active syncs
      const activeSyncs =
      /* istanbul ignore next */
      (cov_16s8hmk0lx().s[26]++, await progressTracker.listActiveSyncs());
      /* istanbul ignore next */
      cov_16s8hmk0lx().s[27]++;
      return _server.NextResponse.json({
        success: true,
        data: {
          syncs: activeSyncs,
          count: activeSyncs.length
        }
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[28]++;
    _logging.logger.error('Error fetching sync progress', {
      error
    });
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[29]++;
    return _server.NextResponse.json({
      success: false,
      error: error.message
    }, {
      status: 500
    });
  }
}
async function DELETE(request) {
  /* istanbul ignore next */
  cov_16s8hmk0lx().f[4]++;
  cov_16s8hmk0lx().s[30]++;
  try {
    // Validate API key
    const authError =
    /* istanbul ignore next */
    (cov_16s8hmk0lx().s[31]++, await (0, _auth.validateApiKey)(request));
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[32]++;
    if (authError) {
      /* istanbul ignore next */
      cov_16s8hmk0lx().b[4][0]++;
      cov_16s8hmk0lx().s[33]++;
      return authError;
    } else
    /* istanbul ignore next */
    {
      cov_16s8hmk0lx().b[4][1]++;
    }
    // Check rate limits
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_16s8hmk0lx().s[34]++, await (0, _ratelimit.rateLimit)(request));
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[35]++;
    if (rateLimitResult instanceof _server.NextResponse) {
      /* istanbul ignore next */
      cov_16s8hmk0lx().b[5][0]++;
      cov_16s8hmk0lx().s[36]++;
      return rateLimitResult;
    } else
    /* istanbul ignore next */
    {
      cov_16s8hmk0lx().b[5][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_16s8hmk0lx().s[37]++, new URL(request.url));
    const syncId =
    /* istanbul ignore next */
    (cov_16s8hmk0lx().s[38]++, searchParams.get('syncId'));
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[39]++;
    if (!syncId) {
      /* istanbul ignore next */
      cov_16s8hmk0lx().b[6][0]++;
      cov_16s8hmk0lx().s[40]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Sync ID is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_16s8hmk0lx().b[6][1]++;
    }
    const progress =
    /* istanbul ignore next */
    (cov_16s8hmk0lx().s[41]++, await progressTracker.cancelSync(syncId));
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[42]++;
    return _server.NextResponse.json({
      success: true,
      data: progress
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[43]++;
    _logging.logger.error('Error cancelling sync', {
      error
    });
    /* istanbul ignore next */
    cov_16s8hmk0lx().s[44]++;
    return _server.NextResponse.json({
      success: false,
      error: error.message
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,