3613a93c88f86ce9a72eeb8bbbf16b91
"use strict";

/* istanbul ignore next */
function cov_2if5ubj4io() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/inventory/sync/route.ts";
  var hash = "5c52ce0ada5cd7e89478efec2866241c0ff16803";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/inventory/sync/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 63
        }
      },
      "8": {
        start: {
          line: 21,
          column: 19
        },
        end: {
          line: 21,
          column: 74
        }
      },
      "9": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 22,
          column: 90
        }
      },
      "10": {
        start: {
          line: 23,
          column: 17
        },
        end: {
          line: 23,
          column: 67
        }
      },
      "11": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 44
        }
      },
      "12": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 25,
          column: 73
        }
      },
      "13": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 6
        }
      },
      "14": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 72,
          column: 2
        }
      },
      "15": {
        start: {
          line: 74,
          column: 22
        },
        end: {
          line: 74,
          column: 69
        }
      },
      "16": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "17": {
        start: {
          line: 77,
          column: 26
        },
        end: {
          line: 77,
          column: 66
        }
      },
      "18": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 40
        }
      },
      "19": {
        start: {
          line: 78,
          column: 23
        },
        end: {
          line: 78,
          column: 40
        }
      },
      "20": {
        start: {
          line: 80,
          column: 32
        },
        end: {
          line: 80,
          column: 72
        }
      },
      "21": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 84
        }
      },
      "22": {
        start: {
          line: 81,
          column: 61
        },
        end: {
          line: 81,
          column: 84
        }
      },
      "23": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 43
        }
      },
      "24": {
        start: {
          line: 84,
          column: 44
        },
        end: {
          line: 84,
          column: 64
        }
      },
      "25": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "26": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 94,
          column: 15
        }
      },
      "27": {
        start: {
          line: 97,
          column: 22
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "28": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "29": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 99,
          column: 77
        }
      },
      "30": {
        start: {
          line: 101,
          column: 31
        },
        end: {
          line: 110,
          column: 18
        }
      },
      "31": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 116,
          column: 18
        }
      },
      "32": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 122,
          column: 19
        }
      },
      "33": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 127,
          column: 18
        }
      },
      "34": {
        start: {
          line: 131,
          column: 32
        },
        end: {
          line: 131,
          column: 113
        }
      },
      "35": {
        start: {
          line: 131,
          column: 55
        },
        end: {
          line: 131,
          column: 84
        }
      },
      "36": {
        start: {
          line: 131,
          column: 100
        },
        end: {
          line: 131,
          column: 112
        }
      },
      "37": {
        start: {
          line: 132,
          column: 28
        },
        end: {
          line: 135,
          column: 15
        }
      },
      "38": {
        start: {
          line: 132,
          column: 51
        },
        end: {
          line: 132,
          column: 79
        }
      },
      "39": {
        start: {
          line: 132,
          column: 96
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "40": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 152,
          column: 11
        }
      },
      "41": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "42": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "43": {
        start: {
          line: 173,
          column: 22
        },
        end: {
          line: 173,
          column: 69
        }
      },
      "44": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 224,
          column: 5
        }
      },
      "45": {
        start: {
          line: 176,
          column: 26
        },
        end: {
          line: 176,
          column: 66
        }
      },
      "46": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 40
        }
      },
      "47": {
        start: {
          line: 177,
          column: 23
        },
        end: {
          line: 177,
          column: 40
        }
      },
      "48": {
        start: {
          line: 179,
          column: 32
        },
        end: {
          line: 179,
          column: 72
        }
      },
      "49": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 84
        }
      },
      "50": {
        start: {
          line: 180,
          column: 61
        },
        end: {
          line: 180,
          column: 84
        }
      },
      "51": {
        start: {
          line: 181,
          column: 33
        },
        end: {
          line: 181,
          column: 53
        }
      },
      "52": {
        start: {
          line: 182,
          column: 23
        },
        end: {
          line: 182,
          column: 49
        }
      },
      "53": {
        start: {
          line: 183,
          column: 25
        },
        end: {
          line: 183,
          column: 53
        }
      },
      "54": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "55": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 192,
          column: 15
        }
      },
      "56": {
        start: {
          line: 194,
          column: 23
        },
        end: {
          line: 194,
          column: 79
        }
      },
      "57": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 207,
          column: 11
        }
      },
      "58": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 212,
          column: 11
        }
      },
      "59": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 223,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 33
          }
        },
        loc: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 26
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 73,
            column: 15
          },
          end: {
            line: 73,
            column: 19
          }
        },
        loc: {
          start: {
            line: 73,
            column: 29
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 73
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 97,
            column: 61
          },
          end: {
            line: 97,
            column: 62
          }
        },
        loc: {
          start: {
            line: 97,
            column: 79
          },
          end: {
            line: 129,
            column: 9
          }
        },
        line: 97
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 131,
            column: 45
          },
          end: {
            line: 131,
            column: 46
          }
        },
        loc: {
          start: {
            line: 131,
            column: 55
          },
          end: {
            line: 131,
            column: 84
          }
        },
        line: 131
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 131,
            column: 90
          },
          end: {
            line: 131,
            column: 91
          }
        },
        loc: {
          start: {
            line: 131,
            column: 100
          },
          end: {
            line: 131,
            column: 112
          }
        },
        line: 131
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 132,
            column: 41
          },
          end: {
            line: 132,
            column: 42
          }
        },
        loc: {
          start: {
            line: 132,
            column: 51
          },
          end: {
            line: 132,
            column: 79
          }
        },
        line: 132
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 132,
            column: 85
          },
          end: {
            line: 132,
            column: 86
          }
        },
        loc: {
          start: {
            line: 132,
            column: 96
          },
          end: {
            line: 135,
            column: 13
          }
        },
        line: 132
      },
      "10": {
        name: "GET",
        decl: {
          start: {
            line: 172,
            column: 15
          },
          end: {
            line: 172,
            column: 18
          }
        },
        loc: {
          start: {
            line: 172,
            column: 28
          },
          end: {
            line: 225,
            column: 1
          }
        },
        line: 172
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 27,
            column: 38
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 29,
            column: 5
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 14
          }
        }, {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 27,
            column: 32
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 78,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 78,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 81,
            column: 84
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 81,
            column: 84
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "4": {
        loc: {
          start: {
            line: 84,
            column: 27
          },
          end: {
            line: 84,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 84,
            column: 37
          },
          end: {
            line: 84,
            column: 39
          }
        }],
        line: 84
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 22
          }
        }, {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 51
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 107,
            column: 34
          },
          end: {
            line: 107,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 34
          },
          end: {
            line: 107,
            column: 50
          }
        }, {
          start: {
            line: 107,
            column: 54
          },
          end: {
            line: 107,
            column: 59
          }
        }],
        line: 107
      },
      "8": {
        loc: {
          start: {
            line: 108,
            column: 37
          },
          end: {
            line: 108,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 37
          },
          end: {
            line: 108,
            column: 56
          }
        }, {
          start: {
            line: 108,
            column: 60
          },
          end: {
            line: 108,
            column: 65
          }
        }],
        line: 108
      },
      "9": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 177,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 177,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "10": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 180,
            column: 84
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 180,
            column: 84
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "11": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "12": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 184,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 184,
            column: 19
          }
        }, {
          start: {
            line: 184,
            column: 23
          },
          end: {
            line: 184,
            column: 32
          }
        }],
        line: 184
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/inventory/sync/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validateApiKey } from '@/lib/api/middleware/auth';\nimport { rateLimit } from '@/lib/api/middleware/rate-limit';\nimport { UnifiedFulfillmentService } from '@/lib/api/services/unified-fulfillment';\nimport { logger } from '@/lib/api/services/logging';\nimport { connectToDatabase } from '@/lib/db';\nimport crypto from 'crypto';\n\n// Initialize the fulfillment service with all provider configurations\nconst fulfillmentService = new UnifiedFulfillmentService([\n  {\n    provider: 'shipbob',\n    credentials: {\n      apiKey: process.env.SHIPBOB_API_KEY!,\n      apiUrl: process.env.SHIPBOB_API_URL!,\n    }\n  },\n  {\n    provider: 'shopify',\n    credentials: {\n      apiKey: process.env.MGZON_API_KEY!,\n      apiSecret: process.env.MGZON_API_SECRET!,\n      domain: process.env.SHOPIFY_DOMAIN!,\n      accessToken: process.env.SHOPIFY_ACCESS_TOKEN!,\n    }\n  },\n  {\n    provider: 'amazon',\n    credentials: {\n      accessToken: process.env.AMAZON_ACCESS_TOKEN!,\n      refreshToken: process.env.AMAZON_REFRESH_TOKEN!,\n      merchantId: process.env.AMAZON_MERCHANT_ID!,\n    }\n  },\n  {\n    provider: 'aliexpress',\n    credentials: {\n      apiKey: process.env.ALIEXPRESS_API_KEY!,\n      apiSecret: process.env.ALIEXPRESS_API_SECRET!,\n    }\n  },\n  {\n    provider: '4px',\n    credentials: {\n      apiKey: process.env.FOURPX_API_KEY!,\n      apiSecret: process.env.FOURPX_API_SECRET!,\n      warehouseId: process.env.FOURPX_WAREHOUSE_ID,\n    }\n  }\n]);\n\nexport async function POST(request: NextRequest) {\n  const requestId = crypto.randomBytes(16).toString('hex');\n\n  try {\n    // Validate API key\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    // Check rate limits\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    // Connect to database\n    await connectToDatabase();\n\n    const {\n      providers,\n      options = {}\n    } = await request.json();\n\n    // Validate providers\n    if (!providers || !Array.isArray(providers)) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Providers array is required',\n          requestId,\n          timestamp: new Date().toISOString()\n        },\n        { status: 400 }\n      );\n    }\n\n    // Start inventory sync for each provider\n    const syncs = await Promise.allSettled(\n      providers.map(async (provider) => {\n        try {\n          const syncId = crypto.randomBytes(8).toString('hex');\n          \n          // Start async sync process\n          const result = await fulfillmentService.syncInventory({\n            provider,\n            syncId,\n            options: {\n              ...options,\n              requestId,\n              fullSync: options.fullSync || false,\n              forceUpdate: options.forceUpdate || false,\n            }\n          });\n\n          return {\n            provider,\n            syncId,\n            status: 'started',\n            result\n          };\n        } catch (error) {\n          logger.error('Provider sync failed', {\n            provider,\n            requestId,\n            error: error.message\n          });\n          \n          return {\n            provider,\n            status: 'failed',\n            error: error.message\n          };\n        }\n      })\n    );\n\n    // Process results\n    const successfulSyncs = syncs\n      .filter((result): result is PromiseFulfilledResult<any> => \n        result.status === 'fulfilled'\n      )\n      .map(result => result.value);\n\n    const failedSyncs = syncs\n      .filter((result): result is PromiseRejectedResult => \n        result.status === 'rejected'\n      )\n      .map(result => ({\n        provider: result.reason.provider,\n        error: result.reason.message\n      }));\n\n    // Return response with sync status\n    return NextResponse.json({\n      success: true,\n      data: {\n        requestId,\n        timestamp: new Date().toISOString(),\n        syncCount: successfulSyncs.length,\n        failCount: failedSyncs.length,\n        syncs: successfulSyncs,\n        failures: failedSyncs\n      }\n    }, {\n      headers: {\n        ...rateLimitResult?.headers,\n        'X-Request-ID': requestId\n      }\n    });\n\n  } catch (error) {\n    logger.error('Inventory sync failed', {\n      requestId,\n      error: error.message,\n      stack: error.stack\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: error.message,\n        requestId,\n        timestamp: new Date().toISOString()\n      },\n      { \n        status: 500,\n        headers: {\n          'X-Request-ID': requestId\n        }\n      }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  const requestId = crypto.randomBytes(16).toString('hex');\n\n  try {\n    // Validate API key\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    // Check rate limits\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    const { searchParams } = new URL(request.url);\n    const syncId = searchParams.get('syncId');\n    const provider = searchParams.get('provider');\n\n    if (!syncId || !provider) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Both syncId and provider are required',\n          requestId,\n          timestamp: new Date().toISOString()\n        },\n        { status: 400 }\n      );\n    }\n\n    const status = await fulfillmentService.getSyncStatus(syncId, provider);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        ...status,\n        requestId,\n        timestamp: new Date().toISOString()\n      }\n    }, {\n      headers: {\n        ...rateLimitResult?.headers,\n        'X-Request-ID': requestId\n      }\n    });\n\n  } catch (error) {\n    logger.error('Get sync status failed', {\n      requestId,\n      error: error.message\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: error.message,\n        requestId,\n        timestamp: new Date().toISOString()\n      },\n      { \n        status: 500,\n        headers: {\n          'X-Request-ID': requestId\n        }\n      }\n    );\n  }\n}"],
      names: ["GET", "POST", "fulfillmentService", "UnifiedFulfillmentService", "provider", "credentials", "apiKey", "process", "env", "SHIPBOB_API_KEY", "apiUrl", "SHIPBOB_API_URL", "MGZON_API_KEY", "apiSecret", "MGZON_API_SECRET", "domain", "SHOPIFY_DOMAIN", "accessToken", "SHOPIFY_ACCESS_TOKEN", "AMAZON_ACCESS_TOKEN", "refreshToken", "AMAZON_REFRESH_TOKEN", "merchantId", "AMAZON_MERCHANT_ID", "ALIEXPRESS_API_KEY", "ALIEXPRESS_API_SECRET", "FOURPX_API_KEY", "FOURPX_API_SECRET", "warehouseId", "FOURPX_WAREHOUSE_ID", "request", "requestId", "crypto", "randomBytes", "toString", "authError", "validateApiKey", "rateLimitResult", "rateLimit", "NextResponse", "connectToDatabase", "providers", "options", "json", "Array", "isArray", "success", "error", "timestamp", "Date", "toISOString", "status", "syncs", "Promise", "allSettled", "map", "syncId", "result", "syncInventory", "fullSync", "forceUpdate", "logger", "message", "successfulSyncs", "filter", "value", "failedSyncs", "reason", "data", "syncCount", "length", "failCount", "failures", "headers", "stack", "searchParams", "URL", "url", "get", "getSyncStatus"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5c52ce0ada5cd7e89478efec2866241c0ff16803"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2if5ubj4io = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2if5ubj4io();
cov_2if5ubj4io().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2if5ubj4io().f[0]++;
  cov_2if5ubj4io().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2if5ubj4io().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_2if5ubj4io().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_2if5ubj4io().f[1]++;
    cov_2if5ubj4io().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_2if5ubj4io().f[2]++;
    cov_2if5ubj4io().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2if5ubj4io().s[6]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_2if5ubj4io().s[7]++, require("../../../../../lib/api/middleware/auth"));
const _ratelimit =
/* istanbul ignore next */
(cov_2if5ubj4io().s[8]++, require("../../../../../lib/api/middleware/rate-limit"));
const _unifiedfulfillment =
/* istanbul ignore next */
(cov_2if5ubj4io().s[9]++, require("../../../../../lib/api/services/unified-fulfillment"));
const _logging =
/* istanbul ignore next */
(cov_2if5ubj4io().s[10]++, require("../../../../../lib/api/services/logging"));
const _db =
/* istanbul ignore next */
(cov_2if5ubj4io().s[11]++, require("../../../../../lib/db"));
const _crypto =
/* istanbul ignore next */
(/*#__PURE__*/cov_2if5ubj4io().s[12]++, _interop_require_default(require("crypto")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2if5ubj4io().f[3]++;
  cov_2if5ubj4io().s[13]++;
  return /* istanbul ignore next */(cov_2if5ubj4io().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2if5ubj4io().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2if5ubj4io().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2if5ubj4io().b[0][1]++, {
    default: obj
  });
}
// Initialize the fulfillment service with all provider configurations
const fulfillmentService =
/* istanbul ignore next */
(cov_2if5ubj4io().s[14]++, new _unifiedfulfillment.UnifiedFulfillmentService([{
  provider: 'shipbob',
  credentials: {
    apiKey: process.env.SHIPBOB_API_KEY,
    apiUrl: process.env.SHIPBOB_API_URL
  }
}, {
  provider: 'shopify',
  credentials: {
    apiKey: process.env.MGZON_API_KEY,
    apiSecret: process.env.MGZON_API_SECRET,
    domain: process.env.SHOPIFY_DOMAIN,
    accessToken: process.env.SHOPIFY_ACCESS_TOKEN
  }
}, {
  provider: 'amazon',
  credentials: {
    accessToken: process.env.AMAZON_ACCESS_TOKEN,
    refreshToken: process.env.AMAZON_REFRESH_TOKEN,
    merchantId: process.env.AMAZON_MERCHANT_ID
  }
}, {
  provider: 'aliexpress',
  credentials: {
    apiKey: process.env.ALIEXPRESS_API_KEY,
    apiSecret: process.env.ALIEXPRESS_API_SECRET
  }
}, {
  provider: '4px',
  credentials: {
    apiKey: process.env.FOURPX_API_KEY,
    apiSecret: process.env.FOURPX_API_SECRET,
    warehouseId: process.env.FOURPX_WAREHOUSE_ID
  }
}]));
async function POST(request) {
  /* istanbul ignore next */
  cov_2if5ubj4io().f[4]++;
  const requestId =
  /* istanbul ignore next */
  (cov_2if5ubj4io().s[15]++, _crypto.default.randomBytes(16).toString('hex'));
  /* istanbul ignore next */
  cov_2if5ubj4io().s[16]++;
  try {
    // Validate API key
    const authError =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[17]++, await (0, _auth.validateApiKey)(request));
    /* istanbul ignore next */
    cov_2if5ubj4io().s[18]++;
    if (authError) {
      /* istanbul ignore next */
      cov_2if5ubj4io().b[2][0]++;
      cov_2if5ubj4io().s[19]++;
      return authError;
    } else
    /* istanbul ignore next */
    {
      cov_2if5ubj4io().b[2][1]++;
    }
    // Check rate limits
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[20]++, await (0, _ratelimit.rateLimit)(request));
    /* istanbul ignore next */
    cov_2if5ubj4io().s[21]++;
    if (rateLimitResult instanceof _server.NextResponse) {
      /* istanbul ignore next */
      cov_2if5ubj4io().b[3][0]++;
      cov_2if5ubj4io().s[22]++;
      return rateLimitResult;
    } else
    /* istanbul ignore next */
    {
      cov_2if5ubj4io().b[3][1]++;
    }
    // Connect to database
    cov_2if5ubj4io().s[23]++;
    await (0, _db.connectToDatabase)();
    const {
      providers,
      options =
      /* istanbul ignore next */
      (cov_2if5ubj4io().b[4][0]++, {})
    } =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[24]++, await request.json());
    // Validate providers
    /* istanbul ignore next */
    cov_2if5ubj4io().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_2if5ubj4io().b[6][0]++, !providers) ||
    /* istanbul ignore next */
    (cov_2if5ubj4io().b[6][1]++, !Array.isArray(providers))) {
      /* istanbul ignore next */
      cov_2if5ubj4io().b[5][0]++;
      cov_2if5ubj4io().s[26]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Providers array is required',
        requestId,
        timestamp: new Date().toISOString()
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2if5ubj4io().b[5][1]++;
    }
    // Start inventory sync for each provider
    const syncs =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[27]++, await Promise.allSettled(providers.map(async provider => {
      /* istanbul ignore next */
      cov_2if5ubj4io().f[5]++;
      cov_2if5ubj4io().s[28]++;
      try {
        const syncId =
        /* istanbul ignore next */
        (cov_2if5ubj4io().s[29]++, _crypto.default.randomBytes(8).toString('hex'));
        // Start async sync process
        const result =
        /* istanbul ignore next */
        (cov_2if5ubj4io().s[30]++, await fulfillmentService.syncInventory({
          provider,
          syncId,
          options: {
            ...options,
            requestId,
            fullSync:
            /* istanbul ignore next */
            (cov_2if5ubj4io().b[7][0]++, options.fullSync) ||
            /* istanbul ignore next */
            (cov_2if5ubj4io().b[7][1]++, false),
            forceUpdate:
            /* istanbul ignore next */
            (cov_2if5ubj4io().b[8][0]++, options.forceUpdate) ||
            /* istanbul ignore next */
            (cov_2if5ubj4io().b[8][1]++, false)
          }
        }));
        /* istanbul ignore next */
        cov_2if5ubj4io().s[31]++;
        return {
          provider,
          syncId,
          status: 'started',
          result
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2if5ubj4io().s[32]++;
        _logging.logger.error('Provider sync failed', {
          provider,
          requestId,
          error: error.message
        });
        /* istanbul ignore next */
        cov_2if5ubj4io().s[33]++;
        return {
          provider,
          status: 'failed',
          error: error.message
        };
      }
    })));
    // Process results
    const successfulSyncs =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[34]++, syncs.filter(result => {
      /* istanbul ignore next */
      cov_2if5ubj4io().f[6]++;
      cov_2if5ubj4io().s[35]++;
      return result.status === 'fulfilled';
    }).map(result => {
      /* istanbul ignore next */
      cov_2if5ubj4io().f[7]++;
      cov_2if5ubj4io().s[36]++;
      return result.value;
    }));
    const failedSyncs =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[37]++, syncs.filter(result => {
      /* istanbul ignore next */
      cov_2if5ubj4io().f[8]++;
      cov_2if5ubj4io().s[38]++;
      return result.status === 'rejected';
    }).map(result => {
      /* istanbul ignore next */
      cov_2if5ubj4io().f[9]++;
      cov_2if5ubj4io().s[39]++;
      return {
        provider: result.reason.provider,
        error: result.reason.message
      };
    }));
    // Return response with sync status
    /* istanbul ignore next */
    cov_2if5ubj4io().s[40]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        requestId,
        timestamp: new Date().toISOString(),
        syncCount: successfulSyncs.length,
        failCount: failedSyncs.length,
        syncs: successfulSyncs,
        failures: failedSyncs
      }
    }, {
      headers: {
        ...rateLimitResult?.headers,
        'X-Request-ID': requestId
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2if5ubj4io().s[41]++;
    _logging.logger.error('Inventory sync failed', {
      requestId,
      error: error.message,
      stack: error.stack
    });
    /* istanbul ignore next */
    cov_2if5ubj4io().s[42]++;
    return _server.NextResponse.json({
      success: false,
      error: error.message,
      requestId,
      timestamp: new Date().toISOString()
    }, {
      status: 500,
      headers: {
        'X-Request-ID': requestId
      }
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2if5ubj4io().f[10]++;
  const requestId =
  /* istanbul ignore next */
  (cov_2if5ubj4io().s[43]++, _crypto.default.randomBytes(16).toString('hex'));
  /* istanbul ignore next */
  cov_2if5ubj4io().s[44]++;
  try {
    // Validate API key
    const authError =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[45]++, await (0, _auth.validateApiKey)(request));
    /* istanbul ignore next */
    cov_2if5ubj4io().s[46]++;
    if (authError) {
      /* istanbul ignore next */
      cov_2if5ubj4io().b[9][0]++;
      cov_2if5ubj4io().s[47]++;
      return authError;
    } else
    /* istanbul ignore next */
    {
      cov_2if5ubj4io().b[9][1]++;
    }
    // Check rate limits
    const rateLimitResult =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[48]++, await (0, _ratelimit.rateLimit)(request));
    /* istanbul ignore next */
    cov_2if5ubj4io().s[49]++;
    if (rateLimitResult instanceof _server.NextResponse) {
      /* istanbul ignore next */
      cov_2if5ubj4io().b[10][0]++;
      cov_2if5ubj4io().s[50]++;
      return rateLimitResult;
    } else
    /* istanbul ignore next */
    {
      cov_2if5ubj4io().b[10][1]++;
    }
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[51]++, new URL(request.url));
    const syncId =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[52]++, searchParams.get('syncId'));
    const provider =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[53]++, searchParams.get('provider'));
    /* istanbul ignore next */
    cov_2if5ubj4io().s[54]++;
    if (
    /* istanbul ignore next */
    (cov_2if5ubj4io().b[12][0]++, !syncId) ||
    /* istanbul ignore next */
    (cov_2if5ubj4io().b[12][1]++, !provider)) {
      /* istanbul ignore next */
      cov_2if5ubj4io().b[11][0]++;
      cov_2if5ubj4io().s[55]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Both syncId and provider are required',
        requestId,
        timestamp: new Date().toISOString()
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_2if5ubj4io().b[11][1]++;
    }
    const status =
    /* istanbul ignore next */
    (cov_2if5ubj4io().s[56]++, await fulfillmentService.getSyncStatus(syncId, provider));
    /* istanbul ignore next */
    cov_2if5ubj4io().s[57]++;
    return _server.NextResponse.json({
      success: true,
      data: {
        ...status,
        requestId,
        timestamp: new Date().toISOString()
      }
    }, {
      headers: {
        ...rateLimitResult?.headers,
        'X-Request-ID': requestId
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2if5ubj4io().s[58]++;
    _logging.logger.error('Get sync status failed', {
      requestId,
      error: error.message
    });
    /* istanbul ignore next */
    cov_2if5ubj4io().s[59]++;
    return _server.NextResponse.json({
      success: false,
      error: error.message,
      requestId,
      timestamp: new Date().toISOString()
    }, {
      status: 500,
      headers: {
        'X-Request-ID': requestId
      }
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,