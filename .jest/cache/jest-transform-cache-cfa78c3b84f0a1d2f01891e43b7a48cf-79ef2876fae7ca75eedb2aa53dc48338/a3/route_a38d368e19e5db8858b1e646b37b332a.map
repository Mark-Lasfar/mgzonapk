{"version":3,"names":["GET","cov_2if5ubj4io","f","s","POST","fulfillmentService","_unifiedfulfillment","UnifiedFulfillmentService","provider","credentials","apiKey","process","env","SHIPBOB_API_KEY","apiUrl","SHIPBOB_API_URL","MGZON_API_KEY","apiSecret","MGZON_API_SECRET","domain","SHOPIFY_DOMAIN","accessToken","SHOPIFY_ACCESS_TOKEN","AMAZON_ACCESS_TOKEN","refreshToken","AMAZON_REFRESH_TOKEN","merchantId","AMAZON_MERCHANT_ID","ALIEXPRESS_API_KEY","ALIEXPRESS_API_SECRET","FOURPX_API_KEY","FOURPX_API_SECRET","warehouseId","FOURPX_WAREHOUSE_ID","request","requestId","_crypto","default","randomBytes","toString","authError","_auth","validateApiKey","b","rateLimitResult","_ratelimit","rateLimit","_server","NextResponse","_db","connectToDatabase","providers","options","json","Array","isArray","success","error","timestamp","Date","toISOString","status","syncs","Promise","allSettled","map","syncId","result","syncInventory","fullSync","forceUpdate","_logging","logger","message","successfulSyncs","filter","value","failedSyncs","reason","data","syncCount","length","failCount","failures","headers","stack","searchParams","URL","url","get","getSyncStatus"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/inventory/sync/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateApiKey } from '@/lib/api/middleware/auth';\nimport { rateLimit } from '@/lib/api/middleware/rate-limit';\nimport { UnifiedFulfillmentService } from '@/lib/api/services/unified-fulfillment';\nimport { logger } from '@/lib/api/services/logging';\nimport { connectToDatabase } from '@/lib/db';\nimport crypto from 'crypto';\n\n// Initialize the fulfillment service with all provider configurations\nconst fulfillmentService = new UnifiedFulfillmentService([\n  {\n    provider: 'shipbob',\n    credentials: {\n      apiKey: process.env.SHIPBOB_API_KEY!,\n      apiUrl: process.env.SHIPBOB_API_URL!,\n    }\n  },\n  {\n    provider: 'shopify',\n    credentials: {\n      apiKey: process.env.MGZON_API_KEY!,\n      apiSecret: process.env.MGZON_API_SECRET!,\n      domain: process.env.SHOPIFY_DOMAIN!,\n      accessToken: process.env.SHOPIFY_ACCESS_TOKEN!,\n    }\n  },\n  {\n    provider: 'amazon',\n    credentials: {\n      accessToken: process.env.AMAZON_ACCESS_TOKEN!,\n      refreshToken: process.env.AMAZON_REFRESH_TOKEN!,\n      merchantId: process.env.AMAZON_MERCHANT_ID!,\n    }\n  },\n  {\n    provider: 'aliexpress',\n    credentials: {\n      apiKey: process.env.ALIEXPRESS_API_KEY!,\n      apiSecret: process.env.ALIEXPRESS_API_SECRET!,\n    }\n  },\n  {\n    provider: '4px',\n    credentials: {\n      apiKey: process.env.FOURPX_API_KEY!,\n      apiSecret: process.env.FOURPX_API_SECRET!,\n      warehouseId: process.env.FOURPX_WAREHOUSE_ID,\n    }\n  }\n]);\n\nexport async function POST(request: NextRequest) {\n  const requestId = crypto.randomBytes(16).toString('hex');\n\n  try {\n    // Validate API key\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    // Check rate limits\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    // Connect to database\n    await connectToDatabase();\n\n    const {\n      providers,\n      options = {}\n    } = await request.json();\n\n    // Validate providers\n    if (!providers || !Array.isArray(providers)) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Providers array is required',\n          requestId,\n          timestamp: new Date().toISOString()\n        },\n        { status: 400 }\n      );\n    }\n\n    // Start inventory sync for each provider\n    const syncs = await Promise.allSettled(\n      providers.map(async (provider) => {\n        try {\n          const syncId = crypto.randomBytes(8).toString('hex');\n          \n          // Start async sync process\n          const result = await fulfillmentService.syncInventory({\n            provider,\n            syncId,\n            options: {\n              ...options,\n              requestId,\n              fullSync: options.fullSync || false,\n              forceUpdate: options.forceUpdate || false,\n            }\n          });\n\n          return {\n            provider,\n            syncId,\n            status: 'started',\n            result\n          };\n        } catch (error) {\n          logger.error('Provider sync failed', {\n            provider,\n            requestId,\n            error: error.message\n          });\n          \n          return {\n            provider,\n            status: 'failed',\n            error: error.message\n          };\n        }\n      })\n    );\n\n    // Process results\n    const successfulSyncs = syncs\n      .filter((result): result is PromiseFulfilledResult<any> => \n        result.status === 'fulfilled'\n      )\n      .map(result => result.value);\n\n    const failedSyncs = syncs\n      .filter((result): result is PromiseRejectedResult => \n        result.status === 'rejected'\n      )\n      .map(result => ({\n        provider: result.reason.provider,\n        error: result.reason.message\n      }));\n\n    // Return response with sync status\n    return NextResponse.json({\n      success: true,\n      data: {\n        requestId,\n        timestamp: new Date().toISOString(),\n        syncCount: successfulSyncs.length,\n        failCount: failedSyncs.length,\n        syncs: successfulSyncs,\n        failures: failedSyncs\n      }\n    }, {\n      headers: {\n        ...rateLimitResult?.headers,\n        'X-Request-ID': requestId\n      }\n    });\n\n  } catch (error) {\n    logger.error('Inventory sync failed', {\n      requestId,\n      error: error.message,\n      stack: error.stack\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: error.message,\n        requestId,\n        timestamp: new Date().toISOString()\n      },\n      { \n        status: 500,\n        headers: {\n          'X-Request-ID': requestId\n        }\n      }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  const requestId = crypto.randomBytes(16).toString('hex');\n\n  try {\n    // Validate API key\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    // Check rate limits\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    const { searchParams } = new URL(request.url);\n    const syncId = searchParams.get('syncId');\n    const provider = searchParams.get('provider');\n\n    if (!syncId || !provider) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Both syncId and provider are required',\n          requestId,\n          timestamp: new Date().toISOString()\n        },\n        { status: 400 }\n      );\n    }\n\n    const status = await fulfillmentService.getSyncStatus(syncId, provider);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        ...status,\n        requestId,\n        timestamp: new Date().toISOString()\n      }\n    }, {\n      headers: {\n        ...rateLimitResult?.headers,\n        'X-Request-ID': requestId\n      }\n    });\n\n  } catch (error) {\n    logger.error('Get sync status failed', {\n      requestId,\n      error: error.message\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: error.message,\n        requestId,\n        timestamp: new Date().toISOString()\n      },\n      { \n        status: 500,\n        headers: {\n          'X-Request-ID': requestId\n        }\n      }\n    );\n  }\n}"],"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","ignoreList":[]}