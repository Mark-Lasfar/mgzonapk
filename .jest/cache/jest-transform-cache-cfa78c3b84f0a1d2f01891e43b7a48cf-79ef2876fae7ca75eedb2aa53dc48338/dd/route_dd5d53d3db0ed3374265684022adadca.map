{"version":3,"names":["POST","cov_240a599ei0","f","s","config","sellerRegistrationSchema","_zod","z","object","businessName","string","min","max","email","phone","regex","description","businessType","enum","vatRegistered","boolean","optional","default","logo","address","street","city","state","country","postalCode","taxId","bankInfo","accountName","accountNumber","bankName","swiftCode","termsAccepted","refine","val","request","userSession","_auth","auth","user","id","b","_server","NextResponse","json","success","message","status","formData","data","jsonData","get","Error","parsedData","JSON","parse","logoFile","logoUrl","maxSize","size","allowedTypes","includes","type","arrayBuffer","buffer","Buffer","from","_s3","uploadToStorage","folder","resource_type","allowedFormats","public_id","Date","now","overwrite","error","console","ZodError","errors","map","err","path","join","_db","connectToDatabase","dbSession","_mongoose","startSession","startTransaction","existingSeller","_sellermodel","findOne","$or","userId","session","seller","create","verified","subscription","plan","startDate","endDate","features","productsLimit","commission","prioritySupport","instantPayouts","verification","documents","submittedAt","verifiedAt","metrics","rating","totalSales","totalRevenue","productsCount","ordersCount","customersCount","views","followers","settings","notifications","sms","orderUpdates","marketingEmails","display","showRating","showContactInfo","showMetrics","security","twoFactorAuth","loginNotifications","createdAt","updatedAt","updatedUser","_usermodel","findByIdAndUpdate","role","businessProfile","_id","new","commitTransaction","abortTransaction","endSession","ValidationError","Object","values","field","mongo","MongoServerError","code","api","bodyParser","responseLimit"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/registration/route.ts"],"sourcesContent":["import { connectToDatabase } from '@/lib/db'\nimport { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/auth'\nimport Seller from '@/lib/db/models/seller.model'\nimport User from '@/lib/db/models/user.model'\nimport mongoose from 'mongoose'\nimport { z } from 'zod'\nimport { uploadToStorage } from '@/lib/utils/s3'\n\n// Validation schema for seller registration data\nconst sellerRegistrationSchema = z.object({\n  businessName: z.string()\n    .min(2, 'Business name must be at least 2 characters')\n    .max(100, 'Business name must not exceed 100 characters'),\n  email: z.string()\n    .email('Invalid email address'),\n  phone: z.string()\n    .min(10, 'Phone number must be at least 10 characters')\n    .max(20, 'Phone number must not exceed 20 characters')\n    .regex(/^[+]?[(]?[0-9]{1,4}[)]?[-\\s./0-9]*$/, 'Invalid phone number format'),\n  description: z.string()\n    .min(50, 'Description must be at least 50 characters')\n    .max(500, 'Description must not exceed 500 characters'),\n  businessType: z.enum(['individual', 'company']),\n  vatRegistered: z.boolean().optional().default(false),\n  logo: z.string().optional(),\n  address: z.object({\n    street: z.string().min(1, 'Street is required'),\n    city: z.string().min(1, 'City is required'),\n    state: z.string().min(1, 'State is required'),\n    country: z.string().min(1, 'Country is required'),\n    postalCode: z.string().min(1, 'Postal code is required'),\n  }),\n  taxId: z.string().min(1, 'Tax ID is required'),\n  bankInfo: z.object({\n    accountName: z.string().min(2, 'Account name is required'),\n    accountNumber: z.string().min(8, 'Account number is required'),\n    bankName: z.string().min(2, 'Bank name is required'),\n    swiftCode: z.string().regex(/^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$/, 'Invalid SWIFT code format'),\n  }),\n  termsAccepted: z.boolean().refine((val) => val === true, 'Terms must be accepted'),\n})\n\ntype SellerRegistrationData = z.infer<typeof sellerRegistrationSchema>\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Check authentication\n    const userSession = await auth()\n    if (!userSession?.user?.id) {\n      return NextResponse.json(\n        { success: false, message: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Parse and validate the multipart form data\n    const formData = await request.formData()\n    let data: SellerRegistrationData\n\n    try {\n      const jsonData = formData.get('data')\n      if (!jsonData || typeof jsonData !== 'string') {\n        throw new Error('Invalid form data')\n      }\n\n      const parsedData = JSON.parse(jsonData)\n\n      // لو فيه ملف مرفوع، ارفعه هنا وأضف الـ URL قبل Zod check\n      const logoFile = formData.get('logo') as File | null\n      let logoUrl = ''\n      \n      if (logoFile) {\n        // التحقق من الحجم والصيغة، ثم الرفع كالمعتاد\n        const maxSize = 5 * 1024 * 1024 // 5MB\n        if (logoFile.size > maxSize) {\n          return NextResponse.json({ success: false, message: 'Logo file size must not exceed 5MB' }, { status: 400 })\n        }\n      \n        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']\n        if (!allowedTypes.includes(logoFile.type)) {\n          return NextResponse.json({ success: false, message: 'Invalid file type. Only JPEG, PNG, and WebP images are allowed' }, { status: 400 })\n        }\n      \n        const arrayBuffer = await logoFile.arrayBuffer()\n        const buffer = Buffer.from(arrayBuffer)\n      \n        logoUrl = await uploadToStorage(buffer, `sellers/${userSession.user.id}/logo`, {\n          folder: 'sellers',\n          resource_type: 'image',\n          allowedFormats: ['jpg', 'jpeg', 'png', 'webp'],\n          public_id: `${userSession.user.id}-${Date.now()}`,\n          overwrite: true\n        })\n      \n        // أضف الرابط في البيانات قبل Zod parsing\n        parsedData.logo = logoUrl\n      }\n      \n      // بعد كل ده، تحقق بالـ schema\n      data = sellerRegistrationSchema.parse(parsedData)\n      \n    } catch (error) {\n      console.error('Data parsing error:', error)\n      if (error instanceof z.ZodError) {\n        return NextResponse.json(\n          {\n            success: false,\n            message: 'Invalid data',\n            errors: error.errors.map(err => ({\n              path: err.path.join('.'),\n              message: err.message\n            }))\n          },\n          { status: 400 }\n        )\n      }\n      return NextResponse.json(\n        {\n          success: false,\n          message: 'Failed to parse registration data'\n        },\n        { status: 400 }\n      )\n    }\n\n    // Handle logo upload if present (in case it hasn't been processed above)\n    const logoFile = formData.get('logo') as File | null\n    let logoUrl = ''\n    if (logoFile) {\n      try {\n        const maxSize = 5 * 1024 * 1024 // 5MB\n        if (logoFile.size > maxSize) {\n          return NextResponse.json(\n            {\n              success: false,\n              message: 'Logo file size must not exceed 5MB'\n            },\n            { status: 400 }\n          )\n        }\n\n        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']\n        if (!allowedTypes.includes(logoFile.type)) {\n          return NextResponse.json(\n            {\n              success: false,\n              message: 'Invalid file type. Only JPEG, PNG, and WebP images are allowed'\n            },\n            { status: 400 }\n          )\n        }\n\n        const arrayBuffer = await logoFile.arrayBuffer()\n        const buffer = Buffer.from(arrayBuffer)\n\n        logoUrl = await uploadToStorage(buffer, `sellers/${userSession.user.id}/logo`, {\n          folder: 'sellers',\n          resource_type: 'image',\n          allowedFormats: ['jpg', 'jpeg', 'png', 'webp'],\n          public_id: `${userSession.user.id}-${Date.now()}`,\n          overwrite: true\n        })\n\n        data.logo = logoUrl\n      } catch (error) {\n        console.error('Logo upload error:', error)\n        return NextResponse.json(\n          {\n            success: false,\n            message: 'Failed to upload logo'\n          },\n          { status: 500 }\n        )\n      }\n    }\n\n    // Connect to database\n    await connectToDatabase()\n\n    // Start transaction\n    const dbSession = await mongoose.startSession()\n    dbSession.startTransaction()\n\n    try {\n      // Check for existing seller\n      const existingSeller = await Seller.findOne({\n        $or: [\n          { email: data.email },\n          { userId: userSession.user.id }\n        ]\n      }).session(dbSession)\n\n      if (existingSeller) {\n        throw new Error('A seller profile already exists for this account')\n      }\n\n      // Create seller profile\n      const seller = await Seller.create([{\n        userId: userSession.user.id,\n        businessName: data.businessName,\n        email: data.email,\n        phone: data.phone,\n        description: data.description,\n        businessType: data.businessType,\n        logo: data.logo || '',\n        address: {\n          street: data.address.street,\n          city: data.address.city,\n          state: data.address.state,\n          country: data.address.country,\n          postalCode: data.address.postalCode,\n        },\n        taxId: data.taxId,\n        bankInfo: {\n          accountName: data.bankInfo.accountName,\n          accountNumber: data.bankInfo.accountNumber,\n          bankName: data.bankInfo.bankName,\n          swiftCode: data.bankInfo.swiftCode,\n          verified: false\n        },\n        subscription: {\n          plan: 'Basic',\n          startDate: new Date(),\n          endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days trial\n          status: 'active',\n          features: {\n            productsLimit: 100,\n            commission: 5, // 5%\n            prioritySupport: false,\n            instantPayouts: false\n          }\n        },\n        verification: {\n          status: 'pending',\n          documents: {},\n          submittedAt: new Date(),\n          verifiedAt: null\n        },\n        metrics: {\n          rating: 0,\n          totalSales: 0,\n          totalRevenue: 0,\n          productsCount: 0,\n          ordersCount: 0,\n          customersCount: 0,\n          views: 0,\n          followers: 0\n        },\n        settings: {\n          notifications: {\n            email: true,\n            sms: false,\n            orderUpdates: true,\n            marketingEmails: false\n          },\n          display: {\n            showRating: true,\n            showContactInfo: true,\n            showMetrics: true\n          },\n          security: {\n            twoFactorAuth: false,\n            loginNotifications: true\n          }\n        },\n        vatRegistered: data.vatRegistered,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }], { session: dbSession })\n\n      // Update user role\n      const updatedUser = await User.findByIdAndUpdate(\n        userSession.user.id,\n        {\n          role: 'SELLER',\n          businessProfile: seller[0]._id\n        },\n        { new: true, session: dbSession }\n      )\n\n      if (!updatedUser) {\n        throw new Error('Failed to update user role')\n      }\n\n      // Commit transaction\n      await dbSession.commitTransaction()\n\n      return NextResponse.json({\n        success: true,\n        message: 'Successfully registered as seller',\n        data: {\n          id: seller[0]._id,\n          businessName: seller[0].businessName,\n          email: seller[0].email,\n          role: updatedUser.role,\n          subscription: seller[0].subscription,\n        }\n      })\n\n    } catch (error) {\n      await dbSession.abortTransaction()\n      throw error\n    } finally {\n      await dbSession.endSession()\n    }\n\n  } catch (error) {\n    console.error('Seller registration error:', error)\n\n    if (error instanceof mongoose.Error.ValidationError) {\n      return NextResponse.json(\n        {\n          success: false,\n          message: 'Invalid seller data',\n          errors: Object.values(error.errors).map(err => ({\n            field: err.path,\n            message: err.message\n          }))\n        },\n        { status: 400 }\n      )\n    }\n\n    if (error instanceof mongoose.mongo.MongoServerError && error.code === 11000) {\n      return NextResponse.json(\n        {\n          success: false,\n          message: 'A seller with this email already exists'\n        },\n        { status: 409 }\n      )\n    }\n\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Registration failed'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport const config = {\n  api: {\n    bodyParser: false, // Disable default body parser\n    responseLimit: false,\n  },\n}"],"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","ignoreList":[]}