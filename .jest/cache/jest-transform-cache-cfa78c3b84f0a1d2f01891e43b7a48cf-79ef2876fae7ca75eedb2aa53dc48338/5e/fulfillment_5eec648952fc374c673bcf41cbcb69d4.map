{"version":3,"names":["FulfillmentService","constructor","config","cov_1wcain31u1","f","s","shipbob","_service","ShipBobService","amazonFBA","_service1","AmazonFBAService","amazon","processOrder","orderId","options","order","_ordermodel","default","findById","b","Error","fulfillmentType","processAmazonFulfillment","processShipBobFulfillment","processShopifyFulfillment","error","console","inventory","getInventory","items","map","item","sku","hasAvailableInventory","amazonOrder","createFulfillmentOrder","amazonOrderId","id","sellerOrderId","fulfillmentAction","displayableOrderId","displayableOrderDate","Date","toISOString","shippingSpeedCategory","priority","toUpperCase","destinationAddress","shippingAddress","sellerSku","quantity","findByIdAndUpdate","fulfillmentStatus","fulfillmentId","fulfillmentOrderId","_webhookdispatcher","WebhookDispatcher","dispatch","userId","status","success","data","provider","trackFulfillment","type","amazonStatus","getFulfillmentOrder","getFulfillmentStatus","every","itemInventory","find","inv","reference_id","productId","availableQuantity"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/fulfillment.ts"],"sourcesContent":["import { ShipBobService } from '../integrations/shipbob/service';\nimport { AmazonFBAService } from '../integrations/amazon/service';\nimport { WebhookDispatcher } from '../webhook-dispatcher';\nimport Order from '@/lib/db/models/order.model';\n\nexport class FulfillmentService {\n  private shipbob: ShipBobService;\n  private amazonFBA: AmazonFBAService;\n\n  constructor(config: {\n    shipbob: {\n      apiKey: string;\n      apiUrl: string;\n    };\n    amazon: {\n      region: string;\n      refreshToken: string;\n      accessKeyId: string;\n      secretAccessKey: string;\n      roleArn: string;\n    };\n    shopify?: {\n      apiKey: string;\n      apiSecret: string;\n      domain: string;\n      accessToken: string;\n    };\n  }) {\n    this.shipbob = new ShipBobService(config.shipbob);\n    this.amazonFBA = new AmazonFBAService(config.amazon);\n  }\n\n  async processOrder(orderId: string, options: {\n    fulfillmentType: 'shipbob' | 'amazon' | 'shopify';\n    priority?: 'standard' | 'expedited' | 'priority';\n  }) {\n    try {\n      const order = await Order.findById(orderId);\n      if (!order) {\n        throw new Error('Order not found');\n      }\n\n      switch (options.fulfillmentType) {\n        case 'amazon':\n          return this.processAmazonFulfillment(order, options);\n        case 'shipbob':\n          return this.processShipBobFulfillment(order, options);\n        case 'shopify':\n          return this.processShopifyFulfillment(order, options);\n        default:\n          throw new Error('Invalid fulfillment type');\n      }\n    } catch (error) {\n      console.error('Fulfillment process failed:', error);\n      throw error;\n    }\n  }\n\n  private async processAmazonFulfillment(order: any, options: any) {\n    // Check inventory availability in Amazon FBA\n    const inventory = await this.amazonFBA.getInventory(\n      order.items.map((item: any) => item.sku)\n    );\n\n    if (!this.hasAvailableInventory(inventory, order.items)) {\n      throw new Error('Insufficient inventory in Amazon FBA');\n    }\n\n    // Create Amazon FBA fulfillment order\n    const amazonOrder = await this.amazonFBA.createFulfillmentOrder({\n      amazonOrderId: order.id,\n      sellerOrderId: order.id,\n      fulfillmentAction: 'Ship',\n      displayableOrderId: order.id,\n      displayableOrderDate: new Date().toISOString(),\n      shippingSpeedCategory: options.priority?.toUpperCase() || 'STANDARD',\n      destinationAddress: order.shippingAddress,\n      items: order.items.map((item: any) => ({\n        sellerSku: item.sku,\n        quantity: item.quantity\n      }))\n    });\n\n    // Update order status\n    await Order.findByIdAndUpdate(order.id, {\n      fulfillmentStatus: 'processing',\n      fulfillmentId: amazonOrder.fulfillmentOrderId,\n      fulfillmentType: 'amazon'\n    });\n\n    // Dispatch webhook\n    await WebhookDispatcher.dispatch(\n      order.userId,\n      'order.fulfillment.created',\n      {\n        orderId: order.id,\n        fulfillmentId: amazonOrder.fulfillmentOrderId,\n        fulfillmentType: 'amazon',\n        status: 'processing'\n      }\n    );\n\n    return {\n      success: true,\n      data: {\n        fulfillmentId: amazonOrder.fulfillmentOrderId,\n        status: 'processing',\n        provider: 'amazon'\n      }\n    };\n  }\n\n  async trackFulfillment(fulfillmentId: string, options: {\n    type: 'shipbob' | 'amazon' | 'shopify'\n  }) {\n    try {\n      switch (options.type) {\n        case 'amazon':\n          const amazonStatus = await this.amazonFBA.getFulfillmentOrder(fulfillmentId);\n          return {\n            success: true,\n            data: amazonStatus\n          };\n        case 'shipbob':\n          return this.shipbob.getFulfillmentStatus(fulfillmentId);\n        default:\n          throw new Error('Invalid fulfillment type');\n      }\n    } catch (error) {\n      console.error('Tracking update failed:', error);\n      throw error;\n    }\n  }\n\n  private hasAvailableInventory(inventory: any[], items: any[]) {\n    return items.every(item => {\n      const itemInventory = inventory.find(inv => \n        inv.sku === item.sku || inv.reference_id === item.productId\n      );\n      return itemInventory && itemInventory.availableQuantity >= item.quantity;\n    });\n  }\n}"],"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","ignoreList":[]}