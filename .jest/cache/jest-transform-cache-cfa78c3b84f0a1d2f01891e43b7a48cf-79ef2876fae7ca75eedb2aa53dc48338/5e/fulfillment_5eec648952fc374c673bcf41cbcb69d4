73cc4bbff7ab1ded1cbc8d0e4ce96751
"use strict";

/* istanbul ignore next */
function cov_1wcain31u1() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/fulfillment.ts";
  var hash = "e4cd24f5b7ed4360d1ffa0a02c652b60c434c9d1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/fulfillment.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "3": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 59
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 59
        }
      },
      "5": {
        start: {
          line: 13,
          column: 27
        },
        end: {
          line: 13,
          column: 59
        }
      },
      "6": {
        start: {
          line: 14,
          column: 34
        },
        end: {
          line: 14,
          column: 98
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "8": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 67
        }
      },
      "9": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 71
        }
      },
      "10": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "11": {
        start: {
          line: 27,
          column: 26
        },
        end: {
          line: 27,
          column: 69
        }
      },
      "12": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "13": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 51
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "15": {
        start: {
          line: 33,
          column: 20
        },
        end: {
          line: 33,
          column: 73
        }
      },
      "16": {
        start: {
          line: 35,
          column: 20
        },
        end: {
          line: 35,
          column: 74
        }
      },
      "17": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 74
        }
      },
      "18": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 64
        }
      },
      "19": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 64
        }
      },
      "20": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 24
        }
      },
      "21": {
        start: {
          line: 48,
          column: 26
        },
        end: {
          line: 48,
          column: 94
        }
      },
      "22": {
        start: {
          line: 48,
          column: 84
        },
        end: {
          line: 48,
          column: 92
        }
      },
      "23": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "24": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 68
        }
      },
      "25": {
        start: {
          line: 53,
          column: 28
        },
        end: {
          line: 65,
          column: 10
        }
      },
      "26": {
        start: {
          line: 61,
          column: 44
        },
        end: {
          line: 64,
          column: 17
        }
      },
      "27": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "28": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 78,
          column: 11
        }
      },
      "29": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 86,
          column: 10
        }
      },
      "30": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "31": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "32": {
        start: {
          line: 92,
          column: 41
        },
        end: {
          line: 92,
          column: 96
        }
      },
      "33": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 96,
          column: 22
        }
      },
      "34": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 76
        }
      },
      "35": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 100,
          column: 64
        }
      },
      "36": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 60
        }
      },
      "37": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 24
        }
      },
      "38": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 111,
          column: 11
        }
      },
      "39": {
        start: {
          line: 109,
          column: 34
        },
        end: {
          line: 109,
          column: 116
        }
      },
      "40": {
        start: {
          line: 109,
          column: 56
        },
        end: {
          line: 109,
          column: 115
        }
      },
      "41": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 85
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 33
          }
        },
        loc: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 23
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 51
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 46
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 48,
            column: 76
          },
          end: {
            line: 48,
            column: 77
          }
        },
        loc: {
          start: {
            line: 48,
            column: 84
          },
          end: {
            line: 48,
            column: 92
          }
        },
        line: 48
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 61,
            column: 35
          },
          end: {
            line: 61,
            column: 36
          }
        },
        loc: {
          start: {
            line: 61,
            column: 44
          },
          end: {
            line: 64,
            column: 17
          }
        },
        line: 61
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 51
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 88
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 44
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 107
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 108,
            column: 27
          },
          end: {
            line: 108,
            column: 28
          }
        },
        loc: {
          start: {
            line: 108,
            column: 35
          },
          end: {
            line: 111,
            column: 9
          }
        },
        line: 108
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 109,
            column: 49
          },
          end: {
            line: 109,
            column: 50
          }
        },
        loc: {
          start: {
            line: 109,
            column: 56
          },
          end: {
            line: 109,
            column: 115
          }
        },
        line: 109
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 38
          }
        }, {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 14
          }
        }, {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 32
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 33,
            column: 73
          }
        }, {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 35,
            column: 74
          }
        }, {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 37,
            column: 74
          }
        }, {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 39,
            column: 64
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 35
          },
          end: {
            line: 59,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 35
          },
          end: {
            line: 59,
            column: 66
          }
        }, {
          start: {
            line: 59,
            column: 70
          },
          end: {
            line: 59,
            column: 80
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 91,
            column: 16
          },
          end: {
            line: 96,
            column: 22
          }
        }, {
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 98,
            column: 76
          }
        }, {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 100,
            column: 64
          }
        }],
        line: 90
      },
      "7": {
        loc: {
          start: {
            line: 109,
            column: 56
          },
          end: {
            line: 109,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 56
          },
          end: {
            line: 109,
            column: 76
          }
        }, {
          start: {
            line: 109,
            column: 80
          },
          end: {
            line: 109,
            column: 115
          }
        }],
        line: 109
      },
      "8": {
        loc: {
          start: {
            line: 110,
            column: 19
          },
          end: {
            line: 110,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 19
          },
          end: {
            line: 110,
            column: 32
          }
        }, {
          start: {
            line: 110,
            column: 36
          },
          end: {
            line: 110,
            column: 84
          }
        }],
        line: 110
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/fulfillment.ts"],
      sourcesContent: ["import { ShipBobService } from '../integrations/shipbob/service';\nimport { AmazonFBAService } from '../integrations/amazon/service';\nimport { WebhookDispatcher } from '../webhook-dispatcher';\nimport Order from '@/lib/db/models/order.model';\n\nexport class FulfillmentService {\n  private shipbob: ShipBobService;\n  private amazonFBA: AmazonFBAService;\n\n  constructor(config: {\n    shipbob: {\n      apiKey: string;\n      apiUrl: string;\n    };\n    amazon: {\n      region: string;\n      refreshToken: string;\n      accessKeyId: string;\n      secretAccessKey: string;\n      roleArn: string;\n    };\n    shopify?: {\n      apiKey: string;\n      apiSecret: string;\n      domain: string;\n      accessToken: string;\n    };\n  }) {\n    this.shipbob = new ShipBobService(config.shipbob);\n    this.amazonFBA = new AmazonFBAService(config.amazon);\n  }\n\n  async processOrder(orderId: string, options: {\n    fulfillmentType: 'shipbob' | 'amazon' | 'shopify';\n    priority?: 'standard' | 'expedited' | 'priority';\n  }) {\n    try {\n      const order = await Order.findById(orderId);\n      if (!order) {\n        throw new Error('Order not found');\n      }\n\n      switch (options.fulfillmentType) {\n        case 'amazon':\n          return this.processAmazonFulfillment(order, options);\n        case 'shipbob':\n          return this.processShipBobFulfillment(order, options);\n        case 'shopify':\n          return this.processShopifyFulfillment(order, options);\n        default:\n          throw new Error('Invalid fulfillment type');\n      }\n    } catch (error) {\n      console.error('Fulfillment process failed:', error);\n      throw error;\n    }\n  }\n\n  private async processAmazonFulfillment(order: any, options: any) {\n    // Check inventory availability in Amazon FBA\n    const inventory = await this.amazonFBA.getInventory(\n      order.items.map((item: any) => item.sku)\n    );\n\n    if (!this.hasAvailableInventory(inventory, order.items)) {\n      throw new Error('Insufficient inventory in Amazon FBA');\n    }\n\n    // Create Amazon FBA fulfillment order\n    const amazonOrder = await this.amazonFBA.createFulfillmentOrder({\n      amazonOrderId: order.id,\n      sellerOrderId: order.id,\n      fulfillmentAction: 'Ship',\n      displayableOrderId: order.id,\n      displayableOrderDate: new Date().toISOString(),\n      shippingSpeedCategory: options.priority?.toUpperCase() || 'STANDARD',\n      destinationAddress: order.shippingAddress,\n      items: order.items.map((item: any) => ({\n        sellerSku: item.sku,\n        quantity: item.quantity\n      }))\n    });\n\n    // Update order status\n    await Order.findByIdAndUpdate(order.id, {\n      fulfillmentStatus: 'processing',\n      fulfillmentId: amazonOrder.fulfillmentOrderId,\n      fulfillmentType: 'amazon'\n    });\n\n    // Dispatch webhook\n    await WebhookDispatcher.dispatch(\n      order.userId,\n      'order.fulfillment.created',\n      {\n        orderId: order.id,\n        fulfillmentId: amazonOrder.fulfillmentOrderId,\n        fulfillmentType: 'amazon',\n        status: 'processing'\n      }\n    );\n\n    return {\n      success: true,\n      data: {\n        fulfillmentId: amazonOrder.fulfillmentOrderId,\n        status: 'processing',\n        provider: 'amazon'\n      }\n    };\n  }\n\n  async trackFulfillment(fulfillmentId: string, options: {\n    type: 'shipbob' | 'amazon' | 'shopify'\n  }) {\n    try {\n      switch (options.type) {\n        case 'amazon':\n          const amazonStatus = await this.amazonFBA.getFulfillmentOrder(fulfillmentId);\n          return {\n            success: true,\n            data: amazonStatus\n          };\n        case 'shipbob':\n          return this.shipbob.getFulfillmentStatus(fulfillmentId);\n        default:\n          throw new Error('Invalid fulfillment type');\n      }\n    } catch (error) {\n      console.error('Tracking update failed:', error);\n      throw error;\n    }\n  }\n\n  private hasAvailableInventory(inventory: any[], items: any[]) {\n    return items.every(item => {\n      const itemInventory = inventory.find(inv => \n        inv.sku === item.sku || inv.reference_id === item.productId\n      );\n      return itemInventory && itemInventory.availableQuantity >= item.quantity;\n    });\n  }\n}"],
      names: ["FulfillmentService", "constructor", "config", "shipbob", "ShipBobService", "amazonFBA", "AmazonFBAService", "amazon", "processOrder", "orderId", "options", "order", "Order", "findById", "Error", "fulfillmentType", "processAmazonFulfillment", "processShipBobFulfillment", "processShopifyFulfillment", "error", "console", "inventory", "getInventory", "items", "map", "item", "sku", "hasAvailableInventory", "amazonOrder", "createFulfillmentOrder", "amazonOrderId", "id", "sellerOrderId", "fulfillmentAction", "displayableOrderId", "displayableOrderDate", "Date", "toISOString", "shippingSpeedCategory", "priority", "toUpperCase", "destinationAddress", "shippingAddress", "sellerSku", "quantity", "findByIdAndUpdate", "fulfillmentStatus", "fulfillmentId", "fulfillmentOrderId", "WebhookDispatcher", "dispatch", "userId", "status", "success", "data", "provider", "trackFulfillment", "type", "amazonStatus", "getFulfillmentOrder", "getFulfillmentStatus", "every", "itemInventory", "find", "inv", "reference_id", "productId", "availableQuantity"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e4cd24f5b7ed4360d1ffa0a02c652b60c434c9d1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wcain31u1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wcain31u1();
cov_1wcain31u1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1wcain31u1().s[1]++;
Object.defineProperty(exports, "FulfillmentService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1wcain31u1().f[0]++;
    cov_1wcain31u1().s[2]++;
    return FulfillmentService;
  }
});
const _service =
/* istanbul ignore next */
(cov_1wcain31u1().s[3]++, require("../integrations/shipbob/service"));
const _service1 =
/* istanbul ignore next */
(cov_1wcain31u1().s[4]++, require("../integrations/amazon/service"));
const _webhookdispatcher =
/* istanbul ignore next */
(cov_1wcain31u1().s[5]++, require("../webhook-dispatcher"));
const _ordermodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_1wcain31u1().s[6]++, _interop_require_default(require("../../db/models/order.model")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1wcain31u1().f[1]++;
  cov_1wcain31u1().s[7]++;
  return /* istanbul ignore next */(cov_1wcain31u1().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1wcain31u1().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1wcain31u1().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1wcain31u1().b[0][1]++, {
    default: obj
  });
}
class FulfillmentService {
  constructor(config) {
    /* istanbul ignore next */
    cov_1wcain31u1().f[2]++;
    cov_1wcain31u1().s[8]++;
    this.shipbob = new _service.ShipBobService(config.shipbob);
    /* istanbul ignore next */
    cov_1wcain31u1().s[9]++;
    this.amazonFBA = new _service1.AmazonFBAService(config.amazon);
  }
  async processOrder(orderId, options) {
    /* istanbul ignore next */
    cov_1wcain31u1().f[3]++;
    cov_1wcain31u1().s[10]++;
    try {
      const order =
      /* istanbul ignore next */
      (cov_1wcain31u1().s[11]++, await _ordermodel.default.findById(orderId));
      /* istanbul ignore next */
      cov_1wcain31u1().s[12]++;
      if (!order) {
        /* istanbul ignore next */
        cov_1wcain31u1().b[2][0]++;
        cov_1wcain31u1().s[13]++;
        throw new Error('Order not found');
      } else
      /* istanbul ignore next */
      {
        cov_1wcain31u1().b[2][1]++;
      }
      cov_1wcain31u1().s[14]++;
      switch (options.fulfillmentType) {
        case 'amazon':
          /* istanbul ignore next */
          cov_1wcain31u1().b[3][0]++;
          cov_1wcain31u1().s[15]++;
          return this.processAmazonFulfillment(order, options);
        case 'shipbob':
          /* istanbul ignore next */
          cov_1wcain31u1().b[3][1]++;
          cov_1wcain31u1().s[16]++;
          return this.processShipBobFulfillment(order, options);
        case 'shopify':
          /* istanbul ignore next */
          cov_1wcain31u1().b[3][2]++;
          cov_1wcain31u1().s[17]++;
          return this.processShopifyFulfillment(order, options);
        default:
          /* istanbul ignore next */
          cov_1wcain31u1().b[3][3]++;
          cov_1wcain31u1().s[18]++;
          throw new Error('Invalid fulfillment type');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1wcain31u1().s[19]++;
      console.error('Fulfillment process failed:', error);
      /* istanbul ignore next */
      cov_1wcain31u1().s[20]++;
      throw error;
    }
  }
  async processAmazonFulfillment(order, options) {
    /* istanbul ignore next */
    cov_1wcain31u1().f[4]++;
    // Check inventory availability in Amazon FBA
    const inventory =
    /* istanbul ignore next */
    (cov_1wcain31u1().s[21]++, await this.amazonFBA.getInventory(order.items.map(item => {
      /* istanbul ignore next */
      cov_1wcain31u1().f[5]++;
      cov_1wcain31u1().s[22]++;
      return item.sku;
    })));
    /* istanbul ignore next */
    cov_1wcain31u1().s[23]++;
    if (!this.hasAvailableInventory(inventory, order.items)) {
      /* istanbul ignore next */
      cov_1wcain31u1().b[4][0]++;
      cov_1wcain31u1().s[24]++;
      throw new Error('Insufficient inventory in Amazon FBA');
    } else
    /* istanbul ignore next */
    {
      cov_1wcain31u1().b[4][1]++;
    }
    // Create Amazon FBA fulfillment order
    const amazonOrder =
    /* istanbul ignore next */
    (cov_1wcain31u1().s[25]++, await this.amazonFBA.createFulfillmentOrder({
      amazonOrderId: order.id,
      sellerOrderId: order.id,
      fulfillmentAction: 'Ship',
      displayableOrderId: order.id,
      displayableOrderDate: new Date().toISOString(),
      shippingSpeedCategory:
      /* istanbul ignore next */
      (cov_1wcain31u1().b[5][0]++, options.priority?.toUpperCase()) ||
      /* istanbul ignore next */
      (cov_1wcain31u1().b[5][1]++, 'STANDARD'),
      destinationAddress: order.shippingAddress,
      items: order.items.map(item => {
        /* istanbul ignore next */
        cov_1wcain31u1().f[6]++;
        cov_1wcain31u1().s[26]++;
        return {
          sellerSku: item.sku,
          quantity: item.quantity
        };
      })
    }));
    // Update order status
    /* istanbul ignore next */
    cov_1wcain31u1().s[27]++;
    await _ordermodel.default.findByIdAndUpdate(order.id, {
      fulfillmentStatus: 'processing',
      fulfillmentId: amazonOrder.fulfillmentOrderId,
      fulfillmentType: 'amazon'
    });
    // Dispatch webhook
    /* istanbul ignore next */
    cov_1wcain31u1().s[28]++;
    await _webhookdispatcher.WebhookDispatcher.dispatch(order.userId, 'order.fulfillment.created', {
      orderId: order.id,
      fulfillmentId: amazonOrder.fulfillmentOrderId,
      fulfillmentType: 'amazon',
      status: 'processing'
    });
    /* istanbul ignore next */
    cov_1wcain31u1().s[29]++;
    return {
      success: true,
      data: {
        fulfillmentId: amazonOrder.fulfillmentOrderId,
        status: 'processing',
        provider: 'amazon'
      }
    };
  }
  async trackFulfillment(fulfillmentId, options) {
    /* istanbul ignore next */
    cov_1wcain31u1().f[7]++;
    cov_1wcain31u1().s[30]++;
    try {
      /* istanbul ignore next */
      cov_1wcain31u1().s[31]++;
      switch (options.type) {
        case 'amazon':
          /* istanbul ignore next */
          cov_1wcain31u1().b[6][0]++;
          const amazonStatus =
          /* istanbul ignore next */
          (cov_1wcain31u1().s[32]++, await this.amazonFBA.getFulfillmentOrder(fulfillmentId));
          /* istanbul ignore next */
          cov_1wcain31u1().s[33]++;
          return {
            success: true,
            data: amazonStatus
          };
        case 'shipbob':
          /* istanbul ignore next */
          cov_1wcain31u1().b[6][1]++;
          cov_1wcain31u1().s[34]++;
          return this.shipbob.getFulfillmentStatus(fulfillmentId);
        default:
          /* istanbul ignore next */
          cov_1wcain31u1().b[6][2]++;
          cov_1wcain31u1().s[35]++;
          throw new Error('Invalid fulfillment type');
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1wcain31u1().s[36]++;
      console.error('Tracking update failed:', error);
      /* istanbul ignore next */
      cov_1wcain31u1().s[37]++;
      throw error;
    }
  }
  hasAvailableInventory(inventory, items) {
    /* istanbul ignore next */
    cov_1wcain31u1().f[8]++;
    cov_1wcain31u1().s[38]++;
    return items.every(item => {
      /* istanbul ignore next */
      cov_1wcain31u1().f[9]++;
      const itemInventory =
      /* istanbul ignore next */
      (cov_1wcain31u1().s[39]++, inventory.find(inv => {
        /* istanbul ignore next */
        cov_1wcain31u1().f[10]++;
        cov_1wcain31u1().s[40]++;
        return /* istanbul ignore next */(cov_1wcain31u1().b[7][0]++, inv.sku === item.sku) ||
        /* istanbul ignore next */
        (cov_1wcain31u1().b[7][1]++, inv.reference_id === item.productId);
      }));
      /* istanbul ignore next */
      cov_1wcain31u1().s[41]++;
      return /* istanbul ignore next */(cov_1wcain31u1().b[8][0]++, itemInventory) &&
      /* istanbul ignore next */
      (cov_1wcain31u1().b[8][1]++, itemInventory.availableQuantity >= item.quantity);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,