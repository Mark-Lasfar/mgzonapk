0f780014941cce455103c90f1393aff7
"use strict";

/* istanbul ignore next */
function cov_20uh8p89o6() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/schedule-manager.ts";
  var hash = "874a7431adc109fa9e09352743afc892ff7462f1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/schedule-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 31
        }
      },
      "3": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 40
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 37
        }
      },
      "5": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "6": {
        start: {
          line: 14,
          column: 37
        },
        end: {
          line: 14,
          column: 104
        }
      },
      "7": {
        start: {
          line: 15,
          column: 38
        },
        end: {
          line: 15,
          column: 106
        }
      },
      "8": {
        start: {
          line: 16,
          column: 34
        },
        end: {
          line: 16,
          column: 82
        }
      },
      "9": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 17,
          column: 31
        }
      },
      "10": {
        start: {
          line: 18,
          column: 30
        },
        end: {
          line: 18,
          column: 73
        }
      },
      "11": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 22,
          column: 6
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 38
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 34
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 29
        }
      },
      "15": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "16": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 62
        }
      },
      "17": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "18": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 53
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 47
        }
      },
      "20": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 55
        }
      },
      "21": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "22": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "23": {
        start: {
          line: 45,
          column: 32
        },
        end: {
          line: 45,
          column: 46
        }
      },
      "24": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 47
        }
      },
      "25": {
        start: {
          line: 47,
          column: 32
        },
        end: {
          line: 55,
          column: 14
        }
      },
      "26": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 52
        }
      },
      "27": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "28": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 31
        }
      },
      "29": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "30": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 24
        }
      },
      "31": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "32": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "33": {
        start: {
          line: 76,
          column: 33
        },
        end: {
          line: 76,
          column: 73
        }
      },
      "34": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 80
        }
      },
      "35": {
        start: {
          line: 79,
          column: 33
        },
        end: {
          line: 82,
          column: 18
        }
      },
      "36": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 62
        }
      },
      "37": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 91,
          column: 15
        }
      },
      "38": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 76
        }
      },
      "39": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "40": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 100,
          column: 15
        }
      },
      "41": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 19
        }
      },
      "42": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "43": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 104,
          column: 44
        }
      },
      "44": {
        start: {
          line: 105,
          column: 28
        },
        end: {
          line: 105,
          column: 64
        }
      },
      "45": {
        start: {
          line: 106,
          column: 26
        },
        end: {
          line: 106,
          column: 52
        }
      },
      "46": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 114,
          column: 14
        }
      },
      "47": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "48": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "49": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 76
        }
      },
      "50": {
        start: {
          line: 131,
          column: 25
        },
        end: {
          line: 131,
          column: 74
        }
      },
      "51": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "52": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "53": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 19
        }
      },
      "54": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "55": {
        start: {
          line: 140,
          column: 32
        },
        end: {
          line: 140,
          column: 46
        }
      },
      "56": {
        start: {
          line: 141,
          column: 30
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "57": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 60
        }
      },
      "58": {
        start: {
          line: 151,
          column: 41
        },
        end: {
          line: 151,
          column: 120
        }
      },
      "59": {
        start: {
          line: 152,
          column: 27
        },
        end: {
          line: 152,
          column: 82
        }
      },
      "60": {
        start: {
          line: 153,
          column: 31
        },
        end: {
          line: 153,
          column: 79
        }
      },
      "61": {
        start: {
          line: 154,
          column: 28
        },
        end: {
          line: 154,
          column: 52
        }
      },
      "62": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "63": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "64": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 165,
          column: 17
        }
      },
      "65": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 82
        }
      },
      "66": {
        start: {
          line: 167,
          column: 28
        },
        end: {
          line: 167,
          column: 113
        }
      },
      "67": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 173,
          column: 15
        }
      },
      "68": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 177,
          column: 15
        }
      },
      "69": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "70": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "71": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 49
        }
      },
      "72": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "73": {
        start: {
          line: 192,
          column: 34
        },
        end: {
          line: 197,
          column: 14
        }
      },
      "74": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 215,
          column: 13
        }
      },
      "75": {
        start: {
          line: 199,
          column: 34
        },
        end: {
          line: 199,
          column: 136
        }
      },
      "76": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 204,
          column: 19
        }
      },
      "77": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 207,
          column: 19
        }
      },
      "78": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 214,
          column: 19
        }
      },
      "79": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 221,
          column: 15
        }
      },
      "80": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 24
        }
      },
      "81": {
        start: {
          line: 226,
          column: 30
        },
        end: {
          line: 226,
          column: 52
        }
      },
      "82": {
        start: {
          line: 227,
          column: 33
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "83": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "84": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "85": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 130
        }
      },
      "86": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "87": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 242,
          column: 59
        }
      },
      "88": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "89": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 247,
          column: 61
        }
      },
      "90": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 254,
          column: 15
        }
      },
      "91": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 261,
          column: 15
        }
      },
      "92": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 24
        }
      },
      "93": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "94": {
        start: {
          line: 267,
          column: 29
        },
        end: {
          line: 267,
          column: 78
        }
      },
      "95": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 270,
          column: 13
        }
      },
      "96": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 77
        }
      },
      "97": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 52
        }
      },
      "98": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 58
        }
      },
      "99": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 34
        }
      },
      "100": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 279,
          column: 15
        }
      },
      "101": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 285,
          column: 15
        }
      },
      "102": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 24
        }
      },
      "103": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "104": {
        start: {
          line: 291,
          column: 29
        },
        end: {
          line: 291,
          column: 78
        }
      },
      "105": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 294,
          column: 13
        }
      },
      "106": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 77
        }
      },
      "107": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 36
        }
      },
      "108": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 300,
          column: 15
        }
      },
      "109": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 306,
          column: 15
        }
      },
      "110": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 24
        }
      },
      "111": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "112": {
        start: {
          line: 312,
          column: 30
        },
        end: {
          line: 312,
          column: 65
        }
      },
      "113": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 29
        }
      },
      "114": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 318,
          column: 15
        }
      },
      "115": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 24
        }
      },
      "116": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "117": {
        start: {
          line: 324,
          column: 30
        },
        end: {
          line: 324,
          column: 81
        }
      },
      "118": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 37
        }
      },
      "119": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 331,
          column: 15
        }
      },
      "120": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 33
          }
        },
        loc: {
          start: {
            line: 19,
            column: 39
          },
          end: {
            line: 23,
            column: 1
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 73
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 35
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 43
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 42
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 73
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 36
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 95
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 43
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 130
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 32
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 190
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 57
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 225
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 51
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 265
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 37
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 289
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 26
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 310
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 42
          },
          end: {
            line: 334,
            column: 5
          }
        },
        line: 322
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 11
          },
          end: {
            line: 22,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 35
          },
          end: {
            line: 20,
            column: 38
          }
        }, {
          start: {
            line: 20,
            column: 41
          },
          end: {
            line: 22,
            column: 5
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 11
          },
          end: {
            line: 20,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 11
          },
          end: {
            line: 20,
            column: 14
          }
        }, {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 32
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 29,
            column: 42
          }
        }, {
          start: {
            line: 29,
            column: 46
          },
          end: {
            line: 29,
            column: 78
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 67
          },
          end: {
            line: 50,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 67
          },
          end: {
            line: 50,
            column: 84
          }
        }, {
          start: {
            line: 50,
            column: 88
          },
          end: {
            line: 50,
            column: 109
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: 78,
            column: 19
          },
          end: {
            line: 84,
            column: 13
          }
        }],
        line: 75
      },
      "6": {
        loc: {
          start: {
            line: 89,
            column: 23
          },
          end: {
            line: 89,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 48
          },
          end: {
            line: 89,
            column: 61
          }
        }, {
          start: {
            line: 89,
            column: 64
          },
          end: {
            line: 89,
            column: 77
          }
        }],
        line: 89
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 18
          },
          end: {
            line: 92,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 92,
            column: 43
          },
          end: {
            line: 92,
            column: 48
          }
        }, {
          start: {
            line: 92,
            column: 51
          },
          end: {
            line: 92,
            column: 75
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "9": {
        loc: {
          start: {
            line: 127,
            column: 18
          },
          end: {
            line: 127,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 127,
            column: 43
          },
          end: {
            line: 127,
            column: 48
          }
        }, {
          start: {
            line: 127,
            column: 51
          },
          end: {
            line: 127,
            column: 75
          }
        }],
        line: 127
      },
      "10": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "11": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 21
          }
        }, {
          start: {
            line: 132,
            column: 25
          },
          end: {
            line: 132,
            column: 42
          }
        }],
        line: 132
      },
      "12": {
        loc: {
          start: {
            line: 156,
            column: 24
          },
          end: {
            line: 156,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 156,
            column: 45
          },
          end: {
            line: 156,
            column: 56
          }
        }, {
          start: {
            line: 156,
            column: 59
          },
          end: {
            line: 156,
            column: 67
          }
        }],
        line: 156
      },
      "13": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "14": {
        loc: {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 165,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 165,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "15": {
        loc: {
          start: {
            line: 163,
            column: 20
          },
          end: {
            line: 163,
            column: 138
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 20
          },
          end: {
            line: 163,
            column: 38
          }
        }, {
          start: {
            line: 163,
            column: 42
          },
          end: {
            line: 163,
            column: 78
          }
        }, {
          start: {
            line: 163,
            column: 82
          },
          end: {
            line: 163,
            column: 101
          }
        }, {
          start: {
            line: 163,
            column: 105
          },
          end: {
            line: 163,
            column: 138
          }
        }],
        line: 163
      },
      "16": {
        loc: {
          start: {
            line: 167,
            column: 70
          },
          end: {
            line: 167,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 70
          },
          end: {
            line: 167,
            column: 87
          }
        }, {
          start: {
            line: 167,
            column: 91
          },
          end: {
            line: 167,
            column: 112
          }
        }],
        line: 167
      },
      "17": {
        loc: {
          start: {
            line: 182,
            column: 23
          },
          end: {
            line: 182,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 48
          },
          end: {
            line: 182,
            column: 61
          }
        }, {
          start: {
            line: 182,
            column: 64
          },
          end: {
            line: 182,
            column: 77
          }
        }],
        line: 182
      },
      "18": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 187,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "19": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 215,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 215,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "20": {
        loc: {
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 198,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 198,
            column: 29
          }
        }, {
          start: {
            line: 198,
            column: 33
          },
          end: {
            line: 198,
            column: 110
          }
        }],
        line: 198
      },
      "21": {
        loc: {
          start: {
            line: 198,
            column: 61
          },
          end: {
            line: 198,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 61
          },
          end: {
            line: 198,
            column: 89
          }
        }, {
          start: {
            line: 198,
            column: 93
          },
          end: {
            line: 198,
            column: 109
          }
        }],
        line: 198
      },
      "22": {
        loc: {
          start: {
            line: 219,
            column: 23
          },
          end: {
            line: 219,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 219,
            column: 48
          },
          end: {
            line: 219,
            column: 61
          }
        }, {
          start: {
            line: 219,
            column: 64
          },
          end: {
            line: 219,
            column: 77
          }
        }],
        line: 219
      },
      "23": {
        loc: {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 237,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "24": {
        loc: {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "25": {
        loc: {
          start: {
            line: 239,
            column: 64
          },
          end: {
            line: 242,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 106
          },
          end: {
            line: 242,
            column: 17
          }
        }, {
          start: {
            line: 242,
            column: 20
          },
          end: {
            line: 242,
            column: 39
          }
        }],
        line: 239
      },
      "26": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "27": {
        loc: {
          start: {
            line: 245,
            column: 59
          },
          end: {
            line: 247,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 245,
            column: 103
          },
          end: {
            line: 247,
            column: 17
          }
        }, {
          start: {
            line: 247,
            column: 20
          },
          end: {
            line: 247,
            column: 41
          }
        }],
        line: 245
      },
      "28": {
        loc: {
          start: {
            line: 259,
            column: 23
          },
          end: {
            line: 259,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 48
          },
          end: {
            line: 259,
            column: 61
          }
        }, {
          start: {
            line: 259,
            column: 64
          },
          end: {
            line: 259,
            column: 77
          }
        }],
        line: 259
      },
      "29": {
        loc: {
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "30": {
        loc: {
          start: {
            line: 283,
            column: 23
          },
          end: {
            line: 283,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 48
          },
          end: {
            line: 283,
            column: 61
          }
        }, {
          start: {
            line: 283,
            column: 64
          },
          end: {
            line: 283,
            column: 77
          }
        }],
        line: 283
      },
      "31": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 294,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 294,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "32": {
        loc: {
          start: {
            line: 304,
            column: 23
          },
          end: {
            line: 304,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 304,
            column: 48
          },
          end: {
            line: 304,
            column: 61
          }
        }, {
          start: {
            line: 304,
            column: 64
          },
          end: {
            line: 304,
            column: 77
          }
        }],
        line: 304
      },
      "33": {
        loc: {
          start: {
            line: 316,
            column: 23
          },
          end: {
            line: 316,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 316,
            column: 48
          },
          end: {
            line: 316,
            column: 61
          }
        }, {
          start: {
            line: 316,
            column: 64
          },
          end: {
            line: 316,
            column: 77
          }
        }],
        line: 316
      },
      "34": {
        loc: {
          start: {
            line: 325,
            column: 19
          },
          end: {
            line: 325,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 19
          },
          end: {
            line: 325,
            column: 28
          }
        }, {
          start: {
            line: 325,
            column: 32
          },
          end: {
            line: 325,
            column: 36
          }
        }],
        line: 325
      },
      "35": {
        loc: {
          start: {
            line: 329,
            column: 23
          },
          end: {
            line: 329,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 329,
            column: 48
          },
          end: {
            line: 329,
            column: 61
          }
        }, {
          start: {
            line: 329,
            column: 64
          },
          end: {
            line: 329,
            column: 77
          }
        }],
        line: 329
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/schedule-manager.ts"],
      sourcesContent: ["import { Redis } from '@upstash/redis';\nimport { logger } from './logging';\nimport { UnifiedFulfillmentService } from './unified-fulfillment';\nimport { SyncProgressTracker } from './sync-progress';\nimport { NotificationService } from './notification';\nimport { \n  SyncSchedule, \n  ScheduleExecution,\n  ScheduleFrequency \n} from '../types/scheduler';\nimport { connectToDatabase } from '@/lib/db';\nimport ScheduleModel from '@/lib/db/models/schedule.model';\nimport ExecutionModel from '@/lib/db/models/execution.model';\nimport parseExpression from 'cron-parser';\nimport { Duration } from 'luxon';\nimport crypto from 'crypto';\n\nexport class ScheduleManager {\n  private redis: Redis;\n  private fulfillmentService: UnifiedFulfillmentService;\n  private progressTracker: SyncProgressTracker;\n  private notificationService: NotificationService;\n  private readonly DEFAULT_TIMEZONE = 'UTC';\n  private readonly RETRY_MULTIPLIER = 2;\n  private readonly MAX_RETRIES = 3;\n\n  constructor(\n    fulfillmentService: UnifiedFulfillmentService,\n    progressTracker: SyncProgressTracker,\n    notificationService: NotificationService\n  ) {\n    if (!process.env.UPSTASH_REDIS_URL || !process.env.UPSTASH_REDIS_TOKEN) {\n      throw new Error('Redis configuration is missing');\n    }\n\n    this.redis = new Redis({\n      url: process.env.UPSTASH_REDIS_URL,\n      token: process.env.UPSTASH_REDIS_TOKEN,\n    });\n    \n    this.fulfillmentService = fulfillmentService;\n    this.progressTracker = progressTracker;\n    this.notificationService = notificationService;\n\n    logger.info('ScheduleManager initialized', {\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  async createSchedule(\n    schedule: Omit<SyncSchedule, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<SyncSchedule> {\n    try {\n      const currentUser = 'dynamic-user'; // Use dynamic user context\n      await connectToDatabase();\n\n      const newSchedule = await ScheduleModel.create({\n        ...schedule,\n        id: crypto.randomBytes(16).toString('hex'),\n        nextRun: this.calculateNextRun(\n          schedule.frequency, \n          schedule.timezone || this.DEFAULT_TIMEZONE\n        ),\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        createdBy: currentUser,\n        updatedBy: currentUser,\n      });\n\n      await this.scheduleNextRun(newSchedule);\n      \n      logger.info('Created new sync schedule', {\n        scheduleId: newSchedule.id,\n        provider: newSchedule.provider,\n        nextRun: newSchedule.nextRun,\n        createdBy: currentUser,\n      });\n\n      return newSchedule;\n    } catch (error) {\n      logger.error(new Error('Failed to create schedule'), {\n        error,\n        schedule,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  }\n\n  private calculateNextRun(\n    frequency: ScheduleFrequency,\n    timezone: string\n  ): string {\n    try {\n      if (frequency.type === 'interval') {\n        const duration = Duration.fromISO(frequency.value);\n        return new Date(Date.now() + duration.toMillis()).toISOString();\n      } else {\n        const interval = parseExpression(frequency.value, {\n          currentDate: new Date(),\n          tz: timezone,\n        });\n        return interval.next().toDate().toISOString();\n      }\n    } catch (error) {\n      logger.error(new Error('Error calculating next run'), {\n        frequency, \n        timezone, \n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString(),\n      });\n      throw error instanceof Error ? error : new Error(String(error));\n    }\n  }\n\n  private async scheduleNextRun(schedule: SyncSchedule): Promise<void> {\n    if (!schedule.enabled) {\n      logger.info('Schedule is disabled, skipping next run', {\n        scheduleId: schedule.id,\n        timestamp: new Date().toISOString(),\n      });\n      return;\n    }\n\n    try {\n      const now = new Date().getTime();\n      const nextRun = new Date(schedule.nextRun).getTime();\n      const delay = Math.max(0, nextRun - now);\n\n      await this.redis.set(\n        `schedule:${schedule.id}`,\n        JSON.stringify({\n          ...schedule,\n          lastChecked: now,\n          updatedBy: 'dynamic-user',\n        }),\n        { ex: Math.ceil(delay / 1000) + 60 } // Add 1 minute buffer\n      );\n\n      logger.info('Scheduled next run', {\n        scheduleId: schedule.id,\n        nextRun: schedule.nextRun,\n        delay: `${Math.ceil(delay / 1000)}s`,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      logger.error(new Error('Failed to schedule next run'), {\n        scheduleId: schedule.id,\n        error,\n        timestamp: new Date().toISOString(),\n      });\n      throw error instanceof Error ? error : new Error(String(error));\n    }\n  }\n\n  async processScheduledSync(scheduleId: string): Promise<void> {\n    const schedule = await ScheduleModel.findById(scheduleId);\n    if (!schedule || !schedule.enabled) {\n      logger.info('Schedule not found or disabled', {\n        scheduleId,\n        timestamp: new Date().toISOString(),\n      });\n      return;\n    }\n\n    try {\n      const currentUser = 'dynamic-user'; // Use dynamic user context\n      const execution: ScheduleExecution = {\n        id: crypto.randomBytes(16).toString('hex'),\n        scheduleId: schedule.id,\n        syncId: crypto.randomBytes(16).toString('hex'),\n        provider: schedule.provider,\n        status: 'pending',\n        startTime: new Date().toISOString(),\n        retryCount: 0,\n      };\n\n      await ExecutionModel.create(execution);\n\n      const inventorySyncService = new (require('./inventory-sync').InventorySyncService)(this.fulfillmentService);\n      const syncId = await inventorySyncService.startSync(schedule.provider);\n\n      const syncResult = await inventorySyncService.getSyncStatus(syncId);\n\n      const endTime = new Date().toISOString();\n      await ExecutionModel.findByIdAndUpdate(execution.id, {\n        status: syncResult.success ? 'completed' : 'failed',\n        endTime,\n        duration: new Date(endTime).getTime() - new Date(execution.startTime).getTime(),\n        result: syncResult,\n        updatedBy: currentUser,\n      });\n\n      if (schedule.notifications) {\n        if (\n          (syncResult.success && schedule.settings.notifyOnCompletion) ||\n          (!syncResult.success && schedule.settings.notifyOnFailure)\n        ) {\n          await this.sendNotifications(schedule, execution, syncResult);\n        }\n      }\n\n      const nextRun = this.calculateNextRun(\n        schedule.frequency,\n        schedule.timezone || this.DEFAULT_TIMEZONE\n      );\n\n      await ScheduleModel.findByIdAndUpdate(schedule.id, {\n        lastRun: endTime,\n        nextRun,\n        updatedAt: endTime,\n        updatedBy: currentUser,\n      });\n\n      await this.scheduleNextRun({\n        ...schedule,\n        nextRun,\n      });\n\n    } catch (error) {\n      logger.error(new Error('Scheduled sync failed'), {\n        scheduleId: schedule.id,\n        provider: schedule.provider,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString(),\n      });\n\n      if (schedule.settings.retryOnFailure) {\n        await this.handleRetry(schedule);\n      }\n    }\n  }\n\n  private async handleRetry(schedule: SyncSchedule): Promise<void> {\n    try {\n      const lastExecution = await ExecutionModel.findOne({\n        scheduleId: schedule.id,\n        status: 'failed',\n      }).sort({ startTime: -1 });\n\n      if (\n        lastExecution &&\n        lastExecution.retryCount < (schedule.settings.maxRetries || this.MAX_RETRIES)\n      ) {\n        const nextRetry = new Date(\n          Date.now() + Math.pow(this.RETRY_MULTIPLIER, lastExecution.retryCount) * 60000\n        ).toISOString();\n\n        await ExecutionModel.findByIdAndUpdate(lastExecution.id, {\n          retryCount: lastExecution.retryCount + 1,\n          nextRetry,\n          updatedBy: 'dynamic-user',\n        });\n\n        await this.redis.set(\n          `retry:${lastExecution.id}`,\n          schedule.id,\n          { \n            ex: 60 * Math.pow(this.RETRY_MULTIPLIER, lastExecution.retryCount),\n          }\n        );\n\n        logger.info('Scheduled retry', {\n          executionId: lastExecution.id,\n          scheduleId: schedule.id,\n          retryCount: lastExecution.retryCount + 1,\n          nextRetry,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (error) {\n      logger.error(new Error('Failed to handle retry'), {\n        scheduleId: schedule.id,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  }\n\n  private async sendNotifications(\n    schedule: SyncSchedule,\n    execution: ScheduleExecution,\n    result: any\n  ): Promise<void> {\n    const notifications = schedule.notifications;\n    const notificationData = {\n      type: 'sync_execution',\n      schedule,\n      execution,\n      result,\n      timestamp: new Date().toISOString(),\n    };\n\n    try {\n      if (notifications.email) {\n        await this.notificationService.sendEmail(\n          notifications.email,\n          'Sync Schedule Execution Update',\n          notificationData\n        );\n      }\n\n      if (notifications.slack) {\n        await this.notificationService.sendSlackMessage(\n          typeof notifications.slack === 'string'\n            ? { webhook: notifications.slack, channel: '' }\n            : notifications.slack,\n          notificationData\n        );\n      }\n\n      if (notifications.webhook) {\n        await this.notificationService.sendWebhook(\n          typeof notifications.webhook === 'string'\n            ? { url: notifications.webhook }\n            : notifications.webhook,\n          notificationData\n        );\n      }\n\n      logger.info('Notifications sent successfully', {\n        scheduleId: schedule.id,\n        executionId: execution.id,\n        channels: Object.keys(notifications),\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      logger.error(new Error('Failed to send notifications'), {\n        scheduleId: schedule.id,\n        executionId: execution.id,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  }\n\n  async updateScheduleStatus(scheduleId: string, status: 'enabled' | 'disabled'): Promise<void> {\n    try {\n      const schedule = await ScheduleModel.findById(scheduleId);\n      if (!schedule) {\n        throw new Error(`Schedule with ID ${scheduleId} not found.`);\n      }\n\n      schedule.enabled = status === 'enabled';\n      schedule.updatedAt = new Date().toISOString();\n\n      await schedule.save();\n\n      logger.info('Schedule status updated', {\n        scheduleId,\n        status,\n        updatedBy: 'dynamic-user',\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      logger.error(new Error('Failed to update schedule status'), {\n        scheduleId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  }\n\n  async deleteSchedule(scheduleId: string): Promise<void> {\n    try {\n      const schedule = await ScheduleModel.findById(scheduleId);\n      if (!schedule) {\n        throw new Error(`Schedule with ID ${scheduleId} not found.`);\n      }\n\n      await schedule.remove();\n\n      logger.info('Schedule deleted', {\n        scheduleId,\n        deletedBy: 'dynamic-user',\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      logger.error(new Error('Failed to delete schedule'), {\n        scheduleId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  }\n\n  async listSchedules(): Promise<SyncSchedule[]> {\n    try {\n      const schedules = await ScheduleModel.find();\n      return schedules;\n    } catch (error) {\n      logger.error(new Error('Failed to list schedules'), {\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  }\n\n  async getExecutionStatus(executionId: string): Promise<ScheduleExecution | null> {\n    try {\n      const execution = await ExecutionModel.findById(executionId);\n      return execution || null;\n    } catch (error) {\n      logger.error(new Error('Failed to fetch execution status'), {\n        executionId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  }\n}"],
      names: ["ScheduleManager", "constructor", "fulfillmentService", "progressTracker", "notificationService", "DEFAULT_TIMEZONE", "RETRY_MULTIPLIER", "MAX_RETRIES", "process", "env", "UPSTASH_REDIS_URL", "UPSTASH_REDIS_TOKEN", "Error", "redis", "Redis", "url", "token", "logger", "info", "timestamp", "Date", "toISOString", "createSchedule", "schedule", "currentUser", "connectToDatabase", "newSchedule", "ScheduleModel", "create", "id", "crypto", "randomBytes", "toString", "nextRun", "calculateNextRun", "frequency", "timezone", "createdAt", "updatedAt", "createdBy", "updatedBy", "scheduleNextRun", "scheduleId", "provider", "error", "type", "duration", "Duration", "fromISO", "value", "now", "toMillis", "interval", "parseExpression", "currentDate", "tz", "next", "toDate", "message", "String", "enabled", "getTime", "delay", "Math", "max", "set", "JSON", "stringify", "lastChecked", "ex", "ceil", "processScheduledSync", "findById", "execution", "syncId", "status", "startTime", "retryCount", "ExecutionModel", "inventorySyncService", "require", "InventorySyncService", "startSync", "syncResult", "getSyncStatus", "endTime", "findByIdAndUpdate", "success", "result", "notifications", "settings", "notifyOnCompletion", "notifyOnFailure", "sendNotifications", "lastRun", "retryOnFailure", "handleRetry", "lastExecution", "findOne", "sort", "maxRetries", "nextRetry", "pow", "executionId", "notificationData", "email", "sendEmail", "slack", "sendSlackMessage", "webhook", "channel", "sendWebhook", "channels", "Object", "keys", "updateScheduleStatus", "save", "deleteSchedule", "remove", "deletedBy", "listSchedules", "schedules", "find", "getExecutionStatus"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "874a7431adc109fa9e09352743afc892ff7462f1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20uh8p89o6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20uh8p89o6();
cov_20uh8p89o6().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_20uh8p89o6().s[1]++;
Object.defineProperty(exports, "ScheduleManager", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[0]++;
    cov_20uh8p89o6().s[2]++;
    return ScheduleManager;
  }
});
const _redis =
/* istanbul ignore next */
(cov_20uh8p89o6().s[3]++, require("@upstash/redis"));
const _logging =
/* istanbul ignore next */
(cov_20uh8p89o6().s[4]++, require("./logging"));
const _db =
/* istanbul ignore next */
(cov_20uh8p89o6().s[5]++, require("../../db"));
const _schedulemodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_20uh8p89o6().s[6]++, _interop_require_default(require("../../db/models/schedule.model")));
const _executionmodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_20uh8p89o6().s[7]++, _interop_require_default(require("../../db/models/execution.model")));
const _cronparser =
/* istanbul ignore next */
(/*#__PURE__*/cov_20uh8p89o6().s[8]++, _interop_require_default(require("cron-parser")));
const _luxon =
/* istanbul ignore next */
(cov_20uh8p89o6().s[9]++, require("luxon"));
const _crypto =
/* istanbul ignore next */
(/*#__PURE__*/cov_20uh8p89o6().s[10]++, _interop_require_default(require("crypto")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_20uh8p89o6().f[1]++;
  cov_20uh8p89o6().s[11]++;
  return /* istanbul ignore next */(cov_20uh8p89o6().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_20uh8p89o6().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_20uh8p89o6().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_20uh8p89o6().b[0][1]++, {
    default: obj
  });
}
class ScheduleManager {
  constructor(fulfillmentService, progressTracker, notificationService) {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[2]++;
    cov_20uh8p89o6().s[12]++;
    this.DEFAULT_TIMEZONE = 'UTC';
    /* istanbul ignore next */
    cov_20uh8p89o6().s[13]++;
    this.RETRY_MULTIPLIER = 2;
    /* istanbul ignore next */
    cov_20uh8p89o6().s[14]++;
    this.MAX_RETRIES = 3;
    /* istanbul ignore next */
    cov_20uh8p89o6().s[15]++;
    if (
    /* istanbul ignore next */
    (cov_20uh8p89o6().b[3][0]++, !process.env.UPSTASH_REDIS_URL) ||
    /* istanbul ignore next */
    (cov_20uh8p89o6().b[3][1]++, !process.env.UPSTASH_REDIS_TOKEN)) {
      /* istanbul ignore next */
      cov_20uh8p89o6().b[2][0]++;
      cov_20uh8p89o6().s[16]++;
      throw new Error('Redis configuration is missing');
    } else
    /* istanbul ignore next */
    {
      cov_20uh8p89o6().b[2][1]++;
    }
    cov_20uh8p89o6().s[17]++;
    this.redis = new _redis.Redis({
      url: process.env.UPSTASH_REDIS_URL,
      token: process.env.UPSTASH_REDIS_TOKEN
    });
    /* istanbul ignore next */
    cov_20uh8p89o6().s[18]++;
    this.fulfillmentService = fulfillmentService;
    /* istanbul ignore next */
    cov_20uh8p89o6().s[19]++;
    this.progressTracker = progressTracker;
    /* istanbul ignore next */
    cov_20uh8p89o6().s[20]++;
    this.notificationService = notificationService;
    /* istanbul ignore next */
    cov_20uh8p89o6().s[21]++;
    _logging.logger.info('ScheduleManager initialized', {
      timestamp: new Date().toISOString()
    });
  }
  async createSchedule(schedule) {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[3]++;
    cov_20uh8p89o6().s[22]++;
    try {
      const currentUser =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[23]++, 'dynamic-user'); // Use dynamic user context
      /* istanbul ignore next */
      cov_20uh8p89o6().s[24]++;
      await (0, _db.connectToDatabase)();
      const newSchedule =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[25]++, await _schedulemodel.default.create({
        ...schedule,
        id: _crypto.default.randomBytes(16).toString('hex'),
        nextRun: this.calculateNextRun(schedule.frequency,
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[4][0]++, schedule.timezone) ||
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[4][1]++, this.DEFAULT_TIMEZONE)),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        createdBy: currentUser,
        updatedBy: currentUser
      }));
      /* istanbul ignore next */
      cov_20uh8p89o6().s[26]++;
      await this.scheduleNextRun(newSchedule);
      /* istanbul ignore next */
      cov_20uh8p89o6().s[27]++;
      _logging.logger.info('Created new sync schedule', {
        scheduleId: newSchedule.id,
        provider: newSchedule.provider,
        nextRun: newSchedule.nextRun,
        createdBy: currentUser
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[28]++;
      return newSchedule;
    } catch (error) {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[29]++;
      _logging.logger.error(new Error('Failed to create schedule'), {
        error,
        schedule,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[30]++;
      throw error;
    }
  }
  calculateNextRun(frequency, timezone) {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[4]++;
    cov_20uh8p89o6().s[31]++;
    try {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[32]++;
      if (frequency.type === 'interval') {
        /* istanbul ignore next */
        cov_20uh8p89o6().b[5][0]++;
        const duration =
        /* istanbul ignore next */
        (cov_20uh8p89o6().s[33]++, _luxon.Duration.fromISO(frequency.value));
        /* istanbul ignore next */
        cov_20uh8p89o6().s[34]++;
        return new Date(Date.now() + duration.toMillis()).toISOString();
      } else {
        /* istanbul ignore next */
        cov_20uh8p89o6().b[5][1]++;
        const interval =
        /* istanbul ignore next */
        (cov_20uh8p89o6().s[35]++, (0, _cronparser.default)(frequency.value, {
          currentDate: new Date(),
          tz: timezone
        }));
        /* istanbul ignore next */
        cov_20uh8p89o6().s[36]++;
        return interval.next().toDate().toISOString();
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[37]++;
      _logging.logger.error(new Error('Error calculating next run'), {
        frequency,
        timezone,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[6][1]++, String(error)),
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[38]++;
      throw error instanceof Error ?
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[7][0]++, error) :
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[7][1]++, new Error(String(error)));
    }
  }
  async scheduleNextRun(schedule) {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[5]++;
    cov_20uh8p89o6().s[39]++;
    if (!schedule.enabled) {
      /* istanbul ignore next */
      cov_20uh8p89o6().b[8][0]++;
      cov_20uh8p89o6().s[40]++;
      _logging.logger.info('Schedule is disabled, skipping next run', {
        scheduleId: schedule.id,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[41]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_20uh8p89o6().b[8][1]++;
    }
    cov_20uh8p89o6().s[42]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[43]++, new Date().getTime());
      const nextRun =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[44]++, new Date(schedule.nextRun).getTime());
      const delay =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[45]++, Math.max(0, nextRun - now));
      /* istanbul ignore next */
      cov_20uh8p89o6().s[46]++;
      await this.redis.set(`schedule:${schedule.id}`, JSON.stringify({
        ...schedule,
        lastChecked: now,
        updatedBy: 'dynamic-user'
      }), {
        ex: Math.ceil(delay / 1000) + 60
      } // Add 1 minute buffer
      );
      /* istanbul ignore next */
      cov_20uh8p89o6().s[47]++;
      _logging.logger.info('Scheduled next run', {
        scheduleId: schedule.id,
        nextRun: schedule.nextRun,
        delay: `${Math.ceil(delay / 1000)}s`,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[48]++;
      _logging.logger.error(new Error('Failed to schedule next run'), {
        scheduleId: schedule.id,
        error,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[49]++;
      throw error instanceof Error ?
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[9][0]++, error) :
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[9][1]++, new Error(String(error)));
    }
  }
  async processScheduledSync(scheduleId) {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[6]++;
    const schedule =
    /* istanbul ignore next */
    (cov_20uh8p89o6().s[50]++, await _schedulemodel.default.findById(scheduleId));
    /* istanbul ignore next */
    cov_20uh8p89o6().s[51]++;
    if (
    /* istanbul ignore next */
    (cov_20uh8p89o6().b[11][0]++, !schedule) ||
    /* istanbul ignore next */
    (cov_20uh8p89o6().b[11][1]++, !schedule.enabled)) {
      /* istanbul ignore next */
      cov_20uh8p89o6().b[10][0]++;
      cov_20uh8p89o6().s[52]++;
      _logging.logger.info('Schedule not found or disabled', {
        scheduleId,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[53]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_20uh8p89o6().b[10][1]++;
    }
    cov_20uh8p89o6().s[54]++;
    try {
      const currentUser =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[55]++, 'dynamic-user'); // Use dynamic user context
      const execution =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[56]++, {
        id: _crypto.default.randomBytes(16).toString('hex'),
        scheduleId: schedule.id,
        syncId: _crypto.default.randomBytes(16).toString('hex'),
        provider: schedule.provider,
        status: 'pending',
        startTime: new Date().toISOString(),
        retryCount: 0
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[57]++;
      await _executionmodel.default.create(execution);
      const inventorySyncService =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[58]++, new (require('./inventory-sync').InventorySyncService)(this.fulfillmentService));
      const syncId =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[59]++, await inventorySyncService.startSync(schedule.provider));
      const syncResult =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[60]++, await inventorySyncService.getSyncStatus(syncId));
      const endTime =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[61]++, new Date().toISOString());
      /* istanbul ignore next */
      cov_20uh8p89o6().s[62]++;
      await _executionmodel.default.findByIdAndUpdate(execution.id, {
        status: syncResult.success ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[12][0]++, 'completed') :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[12][1]++, 'failed'),
        endTime,
        duration: new Date(endTime).getTime() - new Date(execution.startTime).getTime(),
        result: syncResult,
        updatedBy: currentUser
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[63]++;
      if (schedule.notifications) {
        /* istanbul ignore next */
        cov_20uh8p89o6().b[13][0]++;
        cov_20uh8p89o6().s[64]++;
        if (
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[15][0]++, syncResult.success) &&
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[15][1]++, schedule.settings.notifyOnCompletion) ||
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[15][2]++, !syncResult.success) &&
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[15][3]++, schedule.settings.notifyOnFailure)) {
          /* istanbul ignore next */
          cov_20uh8p89o6().b[14][0]++;
          cov_20uh8p89o6().s[65]++;
          await this.sendNotifications(schedule, execution, syncResult);
        } else
        /* istanbul ignore next */
        {
          cov_20uh8p89o6().b[14][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_20uh8p89o6().b[13][1]++;
      }
      const nextRun =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[66]++, this.calculateNextRun(schedule.frequency,
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[16][0]++, schedule.timezone) ||
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[16][1]++, this.DEFAULT_TIMEZONE)));
      /* istanbul ignore next */
      cov_20uh8p89o6().s[67]++;
      await _schedulemodel.default.findByIdAndUpdate(schedule.id, {
        lastRun: endTime,
        nextRun,
        updatedAt: endTime,
        updatedBy: currentUser
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[68]++;
      await this.scheduleNextRun({
        ...schedule,
        nextRun
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[69]++;
      _logging.logger.error(new Error('Scheduled sync failed'), {
        scheduleId: schedule.id,
        provider: schedule.provider,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[17][1]++, String(error)),
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[70]++;
      if (schedule.settings.retryOnFailure) {
        /* istanbul ignore next */
        cov_20uh8p89o6().b[18][0]++;
        cov_20uh8p89o6().s[71]++;
        await this.handleRetry(schedule);
      } else
      /* istanbul ignore next */
      {
        cov_20uh8p89o6().b[18][1]++;
      }
    }
  }
  async handleRetry(schedule) {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[7]++;
    cov_20uh8p89o6().s[72]++;
    try {
      const lastExecution =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[73]++, await _executionmodel.default.findOne({
        scheduleId: schedule.id,
        status: 'failed'
      }).sort({
        startTime: -1
      }));
      /* istanbul ignore next */
      cov_20uh8p89o6().s[74]++;
      if (
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[20][0]++, lastExecution) &&
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[20][1]++, lastExecution.retryCount < (
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[21][0]++, schedule.settings.maxRetries) ||
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[21][1]++, this.MAX_RETRIES)))) {
        /* istanbul ignore next */
        cov_20uh8p89o6().b[19][0]++;
        const nextRetry =
        /* istanbul ignore next */
        (cov_20uh8p89o6().s[75]++, new Date(Date.now() + Math.pow(this.RETRY_MULTIPLIER, lastExecution.retryCount) * 60000).toISOString());
        /* istanbul ignore next */
        cov_20uh8p89o6().s[76]++;
        await _executionmodel.default.findByIdAndUpdate(lastExecution.id, {
          retryCount: lastExecution.retryCount + 1,
          nextRetry,
          updatedBy: 'dynamic-user'
        });
        /* istanbul ignore next */
        cov_20uh8p89o6().s[77]++;
        await this.redis.set(`retry:${lastExecution.id}`, schedule.id, {
          ex: 60 * Math.pow(this.RETRY_MULTIPLIER, lastExecution.retryCount)
        });
        /* istanbul ignore next */
        cov_20uh8p89o6().s[78]++;
        _logging.logger.info('Scheduled retry', {
          executionId: lastExecution.id,
          scheduleId: schedule.id,
          retryCount: lastExecution.retryCount + 1,
          nextRetry,
          timestamp: new Date().toISOString()
        });
      } else
      /* istanbul ignore next */
      {
        cov_20uh8p89o6().b[19][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[79]++;
      _logging.logger.error(new Error('Failed to handle retry'), {
        scheduleId: schedule.id,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[22][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[22][1]++, String(error)),
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[80]++;
      throw error;
    }
  }
  async sendNotifications(schedule, execution, result) {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[8]++;
    const notifications =
    /* istanbul ignore next */
    (cov_20uh8p89o6().s[81]++, schedule.notifications);
    const notificationData =
    /* istanbul ignore next */
    (cov_20uh8p89o6().s[82]++, {
      type: 'sync_execution',
      schedule,
      execution,
      result,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_20uh8p89o6().s[83]++;
    try {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[84]++;
      if (notifications.email) {
        /* istanbul ignore next */
        cov_20uh8p89o6().b[23][0]++;
        cov_20uh8p89o6().s[85]++;
        await this.notificationService.sendEmail(notifications.email, 'Sync Schedule Execution Update', notificationData);
      } else
      /* istanbul ignore next */
      {
        cov_20uh8p89o6().b[23][1]++;
      }
      cov_20uh8p89o6().s[86]++;
      if (notifications.slack) {
        /* istanbul ignore next */
        cov_20uh8p89o6().b[24][0]++;
        cov_20uh8p89o6().s[87]++;
        await this.notificationService.sendSlackMessage(typeof notifications.slack === 'string' ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[25][0]++, {
          webhook: notifications.slack,
          channel: ''
        }) :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[25][1]++, notifications.slack), notificationData);
      } else
      /* istanbul ignore next */
      {
        cov_20uh8p89o6().b[24][1]++;
      }
      cov_20uh8p89o6().s[88]++;
      if (notifications.webhook) {
        /* istanbul ignore next */
        cov_20uh8p89o6().b[26][0]++;
        cov_20uh8p89o6().s[89]++;
        await this.notificationService.sendWebhook(typeof notifications.webhook === 'string' ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[27][0]++, {
          url: notifications.webhook
        }) :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[27][1]++, notifications.webhook), notificationData);
      } else
      /* istanbul ignore next */
      {
        cov_20uh8p89o6().b[26][1]++;
      }
      cov_20uh8p89o6().s[90]++;
      _logging.logger.info('Notifications sent successfully', {
        scheduleId: schedule.id,
        executionId: execution.id,
        channels: Object.keys(notifications),
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[91]++;
      _logging.logger.error(new Error('Failed to send notifications'), {
        scheduleId: schedule.id,
        executionId: execution.id,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[28][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[28][1]++, String(error)),
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[92]++;
      throw error;
    }
  }
  async updateScheduleStatus(scheduleId, status) {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[9]++;
    cov_20uh8p89o6().s[93]++;
    try {
      const schedule =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[94]++, await _schedulemodel.default.findById(scheduleId));
      /* istanbul ignore next */
      cov_20uh8p89o6().s[95]++;
      if (!schedule) {
        /* istanbul ignore next */
        cov_20uh8p89o6().b[29][0]++;
        cov_20uh8p89o6().s[96]++;
        throw new Error(`Schedule with ID ${scheduleId} not found.`);
      } else
      /* istanbul ignore next */
      {
        cov_20uh8p89o6().b[29][1]++;
      }
      cov_20uh8p89o6().s[97]++;
      schedule.enabled = status === 'enabled';
      /* istanbul ignore next */
      cov_20uh8p89o6().s[98]++;
      schedule.updatedAt = new Date().toISOString();
      /* istanbul ignore next */
      cov_20uh8p89o6().s[99]++;
      await schedule.save();
      /* istanbul ignore next */
      cov_20uh8p89o6().s[100]++;
      _logging.logger.info('Schedule status updated', {
        scheduleId,
        status,
        updatedBy: 'dynamic-user',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[101]++;
      _logging.logger.error(new Error('Failed to update schedule status'), {
        scheduleId,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[30][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[30][1]++, String(error)),
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[102]++;
      throw error;
    }
  }
  async deleteSchedule(scheduleId) {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[10]++;
    cov_20uh8p89o6().s[103]++;
    try {
      const schedule =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[104]++, await _schedulemodel.default.findById(scheduleId));
      /* istanbul ignore next */
      cov_20uh8p89o6().s[105]++;
      if (!schedule) {
        /* istanbul ignore next */
        cov_20uh8p89o6().b[31][0]++;
        cov_20uh8p89o6().s[106]++;
        throw new Error(`Schedule with ID ${scheduleId} not found.`);
      } else
      /* istanbul ignore next */
      {
        cov_20uh8p89o6().b[31][1]++;
      }
      cov_20uh8p89o6().s[107]++;
      await schedule.remove();
      /* istanbul ignore next */
      cov_20uh8p89o6().s[108]++;
      _logging.logger.info('Schedule deleted', {
        scheduleId,
        deletedBy: 'dynamic-user',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[109]++;
      _logging.logger.error(new Error('Failed to delete schedule'), {
        scheduleId,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[32][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[32][1]++, String(error)),
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[110]++;
      throw error;
    }
  }
  async listSchedules() {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[11]++;
    cov_20uh8p89o6().s[111]++;
    try {
      const schedules =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[112]++, await _schedulemodel.default.find());
      /* istanbul ignore next */
      cov_20uh8p89o6().s[113]++;
      return schedules;
    } catch (error) {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[114]++;
      _logging.logger.error(new Error('Failed to list schedules'), {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[33][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[33][1]++, String(error)),
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[115]++;
      throw error;
    }
  }
  async getExecutionStatus(executionId) {
    /* istanbul ignore next */
    cov_20uh8p89o6().f[12]++;
    cov_20uh8p89o6().s[116]++;
    try {
      const execution =
      /* istanbul ignore next */
      (cov_20uh8p89o6().s[117]++, await _executionmodel.default.findById(executionId));
      /* istanbul ignore next */
      cov_20uh8p89o6().s[118]++;
      return /* istanbul ignore next */(cov_20uh8p89o6().b[34][0]++, execution) ||
      /* istanbul ignore next */
      (cov_20uh8p89o6().b[34][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_20uh8p89o6().s[119]++;
      _logging.logger.error(new Error('Failed to fetch execution status'), {
        executionId,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[35][0]++, error.message) :
        /* istanbul ignore next */
        (cov_20uh8p89o6().b[35][1]++, String(error)),
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_20uh8p89o6().s[120]++;
      throw error;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,