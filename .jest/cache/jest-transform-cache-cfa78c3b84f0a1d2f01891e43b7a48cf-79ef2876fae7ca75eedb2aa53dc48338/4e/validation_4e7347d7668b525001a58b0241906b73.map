{"version":3,"names":["isValidUTCDateTime","cov_18hsp4c82k","f","s","validation","isValidEmail","email","emailRegex","test","isValidVerificationCode","code","isPasswordStrong","password","passwordRegex","sanitizeEmail","toLowerCase","trim","validateVerificationAttempts","attempts","lastAttempt","EMAIL_CONFIG","VERIFICATION","MAX_ATTEMPTS","b","valid","cooldownEnd","Date","getTime","COOLDOWN","now","timeRemaining","Math","ceil","dateTime","regex","date","replace","toString"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/validation.ts"],"sourcesContent":["export const validation = {\n    isValidEmail: (email: string): boolean => {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return emailRegex.test(email);\n    },\n  \n    isValidVerificationCode: (code: string): boolean => {\n      return /^\\d{6}$/.test(code);\n    },\n  \n    isPasswordStrong: (password: string): boolean => {\n      // At least 8 characters, 1 uppercase, 1 lowercase, 1 number\n      const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/;\n      return passwordRegex.test(password);\n    },\n  \n    sanitizeEmail: (email: string): string => {\n      return email.toLowerCase().trim();\n    },\n  \n    validateVerificationAttempts: (\n      attempts: number,\n      lastAttempt?: Date\n    ): { valid: boolean; timeRemaining?: number } => {\n      if (attempts >= EMAIL_CONFIG.VERIFICATION.MAX_ATTEMPTS) {\n        if (!lastAttempt) return { valid: false };\n        \n        const cooldownEnd = new Date(lastAttempt.getTime() + EMAIL_CONFIG.VERIFICATION.COOLDOWN);\n        const now = new Date();\n        \n        if (now < cooldownEnd) {\n          return {\n            valid: false,\n            timeRemaining: Math.ceil((cooldownEnd.getTime() - now.getTime()) / 1000)\n          };\n        }\n      }\n      return { valid: true };\n    }\n  };\n\n\n  export const isValidUTCDateTime = (dateTime: string): boolean => {\n    const regex = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;\n    if (!regex.test(dateTime)) return false;\n  \n    const date = new Date(dateTime.replace(' ', 'T') + 'Z');\n    return date.toString() !== 'Invalid Date';\n  };"],"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","ignoreList":[]}