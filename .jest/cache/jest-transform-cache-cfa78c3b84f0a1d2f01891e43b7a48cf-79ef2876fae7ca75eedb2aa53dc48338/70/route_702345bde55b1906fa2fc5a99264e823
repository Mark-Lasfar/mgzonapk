4e15e3741025327b272a12635101113c
// /app/api/v1/support/tickets/route.ts
"use strict";

/* istanbul ignore next */
function cov_20ryvfje17() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/support/tickets/route.ts";
  var hash = "101f9e08472f7714396e8d81be6c94612a109286";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/support/tickets/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 19
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "6": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "7": {
        start: {
          line: 21,
          column: 15
        },
        end: {
          line: 21,
          column: 59
        }
      },
      "8": {
        start: {
          line: 22,
          column: 17
        },
        end: {
          line: 22,
          column: 67
        }
      },
      "9": {
        start: {
          line: 23,
          column: 18
        },
        end: {
          line: 23,
          column: 57
        }
      },
      "10": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "11": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 109
        }
      },
      "12": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 30,
          column: 15
        }
      },
      "13": {
        start: {
          line: 27,
          column: 50
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "14": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 50
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 56
        }
      },
      "16": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "17": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "18": {
        start: {
          line: 43,
          column: 21
        },
        end: {
          line: 43,
          column: 41
        }
      },
      "19": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 50,
          column: 10
        }
      },
      "20": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "21": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "22": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 55
        }
      },
      "23": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 10
          }
        },
        loc: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 10
          },
          end: {
            line: 16,
            column: 11
          }
        },
        loc: {
          start: {
            line: 16,
            column: 21
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 21
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 27,
            column: 42
          },
          end: {
            line: 27,
            column: 43
          }
        },
        loc: {
          start: {
            line: 27,
            column: 50
          },
          end: {
            line: 30,
            column: 13
          }
        },
        line: 27
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 19
          }
        },
        loc: {
          start: {
            line: 41,
            column: 29
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 41
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/support/tickets/route.ts"],
      sourcesContent: ["// /app/api/v1/support/tickets/route.ts\n\nimport { NextResponse } from 'next/server';\nimport { adminFirestore } from '@/lib/firebase/admin';\nimport { metricsService } from '@/lib/api/services/metrics';\nimport { MetricType } from '@/types/metrics';\n\nexport async function GET() {\n  try {\n    const snapshot = await adminFirestore\n      .collection('tickets')\n      .orderBy('createdAt', 'desc')\n      .get();\n\n    const tickets = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    return NextResponse.json(tickets);\n  } catch (error) {\n    console.error('Error fetching tickets:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch tickets' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const data = await request.json();\n    \n    const ticket = await adminFirestore.collection('tickets').add({\n      ...data,\n      status: 'open',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      comments: []\n    });\n\n    // Track metric\n    await metricsService.saveMetric({\n      type: MetricType.SUPPORT,\n      value: 1,\n      metadata: {\n        ticketId: ticket.id,\n        category: data.category\n      }\n    });\n\n    return NextResponse.json({ id: ticket.id });\n  } catch (error) {\n    console.error('Error creating ticket:', error);\n    return NextResponse.json(\n      { error: 'Failed to create ticket' },\n      { status: 500 }\n    );\n  }\n}\n"],
      names: ["GET", "POST", "snapshot", "adminFirestore", "collection", "orderBy", "get", "tickets", "docs", "map", "doc", "id", "data", "NextResponse", "json", "error", "console", "status", "request", "ticket", "add", "createdAt", "Date", "updatedAt", "comments", "metricsService", "saveMetric", "type", "MetricType", "SUPPORT", "value", "metadata", "ticketId", "category"],
      mappings: "AAAA,uCAAuC;;;;;;;;;;;;IAOjBA,GAAG;eAAHA;;IAsBAC,IAAI;eAAJA;;;wBA3BO;uBACE;yBACA;0BACJ;AAEpB,eAAeD;IACpB,IAAI;QACF,MAAME,WAAW,MAAMC,qBAAc,CAClCC,UAAU,CAAC,WACXC,OAAO,CAAC,aAAa,QACrBC,GAAG;QAEN,MAAMC,UAAUL,SAASM,IAAI,CAACC,GAAG,CAACC,CAAAA,MAAQ,CAAA;gBACxCC,IAAID,IAAIC,EAAE;gBACV,GAAGD,IAAIE,IAAI,EAAE;YACf,CAAA;QAEA,OAAOC,oBAAY,CAACC,IAAI,CAACP;IAC3B,EAAE,OAAOQ,OAAO;QACdC,QAAQD,KAAK,CAAC,2BAA2BA;QACzC,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA0B,GACnC;YAAEE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAehB,KAAKiB,OAAgB;IACzC,IAAI;QACF,MAAMN,OAAO,MAAMM,QAAQJ,IAAI;QAE/B,MAAMK,SAAS,MAAMhB,qBAAc,CAACC,UAAU,CAAC,WAAWgB,GAAG,CAAC;YAC5D,GAAGR,IAAI;YACPK,QAAQ;YACRI,WAAW,IAAIC;YACfC,WAAW,IAAID;YACfE,UAAU,EAAE;QACd;QAEA,eAAe;QACf,MAAMC,uBAAc,CAACC,UAAU,CAAC;YAC9BC,MAAMC,oBAAU,CAACC,OAAO;YACxBC,OAAO;YACPC,UAAU;gBACRC,UAAUb,OAAOR,EAAE;gBACnBsB,UAAUrB,KAAKqB,QAAQ;YACzB;QACF;QAEA,OAAOpB,oBAAY,CAACC,IAAI,CAAC;YAAEH,IAAIQ,OAAOR,EAAE;QAAC;IAC3C,EAAE,OAAOI,OAAO;QACdC,QAAQD,KAAK,CAAC,0BAA0BA;QACxC,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAA0B,GACnC;YAAEE,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "101f9e08472f7714396e8d81be6c94612a109286"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20ryvfje17 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20ryvfje17();
cov_20ryvfje17().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_20ryvfje17().f[0]++;
  cov_20ryvfje17().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_20ryvfje17().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_20ryvfje17().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_20ryvfje17().f[1]++;
    cov_20ryvfje17().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_20ryvfje17().f[2]++;
    cov_20ryvfje17().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_20ryvfje17().s[6]++, require("next/server"));
const _admin =
/* istanbul ignore next */
(cov_20ryvfje17().s[7]++, require("../../../../../lib/firebase/admin"));
const _metrics =
/* istanbul ignore next */
(cov_20ryvfje17().s[8]++, require("../../../../../lib/api/services/metrics"));
const _metrics1 =
/* istanbul ignore next */
(cov_20ryvfje17().s[9]++, require("../../../../../types/metrics"));
async function GET() {
  /* istanbul ignore next */
  cov_20ryvfje17().f[3]++;
  cov_20ryvfje17().s[10]++;
  try {
    const snapshot =
    /* istanbul ignore next */
    (cov_20ryvfje17().s[11]++, await _admin.adminFirestore.collection('tickets').orderBy('createdAt', 'desc').get());
    const tickets =
    /* istanbul ignore next */
    (cov_20ryvfje17().s[12]++, snapshot.docs.map(doc => {
      /* istanbul ignore next */
      cov_20ryvfje17().f[4]++;
      cov_20ryvfje17().s[13]++;
      return {
        id: doc.id,
        ...doc.data()
      };
    }));
    /* istanbul ignore next */
    cov_20ryvfje17().s[14]++;
    return _server.NextResponse.json(tickets);
  } catch (error) {
    /* istanbul ignore next */
    cov_20ryvfje17().s[15]++;
    console.error('Error fetching tickets:', error);
    /* istanbul ignore next */
    cov_20ryvfje17().s[16]++;
    return _server.NextResponse.json({
      error: 'Failed to fetch tickets'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_20ryvfje17().f[5]++;
  cov_20ryvfje17().s[17]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_20ryvfje17().s[18]++, await request.json());
    const ticket =
    /* istanbul ignore next */
    (cov_20ryvfje17().s[19]++, await _admin.adminFirestore.collection('tickets').add({
      ...data,
      status: 'open',
      createdAt: new Date(),
      updatedAt: new Date(),
      comments: []
    }));
    // Track metric
    /* istanbul ignore next */
    cov_20ryvfje17().s[20]++;
    await _metrics.metricsService.saveMetric({
      type: _metrics1.MetricType.SUPPORT,
      value: 1,
      metadata: {
        ticketId: ticket.id,
        category: data.category
      }
    });
    /* istanbul ignore next */
    cov_20ryvfje17().s[21]++;
    return _server.NextResponse.json({
      id: ticket.id
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_20ryvfje17().s[22]++;
    console.error('Error creating ticket:', error);
    /* istanbul ignore next */
    cov_20ryvfje17().s[23]++;
    return _server.NextResponse.json({
      error: 'Failed to create ticket'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjByeXZmamUxNyIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsImYiLCJQT1NUIiwic25hcHNob3QiLCJfYWRtaW4iLCJhZG1pbkZpcmVzdG9yZSIsImNvbGxlY3Rpb24iLCJvcmRlckJ5IiwiZ2V0IiwidGlja2V0cyIsImRvY3MiLCJtYXAiLCJkb2MiLCJpZCIsImRhdGEiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsImVycm9yIiwiY29uc29sZSIsInN0YXR1cyIsInJlcXVlc3QiLCJ0aWNrZXQiLCJhZGQiLCJjcmVhdGVkQXQiLCJEYXRlIiwidXBkYXRlZEF0IiwiY29tbWVudHMiLCJfbWV0cmljcyIsIm1ldHJpY3NTZXJ2aWNlIiwic2F2ZU1ldHJpYyIsInR5cGUiLCJfbWV0cmljczEiLCJNZXRyaWNUeXBlIiwiU1VQUE9SVCIsInZhbHVlIiwibWV0YWRhdGEiLCJ0aWNrZXRJZCIsImNhdGVnb3J5Il0sInNvdXJjZXMiOlsiL2hvbWUvaGFnZXIvbmV3L215LW5leHRqcy1wcm9qZWN0LW1hc3RlciAoMykvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyL2FwcC9hcGkvdjEvc3VwcG9ydC90aWNrZXRzL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIC9hcHAvYXBpL3YxL3N1cHBvcnQvdGlja2V0cy9yb3V0ZS50c1xuXG5pbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBhZG1pbkZpcmVzdG9yZSB9IGZyb20gJ0AvbGliL2ZpcmViYXNlL2FkbWluJztcbmltcG9ydCB7IG1ldHJpY3NTZXJ2aWNlIH0gZnJvbSAnQC9saWIvYXBpL3NlcnZpY2VzL21ldHJpY3MnO1xuaW1wb3J0IHsgTWV0cmljVHlwZSB9IGZyb20gJ0AvdHlwZXMvbWV0cmljcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoKSB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBhZG1pbkZpcmVzdG9yZVxuICAgICAgLmNvbGxlY3Rpb24oJ3RpY2tldHMnKVxuICAgICAgLm9yZGVyQnkoJ2NyZWF0ZWRBdCcsICdkZXNjJylcbiAgICAgIC5nZXQoKTtcblxuICAgIGNvbnN0IHRpY2tldHMgPSBzbmFwc2hvdC5kb2NzLm1hcChkb2MgPT4gKHtcbiAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAuLi5kb2MuZGF0YSgpXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHRpY2tldHMpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHRpY2tldHM6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggdGlja2V0cycgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogUmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICBcbiAgICBjb25zdCB0aWNrZXQgPSBhd2FpdCBhZG1pbkZpcmVzdG9yZS5jb2xsZWN0aW9uKCd0aWNrZXRzJykuYWRkKHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICBzdGF0dXM6ICdvcGVuJyxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIGNvbW1lbnRzOiBbXVxuICAgIH0pO1xuXG4gICAgLy8gVHJhY2sgbWV0cmljXG4gICAgYXdhaXQgbWV0cmljc1NlcnZpY2Uuc2F2ZU1ldHJpYyh7XG4gICAgICB0eXBlOiBNZXRyaWNUeXBlLlNVUFBPUlQsXG4gICAgICB2YWx1ZTogMSxcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIHRpY2tldElkOiB0aWNrZXQuaWQsXG4gICAgICAgIGNhdGVnb3J5OiBkYXRhLmNhdGVnb3J5XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBpZDogdGlja2V0LmlkIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIHRpY2tldDonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ0ZhaWxlZCB0byBjcmVhdGUgdGlja2V0JyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQTZCMEI7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBdEJKQyxHQUFHLFdBQUFBLENB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