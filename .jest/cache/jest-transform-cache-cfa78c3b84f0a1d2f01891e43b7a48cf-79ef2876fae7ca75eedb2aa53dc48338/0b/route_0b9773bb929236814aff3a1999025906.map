{"version":3,"names":["POST","req","cov_1u3w1a9coq","f","s","_db","connectToDatabase","session","_auth","auth","user","id","b","_server","NextResponse","json","success","error","status","code","verification","_verificationcodemodel","default","findOne","userId","type","used","expiresAt","$gt","Date","_logging","logger","warn","save","_notification","sendNotification","title","message","channels","data","verificationType","info"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/2fa-verify/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport VerificationCode from '@/lib/db/models/verification-code.model';\nimport { auth } from '@/auth';\nimport { sendNotification } from '@/lib/utils/notification';\nimport { logger } from '@/lib/api/services/logging';\n\nexport async function POST(req: NextRequest) {\n  try {\n    await connectToDatabase();\n    const session = await auth();\n    if (!session?.user?.id) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const { code } = await req.json();\n    const verification = await VerificationCode.findOne({\n      userId: session.user.id,\n      code,\n      type: '2fa',\n      used: false,\n      expiresAt: { $gt: new Date() },\n    });\n\n    if (!verification) {\n      logger.warn('Invalid or expired 2FA code', { userId: session.user.id, code });\n      return NextResponse.json({ success: false, error: 'Invalid or expired code' }, { status: 400 });\n    }\n\n    verification.used = true;\n    await verification.save();\n\n    // Send notification for successful 2FA verification\n    await sendNotification({\n      userId: session.user.id,\n      type: 'verification',\n      title: '2FA Verification Successful',\n      message: 'Your two-factor authentication code was successfully verified.',\n      channels: ['email', 'in_app'],\n      data: { verificationType: '2fa' },\n    });\n\n    logger.info('2FA verification successful', { userId: session.user.id });\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    logger.error('2FA verification error:', error);\n    return NextResponse.json({ success: false, error: 'Verification failed' }, { status: 500 });\n  }\n}"],"mappings":"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","ignoreList":[]}