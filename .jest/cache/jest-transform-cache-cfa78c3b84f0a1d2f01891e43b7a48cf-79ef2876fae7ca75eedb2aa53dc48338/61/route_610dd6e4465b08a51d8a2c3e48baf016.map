{"version":3,"names":["GET","cov_ax39xb1n5","f","s","POST","req","data","json","console","log","session","_auth","auth","b","_server","NextResponse","success","message","status","sellerResponse","_selleractions","getSellerByUserId","user","id","seller","subscription","productsCount","metrics","productsLimit","features","productData","sellerId","_id","commission","name","businessName","email","plan","result","_productactions","createProduct","error","Error","searchParams","URL","url","page","parseInt","get","limit","search","category","sortBy","sortOrder","filters","getSellerProducts"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/products/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/auth'\nimport { createProduct, getSellerProducts } from '@/lib/actions/product.actions'\nimport { getSellerByUserId } from '@/lib/actions/seller.actions'\n\nexport async function POST(req: NextRequest) {\n  const data = await req.json();\n  console.log(\"ðŸ“¥ Data received in API:\", data);\n  \n  try {\n    const session = await auth()\n    if (!session) {\n      return NextResponse.json(\n        { success: false, message: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Check if user is a seller\n    const sellerResponse = await getSellerByUserId(session.user.id!)\n    if (!sellerResponse.success || !sellerResponse.data) {\n      return NextResponse.json(\n        { success: false, message: 'Seller account required' },\n        { status: 403 }\n      )\n    }\n\n    const seller = sellerResponse.data\n\n    // Check seller subscription status and plan\n    if (seller.subscription.status !== 'active') {\n      return NextResponse.json(\n        { success: false, message: 'Subscription required' },\n        { status: 403 }\n      )\n    }\n\n    // Check product limits based on subscription plan\n    const productsCount = seller.metrics.productsCount || 0\n    const productsLimit = seller.subscription.features.productsLimit\n    if (productsCount >= productsLimit) {\n      return NextResponse.json(\n        { \n          success: false, \n          message: `Product limit (${productsLimit}) reached for your subscription plan` \n        },\n        { status: 403 }\n      )\n    }\n\n    const data = await req.json()\n\n    // Add seller data to product\n    const productData = {\n      ...data,\n      sellerId: seller._id,\n      commission: seller.subscription.features.commission || 3,\n      seller: {\n        name: seller.businessName,\n        email: seller.email,\n        subscription: seller.subscription.plan\n      }\n    }\n\n    const result = await createProduct(productData)\n    \n    if (!result.success) {\n      return NextResponse.json(\n        { success: false, message: result.message },\n        { status: 400 }\n      )\n    }\n\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Create product error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to create product'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(req: NextRequest) {\n  try {\n    const session = await auth()\n    if (!session) {\n      return NextResponse.json(\n        { success: false, message: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Parse query parameters\n    const { searchParams } = new URL(req.url)\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '10')\n    const search = searchParams.get('search') || ''\n    const status = searchParams.get('status') as 'active' | 'draft' | 'outOfStock' | undefined\n    const category = searchParams.get('category') || ''\n    const sortBy = searchParams.get('sortBy') as 'createdAt' | 'price' | 'stock' | 'sales' | undefined\n    const sortOrder = searchParams.get('sortOrder') as 'asc' | 'desc' | undefined\n\n    // Check if user is a seller\n    const sellerResponse = await getSellerByUserId(session.user.id!)\n    if (!sellerResponse.success || !sellerResponse.data) {\n      return NextResponse.json(\n        { success: false, message: 'Seller account required' },\n        { status: 403 }\n      )\n    }\n\n    const filters = {\n      page,\n      limit,\n      search,\n      status,\n      category,\n      sortBy,\n      sortOrder\n    }\n\n    const result = await getSellerProducts({ sellerId: session.user.id!, ...filters })\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Get products error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to get products'\n      },\n      { status: 500 }\n    )\n  }\n}"],"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","ignoreList":[]}