45813c806dbadc298c1403c9dbebb361
"use strict";

/* istanbul ignore next */
function cov_ax39xb1n5() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/products/route.ts";
  var hash = "59b045d42202a2c84764e1a5344771889464242e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/products/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "8": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 21,
          column: 71
        }
      },
      "9": {
        start: {
          line: 22,
          column: 23
        },
        end: {
          line: 22,
          column: 69
        }
      },
      "10": {
        start: {
          line: 24,
          column: 17
        },
        end: {
          line: 24,
          column: 33
        }
      },
      "11": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 50
        }
      },
      "12": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "13": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 27,
          column: 47
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "15": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 34,
          column: 15
        }
      },
      "16": {
        start: {
          line: 37,
          column: 31
        },
        end: {
          line: 37,
          column: 91
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "18": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 44,
          column: 15
        }
      },
      "19": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 42
        }
      },
      "20": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "21": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "22": {
        start: {
          line: 57,
          column: 30
        },
        end: {
          line: 57,
          column: 63
        }
      },
      "23": {
        start: {
          line: 58,
          column: 30
        },
        end: {
          line: 58,
          column: 72
        }
      },
      "24": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "25": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "26": {
        start: {
          line: 67,
          column: 21
        },
        end: {
          line: 67,
          column: 37
        }
      },
      "27": {
        start: {
          line: 69,
          column: 28
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "28": {
        start: {
          line: 79,
          column: 23
        },
        end: {
          line: 79,
          column: 76
        }
      },
      "29": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "30": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 86,
          column: 15
        }
      },
      "31": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 49
        }
      },
      "32": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 54
        }
      },
      "33": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "34": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "35": {
        start: {
          line: 101,
          column: 24
        },
        end: {
          line: 101,
          column: 47
        }
      },
      "36": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "37": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "38": {
        start: {
          line: 111,
          column: 33
        },
        end: {
          line: 111,
          column: 49
        }
      },
      "39": {
        start: {
          line: 112,
          column: 21
        },
        end: {
          line: 112,
          column: 62
        }
      },
      "40": {
        start: {
          line: 113,
          column: 22
        },
        end: {
          line: 113,
          column: 65
        }
      },
      "41": {
        start: {
          line: 114,
          column: 23
        },
        end: {
          line: 114,
          column: 55
        }
      },
      "42": {
        start: {
          line: 115,
          column: 23
        },
        end: {
          line: 115,
          column: 49
        }
      },
      "43": {
        start: {
          line: 116,
          column: 25
        },
        end: {
          line: 116,
          column: 59
        }
      },
      "44": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 117,
          column: 49
        }
      },
      "45": {
        start: {
          line: 118,
          column: 26
        },
        end: {
          line: 118,
          column: 55
        }
      },
      "46": {
        start: {
          line: 120,
          column: 31
        },
        end: {
          line: 120,
          column: 91
        }
      },
      "47": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "48": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "49": {
        start: {
          line: 129,
          column: 24
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "50": {
        start: {
          line: 138,
          column: 23
        },
        end: {
          line: 141,
          column: 10
        }
      },
      "51": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 49
        }
      },
      "52": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 52
        }
      },
      "53": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 19
          }
        },
        loc: {
          start: {
            line: 23,
            column: 25
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 99,
            column: 15
          },
          end: {
            line: 99,
            column: 18
          }
        },
        loc: {
          start: {
            line: 99,
            column: 24
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 99
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 35
          }
        }, {
          start: {
            line: 38,
            column: 39
          },
          end: {
            line: 38,
            column: 59
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 30
          },
          end: {
            line: 57,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 30
          },
          end: {
            line: 57,
            column: 58
          }
        }, {
          start: {
            line: 57,
            column: 62
          },
          end: {
            line: 57,
            column: 63
          }
        }],
        line: 57
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 24
          },
          end: {
            line: 72,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 24
          },
          end: {
            line: 72,
            column: 63
          }
        }, {
          start: {
            line: 72,
            column: 67
          },
          end: {
            line: 72,
            column: 68
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 21
          },
          end: {
            line: 93,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 93,
            column: 46
          },
          end: {
            line: 93,
            column: 59
          }
        }, {
          start: {
            line: 93,
            column: 62
          },
          end: {
            line: 93,
            column: 88
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "10": {
        loc: {
          start: {
            line: 112,
            column: 30
          },
          end: {
            line: 112,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 30
          },
          end: {
            line: 112,
            column: 54
          }
        }, {
          start: {
            line: 112,
            column: 58
          },
          end: {
            line: 112,
            column: 61
          }
        }],
        line: 112
      },
      "11": {
        loc: {
          start: {
            line: 113,
            column: 31
          },
          end: {
            line: 113,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 31
          },
          end: {
            line: 113,
            column: 56
          }
        }, {
          start: {
            line: 113,
            column: 60
          },
          end: {
            line: 113,
            column: 64
          }
        }],
        line: 113
      },
      "12": {
        loc: {
          start: {
            line: 114,
            column: 23
          },
          end: {
            line: 114,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 23
          },
          end: {
            line: 114,
            column: 49
          }
        }, {
          start: {
            line: 114,
            column: 53
          },
          end: {
            line: 114,
            column: 55
          }
        }],
        line: 114
      },
      "13": {
        loc: {
          start: {
            line: 116,
            column: 25
          },
          end: {
            line: 116,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 25
          },
          end: {
            line: 116,
            column: 53
          }
        }, {
          start: {
            line: 116,
            column: 57
          },
          end: {
            line: 116,
            column: 59
          }
        }],
        line: 116
      },
      "14": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "15": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 121,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 121,
            column: 35
          }
        }, {
          start: {
            line: 121,
            column: 39
          },
          end: {
            line: 121,
            column: 59
          }
        }],
        line: 121
      },
      "16": {
        loc: {
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 147,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 46
          },
          end: {
            line: 147,
            column: 59
          }
        }, {
          start: {
            line: 147,
            column: 62
          },
          end: {
            line: 147,
            column: 86
          }
        }],
        line: 147
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/products/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@/auth'\nimport { createProduct, getSellerProducts } from '@/lib/actions/product.actions'\nimport { getSellerByUserId } from '@/lib/actions/seller.actions'\n\nexport async function POST(req: NextRequest) {\n  const data = await req.json();\n  console.log(\"\uD83D\uDCE5 Data received in API:\", data);\n  \n  try {\n    const session = await auth()\n    if (!session) {\n      return NextResponse.json(\n        { success: false, message: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Check if user is a seller\n    const sellerResponse = await getSellerByUserId(session.user.id!)\n    if (!sellerResponse.success || !sellerResponse.data) {\n      return NextResponse.json(\n        { success: false, message: 'Seller account required' },\n        { status: 403 }\n      )\n    }\n\n    const seller = sellerResponse.data\n\n    // Check seller subscription status and plan\n    if (seller.subscription.status !== 'active') {\n      return NextResponse.json(\n        { success: false, message: 'Subscription required' },\n        { status: 403 }\n      )\n    }\n\n    // Check product limits based on subscription plan\n    const productsCount = seller.metrics.productsCount || 0\n    const productsLimit = seller.subscription.features.productsLimit\n    if (productsCount >= productsLimit) {\n      return NextResponse.json(\n        { \n          success: false, \n          message: `Product limit (${productsLimit}) reached for your subscription plan` \n        },\n        { status: 403 }\n      )\n    }\n\n    const data = await req.json()\n\n    // Add seller data to product\n    const productData = {\n      ...data,\n      sellerId: seller._id,\n      commission: seller.subscription.features.commission || 3,\n      seller: {\n        name: seller.businessName,\n        email: seller.email,\n        subscription: seller.subscription.plan\n      }\n    }\n\n    const result = await createProduct(productData)\n    \n    if (!result.success) {\n      return NextResponse.json(\n        { success: false, message: result.message },\n        { status: 400 }\n      )\n    }\n\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Create product error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to create product'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(req: NextRequest) {\n  try {\n    const session = await auth()\n    if (!session) {\n      return NextResponse.json(\n        { success: false, message: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Parse query parameters\n    const { searchParams } = new URL(req.url)\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '10')\n    const search = searchParams.get('search') || ''\n    const status = searchParams.get('status') as 'active' | 'draft' | 'outOfStock' | undefined\n    const category = searchParams.get('category') || ''\n    const sortBy = searchParams.get('sortBy') as 'createdAt' | 'price' | 'stock' | 'sales' | undefined\n    const sortOrder = searchParams.get('sortOrder') as 'asc' | 'desc' | undefined\n\n    // Check if user is a seller\n    const sellerResponse = await getSellerByUserId(session.user.id!)\n    if (!sellerResponse.success || !sellerResponse.data) {\n      return NextResponse.json(\n        { success: false, message: 'Seller account required' },\n        { status: 403 }\n      )\n    }\n\n    const filters = {\n      page,\n      limit,\n      search,\n      status,\n      category,\n      sortBy,\n      sortOrder\n    }\n\n    const result = await getSellerProducts({ sellerId: session.user.id!, ...filters })\n    return NextResponse.json(result)\n\n  } catch (error) {\n    console.error('Get products error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to get products'\n      },\n      { status: 500 }\n    )\n  }\n}"],
      names: ["GET", "POST", "req", "data", "json", "console", "log", "session", "auth", "NextResponse", "success", "message", "status", "sellerResponse", "getSellerByUserId", "user", "id", "seller", "subscription", "productsCount", "metrics", "productsLimit", "features", "productData", "sellerId", "_id", "commission", "name", "businessName", "email", "plan", "result", "createProduct", "error", "Error", "searchParams", "URL", "url", "page", "parseInt", "get", "limit", "search", "category", "sortBy", "sortOrder", "filters", "getSellerProducts"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "59b045d42202a2c84764e1a5344771889464242e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ax39xb1n5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ax39xb1n5();
cov_ax39xb1n5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_ax39xb1n5().f[0]++;
  cov_ax39xb1n5().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_ax39xb1n5().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_ax39xb1n5().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_ax39xb1n5().f[1]++;
    cov_ax39xb1n5().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_ax39xb1n5().f[2]++;
    cov_ax39xb1n5().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_ax39xb1n5().s[6]++, require("next/server"));
const _auth =
/* istanbul ignore next */
(cov_ax39xb1n5().s[7]++, require("../../../auth"));
const _productactions =
/* istanbul ignore next */
(cov_ax39xb1n5().s[8]++, require("../../../lib/actions/product.actions"));
const _selleractions =
/* istanbul ignore next */
(cov_ax39xb1n5().s[9]++, require("../../../lib/actions/seller.actions"));
async function POST(req) {
  /* istanbul ignore next */
  cov_ax39xb1n5().f[3]++;
  const data =
  /* istanbul ignore next */
  (cov_ax39xb1n5().s[10]++, await req.json());
  /* istanbul ignore next */
  cov_ax39xb1n5().s[11]++;
  console.log("📥 Data received in API:", data);
  /* istanbul ignore next */
  cov_ax39xb1n5().s[12]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[13]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_ax39xb1n5().s[14]++;
    if (!session) {
      /* istanbul ignore next */
      cov_ax39xb1n5().b[0][0]++;
      cov_ax39xb1n5().s[15]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_ax39xb1n5().b[0][1]++;
    }
    // Check if user is a seller
    const sellerResponse =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[16]++, await (0, _selleractions.getSellerByUserId)(session.user.id));
    /* istanbul ignore next */
    cov_ax39xb1n5().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[2][0]++, !sellerResponse.success) ||
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[2][1]++, !sellerResponse.data)) {
      /* istanbul ignore next */
      cov_ax39xb1n5().b[1][0]++;
      cov_ax39xb1n5().s[18]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Seller account required'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_ax39xb1n5().b[1][1]++;
    }
    const seller =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[19]++, sellerResponse.data);
    // Check seller subscription status and plan
    /* istanbul ignore next */
    cov_ax39xb1n5().s[20]++;
    if (seller.subscription.status !== 'active') {
      /* istanbul ignore next */
      cov_ax39xb1n5().b[3][0]++;
      cov_ax39xb1n5().s[21]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Subscription required'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_ax39xb1n5().b[3][1]++;
    }
    // Check product limits based on subscription plan
    const productsCount =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[22]++,
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[4][0]++, seller.metrics.productsCount) ||
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[4][1]++, 0));
    const productsLimit =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[23]++, seller.subscription.features.productsLimit);
    /* istanbul ignore next */
    cov_ax39xb1n5().s[24]++;
    if (productsCount >= productsLimit) {
      /* istanbul ignore next */
      cov_ax39xb1n5().b[5][0]++;
      cov_ax39xb1n5().s[25]++;
      return _server.NextResponse.json({
        success: false,
        message: `Product limit (${productsLimit}) reached for your subscription plan`
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_ax39xb1n5().b[5][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[26]++, await req.json());
    // Add seller data to product
    const productData =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[27]++, {
      ...data,
      sellerId: seller._id,
      commission:
      /* istanbul ignore next */
      (cov_ax39xb1n5().b[6][0]++, seller.subscription.features.commission) ||
      /* istanbul ignore next */
      (cov_ax39xb1n5().b[6][1]++, 3),
      seller: {
        name: seller.businessName,
        email: seller.email,
        subscription: seller.subscription.plan
      }
    });
    const result =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[28]++, await (0, _productactions.createProduct)(productData));
    /* istanbul ignore next */
    cov_ax39xb1n5().s[29]++;
    if (!result.success) {
      /* istanbul ignore next */
      cov_ax39xb1n5().b[7][0]++;
      cov_ax39xb1n5().s[30]++;
      return _server.NextResponse.json({
        success: false,
        message: result.message
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_ax39xb1n5().b[7][1]++;
    }
    cov_ax39xb1n5().s[31]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_ax39xb1n5().s[32]++;
    console.error('Create product error:', error);
    /* istanbul ignore next */
    cov_ax39xb1n5().s[33]++;
    return _server.NextResponse.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_ax39xb1n5().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_ax39xb1n5().b[8][1]++, 'Failed to create product')
    }, {
      status: 500
    });
  }
}
async function GET(req) {
  /* istanbul ignore next */
  cov_ax39xb1n5().f[4]++;
  cov_ax39xb1n5().s[34]++;
  try {
    const session =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[35]++, await (0, _auth.auth)());
    /* istanbul ignore next */
    cov_ax39xb1n5().s[36]++;
    if (!session) {
      /* istanbul ignore next */
      cov_ax39xb1n5().b[9][0]++;
      cov_ax39xb1n5().s[37]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_ax39xb1n5().b[9][1]++;
    }
    // Parse query parameters
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[38]++, new URL(req.url));
    const page =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[39]++, parseInt(
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[10][0]++, searchParams.get('page')) ||
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[10][1]++, '1')));
    const limit =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[40]++, parseInt(
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[11][0]++, searchParams.get('limit')) ||
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[11][1]++, '10')));
    const search =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[41]++,
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[12][0]++, searchParams.get('search')) ||
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[12][1]++, ''));
    const status =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[42]++, searchParams.get('status'));
    const category =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[43]++,
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[13][0]++, searchParams.get('category')) ||
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[13][1]++, ''));
    const sortBy =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[44]++, searchParams.get('sortBy'));
    const sortOrder =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[45]++, searchParams.get('sortOrder'));
    // Check if user is a seller
    const sellerResponse =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[46]++, await (0, _selleractions.getSellerByUserId)(session.user.id));
    /* istanbul ignore next */
    cov_ax39xb1n5().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[15][0]++, !sellerResponse.success) ||
    /* istanbul ignore next */
    (cov_ax39xb1n5().b[15][1]++, !sellerResponse.data)) {
      /* istanbul ignore next */
      cov_ax39xb1n5().b[14][0]++;
      cov_ax39xb1n5().s[48]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Seller account required'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_ax39xb1n5().b[14][1]++;
    }
    const filters =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[49]++, {
      page,
      limit,
      search,
      status,
      category,
      sortBy,
      sortOrder
    });
    const result =
    /* istanbul ignore next */
    (cov_ax39xb1n5().s[50]++, await (0, _productactions.getSellerProducts)({
      sellerId: session.user.id,
      ...filters
    }));
    /* istanbul ignore next */
    cov_ax39xb1n5().s[51]++;
    return _server.NextResponse.json(result);
  } catch (error) {
    /* istanbul ignore next */
    cov_ax39xb1n5().s[52]++;
    console.error('Get products error:', error);
    /* istanbul ignore next */
    cov_ax39xb1n5().s[53]++;
    return _server.NextResponse.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_ax39xb1n5().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_ax39xb1n5().b[16][1]++, 'Failed to get products')
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,