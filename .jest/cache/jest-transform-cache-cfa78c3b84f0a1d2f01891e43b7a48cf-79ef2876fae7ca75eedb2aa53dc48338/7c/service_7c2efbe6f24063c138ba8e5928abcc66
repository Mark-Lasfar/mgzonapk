4e4d66984a9aecda131c0a15297fca41
"use strict";

/* istanbul ignore next */
function cov_28z1ihvp55() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/integrations/shipbob/service.ts";
  var hash = "90851e5f84f71ce5fd4e667bff0f3d9a27c86169";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/integrations/shipbob/service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 36
        }
      },
      "5": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "6": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "7": {
        start: {
          line: 26,
          column: 26
        },
        end: {
          line: 26,
          column: 47
        }
      },
      "8": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 90
        }
      },
      "9": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 31
        }
      },
      "10": {
        start: {
          line: 32,
          column: 23
        },
        end: {
          line: 32,
          column: 79
        }
      },
      "11": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 51
        }
      },
      "12": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "13": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 50
        }
      },
      "14": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 62
        }
      },
      "15": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 42
        }
      },
      "16": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "17": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 39
        }
      },
      "18": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "19": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "20": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 41
        }
      },
      "21": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 54
        }
      },
      "22": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 42
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 41
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 31
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 29
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 28
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 40
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 44
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 26
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 37
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 50
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 28
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 56
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 48
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 59
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 31
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 65
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 24
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 70
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 32
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 73
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 33
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 76
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 16,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 38
          },
          end: {
            line: 16,
            column: 40
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 50
          },
          end: {
            line: 27,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 50
          },
          end: {
            line: 27,
            column: 63
          }
        }, {
          start: {
            line: 27,
            column: 67
          },
          end: {
            line: 27,
            column: 86
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 36
          },
          end: {
            line: 32,
            column: 74
          }
        }, {
          start: {
            line: 32,
            column: 77
          },
          end: {
            line: 32,
            column: 79
          }
        }],
        line: 32
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/integrations/shipbob/service.ts"],
      sourcesContent: ["import { ShipBobProduct, ShipBobOrder, ShipBobInventory } from './types';\n\nexport class ShipBobService {\n  private apiKey: string;\n  private apiUrl: string;\n\n  constructor(config: { apiKey: string; apiUrl: string }) {\n    this.apiKey = config.apiKey;\n    this.apiUrl = config.apiUrl;\n  }\n\n  private async request(endpoint: string, options: RequestInit = {}) {\n    const response = await fetch(`${this.apiUrl}${endpoint}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`ShipBob API error: ${error.message || response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  async getInventoryLevels(productIds?: string[]) {\n    const params = productIds ? `?product_ids=${productIds.join(',')}` : '';\n    return this.request(`/inventory${params}`);\n  }\n\n  async createOrder(order: ShipBobOrder) {\n    return this.request('/orders', {\n      method: 'POST',\n      body: JSON.stringify(order),\n    });\n  }\n\n  async getOrder(orderId: string) {\n    return this.request(`/orders/${orderId}`);\n  }\n\n  async getFulfillmentStatus(orderId: string) {\n    return this.request(`/orders/${orderId}/fulfillment`);\n  }\n\n  async getWarehouses() {\n    return this.request('/locations');\n  }\n\n  async getOptimalWarehouse(order: {\n    shipping_address: {\n      country: string;\n      state: string;\n      city: string;\n      zip: string;\n    };\n    items: Array<{ product_id: string; quantity: number }>;\n  }) {\n    return this.request('/locations/optimal', {\n      method: 'POST',\n      body: JSON.stringify(order),\n    });\n  }\n\n  async checkConnection() {\n    return this.request('/health');\n  }\n\n  async updateInventory(productId: string, inventory: ShipBobInventory) {\n    return this.request(`/inventory/${productId}`, {\n      method: 'PUT',\n      body: JSON.stringify(inventory),\n    });\n  }\n\n  async cancelOrder(orderId: string) {\n    return this.request(`/orders/${orderId}/cancel`, {\n      method: 'POST',\n    });\n  }\n\n  async getProducts() {\n    return this.request('/products');\n  }\n\n  async getProduct(productId: string) {\n    return this.request(`/products/${productId}`);\n  }\n\n  async createProduct(product: ShipBobProduct) {\n    return this.request('/products', {\n      method: 'POST',\n      body: JSON.stringify(product),\n    });\n  }\n}\n"],
      names: ["ShipBobService", "constructor", "config", "apiKey", "apiUrl", "request", "endpoint", "options", "response", "fetch", "headers", "ok", "error", "json", "Error", "message", "statusText", "getInventoryLevels", "productIds", "params", "join", "createOrder", "order", "method", "body", "JSON", "stringify", "getOrder", "orderId", "getFulfillmentStatus", "getWarehouses", "getOptimalWarehouse", "checkConnection", "updateInventory", "productId", "inventory", "cancelOrder", "getProducts", "getProduct", "createProduct", "product"],
      mappings: ";;;;+BAEaA;;;eAAAA;;;AAAN,MAAMA;IAIXC,YAAYC,MAA0C,CAAE;QACtD,IAAI,CAACC,MAAM,GAAGD,OAAOC,MAAM;QAC3B,IAAI,CAACC,MAAM,GAAGF,OAAOE,MAAM;IAC7B;IAEA,MAAcC,QAAQC,QAAgB,EAAEC,UAAuB,CAAC,CAAC,EAAE;QACjE,MAAMC,WAAW,MAAMC,MAAM,GAAG,IAAI,CAACL,MAAM,GAAGE,UAAU,EAAE;YACxD,GAAGC,OAAO;YACVG,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAACP,MAAM,EAAE;gBACxC,GAAGI,QAAQG,OAAO;YACpB;QACF;QAEA,IAAI,CAACF,SAASG,EAAE,EAAE;YAChB,MAAMC,QAAQ,MAAMJ,SAASK,IAAI;YACjC,MAAM,IAAIC,MAAM,CAAC,mBAAmB,EAAEF,MAAMG,OAAO,IAAIP,SAASQ,UAAU,EAAE;QAC9E;QAEA,OAAOR,SAASK,IAAI;IACtB;IAEA,MAAMI,mBAAmBC,UAAqB,EAAE;QAC9C,MAAMC,SAASD,aAAa,CAAC,aAAa,EAAEA,WAAWE,IAAI,CAAC,MAAM,GAAG;QACrE,OAAO,IAAI,CAACf,OAAO,CAAC,CAAC,UAAU,EAAEc,QAAQ;IAC3C;IAEA,MAAME,YAAYC,KAAmB,EAAE;QACrC,OAAO,IAAI,CAACjB,OAAO,CAAC,WAAW;YAC7BkB,QAAQ;YACRC,MAAMC,KAAKC,SAAS,CAACJ;QACvB;IACF;IAEA,MAAMK,SAASC,OAAe,EAAE;QAC9B,OAAO,IAAI,CAACvB,OAAO,CAAC,CAAC,QAAQ,EAAEuB,SAAS;IAC1C;IAEA,MAAMC,qBAAqBD,OAAe,EAAE;QAC1C,OAAO,IAAI,CAACvB,OAAO,CAAC,CAAC,QAAQ,EAAEuB,QAAQ,YAAY,CAAC;IACtD;IAEA,MAAME,gBAAgB;QACpB,OAAO,IAAI,CAACzB,OAAO,CAAC;IACtB;IAEA,MAAM0B,oBAAoBT,KAQzB,EAAE;QACD,OAAO,IAAI,CAACjB,OAAO,CAAC,sBAAsB;YACxCkB,QAAQ;YACRC,MAAMC,KAAKC,SAAS,CAACJ;QACvB;IACF;IAEA,MAAMU,kBAAkB;QACtB,OAAO,IAAI,CAAC3B,OAAO,CAAC;IACtB;IAEA,MAAM4B,gBAAgBC,SAAiB,EAAEC,SAA2B,EAAE;QACpE,OAAO,IAAI,CAAC9B,OAAO,CAAC,CAAC,WAAW,EAAE6B,WAAW,EAAE;YAC7CX,QAAQ;YACRC,MAAMC,KAAKC,SAAS,CAACS;QACvB;IACF;IAEA,MAAMC,YAAYR,OAAe,EAAE;QACjC,OAAO,IAAI,CAACvB,OAAO,CAAC,CAAC,QAAQ,EAAEuB,QAAQ,OAAO,CAAC,EAAE;YAC/CL,QAAQ;QACV;IACF;IAEA,MAAMc,cAAc;QAClB,OAAO,IAAI,CAAChC,OAAO,CAAC;IACtB;IAEA,MAAMiC,WAAWJ,SAAiB,EAAE;QAClC,OAAO,IAAI,CAAC7B,OAAO,CAAC,CAAC,UAAU,EAAE6B,WAAW;IAC9C;IAEA,MAAMK,cAAcC,OAAuB,EAAE;QAC3C,OAAO,IAAI,CAACnC,OAAO,CAAC,aAAa;YAC/BkB,QAAQ;YACRC,MAAMC,KAAKC,SAAS,CAACc;QACvB;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "90851e5f84f71ce5fd4e667bff0f3d9a27c86169"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28z1ihvp55 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28z1ihvp55();
cov_28z1ihvp55().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_28z1ihvp55().s[1]++;
Object.defineProperty(exports, "ShipBobService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[0]++;
    cov_28z1ihvp55().s[2]++;
    return ShipBobService;
  }
});
class ShipBobService {
  constructor(config) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[1]++;
    cov_28z1ihvp55().s[3]++;
    this.apiKey = config.apiKey;
    /* istanbul ignore next */
    cov_28z1ihvp55().s[4]++;
    this.apiUrl = config.apiUrl;
  }
  async request(endpoint, options =
  /* istanbul ignore next */
  (cov_28z1ihvp55().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[2]++;
    const response =
    /* istanbul ignore next */
    (cov_28z1ihvp55().s[5]++, await fetch(`${this.apiUrl}${endpoint}`, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.apiKey}`,
        ...options.headers
      }
    }));
    /* istanbul ignore next */
    cov_28z1ihvp55().s[6]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_28z1ihvp55().b[1][0]++;
      const error =
      /* istanbul ignore next */
      (cov_28z1ihvp55().s[7]++, await response.json());
      /* istanbul ignore next */
      cov_28z1ihvp55().s[8]++;
      throw new Error(`ShipBob API error: ${
      /* istanbul ignore next */
      (cov_28z1ihvp55().b[2][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_28z1ihvp55().b[2][1]++, response.statusText)}`);
    } else
    /* istanbul ignore next */
    {
      cov_28z1ihvp55().b[1][1]++;
    }
    cov_28z1ihvp55().s[9]++;
    return response.json();
  }
  async getInventoryLevels(productIds) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[3]++;
    const params =
    /* istanbul ignore next */
    (cov_28z1ihvp55().s[10]++, productIds ?
    /* istanbul ignore next */
    (cov_28z1ihvp55().b[3][0]++, `?product_ids=${productIds.join(',')}`) :
    /* istanbul ignore next */
    (cov_28z1ihvp55().b[3][1]++, ''));
    /* istanbul ignore next */
    cov_28z1ihvp55().s[11]++;
    return this.request(`/inventory${params}`);
  }
  async createOrder(order) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[4]++;
    cov_28z1ihvp55().s[12]++;
    return this.request('/orders', {
      method: 'POST',
      body: JSON.stringify(order)
    });
  }
  async getOrder(orderId) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[5]++;
    cov_28z1ihvp55().s[13]++;
    return this.request(`/orders/${orderId}`);
  }
  async getFulfillmentStatus(orderId) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[6]++;
    cov_28z1ihvp55().s[14]++;
    return this.request(`/orders/${orderId}/fulfillment`);
  }
  async getWarehouses() {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[7]++;
    cov_28z1ihvp55().s[15]++;
    return this.request('/locations');
  }
  async getOptimalWarehouse(order) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[8]++;
    cov_28z1ihvp55().s[16]++;
    return this.request('/locations/optimal', {
      method: 'POST',
      body: JSON.stringify(order)
    });
  }
  async checkConnection() {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[9]++;
    cov_28z1ihvp55().s[17]++;
    return this.request('/health');
  }
  async updateInventory(productId, inventory) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[10]++;
    cov_28z1ihvp55().s[18]++;
    return this.request(`/inventory/${productId}`, {
      method: 'PUT',
      body: JSON.stringify(inventory)
    });
  }
  async cancelOrder(orderId) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[11]++;
    cov_28z1ihvp55().s[19]++;
    return this.request(`/orders/${orderId}/cancel`, {
      method: 'POST'
    });
  }
  async getProducts() {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[12]++;
    cov_28z1ihvp55().s[20]++;
    return this.request('/products');
  }
  async getProduct(productId) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[13]++;
    cov_28z1ihvp55().s[21]++;
    return this.request(`/products/${productId}`);
  }
  async createProduct(product) {
    /* istanbul ignore next */
    cov_28z1ihvp55().f[14]++;
    cov_28z1ihvp55().s[22]++;
    return this.request('/products', {
      method: 'POST',
      body: JSON.stringify(product)
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,