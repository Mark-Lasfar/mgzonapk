{"version":3,"names":["cov_28z1ihvp55","actualCoverage","s","ShipBobService","constructor","config","f","apiKey","apiUrl","request","endpoint","options","b","response","fetch","headers","ok","error","json","Error","message","statusText","getInventoryLevels","productIds","params","join","createOrder","order","method","body","JSON","stringify","getOrder","orderId","getFulfillmentStatus","getWarehouses","getOptimalWarehouse","checkConnection","updateInventory","productId","inventory","cancelOrder","getProducts","getProduct","createProduct","product"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/integrations/shipbob/service.ts"],"sourcesContent":["import { ShipBobProduct, ShipBobOrder, ShipBobInventory } from './types';\n\nexport class ShipBobService {\n  private apiKey: string;\n  private apiUrl: string;\n\n  constructor(config: { apiKey: string; apiUrl: string }) {\n    this.apiKey = config.apiKey;\n    this.apiUrl = config.apiUrl;\n  }\n\n  private async request(endpoint: string, options: RequestInit = {}) {\n    const response = await fetch(`${this.apiUrl}${endpoint}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`ShipBob API error: ${error.message || response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  async getInventoryLevels(productIds?: string[]) {\n    const params = productIds ? `?product_ids=${productIds.join(',')}` : '';\n    return this.request(`/inventory${params}`);\n  }\n\n  async createOrder(order: ShipBobOrder) {\n    return this.request('/orders', {\n      method: 'POST',\n      body: JSON.stringify(order),\n    });\n  }\n\n  async getOrder(orderId: string) {\n    return this.request(`/orders/${orderId}`);\n  }\n\n  async getFulfillmentStatus(orderId: string) {\n    return this.request(`/orders/${orderId}/fulfillment`);\n  }\n\n  async getWarehouses() {\n    return this.request('/locations');\n  }\n\n  async getOptimalWarehouse(order: {\n    shipping_address: {\n      country: string;\n      state: string;\n      city: string;\n      zip: string;\n    };\n    items: Array<{ product_id: string; quantity: number }>;\n  }) {\n    return this.request('/locations/optimal', {\n      method: 'POST',\n      body: JSON.stringify(order),\n    });\n  }\n\n  async checkConnection() {\n    return this.request('/health');\n  }\n\n  async updateInventory(productId: string, inventory: ShipBobInventory) {\n    return this.request(`/inventory/${productId}`, {\n      method: 'PUT',\n      body: JSON.stringify(inventory),\n    });\n  }\n\n  async cancelOrder(orderId: string) {\n    return this.request(`/orders/${orderId}/cancel`, {\n      method: 'POST',\n    });\n  }\n\n  async getProducts() {\n    return this.request('/products');\n  }\n\n  async getProduct(productId: string) {\n    return this.request(`/products/${productId}`);\n  }\n\n  async createProduct(product: ShipBobProduct) {\n    return this.request('/products', {\n      method: 'POST',\n      body: JSON.stringify(product),\n    });\n  }\n}\n"],"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","ignoreList":[]}