1e20a711132f2c980c9f736447a21684
// lib/db/models/api-key.model.ts
"use strict";

/* istanbul ignore next */
function cov_tl2xdl76n() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/api-key.model.ts";
  var hash = "ef2d34586ea012ae227a2c630bd16b1aeecb5932";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/api-key.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 24
        }
      },
      "3": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 37
        }
      },
      "4": {
        start: {
          line: 13,
          column: 30
        },
        end: {
          line: 13,
          column: 73
        }
      },
      "5": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "6": {
        start: {
          line: 19,
          column: 21
        },
        end: {
          line: 84,
          column: 1
        }
      },
      "7": {
        start: {
          line: 86,
          column: 0
        },
        end: {
          line: 94,
          column: 3
        }
      },
      "8": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "9": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 76
        }
      },
      "10": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 70
        }
      },
      "11": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "12": {
        start: {
          line: 96,
          column: 15
        },
        end: {
          line: 96,
          column: 86
        }
      },
      "13": {
        start: {
          line: 97,
          column: 17
        },
        end: {
          line: 97,
          column: 23
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 86,
            column: 25
          },
          end: {
            line: 86,
            column: 26
          }
        },
        loc: {
          start: {
            line: 86,
            column: 40
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 86
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 15,
            column: 38
          }
        }, {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 14
          }
        }, {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 32
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "3": {
        loc: {
          start: {
            line: 96,
            column: 15
          },
          end: {
            line: 96,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 15
          },
          end: {
            line: 96,
            column: 38
          }
        }, {
          start: {
            line: 96,
            column: 42
          },
          end: {
            line: 96,
            column: 86
          }
        }],
        line: 96
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/api-key.model.ts"],
      sourcesContent: ["// lib/db/models/api-key.model.ts\n\nimport { Schema, model, models, Document, Model } from 'mongoose';\nimport { ApiKey as ApiKeyType, ApiPermission } from '@/lib/api/types';\nimport crypto from 'crypto';\n\n// Mongoose's Document interface, extending ApiKeyType to include '_id'\nexport interface IApiKey extends Document, Omit<ApiKeyType, 'id'> {\n  _id: string;  // MongoDB _id field (Mongoose adds this automatically)\n}\n\nconst apiKeySchema = new Schema<IApiKey>(\n  {\n    // The userId is the reference to the user who owns the API key\n    userId: {\n      type: String,\n      required: true,\n      index: true,  // Adds an index for efficient querying\n    },\n    \n    // Name of the API key, such as \"Admin Access\", \"Read Only\", etc.\n    name: {\n      type: String,\n      required: true,\n    },\n    \n    // API key string itself, unique for each key\n    key: {\n      type: String,\n      required: true,\n      unique: true,  // Ensure this field is unique in the database\n    },\n    \n    // Secret key, used for verifying the API requests\n    secret: {\n      type: String,\n      required: true,\n    },\n    \n    // List of permissions assigned to this API key (such as read/write access)\n    permissions: {\n      type: [String],\n      enum: [\n        'products:read',\n        'products:write',\n        'orders:read',\n        'orders:write',\n        'customers:read',\n        'customers:write',\n        'inventory:read',\n        'inventory:write',\n        'analytics:read',\n      ],\n      default: ['products:read', 'orders:read'], // Default permissions\n    },\n    \n    // Timestamp for when the API key was created\n    createdAt: {\n      type: Date,\n      default: Date.now, // Default to current date if not provided\n    },\n    \n    // Timestamp for when the API key was last used\n    lastUsed: {\n      type: Date,\n    },\n    \n    // Expiration date for the API key\n    expiresAt: {\n      type: Date,\n    },\n    \n    // Whether the API key is currently active (can be deactivated if needed)\n    isActive: {\n      type: Boolean,\n      default: true, // Default to true (active)\n    },\n  },\n  { timestamps: false } // Disable Mongoose's built-in `createdAt` and `updatedAt` as we handle it manually\n);\n\n// Pre-save hook to generate the API key and secret automatically before saving\napiKeySchema.pre<IApiKey>('save', function (next) {\n  if (this.isNew) {\n    // Generate a random key using crypto and assign it\n    this.key = `mgz_${crypto.randomBytes(16).toString('hex')}`;\n    \n    // Generate a random secret for the API key\n    this.secret = crypto.randomBytes(32).toString('hex');\n  }\n  next();\n});\n\n// Creating or reusing the model if already exists\nconst ApiKey: Model<IApiKey> = models.ApiKey || model<IApiKey>('ApiKey', apiKeySchema);\n\nexport default ApiKey;\n"],
      names: ["apiKeySchema", "Schema", "userId", "type", "String", "required", "index", "name", "key", "unique", "secret", "permissions", "enum", "default", "createdAt", "Date", "now", "lastUsed", "expiresAt", "isActive", "Boolean", "timestamps", "pre", "next", "isNew", "crypto", "randomBytes", "toString", "ApiKey", "models", "model"],
      mappings: "AAAA,iCAAiC;;;;;+BAgGjC;;;eAAA;;;0BA9FuD;+DAEpC;;;;;;AAOnB,MAAMA,eAAe,IAAIC,gBAAM,CAC7B;IACE,+DAA+D;IAC/DC,QAAQ;QACNC,MAAMC;QACNC,UAAU;QACVC,OAAO;IACT;IAEA,iEAAiE;IACjEC,MAAM;QACJJ,MAAMC;QACNC,UAAU;IACZ;IAEA,6CAA6C;IAC7CG,KAAK;QACHL,MAAMC;QACNC,UAAU;QACVI,QAAQ;IACV;IAEA,kDAAkD;IAClDC,QAAQ;QACNP,MAAMC;QACNC,UAAU;IACZ;IAEA,2EAA2E;IAC3EM,aAAa;QACXR,MAAM;YAACC;SAAO;QACdQ,MAAM;YACJ;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QACDC,SAAS;YAAC;YAAiB;SAAc;IAC3C;IAEA,6CAA6C;IAC7CC,WAAW;QACTX,MAAMY;QACNF,SAASE,KAAKC,GAAG;IACnB;IAEA,+CAA+C;IAC/CC,UAAU;QACRd,MAAMY;IACR;IAEA,kCAAkC;IAClCG,WAAW;QACTf,MAAMY;IACR;IAEA,yEAAyE;IACzEI,UAAU;QACRhB,MAAMiB;QACNP,SAAS;IACX;AACF,GACA;IAAEQ,YAAY;AAAM,EAAE,mFAAmF;;AAG3G,+EAA+E;AAC/ErB,aAAasB,GAAG,CAAU,QAAQ,SAAUC,IAAI;IAC9C,IAAI,IAAI,CAACC,KAAK,EAAE;QACd,mDAAmD;QACnD,IAAI,CAAChB,GAAG,GAAG,CAAC,IAAI,EAAEiB,eAAM,CAACC,WAAW,CAAC,IAAIC,QAAQ,CAAC,QAAQ;QAE1D,2CAA2C;QAC3C,IAAI,CAACjB,MAAM,GAAGe,eAAM,CAACC,WAAW,CAAC,IAAIC,QAAQ,CAAC;IAChD;IACAJ;AACF;AAEA,kDAAkD;AAClD,MAAMK,SAAyBC,gBAAM,CAACD,MAAM,IAAIE,IAAAA,eAAK,EAAU,UAAU9B;MAEzE,WAAe4B"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ef2d34586ea012ae227a2c630bd16b1aeecb5932"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_tl2xdl76n = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_tl2xdl76n();
cov_tl2xdl76n().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_tl2xdl76n().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_tl2xdl76n().f[0]++;
    cov_tl2xdl76n().s[2]++;
    return _default;
  }
});
const _mongoose =
/* istanbul ignore next */
(cov_tl2xdl76n().s[3]++, require("mongoose"));
const _crypto =
/* istanbul ignore next */
(/*#__PURE__*/cov_tl2xdl76n().s[4]++, _interop_require_default(require("crypto")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_tl2xdl76n().f[1]++;
  cov_tl2xdl76n().s[5]++;
  return /* istanbul ignore next */(cov_tl2xdl76n().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_tl2xdl76n().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_tl2xdl76n().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_tl2xdl76n().b[0][1]++, {
    default: obj
  });
}
const apiKeySchema =
/* istanbul ignore next */
(cov_tl2xdl76n().s[6]++, new _mongoose.Schema({
  // The userId is the reference to the user who owns the API key
  userId: {
    type: String,
    required: true,
    index: true
  },
  // Name of the API key, such as "Admin Access", "Read Only", etc.
  name: {
    type: String,
    required: true
  },
  // API key string itself, unique for each key
  key: {
    type: String,
    required: true,
    unique: true
  },
  // Secret key, used for verifying the API requests
  secret: {
    type: String,
    required: true
  },
  // List of permissions assigned to this API key (such as read/write access)
  permissions: {
    type: [String],
    enum: ['products:read', 'products:write', 'orders:read', 'orders:write', 'customers:read', 'customers:write', 'inventory:read', 'inventory:write', 'analytics:read'],
    default: ['products:read', 'orders:read']
  },
  // Timestamp for when the API key was created
  createdAt: {
    type: Date,
    default: Date.now
  },
  // Timestamp for when the API key was last used
  lastUsed: {
    type: Date
  },
  // Expiration date for the API key
  expiresAt: {
    type: Date
  },
  // Whether the API key is currently active (can be deactivated if needed)
  isActive: {
    type: Boolean,
    default: true
  }
}, {
  timestamps: false
} // Disable Mongoose's built-in `createdAt` and `updatedAt` as we handle it manually
));
// Pre-save hook to generate the API key and secret automatically before saving
/* istanbul ignore next */
cov_tl2xdl76n().s[7]++;
apiKeySchema.pre('save', function (next) {
  /* istanbul ignore next */
  cov_tl2xdl76n().f[2]++;
  cov_tl2xdl76n().s[8]++;
  if (this.isNew) {
    /* istanbul ignore next */
    cov_tl2xdl76n().b[2][0]++;
    cov_tl2xdl76n().s[9]++;
    // Generate a random key using crypto and assign it
    this.key = `mgz_${_crypto.default.randomBytes(16).toString('hex')}`;
    // Generate a random secret for the API key
    /* istanbul ignore next */
    cov_tl2xdl76n().s[10]++;
    this.secret = _crypto.default.randomBytes(32).toString('hex');
  } else
  /* istanbul ignore next */
  {
    cov_tl2xdl76n().b[2][1]++;
  }
  cov_tl2xdl76n().s[11]++;
  next();
});
// Creating or reusing the model if already exists
const ApiKey =
/* istanbul ignore next */
(cov_tl2xdl76n().s[12]++,
/* istanbul ignore next */
(cov_tl2xdl76n().b[3][0]++, _mongoose.models.ApiKey) ||
/* istanbul ignore next */
(cov_tl2xdl76n().b[3][1]++, (0, _mongoose.model)('ApiKey', apiKeySchema)));
const _default =
/* istanbul ignore next */
(cov_tl2xdl76n().s[13]++, ApiKey);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGVmYXVsdCIsImFwaUtleVNjaGVtYSIsImNvdl90bDJ4ZGw3Nm4iLCJzIiwiX21vbmdvb3NlIiwiU2NoZW1hIiwidXNlcklkIiwidHlwZSIsIlN0cmluZyIsInJlcXVpcmVkIiwiaW5kZXgiLCJuYW1lIiwia2V5IiwidW5pcXVlIiwic2VjcmV0IiwicGVybWlzc2lvbnMiLCJlbnVtIiwiZGVmYXVsdCIsImNyZWF0ZWRBdCIsIkRhdGUiLCJub3ciLCJsYXN0VXNlZCIsImV4cGlyZXNBdCIsImlzQWN0aXZlIiwiQm9vbGVhbiIsInRpbWVzdGFtcHMiLCJwcmUiLCJuZXh0IiwiZiIsImlzTmV3IiwiYiIsIl9jcnlwdG8iLCJyYW5kb21CeXRlcyIsInRvU3RyaW5nIiwiQXBpS2V5IiwibW9kZWxzIiwibW9kZWwiXSwic291cmNlcyI6WyIvaG9tZS9oYWdlci9uZXcvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyICgzKS9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIvbGliL2RiL21vZGVscy9hcGkta2V5Lm1vZGVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYi9kYi9tb2RlbHMvYXBpLWtleS5tb2RlbC50c1xuXG5pbXBvcnQgeyBTY2hlbWEsIG1vZGVsLCBtb2RlbHMsIERvY3VtZW50LCBNb2RlbCB9IGZyb20gJ21vbmdvb3NlJztcbmltcG9ydCB7IEFwaUtleSBhcyBBcGlLZXlUeXBlLCBBcGlQZXJtaXNzaW9uIH0gZnJvbSAnQC9saWIvYXBpL3R5cGVzJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuLy8gTW9uZ29vc2UncyBEb2N1bWVudCBpbnRlcmZhY2UsIGV4dGVuZGluZyBBcGlLZXlUeXBlIHRvIGluY2x1ZGUgJ19pZCdcbmV4cG9ydCBpbnRlcmZhY2UgSUFwaUtleSBleHRlbmRzIERvY3VtZW50LCBPbWl0PEFwaUtleVR5cGUsICdpZCc+IHtcbiAgX2lkOiBzdHJpbmc7ICAvLyBNb25nb0RCIF9pZCBmaWVsZCAoTW9uZ29vc2UgYWRkcyB0aGlzIGF1dG9tYXRpY2FsbHkpXG59XG5cbmNvbnN0IGFwaUtleVNjaGVtYSA9IG5ldyBTY2hlbWE8SUFwaUtleT4oXG4gIHtcbiAgICAvLyBUaGUgdXNlcklkIGlzIHRoZSByZWZlcmVuY2UgdG8gdGhlIHVzZXIgd2hvIG93bnMgdGhlIEFQSSBrZXlcbiAgICB1c2VySWQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgaW5kZXg6IHRydWUsICAvLyBBZGRzIGFuIGluZGV4IGZvciBlZmZpY2llbnQgcXVlcnlpbmdcbiAgICB9LFxuICAgIFxuICAgIC8vIE5hbWUgb2YgdGhlIEFQSSBrZXksIHN1Y2ggYXMgXCJBZG1pbiBBY2Nlc3NcIiwgXCJSZWFkIE9ubHlcIiwgZXRjLlxuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAgXG4gICAgLy8gQVBJIGtleSBzdHJpbmcgaXRzZWxmLCB1bmlxdWUgZm9yIGVhY2gga2V5XG4gICAga2V5OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIHVuaXF1ZTogdHJ1ZSwgIC8vIEVuc3VyZSB0aGlzIGZpZWxkIGlzIHVuaXF1ZSBpbiB0aGUgZGF0YWJhc2VcbiAgICB9LFxuICAgIFxuICAgIC8vIFNlY3JldCBrZXksIHVzZWQgZm9yIHZlcmlmeWluZyB0aGUgQVBJIHJlcXVlc3RzXG4gICAgc2VjcmV0OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIFxuICAgIC8vIExpc3Qgb2YgcGVybWlzc2lvbnMgYXNzaWduZWQgdG8gdGhpcyBBUEkga2V5IChzdWNoIGFzIHJlYWQvd3JpdGUgYWNjZXNzKVxuICAgIHBlcm1pc3Npb25zOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nXSxcbiAgICAgIGVudW06IFtcbiAgICAgICAgJ3Byb2R1Y3RzOnJlYWQnLFxuICAgICAgICAncHJvZHVjdHM6d3JpdGUnLFxuICAgICAgICAnb3JkZXJzOnJlYWQnLFxuICAgICAgICAnb3JkZXJzOndyaXRlJyxcbiAgICAgICAgJ2N1c3RvbWVyczpyZWFkJyxcbiAgICAgICAgJ2N1c3RvbWVyczp3cml0ZScsXG4gICAgICAgICdpbnZlbnRvcnk6cmVhZCcsXG4gICAgICAgICdpbnZlbnRvcnk6d3JpdGUnLFxuICAgICAgICAnYW5hbHl0aWNzOnJlYWQnLFxuICAgICAgXSxcbiAgICAgIGRlZmF1bHQ6IFsncHJvZHVjdHM6cmVhZCcsICdvcmRlcnM6cmVhZCddLCAvLyBEZWZhdWx0IHBlcm1pc3Npb25zXG4gICAgfSxcbiAgICBcbiAgICAvLyBUaW1lc3RhbXAgZm9yIHdoZW4gdGhlIEFQSSBrZXkgd2FzIGNyZWF0ZWRcbiAgICBjcmVhdGVkQXQ6IHtcbiAgICAgIHR5cGU6IERhdGUsXG4gICAgICBkZWZhdWx0OiBEYXRlLm5vdywgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUgaWYgbm90IHByb3ZpZGVkXG4gICAgfSxcbiAgICBcbiAgICAvLyBUaW1lc3RhbXAgZm9yIHdoZW4gdGhlIEFQSSBrZXkgd2FzIGxhc3QgdXNlZFxuICAgIGxhc3RVc2VkOiB7XG4gICAgICB0eXBlOiBEYXRlLFxuICAgIH0sXG4gICAgXG4gICAgLy8gRXhwaXJhdGlvbiBkYXRlIGZvciB0aGUgQVBJIGtleVxuICAgIGV4cGlyZXNBdDoge1xuICAgICAgdHlwZTogRGF0ZSxcbiAgICB9LFxuICAgIFxuICAgIC8vIFdoZXRoZXIgdGhlIEFQSSBrZXkgaXMgY3VycmVudGx5IGFjdGl2ZSAoY2FuIGJlIGRlYWN0aXZhdGVkIGlmIG5lZWRlZClcbiAgICBpc0FjdGl2ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWUsIC8vIERlZmF1bHQgdG8gdHJ1ZSAoYWN0aXZlKVxuICAgIH0sXG4gIH0sXG4gIHsgdGltZXN0YW1wczogZmFsc2UgfSAvLyBEaXNhYmxlIE1vbmdvb3NlJ3MgYnVpbHQtaW4gYGNyZWF0ZWRBdGAgYW5kIGB1cGRhdGVkQXRgIGFzIHdlIGhhbmRsZSBpdCBtYW51YWxseVxuKTtcblxuLy8gUHJlLXNhdmUgaG9vayB0byBnZW5lcmF0ZSB0aGUgQVBJIGtleSBhbmQgc2VjcmV0IGF1dG9tYXRpY2FsbHkgYmVmb3JlIHNhdmluZ1xuYXBpS2V5U2NoZW1hLnByZTxJQXBpS2V5Pignc2F2ZScsIGZ1bmN0aW9uIChuZXh0KSB7XG4gIGlmICh0aGlzLmlzTmV3KSB7XG4gICAgLy8gR2VuZXJhdGUgYSByYW5kb20ga2V5IHVzaW5nIGNyeXB0byBhbmQgYXNzaWduIGl0XG4gICAgdGhpcy5rZXkgPSBgbWd6XyR7Y3J5cHRvLnJhbmRvbUJ5dGVzKDE2KS50b1N0cmluZygnaGV4Jyl9YDtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBhIHJhbmRvbSBzZWNyZXQgZm9yIHRoZSBBUEkga2V5XG4gICAgdGhpcy5zZWNyZXQgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoMzIpLnRvU3RyaW5nKCdoZXgnKTtcbiAgfVxuICBuZXh0KCk7XG59KTtcblxuLy8gQ3JlYXRpbmcgb3IgcmV1c2luZyB0aGUgbW9kZWwgaWYgYWxyZWFkeSBleGlzdHNcbmNvbnN0IEFwaUtleTogTW9kZWw8SUFwaUtleT4gPSBtb2RlbHMuQXBpS2V5IHx8IG1vZGVsPElBcGlLZXk+KCdBcGlLZXknLCBhcGlLZXlTY2hlbWEpO1xuXG5leHBvcnQgZGVmYXVsdCBBcGlLZXk7XG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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