{"version":3,"names":["_default","apiKeySchema","cov_tl2xdl76n","s","_mongoose","Schema","userId","type","String","required","index","name","key","unique","secret","permissions","enum","default","createdAt","Date","now","lastUsed","expiresAt","isActive","Boolean","timestamps","pre","next","f","isNew","b","_crypto","randomBytes","toString","ApiKey","models","model"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/api-key.model.ts"],"sourcesContent":["// lib/db/models/api-key.model.ts\n\nimport { Schema, model, models, Document, Model } from 'mongoose';\nimport { ApiKey as ApiKeyType, ApiPermission } from '@/lib/api/types';\nimport crypto from 'crypto';\n\n// Mongoose's Document interface, extending ApiKeyType to include '_id'\nexport interface IApiKey extends Document, Omit<ApiKeyType, 'id'> {\n  _id: string;  // MongoDB _id field (Mongoose adds this automatically)\n}\n\nconst apiKeySchema = new Schema<IApiKey>(\n  {\n    // The userId is the reference to the user who owns the API key\n    userId: {\n      type: String,\n      required: true,\n      index: true,  // Adds an index for efficient querying\n    },\n    \n    // Name of the API key, such as \"Admin Access\", \"Read Only\", etc.\n    name: {\n      type: String,\n      required: true,\n    },\n    \n    // API key string itself, unique for each key\n    key: {\n      type: String,\n      required: true,\n      unique: true,  // Ensure this field is unique in the database\n    },\n    \n    // Secret key, used for verifying the API requests\n    secret: {\n      type: String,\n      required: true,\n    },\n    \n    // List of permissions assigned to this API key (such as read/write access)\n    permissions: {\n      type: [String],\n      enum: [\n        'products:read',\n        'products:write',\n        'orders:read',\n        'orders:write',\n        'customers:read',\n        'customers:write',\n        'inventory:read',\n        'inventory:write',\n        'analytics:read',\n      ],\n      default: ['products:read', 'orders:read'], // Default permissions\n    },\n    \n    // Timestamp for when the API key was created\n    createdAt: {\n      type: Date,\n      default: Date.now, // Default to current date if not provided\n    },\n    \n    // Timestamp for when the API key was last used\n    lastUsed: {\n      type: Date,\n    },\n    \n    // Expiration date for the API key\n    expiresAt: {\n      type: Date,\n    },\n    \n    // Whether the API key is currently active (can be deactivated if needed)\n    isActive: {\n      type: Boolean,\n      default: true, // Default to true (active)\n    },\n  },\n  { timestamps: false } // Disable Mongoose's built-in `createdAt` and `updatedAt` as we handle it manually\n);\n\n// Pre-save hook to generate the API key and secret automatically before saving\napiKeySchema.pre<IApiKey>('save', function (next) {\n  if (this.isNew) {\n    // Generate a random key using crypto and assign it\n    this.key = `mgz_${crypto.randomBytes(16).toString('hex')}`;\n    \n    // Generate a random secret for the API key\n    this.secret = crypto.randomBytes(32).toString('hex');\n  }\n  next();\n});\n\n// Creating or reusing the model if already exists\nconst ApiKey: Model<IApiKey> = models.ApiKey || model<IApiKey>('ApiKey', apiKeySchema);\n\nexport default ApiKey;\n"],"mappings":"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","ignoreList":[]}