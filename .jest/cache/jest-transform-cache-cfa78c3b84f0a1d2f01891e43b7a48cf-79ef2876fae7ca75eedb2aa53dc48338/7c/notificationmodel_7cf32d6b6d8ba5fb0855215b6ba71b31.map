{"version":3,"names":["_default","notificationSchema","cov_2k573gw2g","s","_mongoose","Schema","userId","type","String","required","index","enum","title","trim","message","data","Types","Mixed","default","channels","status","priority","read","Boolean","readAt","Date","expiresAt","metadata","browser","device","ip","timestamps","createdAt","expireAfterSeconds","methods","markAsRead","f","save","markAsSent","markAsQueued","queuedAt","statics","findByUser","find","sort","findUnread","pre","next","b","isNew","now","models","Notification","model"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/models/notification.model.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose'\n\n/**\n * Interface for Notification document\n */\nexport interface INotification extends Document {\n  userId: string\n  type: NotificationType\n  title: string\n  message: string\n  data?: Record<string, any>\n  channels: NotificationChannel[]\n  status: NotificationStatus\n  priority: NotificationPriority\n  read: boolean\n  readAt?: Date\n  expiresAt?: Date\n  metadata?: {\n    browser?: string\n    device?: string\n    ip?: string\n  }\n  createdAt: Date\n  updatedAt: Date\n  markAsRead: () => Promise<INotification>\n  markAsSent: () => Promise<INotification>\n  markAsQueued: () => Promise<INotification>\n}\n\n/**\n * Allowed notification types\n */\nexport type NotificationType =\n  | 'welcome'\n  | 'order_created'\n  | 'order_shipped'\n  | 'order_delivered'\n  | 'order_cancelled'\n  | 'payment_success'\n  | 'payment_failed'\n  | 'alert'\n  | 'verification'\n  | 'reset_password'\n  | 'security_alert'\n  | 'promotion'\n  | 'cart_updated'\n  | 'product_reviewed'\n\n/**\n * Allowed notification channels\n */\nexport type NotificationChannel = 'email' | 'push' | 'sms' | 'in_app'\n\n/**\n * Notification status values\n */\nexport type NotificationStatus = 'pending' | 'sent' | 'failed' | 'queued' | 'read'\n\n/**\n * Notification priority levels\n */\nexport type NotificationPriority = 'low' | 'medium' | 'high' | 'urgent'\n\nconst notificationSchema = new Schema<INotification>(\n  {\n    userId: {\n      type: String,\n      required: true,\n      index: true,\n    },\n    type: {\n      type: String,\n      required: true,\n      enum: [\n        'welcome',\n        'order_created',\n        'order_shipped',\n        'order_delivered',\n        'order_cancelled',\n        'payment_success',\n        'payment_failed',\n        'alert',\n        'verification',\n        'reset_password',\n        'security_alert',\n        'promotion',\n        'cart_updated',\n        'product_reviewed',\n      ],\n    },\n    title: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    message: {\n      type: String,\n      required: true,\n    },\n    data: {\n      type: Schema.Types.Mixed,\n      default: {},\n    },\n    channels: [{\n      type: String,\n      enum: ['email', 'push', 'sms', 'in_app'],\n      default: ['email'],\n    }],\n    status: {\n      type: String,\n      enum: ['pending', 'sent', 'failed', 'queued', 'read'],\n      default: 'pending',\n    },\n    priority: {\n      type: String,\n      enum: ['low', 'medium', 'high', 'urgent'],\n      default: 'medium',\n    },\n    read: {\n      type: Boolean,\n      default: false,\n    },\n    readAt: {\n      type: Date,\n    },\n    expiresAt: {\n      type: Date,\n    },\n    metadata: {\n      browser: String,\n      device: String,\n      ip: String,\n    },\n  },\n  {\n    timestamps: true,\n  }\n)\n\n// Indexes\nnotificationSchema.index({ userId: 1, createdAt: -1 })\nnotificationSchema.index({ status: 1, priority: 1 })\nnotificationSchema.index({ type: 1 })\nnotificationSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 })\n\n// Methods\nnotificationSchema.methods.markAsRead = function() {\n  this.read = true\n  this.readAt = new Date()\n  this.status = 'read'\n  return this.save()\n}\n\nnotificationSchema.methods.markAsSent = function() {\n  this.status = 'sent'\n  return this.save()\n}\n\nnotificationSchema.methods.markAsQueued = function() {\n  this.status = 'queued'\n  this.queuedAt = new Date()\n  return this.save()\n}\n\n// Statics\nnotificationSchema.statics.findByUser = function(userId: string) {\n  return this.find({ userId }).sort({ createdAt: -1 })\n}\n\nnotificationSchema.statics.findUnread = function(userId: string) {\n  return this.find({ userId, read: false }).sort({ createdAt: -1 })\n}\n\n// Middleware\nnotificationSchema.pre('save', function(next) {\n  if (this.isNew && !this.expiresAt) {\n    // Set default expiration to 90 days\n    this.expiresAt = new Date(Date.now() + 90 * 24 * 60 * 60 * 1000)\n  }\n  next()\n})\n\nexport default mongoose.models.Notification || \n  mongoose.model<INotification>('Notification', notificationSchema)"],"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","ignoreList":[]}