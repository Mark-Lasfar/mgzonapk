{"version":3,"names":["deleteFromCloudinary","cov_21vj8tsuw3","f","s","getPublicIdFromUrl","uploadRouter","uploadToCloudinary","_cloudinary","v2","config","cloud_name","process","env","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","_next","createUploadthing","imageUploader","image","maxFileSize","maxFileCount","middleware","uploadthingToken","UPLOADTHING_TOKEN","onUploadComplete","metadata","file","uploadedBy","url","multiImageUploader","documentUploader","pdf","b","allowedFileTypes","folder","Error","size","includes","type","base64Data","fileToBase64","uploader","upload","resource_type","error","console","publicId","destroy","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","urlParts","split","filename","length"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/storage.ts"],"sourcesContent":["// Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-04-28 22:56:00\n// Current User's Login: Mark-Lasfar\n\nimport { v2 as cloudinary } from 'cloudinary'\nimport { UploadApiResponse } from 'cloudinary'\nimport { createUploadthing, type FileRouter } from 'uploadthing/next'\n\n// Configure Cloudinary\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n})\n\n// Create UploadThing instance\nconst f = createUploadthing()\n\nexport interface StorageConfig {\n  maxFileSize?: number\n  allowedFileTypes?: string[]\n  folder?: string\n  maxFiles?: number\n}\n\nexport const uploadRouter = {\n  imageUploader: f({ image: { maxFileSize: '4MB', maxFileCount: 1 } })\n    .middleware(async () => {\n      return { uploadthingToken: process.env.UPLOADTHING_TOKEN }\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      return { uploadedBy: metadata.uploadthingToken, url: file.url }\n    }),\n\n  multiImageUploader: f({ image: { maxFileSize: '16MB', maxFileCount: 4 } })\n    .middleware(async () => {\n      return { uploadthingToken: process.env.UPLOADTHING_TOKEN }\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      return { uploadedBy: metadata.uploadthingToken, url: file.url }\n    }),\n\n  documentUploader: f({ pdf: { maxFileSize: '8MB', maxFileCount: 1 } })\n    .middleware(async () => {\n      return { uploadthingToken: process.env.UPLOADTHING_TOKEN }\n    })\n    .onUploadComplete(async ({ metadata, file }) => {\n      return { uploadedBy: metadata.uploadthingToken, url: file.url }\n    }),\n} satisfies FileRouter\n\nexport type OurFileRouter = typeof uploadRouter\n\nexport async function uploadToCloudinary(\n  file: File,\n  config: StorageConfig = {}\n): Promise<UploadApiResponse> {\n  const {\n    maxFileSize = 4 * 1024 * 1024, // 4MB default\n    allowedFileTypes = ['image/jpeg', 'image/png', 'image/webp'],\n    folder = 'uploads',\n  } = config\n\n  if (!file) {\n    throw new Error('No file provided')\n  }\n\n  // Validate file size\n  if (file.size > maxFileSize) {\n    throw new Error(`File size exceeds ${maxFileSize / (1024 * 1024)}MB limit`)\n  }\n\n  // Validate file type\n  if (!allowedFileTypes.includes(file.type)) {\n    throw new Error(`File type ${file.type} is not allowed`)\n  }\n\n  // Convert file to base64\n  const base64Data = await fileToBase64(file)\n\n  try {\n    return await cloudinary.uploader.upload(base64Data, {\n      folder,\n      resource_type: 'auto',\n    })\n  } catch (error) {\n    console.error('Cloudinary upload error:', error)\n    throw new Error('Failed to upload file')\n  }\n}\n\nexport async function deleteFromCloudinary(publicId: string): Promise<void> {\n  try {\n    await cloudinary.uploader.destroy(publicId)\n  } catch (error) {\n    console.error('Cloudinary delete error:', error)\n    throw new Error('Failed to delete file')\n  }\n}\n\n// Helper functions\nasync function fileToBase64(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = () => resolve(reader.result as string)\n    reader.onerror = (error) => reject(error)\n  })\n}\n\nexport function getPublicIdFromUrl(url: string): string {\n  const urlParts = url.split('/')\n  const filename = urlParts[urlParts.length - 1]\n  return filename.split('.')[0]\n}"],"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","ignoreList":[]}