3a3e2935de65f55fc50f877506e713fe
"use strict";

/* istanbul ignore next */
function cov_1wlebd8zcb() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/[locale]/(root)/seller/dashboard/products/create/AuditLogViewer.tsx";
  var hash = "f026f339b15ea2b4e861c12ae0904e4c3e348abc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/[locale]/(root)/seller/dashboard/products/create/AuditLogViewer.tsx",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "3": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 48
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 42
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 68
        }
      },
      "7": {
        start: {
          line: 15,
          column: 14
        },
        end: {
          line: 15,
          column: 64
        }
      },
      "8": {
        start: {
          line: 16,
          column: 18
        },
        end: {
          line: 16,
          column: 65
        }
      },
      "9": {
        start: {
          line: 17,
          column: 20
        },
        end: {
          line: 19,
          column: 1
        }
      },
      "10": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 75
        }
      },
      "11": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 22,
          column: 1
        }
      },
      "12": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 67
        }
      },
      "13": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 25,
          column: 1
        }
      },
      "14": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 73
        }
      },
      "15": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "16": {
        start: {
          line: 28,
          column: 17
        },
        end: {
          line: 28,
          column: 21
        }
      },
      "17": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 52
        }
      },
      "18": {
        start: {
          line: 32,
          column: 34
        },
        end: {
          line: 32,
          column: 60
        }
      },
      "19": {
        start: {
          line: 33,
          column: 40
        },
        end: {
          line: 33,
          column: 64
        }
      },
      "20": {
        start: {
          line: 34,
          column: 30
        },
        end: {
          line: 34,
          column: 55
        }
      },
      "21": {
        start: {
          line: 36,
          column: 22
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "22": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "23": {
        start: {
          line: 38,
          column: 36
        },
        end: {
          line: 38,
          column: 87
        }
      },
      "24": {
        start: {
          line: 39,
          column: 32
        },
        end: {
          line: 39,
          column: 64
        }
      },
      "25": {
        start: {
          line: 40,
          column: 29
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "26": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "27": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 56
        }
      },
      "28": {
        start: {
          line: 49,
          column: 25
        },
        end: {
          line: 49,
          column: 46
        }
      },
      "29": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 26
        }
      },
      "30": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 43
        }
      },
      "31": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 30
        }
      },
      "32": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 57
        }
      },
      "33": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "34": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "35": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "36": {
        start: {
          line: 66,
          column: 25
        },
        end: {
          line: 68,
          column: 20
        }
      },
      "37": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 24
        }
      },
      "38": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 43
        }
      },
      "39": {
        start: {
          line: 69,
          column: 19
        },
        end: {
          line: 69,
          column: 42
        }
      },
      "40": {
        start: {
          line: 72,
          column: 28
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "41": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 52
        }
      },
      "42": {
        start: {
          line: 76,
          column: 32
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "43": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 47
        }
      },
      "44": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 60
        }
      },
      "45": {
        start: {
          line: 78,
          column: 34
        },
        end: {
          line: 78,
          column: 58
        }
      },
      "46": {
        start: {
          line: 80,
          column: 22
        },
        end: {
          line: 80,
          column: 47
        }
      },
      "47": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 157,
          column: 7
        }
      },
      "48": {
        start: {
          line: 110,
          column: 37
        },
        end: {
          line: 110,
          column: 67
        }
      },
      "49": {
        start: {
          line: 120,
          column: 63
        },
        end: {
          line: 154,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 20
          },
          end: {
            line: 17,
            column: 21
          }
        },
        loc: {
          start: {
            line: 17,
            column: 40
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 27
          },
          end: {
            line: 20,
            column: 28
          }
        },
        loc: {
          start: {
            line: 20,
            column: 31
          },
          end: {
            line: 22,
            column: 1
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 23,
            column: 22
          }
        },
        loc: {
          start: {
            line: 23,
            column: 43
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "AuditLogViewer",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 23
          }
        },
        loc: {
          start: {
            line: 30,
            column: 26
          },
          end: {
            line: 158,
            column: 1
          }
        },
        line: 30
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 36,
            column: 22
          },
          end: {
            line: 36,
            column: 23
          }
        },
        loc: {
          start: {
            line: 36,
            column: 32
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 36
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 63,
            column: 26
          },
          end: {
            line: 63,
            column: 27
          }
        },
        loc: {
          start: {
            line: 63,
            column: 30
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 63
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 66,
            column: 37
          },
          end: {
            line: 66,
            column: 38
          }
        },
        loc: {
          start: {
            line: 66,
            column: 41
          },
          end: {
            line: 68,
            column: 9
          }
        },
        line: 66
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 16
          }
        },
        loc: {
          start: {
            line: 69,
            column: 19
          },
          end: {
            line: 69,
            column: 42
          }
        },
        line: 69
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 72,
            column: 29
          }
        },
        loc: {
          start: {
            line: 72,
            column: 41
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 72
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 76,
            column: 32
          },
          end: {
            line: 76,
            column: 33
          }
        },
        loc: {
          start: {
            line: 76,
            column: 36
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 76
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 78,
            column: 27
          },
          end: {
            line: 78,
            column: 28
          }
        },
        loc: {
          start: {
            line: 78,
            column: 34
          },
          end: {
            line: 78,
            column: 58
          }
        },
        line: 78
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 110,
            column: 33
          },
          end: {
            line: 110,
            column: 34
          }
        },
        loc: {
          start: {
            line: 110,
            column: 37
          },
          end: {
            line: 110,
            column: 67
          }
        },
        line: 110
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 120,
            column: 35
          },
          end: {
            line: 120,
            column: 36
          }
        },
        loc: {
          start: {
            line: 120,
            column: 63
          },
          end: {
            line: 154,
            column: 29
          }
        },
        line: 120
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 58
          },
          end: {
            line: 24,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 58
          },
          end: {
            line: 24,
            column: 65
          }
        }, {
          start: {
            line: 24,
            column: 69
          },
          end: {
            line: 24,
            column: 71
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 32
          },
          end: {
            line: 39,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 32
          },
          end: {
            line: 39,
            column: 51
          }
        }, {
          start: {
            line: 39,
            column: 55
          },
          end: {
            line: 39,
            column: 64
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 155,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 36
          },
          end: {
            line: 118,
            column: 14
          }
        }, {
          start: {
            line: 118,
            column: 31
          },
          end: {
            line: 155,
            column: 14
          }
        }],
        line: 115
      },
      "4": {
        loc: {
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 151,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 148,
            column: 43
          }
        }, {
          start: {
            line: 148,
            column: 61
          },
          end: {
            line: 151,
            column: 34
          }
        }],
        line: 148
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/[locale]/(root)/seller/dashboard/products/create/AuditLogViewer.tsx"],
      sourcesContent: ["\nconst handleError = (error, operation) => {\n  console.error(`[${getCurrentDateTime()}] ${operation} failed:`, error);\n};\n    \nconst getCurrentDateTime = () => {\n  return new Date().toISOString().slice(0, 19).replace('T', ' ');\n};\n\nconst logOperation = (operation, details) => {\n  console.log(`[${getCurrentDateTime()}] ${operation}`, details || '');\n};\n    'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useSession } from 'next-auth/react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { useToast } from '@/hooks/use-toast'\n\n// Types\ninterface AuditLog {\n  timestamp: string\n  user: string\n  action: string\n  details: any\n}\n\n// Constants\nconst INTERVAL = 5000 // 5 seconds for auto-refresh\n\nexport default function AuditLogViewer() {\n  const [logs, setLogs] = useState<AuditLog[]>([])\n  const [loading, setLoading] = useState(true)\n  const [lastUpdate, setLastUpdate] = useState<string>('')\n  const { data: session } = useSession()\n\n  // Fetch logs function\n  const fetchLogs = async () => {\n    try {\n      const currentDateTime = getCurrentDateTime().slice(0, 19).replace('T', ' ')\n      const currentUser = session?.user?.name || 'unknown'\n      \n      const response = await fetch('/api/audit-logs', {\n        headers: {\n          'X-User': currentUser,\n          'X-Timestamp': currentDateTime\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch logs')\n      }\n\n      const data = await response.json()\n      setLogs(data)\n      setLastUpdate(currentDateTime)\n      setLoading(false)\n\n    } catch (error) {\n      console.error('Error fetching logs:', error)\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to fetch audit logs'\n      })\n    }\n  }\n\n  // Auto-refresh setup\n  useEffect(() => {\n    fetchLogs() // Initial fetch\n    \n    const interval = setInterval(() => {\n      fetchLogs()\n    }, INTERVAL)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  // Format timestamp for display\n  const formatTimestamp = (timestamp: string) => {\n    return new Date(timestamp).toLocaleString()\n  }\n\n  // Filter logs by current user\n  const filterByCurrentUser = () => {\n    const currentUser = session?.user?.name\n    return logs.filter(log => log.user === currentUser)\n  }\n\n  const { toast } = useToast()\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Audit Logs</h2>\n        <div className=\"text-sm text-gray-500\">\n          Last updated: {formatTimestamp(lastUpdate)}\n        </div>\n      </div>\n\n      <div className=\"flex gap-2\">\n        <Button \n          onClick={fetchLogs}\n          disabled={loading}\n        >\n          Refresh\n        </Button>\n        <Button \n          variant=\"outline\"\n          onClick={() => setLogs(filterByCurrentUser())}\n        >\n          Show My Logs\n        </Button>\n      </div>\n\n      {loading ? (\n        <div className=\"text-center py-4\">Loading logs...</div>\n      ) : (\n        <div className=\"space-y-2\">\n          {logs.map((log, index) => (\n            <Card key={index}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"font-medium\">{log.action}</p>\n                    <p className=\"text-sm text-gray-500\">By {log.user}</p>\n                  </div>\n                  <p className=\"text-sm text-gray-500\">\n                    {formatTimestamp(log.timestamp)}\n                  </p>\n                </div>\n                {log.details && (\n                  <pre className=\"mt-2 p-2 bg-gray-50 rounded text-sm overflow-x-auto\">\n                    {JSON.stringify(log.details, null, 2)}\n                  </pre>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}"],
      names: ["AuditLogViewer", "handleError", "error", "operation", "console", "getCurrentDateTime", "Date", "toISOString", "slice", "replace", "logOperation", "details", "log", "INTERVAL", "logs", "setLogs", "useState", "loading", "setLoading", "lastUpdate", "setLastUpdate", "data", "session", "useSession", "fetchLogs", "currentDateTime", "currentUser", "user", "name", "response", "fetch", "headers", "ok", "Error", "json", "toast", "variant", "title", "description", "useEffect", "interval", "setInterval", "clearInterval", "formatTimestamp", "timestamp", "toLocaleString", "filterByCurrentUser", "filter", "useToast", "div", "className", "h2", "Button", "onClick", "disabled", "map", "index", "Card", "CardContent", "p", "action", "pre", "JSON", "stringify"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f026f339b15ea2b4e861c12ae0904e4c3e348abc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wlebd8zcb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wlebd8zcb();
cov_1wlebd8zcb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1wlebd8zcb().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1wlebd8zcb().f[0]++;
    cov_1wlebd8zcb().s[2]++;
    return AuditLogViewer;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_1wlebd8zcb().s[3]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(cov_1wlebd8zcb().s[4]++, require("react"));
const _react1 =
/* istanbul ignore next */
(cov_1wlebd8zcb().s[5]++, require("next-auth/react"));
const _button =
/* istanbul ignore next */
(cov_1wlebd8zcb().s[6]++, require("../../../../../../../components/ui/button"));
const _card =
/* istanbul ignore next */
(cov_1wlebd8zcb().s[7]++, require("../../../../../../../components/ui/card"));
const _usetoast =
/* istanbul ignore next */
(cov_1wlebd8zcb().s[8]++, require("../../../../../../../hooks/use-toast"));
/* istanbul ignore next */
cov_1wlebd8zcb().s[9]++;
const handleError = (error, operation) => {
  /* istanbul ignore next */
  cov_1wlebd8zcb().f[1]++;
  cov_1wlebd8zcb().s[10]++;
  console.error(`[${getCurrentDateTime()}] ${operation} failed:`, error);
};
/* istanbul ignore next */
cov_1wlebd8zcb().s[11]++;
const getCurrentDateTime = () => {
  /* istanbul ignore next */
  cov_1wlebd8zcb().f[2]++;
  cov_1wlebd8zcb().s[12]++;
  return new Date().toISOString().slice(0, 19).replace('T', ' ');
};
/* istanbul ignore next */
cov_1wlebd8zcb().s[13]++;
const logOperation = (operation, details) => {
  /* istanbul ignore next */
  cov_1wlebd8zcb().f[3]++;
  cov_1wlebd8zcb().s[14]++;
  console.log(`[${getCurrentDateTime()}] ${operation}`,
  /* istanbul ignore next */
  (cov_1wlebd8zcb().b[0][0]++, details) ||
  /* istanbul ignore next */
  (cov_1wlebd8zcb().b[0][1]++, ''));
};
/* istanbul ignore next */
cov_1wlebd8zcb().s[15]++;
'use client';
// Constants
const INTERVAL =
/* istanbul ignore next */
(cov_1wlebd8zcb().s[16]++, 5000) // 5 seconds for auto-refresh
;
function AuditLogViewer() {
  /* istanbul ignore next */
  cov_1wlebd8zcb().f[4]++;
  const [logs, setLogs] =
  /* istanbul ignore next */
  (cov_1wlebd8zcb().s[17]++, (0, _react.useState)([]));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_1wlebd8zcb().s[18]++, (0, _react.useState)(true));
  const [lastUpdate, setLastUpdate] =
  /* istanbul ignore next */
  (cov_1wlebd8zcb().s[19]++, (0, _react.useState)(''));
  const {
    data: session
  } =
  /* istanbul ignore next */
  (cov_1wlebd8zcb().s[20]++, (0, _react1.useSession)());
  // Fetch logs function
  /* istanbul ignore next */
  cov_1wlebd8zcb().s[21]++;
  const fetchLogs = async () => {
    /* istanbul ignore next */
    cov_1wlebd8zcb().f[5]++;
    cov_1wlebd8zcb().s[22]++;
    try {
      const currentDateTime =
      /* istanbul ignore next */
      (cov_1wlebd8zcb().s[23]++, getCurrentDateTime().slice(0, 19).replace('T', ' '));
      const currentUser =
      /* istanbul ignore next */
      (cov_1wlebd8zcb().s[24]++,
      /* istanbul ignore next */
      (cov_1wlebd8zcb().b[1][0]++, session?.user?.name) ||
      /* istanbul ignore next */
      (cov_1wlebd8zcb().b[1][1]++, 'unknown'));
      const response =
      /* istanbul ignore next */
      (cov_1wlebd8zcb().s[25]++, await fetch('/api/audit-logs', {
        headers: {
          'X-User': currentUser,
          'X-Timestamp': currentDateTime
        }
      }));
      /* istanbul ignore next */
      cov_1wlebd8zcb().s[26]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1wlebd8zcb().b[2][0]++;
        cov_1wlebd8zcb().s[27]++;
        throw new Error('Failed to fetch logs');
      } else
      /* istanbul ignore next */
      {
        cov_1wlebd8zcb().b[2][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_1wlebd8zcb().s[28]++, await response.json());
      /* istanbul ignore next */
      cov_1wlebd8zcb().s[29]++;
      setLogs(data);
      /* istanbul ignore next */
      cov_1wlebd8zcb().s[30]++;
      setLastUpdate(currentDateTime);
      /* istanbul ignore next */
      cov_1wlebd8zcb().s[31]++;
      setLoading(false);
    } catch (error) {
      /* istanbul ignore next */
      cov_1wlebd8zcb().s[32]++;
      console.error('Error fetching logs:', error);
      /* istanbul ignore next */
      cov_1wlebd8zcb().s[33]++;
      toast({
        variant: 'destructive',
        title: 'Error',
        description: 'Failed to fetch audit logs'
      });
    }
  };
  // Auto-refresh setup
  /* istanbul ignore next */
  cov_1wlebd8zcb().s[34]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_1wlebd8zcb().f[6]++;
    cov_1wlebd8zcb().s[35]++;
    fetchLogs() // Initial fetch
    ;
    const interval =
    /* istanbul ignore next */
    (cov_1wlebd8zcb().s[36]++, setInterval(() => {
      /* istanbul ignore next */
      cov_1wlebd8zcb().f[7]++;
      cov_1wlebd8zcb().s[37]++;
      fetchLogs();
    }, INTERVAL));
    /* istanbul ignore next */
    cov_1wlebd8zcb().s[38]++;
    return () => {
      /* istanbul ignore next */
      cov_1wlebd8zcb().f[8]++;
      cov_1wlebd8zcb().s[39]++;
      return clearInterval(interval);
    };
  }, []);
  // Format timestamp for display
  /* istanbul ignore next */
  cov_1wlebd8zcb().s[40]++;
  const formatTimestamp = timestamp => {
    /* istanbul ignore next */
    cov_1wlebd8zcb().f[9]++;
    cov_1wlebd8zcb().s[41]++;
    return new Date(timestamp).toLocaleString();
  };
  // Filter logs by current user
  /* istanbul ignore next */
  cov_1wlebd8zcb().s[42]++;
  const filterByCurrentUser = () => {
    /* istanbul ignore next */
    cov_1wlebd8zcb().f[10]++;
    const currentUser =
    /* istanbul ignore next */
    (cov_1wlebd8zcb().s[43]++, session?.user?.name);
    /* istanbul ignore next */
    cov_1wlebd8zcb().s[44]++;
    return logs.filter(log => {
      /* istanbul ignore next */
      cov_1wlebd8zcb().f[11]++;
      cov_1wlebd8zcb().s[45]++;
      return log.user === currentUser;
    });
  };
  const {
    toast
  } =
  /* istanbul ignore next */
  (cov_1wlebd8zcb().s[46]++, (0, _usetoast.useToast)());
  /* istanbul ignore next */
  cov_1wlebd8zcb().s[47]++;
  return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
    className: "space-y-4",
    children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "flex justify-between items-center",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h2", {
        className: "text-2xl font-bold",
        children: "Audit Logs"
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "text-sm text-gray-500",
        children: ["Last updated: ", formatTimestamp(lastUpdate)]
      })]
    }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "flex gap-2",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_button.Button, {
        onClick: fetchLogs,
        disabled: loading,
        children: "Refresh"
      }), /*#__PURE__*/(0, _jsxruntime.jsx)(_button.Button, {
        variant: "outline",
        onClick: () => {
          /* istanbul ignore next */
          cov_1wlebd8zcb().f[12]++;
          cov_1wlebd8zcb().s[48]++;
          return setLogs(filterByCurrentUser());
        },
        children: "Show My Logs"
      })]
    }), loading ?
    /* istanbul ignore next */
    (/*#__PURE__*/cov_1wlebd8zcb().b[3][0]++, (0, _jsxruntime.jsx)("div", {
      className: "text-center py-4",
      children: "Loading logs..."
    })) :
    /* istanbul ignore next */
    (/*#__PURE__*/cov_1wlebd8zcb().b[3][1]++, (0, _jsxruntime.jsx)("div", {
      className: "space-y-2",
      children: logs.map((log, index) => {
        /* istanbul ignore next */
        cov_1wlebd8zcb().f[13]++;
        cov_1wlebd8zcb().s[49]++;
        return /*#__PURE__*/(0, _jsxruntime.jsx)(_card.Card, {
          children: /*#__PURE__*/(0, _jsxruntime.jsxs)(_card.CardContent, {
            className: "p-4",
            children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
              className: "flex justify-between items-start",
              children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)("p", {
                  className: "font-medium",
                  children: log.action
                }), /*#__PURE__*/(0, _jsxruntime.jsxs)("p", {
                  className: "text-sm text-gray-500",
                  children: ["By ", log.user]
                })]
              }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
                className: "text-sm text-gray-500",
                children: formatTimestamp(log.timestamp)
              })]
            }),
            /* istanbul ignore next */
            (cov_1wlebd8zcb().b[4][0]++, log.details) &&
            /* istanbul ignore next */
            (cov_1wlebd8zcb().b[4][1]++, /*#__PURE__*/(0, _jsxruntime.jsx)("pre", {
              className: "mt-2 p-2 bg-gray-50 rounded text-sm overflow-x-auto",
              children: JSON.stringify(log.details, null, 2)
            }))]
          })
        }, index);
      })
    }))]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,