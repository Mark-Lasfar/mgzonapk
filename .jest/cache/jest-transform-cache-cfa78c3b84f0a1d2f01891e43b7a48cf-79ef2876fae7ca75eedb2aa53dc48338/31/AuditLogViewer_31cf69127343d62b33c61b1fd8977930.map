{"version":3,"names":["AuditLogViewer","cov_1wlebd8zcb","s","handleError","error","operation","f","console","getCurrentDateTime","Date","toISOString","slice","replace","logOperation","details","log","b","INTERVAL","logs","setLogs","_react","useState","loading","setLoading","lastUpdate","setLastUpdate","data","session","_react1","useSession","fetchLogs","currentDateTime","currentUser","user","name","response","fetch","headers","ok","Error","json","toast","variant","title","description","useEffect","interval","setInterval","clearInterval","formatTimestamp","timestamp","toLocaleString","filterByCurrentUser","filter","_usetoast","useToast","_jsxruntime","jsxs","className","jsx","_button","Button","onClick","disabled","map","index","_card","Card","CardContent","action","JSON","stringify"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/[locale]/(root)/seller/dashboard/products/create/AuditLogViewer.tsx"],"sourcesContent":["\nconst handleError = (error, operation) => {\n  console.error(`[${getCurrentDateTime()}] ${operation} failed:`, error);\n};\n    \nconst getCurrentDateTime = () => {\n  return new Date().toISOString().slice(0, 19).replace('T', ' ');\n};\n\nconst logOperation = (operation, details) => {\n  console.log(`[${getCurrentDateTime()}] ${operation}`, details || '');\n};\n    'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useSession } from 'next-auth/react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { useToast } from '@/hooks/use-toast'\n\n// Types\ninterface AuditLog {\n  timestamp: string\n  user: string\n  action: string\n  details: any\n}\n\n// Constants\nconst INTERVAL = 5000 // 5 seconds for auto-refresh\n\nexport default function AuditLogViewer() {\n  const [logs, setLogs] = useState<AuditLog[]>([])\n  const [loading, setLoading] = useState(true)\n  const [lastUpdate, setLastUpdate] = useState<string>('')\n  const { data: session } = useSession()\n\n  // Fetch logs function\n  const fetchLogs = async () => {\n    try {\n      const currentDateTime = getCurrentDateTime().slice(0, 19).replace('T', ' ')\n      const currentUser = session?.user?.name || 'unknown'\n      \n      const response = await fetch('/api/audit-logs', {\n        headers: {\n          'X-User': currentUser,\n          'X-Timestamp': currentDateTime\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch logs')\n      }\n\n      const data = await response.json()\n      setLogs(data)\n      setLastUpdate(currentDateTime)\n      setLoading(false)\n\n    } catch (error) {\n      console.error('Error fetching logs:', error)\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'Failed to fetch audit logs'\n      })\n    }\n  }\n\n  // Auto-refresh setup\n  useEffect(() => {\n    fetchLogs() // Initial fetch\n    \n    const interval = setInterval(() => {\n      fetchLogs()\n    }, INTERVAL)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  // Format timestamp for display\n  const formatTimestamp = (timestamp: string) => {\n    return new Date(timestamp).toLocaleString()\n  }\n\n  // Filter logs by current user\n  const filterByCurrentUser = () => {\n    const currentUser = session?.user?.name\n    return logs.filter(log => log.user === currentUser)\n  }\n\n  const { toast } = useToast()\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Audit Logs</h2>\n        <div className=\"text-sm text-gray-500\">\n          Last updated: {formatTimestamp(lastUpdate)}\n        </div>\n      </div>\n\n      <div className=\"flex gap-2\">\n        <Button \n          onClick={fetchLogs}\n          disabled={loading}\n        >\n          Refresh\n        </Button>\n        <Button \n          variant=\"outline\"\n          onClick={() => setLogs(filterByCurrentUser())}\n        >\n          Show My Logs\n        </Button>\n      </div>\n\n      {loading ? (\n        <div className=\"text-center py-4\">Loading logs...</div>\n      ) : (\n        <div className=\"space-y-2\">\n          {logs.map((log, index) => (\n            <Card key={index}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"font-medium\">{log.action}</p>\n                    <p className=\"text-sm text-gray-500\">By {log.user}</p>\n                  </div>\n                  <p className=\"text-sm text-gray-500\">\n                    {formatTimestamp(log.timestamp)}\n                  </p>\n                </div>\n                {log.details && (\n                  <pre className=\"mt-2 p-2 bg-gray-50 rounded text-sm overflow-x-auto\">\n                    {JSON.stringify(log.details, null, 2)}\n                  </pre>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}"],"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","ignoreList":[]}