{"version":3,"names":["createPaymentSession","stripe","cov_2ra3kbgffo","s","_stripe","default","process","env","STRIPE_SECRET_KEY","apiVersion","paypalClient","_checkoutserversdk","core","PayPalHttpClient","SandboxEnvironment","b","PAYPAL_CLIENT_ID","PAYPAL_CLIENT_SECRET","userId","planId","amount","currency","method","f","_db","connectToDatabase","seller","_sellermodel","findOne","Error","bankInfo","verified","order","_subscriptionordermodel","create","paymentMethod","isPaid","session","checkout","sessions","payment_method_types","line_items","price_data","product_data","name","unit_amount","Math","round","quantity","mode","success_url","NEXT_PUBLIC_BASE_URL","_id","cancel_url","metadata","orderId","toString","url","request","orders","OrdersCreateRequest","requestBody","intent","purchase_units","currency_code","value","toFixed","description","custom_id","response","execute","paypalOrderId","result","id","findByIdAndUpdate","paymentResult","error","console"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/utils/payments.ts"],"sourcesContent":["import Stripe from 'stripe';\nimport paypal from '@paypal/checkout-server-sdk';\nimport SubscriptionOrder from '@/lib/db/models/subscription-order.model';\nimport { connectToDatabase } from '@/lib/db';\nimport Seller from '@/lib/db/models/seller.model';\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2023-10-16',\n});\n\nconst paypalClient = new paypal.core.PayPalHttpClient(\n  new paypal.core.SandboxEnvironment(\n    process.env.PAYPAL_CLIENT_ID || '',\n    process.env.PAYPAL_CLIENT_SECRET || ''\n  )\n);\n\ninterface PaymentSessionParams {\n  userId: string;\n  planId: string;\n  amount: number;\n  currency: string;\n  method: 'stripe' | 'paypal';\n}\n\nexport async function createPaymentSession({\n  userId,\n  planId,\n  amount,\n  currency,\n  method,\n}: PaymentSessionParams): Promise<string> {\n  await connectToDatabase();\n\n  try {\n    const seller = await Seller.findOne({ userId });\n    if (!seller) {\n      throw new Error('Seller not found');\n    }\n    if (!seller.bankInfo.verified) {\n      throw new Error('Bank information not verified');\n    }\n\n    const order = await SubscriptionOrder.create({\n      userId,\n      planId,\n      amount,\n      currency,\n      paymentMethod: method,\n      isPaid: false,\n    });\n\n    if (method === 'stripe') {\n      const session = await stripe.checkout.sessions.create({\n        payment_method_types: ['card'],\n        line_items: [\n          {\n            price_data: {\n              currency,\n              product_data: {\n                name: `Subscription Plan ${planId}`,\n              },\n              unit_amount: Math.round(amount * 100),\n            },\n            quantity: 1,\n          },\n        ],\n        mode: 'payment',\n        success_url: `${process.env.NEXT_PUBLIC_BASE_URL}/checkout/${order._id}/stripe-payment-success`,\n        cancel_url: `${process.env.NEXT_PUBLIC_BASE_URL}/account/subscriptions`,\n        metadata: {\n          userId,\n          planId,\n          orderId: order._id.toString(),\n        },\n      });\n\n      return session.url!;\n    } else if (method === 'paypal') {\n      const request = new paypal.orders.OrdersCreateRequest();\n      request.requestBody({\n        intent: 'CAPTURE',\n        purchase_units: [\n          {\n            amount: {\n              currency_code: currency,\n              value: amount.toFixed(2),\n            },\n            description: `Subscription Plan ${planId}`,\n            custom_id: order._id.toString(),\n          },\n        ],\n      });\n\n      const response = await paypalClient.execute(request);\n      const paypalOrderId = response.result.id;\n\n      await SubscriptionOrder.findByIdAndUpdate(order._id, { paymentResult: { id: paypalOrderId } });\n\n      return `${process.env.NEXT_PUBLIC_BASE_URL}/checkout/${order._id}`;\n    } else {\n      throw new Error('Invalid payment method');\n    }\n  } catch (error) {\n    console.error('Create payment session error:', error);\n    throw error;\n  }\n}"],"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","ignoreList":[]}