424a110b081697b0a4a0de1cc7479cd0
"use strict";

/* istanbul ignore next */
function cov_uykhkk6uk() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/update-password/route.ts";
  var hash = "357d8a0533562e002ab10178e3c6e12ca4c30a3b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/update-password/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 12
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "5": {
        start: {
          line: 13,
          column: 33
        },
        end: {
          line: 13,
          column: 106
        }
      },
      "6": {
        start: {
          line: 14,
          column: 32
        },
        end: {
          line: 14,
          column: 77
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "8": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 46,
          column: 5
        }
      },
      "9": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "10": {
        start: {
          line: 23,
          column: 36
        },
        end: {
          line: 23,
          column: 52
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "12": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "13": {
        start: {
          line: 31,
          column: 23
        },
        end: {
          line: 31,
          column: 65
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 36,
          column: 11
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "16": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 45,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 33
          }
        },
        loc: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 20,
            column: 19
          }
        },
        loc: {
          start: {
            line: 20,
            column: 25
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 20
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 38
          }
        }, {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 14
          }
        }, {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 32
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 18
          }
        }, {
          start: {
            line: 24,
            column: 22
          },
          end: {
            line: 24,
            column: 31
          }
        }],
        line: 24
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/auth/update-password/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { connectToDatabase } from '@/lib/db';\nimport User from '@/lib/db/models/user.model';\nimport bcrypt from 'bcryptjs';\n\nexport async function POST(req: Request) {\n  try {\n    await connectToDatabase();\n    const { email, password } = await req.json();\n\n    if (!email || !password) {\n      return NextResponse.json({ error: 'Email and password required' }, { status: 400 });\n    }\n\n    const hashed = await bcrypt.hash(password, 10);\n    await User.findOneAndUpdate({ email }, { password: hashed });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    return NextResponse.json({ error: 'Error updating password' }, { status: 500 });\n  }\n}\n"],
      names: ["POST", "req", "connectToDatabase", "email", "password", "json", "NextResponse", "error", "status", "hashed", "bcrypt", "hash", "User", "findOneAndUpdate", "success"],
      mappings: ";;;;+BAKsBA;;;eAAAA;;;wBALO;oBACK;kEACjB;iEACE;;;;;;AAEZ,eAAeA,KAAKC,GAAY;IACrC,IAAI;QACF,MAAMC,IAAAA,qBAAiB;QACvB,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAG,MAAMH,IAAII,IAAI;QAE1C,IAAI,CAACF,SAAS,CAACC,UAAU;YACvB,OAAOE,oBAAY,CAACD,IAAI,CAAC;gBAAEE,OAAO;YAA8B,GAAG;gBAAEC,QAAQ;YAAI;QACnF;QAEA,MAAMC,SAAS,MAAMC,iBAAM,CAACC,IAAI,CAACP,UAAU;QAC3C,MAAMQ,kBAAI,CAACC,gBAAgB,CAAC;YAAEV;QAAM,GAAG;YAAEC,UAAUK;QAAO;QAE1D,OAAOH,oBAAY,CAACD,IAAI,CAAC;YAAES,SAAS;QAAK;IAC3C,EAAE,OAAOP,OAAO;QACd,OAAOD,oBAAY,CAACD,IAAI,CAAC;YAAEE,OAAO;QAA0B,GAAG;YAAEC,QAAQ;QAAI;IAC/E;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "357d8a0533562e002ab10178e3c6e12ca4c30a3b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_uykhkk6uk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_uykhkk6uk();
cov_uykhkk6uk().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_uykhkk6uk().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_uykhkk6uk().f[0]++;
    cov_uykhkk6uk().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_uykhkk6uk().s[3]++, require("next/server"));
const _db =
/* istanbul ignore next */
(cov_uykhkk6uk().s[4]++, require("../../../../lib/db"));
const _usermodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_uykhkk6uk().s[5]++, _interop_require_default(require("../../../../lib/db/models/user.model")));
const _bcryptjs =
/* istanbul ignore next */
(/*#__PURE__*/cov_uykhkk6uk().s[6]++, _interop_require_default(require("bcryptjs")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_uykhkk6uk().f[1]++;
  cov_uykhkk6uk().s[7]++;
  return /* istanbul ignore next */(cov_uykhkk6uk().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_uykhkk6uk().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_uykhkk6uk().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_uykhkk6uk().b[0][1]++, {
    default: obj
  });
}
async function POST(req) {
  /* istanbul ignore next */
  cov_uykhkk6uk().f[2]++;
  cov_uykhkk6uk().s[8]++;
  try {
    /* istanbul ignore next */
    cov_uykhkk6uk().s[9]++;
    await (0, _db.connectToDatabase)();
    const {
      email,
      password
    } =
    /* istanbul ignore next */
    (cov_uykhkk6uk().s[10]++, await req.json());
    /* istanbul ignore next */
    cov_uykhkk6uk().s[11]++;
    if (
    /* istanbul ignore next */
    (cov_uykhkk6uk().b[3][0]++, !email) ||
    /* istanbul ignore next */
    (cov_uykhkk6uk().b[3][1]++, !password)) {
      /* istanbul ignore next */
      cov_uykhkk6uk().b[2][0]++;
      cov_uykhkk6uk().s[12]++;
      return _server.NextResponse.json({
        error: 'Email and password required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_uykhkk6uk().b[2][1]++;
    }
    const hashed =
    /* istanbul ignore next */
    (cov_uykhkk6uk().s[13]++, await _bcryptjs.default.hash(password, 10));
    /* istanbul ignore next */
    cov_uykhkk6uk().s[14]++;
    await _usermodel.default.findOneAndUpdate({
      email
    }, {
      password: hashed
    });
    /* istanbul ignore next */
    cov_uykhkk6uk().s[15]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_uykhkk6uk().s[16]++;
    return _server.NextResponse.json({
      error: 'Error updating password'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQT1NUIiwicmVxIiwiY292X3V5a2hrazZ1ayIsImYiLCJzIiwiX2RiIiwiY29ubmVjdFRvRGF0YWJhc2UiLCJlbWFpbCIsInBhc3N3b3JkIiwianNvbiIsImIiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwiZXJyb3IiLCJzdGF0dXMiLCJoYXNoZWQiLCJfYmNyeXB0anMiLCJkZWZhdWx0IiwiaGFzaCIsIl91c2VybW9kZWwiLCJmaW5kT25lQW5kVXBkYXRlIiwic3VjY2VzcyJdLCJzb3VyY2VzIjpbIi9ob21lL2hhZ2VyL25ldy9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIgKDMpL215LW5leHRqcy1wcm9qZWN0LW1hc3Rlci9hcHAvYXBpL2F1dGgvdXBkYXRlLXBhc3N3b3JkL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IGNvbm5lY3RUb0RhdGFiYXNlIH0gZnJvbSAnQC9saWIvZGInO1xuaW1wb3J0IFVzZXIgZnJvbSAnQC9saWIvZGIvbW9kZWxzL3VzZXIubW9kZWwnO1xuaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHRqcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcTogUmVxdWVzdCkge1xuICB0cnkge1xuICAgIGF3YWl0IGNvbm5lY3RUb0RhdGFiYXNlKCk7XG4gICAgY29uc3QgeyBlbWFpbCwgcGFzc3dvcmQgfSA9IGF3YWl0IHJlcS5qc29uKCk7XG5cbiAgICBpZiAoIWVtYWlsIHx8ICFwYXNzd29yZCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdFbWFpbCBhbmQgcGFzc3dvcmQgcmVxdWlyZWQnIH0sIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFzaGVkID0gYXdhaXQgYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEwKTtcbiAgICBhd2FpdCBVc2VyLmZpbmRPbmVBbmRVcGRhdGUoeyBlbWFpbCB9LCB7IHBhc3N3b3JkOiBoYXNoZWQgfSk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBzdWNjZXNzOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnRXJyb3IgdXBkYXRpbmcgcGFzc3dvcmQnIH0sIHsgc3RhdHVzOiA1MDAgfSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQUtzQjs7Ozs7O1dBQUFBLElBQUE7Ozs7O2lDQUxPOzs7aUNBQ0s7Ozt1RUFDakI7Ozt1RUFDRTs7Ozs7Ozs7Ozs7Ozs7O0FBRVosZUFBZUEsS0FBS0MsR0FBWTtFQUFBO0VBQUFDLGFBQUEsR0FBQUMsQ0FBQTtFQUFBRCxhQUFBLEdBQUFFLENBQUE7RUFDckMsSUFBSTtJQUFBO0lBQUFGLGFBQUEsR0FBQUUsQ0FBQTtJQUNGLE1BQU0sSUFBQUMsR0FBQSxDQUFBQyxpQkFBaUI7SUFDdkIsTUFBTTtNQUFFQyxLQUFLO01BQUVDO0lBQVEsQ0FBRTtJQUFBO0lBQUEsQ0FBQU4sYUFBQSxHQUFBRSxDQUFBLFFBQUcsTUFBTUgsR0FBQSxDQUFJUSxJQUFJO0lBQUE7SUFBQVAsYUFBQSxHQUFBRSxDQUFBO0lBRTFDO0lBQUk7SUFBQSxDQUFBRixhQUFBLEdBQUFRLENBQUEsV0FBQ0gsS0FBQTtJQUFBO0lBQUEsQ0FBQUwsYUFBQSxHQUFBUSxDQUFBLFVBQVMsQ0FBQ0YsUUFBQSxHQUFVO01BQUE7TUFBQU4sYUFBQSxHQUFBUSxDQUFBO01BQUFSLGFBQUEsR0FBQUUsQ0FBQTtNQUN2QixPQUFPTyxPQUFBLENBQUFDLFlBQVksQ0FBQ0gsSUFBSSxDQUFDO1FBQUVJLEtBQUEsRUFBTztNQUE4QixHQUFHO1FBQUVDLE1BQUEsRUFBUTtNQUFJO0lBQ25GO0lBQUE7SUFBQTtNQUFBWixhQUFBLEdBQUFRLENBQUE7SUFBQTtJQUVBLE1BQU1LLE1BQUE7SUFBQTtJQUFBLENBQUFiLGFBQUEsR0FBQUUsQ0FBQSxRQUFTLE1BQU1ZLFNBQUEsQ0FBQUMsT0FBTSxDQUFDQyxJQUFJLENBQUNWLFFBQUEsRUFBVTtJQUFBO0lBQUFOLGFBQUEsR0FBQUUsQ0FBQTtJQUMzQyxNQUFNZSxVQUFBLENBQUFGLE9BQUksQ0FBQ0csZ0JBQWdCLENBQUM7TUFBRWI7SUFBTSxHQUFHO01BQUVDLFFBQUEsRUFBVU87SUFBTztJQUFBO0lBQUFiLGFBQUEsR0FBQUUsQ0FBQTtJQUUxRCxPQUFPTyxPQUFBLENBQUFDLFlBQVksQ0FBQ0gsSUFBSSxDQUFDO01BQUVZLE9BQUEsRUFBUztJQUFLO0VBQzNDLEVBQUUsT0FBT1IsS0FBQSxFQUFPO0lBQUE7SUFBQVgsYUFBQSxHQUFBRSxDQUFBO0lBQ2QsT0FBT08sT0FBQSxDQUFBQyxZQUFZLENBQUNILElBQUksQ0FBQztNQUFFSSxLQUFBLEVBQU87SUFBMEIsR0FBRztNQUFFQyxNQUFBLEVBQVE7SUFBSTtFQUMvRTtBQUNGIiwiaWdub3JlTGlzdCI6W119