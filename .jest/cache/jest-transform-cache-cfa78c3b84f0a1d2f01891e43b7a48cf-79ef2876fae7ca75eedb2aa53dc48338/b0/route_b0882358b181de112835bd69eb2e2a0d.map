{"version":3,"names":["cov_hpklv07a9","actualCoverage","s","POST","request","f","permissionCheck","_auth","validatePermissions","b","body","json","name","permissions","_server","NextResponse","success","error","timestamp","Date","toISOString","status","apiKey","_apikeyservice","ApiKeyService","createApiKey","data","errorMessage","Error","message"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/api-keys/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { ApiKeyService } from '@/lib/api/services/api-key.service';\nimport { validatePermissions } from '@/lib/api/middleware/auth';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Validate admin permissions\n    const permissionCheck = await validatePermissions(['admin'])(request);\n    if (permissionCheck) return permissionCheck;\n\n    const body = await request.json();\n    const { name, permissions } = body;\n\n    if (!name) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Name is required',\n          timestamp: new Date().toISOString(),\n        },\n        { status: 400 }\n      );\n    }\n\n    const apiKey = await ApiKeyService.createApiKey({ name, permissions });\n\n    return NextResponse.json({\n      success: true,\n      data: apiKey,\n      timestamp: new Date().toISOString(),\n    });\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Internal Server Error';\n    return NextResponse.json(\n      { \n        success: false, \n        error: errorMessage,\n        timestamp: new Date().toISOString(),\n      },\n      { status: 500 }\n    );\n  }\n}"],"mappings":"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","ignoreList":[]}