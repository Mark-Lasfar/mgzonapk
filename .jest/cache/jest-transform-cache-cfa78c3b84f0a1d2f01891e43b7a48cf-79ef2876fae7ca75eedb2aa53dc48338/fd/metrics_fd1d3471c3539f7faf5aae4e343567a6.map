{"version":3,"names":["MetricsService","cov_2gc5j3gu27","f","s","PrometheusMetrics","metricsService","prometheusMetrics","getMetrics","options","query","collection","type","b","where","from","to","userId","source","limit","snapshot","get","docs","map","doc","data","timestamp","toDate","id","saveMetric","metric","add","Date","aggregateMetrics","metrics","groups","reduce","acc","date","key","interval","toISOString","slice","week","Math","floor","getDate","getFullYear","values","count","sum","min","Infinity","max","push","value","Object","entries","group","avg","getRealtimeMetrics","now","orderBy","_admin","adminFirestore","recordRequest","success","latency","requestCount","successCount","failureCount","latencySamples","collect","averageLatency","length","a","result","totalRequests","successfulRequests","failedRequests","pendingOrders","random","processingOrders","completedOrders","failedOrders","providerMetrics","provider","status","system","memory","process","memoryUsage","cpu","cpuUsage","loadavg","_os","default","uptime"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/metrics.ts"],"sourcesContent":["import os from 'os';\nimport { adminFirestore } from '@/lib/firebase/admin';\nimport { IMetric, IMetricAggregation, MetricType } from '@/types/metrics';\n// import { IMetric, IMetricAggregation, MetricType } from '@/types/metrics';\n\nexport class MetricsService {\n  private collection = adminFirestore.collection('metrics');\n\n  async getMetrics(options: {\n    type?: MetricType;\n    from?: Date;\n    to?: Date;\n    userId?: string;\n    source?: string;\n    limit?: number;\n  }): Promise<IMetric[]> {\n    let query: FirebaseFirestore.Query = this.collection;\n    \n    if (options.type) {\n      query = query.where('type', '==', options.type);\n    }\n    \n    if (options.from) {\n      query = query.where('timestamp', '>=', options.from);\n    }\n    \n    if (options.to) {\n      query = query.where('timestamp', '<=', options.to);\n    }\n\n    if (options.userId) {\n      query = query.where('userId', '==', options.userId);\n    }\n\n    if (options.source) {\n      query = query.where('source', '==', options.source);\n    }\n\n    if (options.limit) {\n      query = query.limit(options.limit);\n    }\n\n    const snapshot = await query.get();\n    return snapshot.docs.map(doc => {\n      const data = doc.data();\n      if (data.timestamp && typeof data.timestamp.toDate === 'function') {\n        data.timestamp = data.timestamp.toDate();\n      }\n      return {\n        id: doc.id,\n        ...data\n      } as IMetric;\n    });\n  }\n\n  async saveMetric(metric: IMetric) {\n    const { id, ...data } = metric;\n    return await this.collection.add({\n      ...data,\n      timestamp: new Date()\n    });\n  }\n\n  async aggregateMetrics(options: {\n    type: MetricType;\n    interval: 'hour' | 'day' | 'week' | 'month';\n    from?: Date;\n    to?: Date;\n  }): Promise<IMetricAggregation[]> {\n    const metrics = await this.getMetrics(options);\n    const groups = metrics.reduce((acc, metric) => {\n      const date = metric.timestamp;\n      if (!date) return acc;\n      \n      let key: string;\n      switch (options.interval) {\n        case 'hour':\n          key = date.toISOString().slice(0, 13);\n          break;\n        case 'day':\n          key = date.toISOString().slice(0, 10);\n          break;\n        case 'week':\n          const week = Math.floor(date.getDate() / 7);\n          key = `${date.getFullYear()}-W${week}`;\n          break;\n        case 'month':\n          key = date.toISOString().slice(0, 7);\n          break;\n      }\n\n      if (!acc[key]) {\n        acc[key] = {\n          values: [],\n          count: 0,\n          sum: 0,\n          min: Infinity,\n          max: -Infinity\n        };\n      }\n\n      acc[key].values.push(metric.value);\n      acc[key].count++;\n      acc[key].sum += metric.value;\n      acc[key].min = Math.min(acc[key].min, metric.value);\n      acc[key].max = Math.max(acc[key].max, metric.value);\n\n      return acc;\n    }, {} as Record<string, any>);\n\n    return Object.entries(groups).map(([key, group]) => ({\n      type: options.type,\n      interval: options.interval,\n      timestamp: new Date(key),\n      value: group.sum,\n      count: group.count,\n      min: group.min,\n      max: group.max,\n      avg: group.sum / group.count\n    }));\n  }\n\n  async getRealtimeMetrics(type: MetricType) {\n    const snapshot = await this.collection\n      .where('type', '==', type)\n      .where('timestamp', '>=', new Date(Date.now() - 5 * 60 * 1000))\n      .orderBy('timestamp', 'desc')\n      .limit(1)\n      .get();\n\n    return snapshot.docs[0]?.data() as IMetric;\n  }\n}\n\nexport const metricsService = new MetricsService();\n\n// Prometheus-style metrics collector\nexport class PrometheusMetrics {\n  private requestCount = 0;\n  private successCount = 0;\n  private failureCount = 0;\n  private latencySamples: number[] = [];\n\n  recordRequest(success: boolean, latency: number) {\n    this.requestCount++;\n    if (success) {\n      this.successCount++;\n    } else {\n      this.failureCount++;\n    }\n    this.latencySamples.push(latency);\n  }\n\n  async collect() {\n    const averageLatency =\n      this.latencySamples.length > 0\n        ? this.latencySamples.reduce((a, b) => a + b, 0) / this.latencySamples.length\n        : 0;\n\n    const result = {\n      totalRequests: this.requestCount,\n      successfulRequests: this.successCount,\n      failedRequests: this.failureCount,\n      averageLatency,\n      pendingOrders: Math.floor(Math.random() * 10),\n      processingOrders: Math.floor(Math.random() * 10),\n      completedOrders: Math.floor(Math.random() * 10),\n      failedOrders: Math.floor(Math.random() * 5),\n      providerMetrics: [\n        {\n          provider: 'ShipBob',\n          status: 'online',\n          latency: Math.random() * 100\n        },\n        {\n          provider: 'PayPal',\n          status: 'online',\n          latency: Math.random() * 100\n        }\n      ],\n      system: {\n        memory: process.memoryUsage(),\n        cpu: process.cpuUsage(),\n        loadavg: os.loadavg(),\n        uptime: process.uptime()\n      }\n    };\n\n    return result;\n  }\n}\n\nexport const prometheusMetrics = new PrometheusMetrics();\n"],"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","ignoreList":[]}