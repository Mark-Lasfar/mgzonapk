{"version":3,"names":["POST","stripe","cov_16cc6a1g8q","s","_stripe","default","process","env","STRIPE_SECRET_KEY","fulfillmentService","_fulfillment","FulfillmentService","shipbob","apiKey","SHIPBOB_API_KEY","apiUrl","SHIPBOB_API_URL","amazon","region","AWS_REGION","refreshToken","AMAZON_REFRESH_TOKEN","accessKeyId","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","roleArn","AWS_ROLE_ARN","req","f","rawBody","text","signature","headers","get","event","webhooks","constructEvent","STRIPE_WEBHOOK_SECRET","err","_logging","logger","error","Error","b","message","String","_server","NextResponse","status","type","charge","data","object","orderId","metadata","email","billing_details","pricePaidInCents","amount","order","_ordermodel","findById","populate","lean","sellerId","user","isPaid","paidAt","Date","paymentResult","id","email_address","pricePaid","toFixed","findByIdAndUpdate","seller","_sellermodel","_usermodel","_id","select","sellerUser","userId","sellerChannels","whatsapp","userChannels","_notification","sendNotification","title","items","length","totalPrice","channels","warehouseId","product","processOrder","fulfillmentType","priority","shippingAddress","fullName","_emails","sendPurchaseReceipt","_webhookdispatcher","WebhookDispatcher","dispatch","total","json"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/webhooks/stripe/route.tsx"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport Stripe from 'stripe'\nimport { sendPurchaseReceipt } from '@/emails'\nimport Order from '@/lib/db/models/order.model'\nimport Seller from '@/lib/db/models/seller.model'\nimport User from '@/lib/db/models/user.model'\nimport { logger } from '@/lib/api/services/logging'\nimport { WebhookDispatcher } from '@/lib/api/webhook-dispatcher'\nimport { sendNotification } from '@/lib/utils/notification'\nimport { FulfillmentService } from '@/lib/api/services/fulfillment'\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string)\n\nconst fulfillmentService = new FulfillmentService({\n  shipbob: {\n    apiKey: process.env.SHIPBOB_API_KEY!,\n    apiUrl: process.env.SHIPBOB_API_URL!,\n  },\n  amazon: {\n    region: process.env.AWS_REGION!,\n    refreshToken: process.env.AMAZON_REFRESH_TOKEN!,\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\n    roleArn: process.env.AWS_ROLE_ARN!,\n  },\n})\n\nexport async function POST(req: NextRequest) {\n  try {\n    const rawBody = await req.text()\n    const signature = req.headers.get('stripe-signature') as string\n\n    let event: Stripe.Event\n    try {\n      event = stripe.webhooks.constructEvent(\n        rawBody,\n        signature,\n        process.env.STRIPE_WEBHOOK_SECRET as string\n      )\n    } catch (err) {\n      logger.error('Invalid Stripe webhook signature', {\n        error: err instanceof Error ? err.message : String(err),\n      })\n      return new NextResponse('Webhook Error: Invalid signature', { status: 400 })\n    }\n\n    if (event.type === 'charge.succeeded') {\n      const charge = event.data.object as Stripe.Charge\n      const orderId = charge.metadata.orderId\n      const email = charge.billing_details.email\n      const pricePaidInCents = charge.amount\n\n      const order = await Order.findById(orderId)\n        .populate('user', 'email whatsapp')\n        .populate('items.product')\n        .lean()\n      if (!order) {\n        logger.error('Order not found', { orderId })\n        return new NextResponse('Order not found', { status: 400 })\n      }\n\n      if (!order.sellerId || !order.user) {\n        logger.error('Invalid order data', { orderId, sellerId: order.sellerId, user: order.user })\n        return new NextResponse('Invalid order data', { status: 400 })\n      }\n\n      order.isPaid = true\n      order.paidAt = new Date()\n      order.paymentResult = {\n        id: event.id,\n        status: 'COMPLETED',\n        email_address: email!,\n        pricePaid: (pricePaidInCents / 100).toFixed(2),\n      }\n      await Order.findByIdAndUpdate(orderId, order)\n\n      const seller = await Seller.findById(order.sellerId).lean()\n      if (!seller) {\n        logger.error('Seller not found', { sellerId: order.sellerId })\n        return new NextResponse('Seller not found', { status: 400 })\n      }\n\n      const user = await User.findById(order.user._id).select('whatsapp').lean()\n      const sellerUser = await User.findById(seller.userId).select('whatsapp').lean()\n\n      const sellerChannels = sellerUser?.whatsapp ? ['email', 'in_app', 'whatsapp'] : ['email', 'in_app']\n      const userChannels = user?.whatsapp ? ['email', 'in_app', 'whatsapp'] : ['email', 'in_app']\n\n      await sendNotification({\n        userId: seller.userId,\n        type: 'order_placed',\n        title: `New Order #${order._id}`,\n        message: `A new order has been placed for ${order.items.length} items. Total: $${order.totalPrice}`,\n        channels: sellerChannels,\n        data: { orderId: order._id, totalPrice: order.totalPrice },\n      })\n\n      await sendNotification({\n        userId: order.user._id,\n        type: 'order_placed',\n        title: `Order #${order._id} Confirmed`,\n        message: `Your order for ${order.items.length} items has been confirmed. Total: $${order.totalPrice}`,\n        channels: userChannels,\n        data: { orderId: order._id, totalPrice: order.totalPrice },\n      })\n\n      const warehouseId = order.items[0]?.product?.warehouseId\n      if (warehouseId) {\n        await fulfillmentService.processOrder(order._id, {\n          fulfillmentType: 'shipbob',\n          priority: 'standard',\n        })\n\n        await sendNotification({\n          userId: warehouseId,\n          type: 'order_fulfillment',\n          title: `Order #${order._id} Ready for Fulfillment`,\n          message: `Please process order with ${order.items.length} items for delivery to ${order.shippingAddress.fullName}.`,\n          channels: ['email'],\n          data: { orderId: order._id },\n        })\n      }\n\n      try {\n        await sendPurchaseReceipt({ order })\n      } catch (err) {\n        logger.error('Failed to send purchase receipt email', {\n          error: err instanceof Error ? err.message : String(err),\n        })\n      }\n\n      await WebhookDispatcher.dispatch(order.user._id, 'order.paid', {\n        orderId: order._id,\n        status: 'paid',\n        total: order.totalPrice,\n      })\n\n      return NextResponse.json({ message: 'Order processed successfully' })\n    }\n\n    return NextResponse.json({ message: 'Event not handled' })\n  } catch (error) {\n    logger.error('Error handling Stripe webhook', {\n      error: error instanceof Error ? error.message : String(error),\n    })\n    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 })\n  }\n}"],"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","ignoreList":[]}