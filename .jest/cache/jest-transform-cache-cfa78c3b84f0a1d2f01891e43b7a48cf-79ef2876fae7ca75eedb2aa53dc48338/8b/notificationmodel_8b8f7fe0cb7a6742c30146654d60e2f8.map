{"version":3,"names":["cov_2jqo07e8wq","actualCoverage","s","_default","notificationSchema","_mongoose","Schema","userId","type","String","required","index","enum","title","message","data","Types","Mixed","channels","default","priority","status","read","Boolean","readAt","Date","expiresAt","metadata","browser","device","ip","timestamps","methods","markAsRead","f","save","markAsSent","createdAt","expireAfterSeconds","Notification","b","models","model"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/notification.model.ts"],"sourcesContent":["import { Document, Model, model, models, Schema } from 'mongoose'\n\nexport type NotificationType = \n  | 'welcome'\n  | 'order'\n  | 'payment'\n  | 'shipping'\n  | 'account'\n  | 'product'\n  | 'security'\n  | 'system'\n\nexport type NotificationChannel = 'email' | 'push' | 'sms' | 'in_app'\nexport type NotificationPriority = 'low' | 'medium' | 'high' | 'urgent'\nexport type NotificationStatus = 'pending' | 'sent' | 'failed' | 'read'\n\nexport interface INotification extends Document {\n  userId: string\n  type: NotificationType\n  title: string\n  message: string\n  data?: Record<string, any>\n  channels: NotificationChannel[]\n  priority: NotificationPriority\n  status: NotificationStatus\n  read: boolean\n  readAt?: Date\n  expiresAt?: Date\n  metadata?: {\n    browser?: string\n    device?: string\n    ip?: string\n  }\n  createdAt: Date\n  updatedAt: Date\n  markAsRead(): Promise<void>\n  markAsSent(): Promise<void>\n}\n\nconst notificationSchema = new Schema<INotification>(\n  {\n    userId: { type: String, required: true, index: true },\n    type: {\n      type: String,\n      required: true,\n      enum: [\n        'welcome',\n        'order',\n        'payment',\n        'shipping',\n        'account',\n        'product',\n        'security',\n        'system',\n      ],\n    },\n    title: { type: String, required: true },\n    message: { type: String, required: true },\n    data: { type: Schema.Types.Mixed },\n    channels: {\n      type: [String],\n      enum: ['email', 'push', 'sms', 'in_app'],\n      default: ['email'],\n    },\n    priority: {\n      type: String,\n      enum: ['low', 'medium', 'high', 'urgent'],\n      default: 'medium',\n    },\n    status: {\n      type: String,\n      enum: ['pending', 'sent', 'failed', 'read'],\n      default: 'pending',\n    },\n    read: { type: Boolean, default: false },\n    readAt: Date,\n    expiresAt: Date,\n    metadata: {\n      browser: String,\n      device: String,\n      ip: String,\n    },\n  },\n  {\n    timestamps: true,\n  }\n)\n\n// Add methods to the schema\nnotificationSchema.methods.markAsRead = async function () {\n  this.read = true\n  this.readAt = new Date()\n  this.status = 'read'\n  await this.save()\n}\n\nnotificationSchema.methods.markAsSent = async function () {\n  this.status = 'sent'\n  await this.save()\n}\n\n// Add indexes\nnotificationSchema.index({ userId: 1, createdAt: -1 })\nnotificationSchema.index({ status: 1 })\nnotificationSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 })\n\nconst Notification = (models.Notification as Model<INotification>) || \n  model<INotification>('Notification', notificationSchema)\n\nexport default Notification"],"mappings":"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","ignoreList":[]}