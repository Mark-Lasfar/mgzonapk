{"version":3,"names":["GET","cov_2duro7e25t","f","s","POST","scheduleManager","_schedulemanager","ScheduleManager","fulfillmentService","progressTracker","notificationService","scheduleSchema","_zod","z","object","name","string","provider","enabled","boolean","frequency","type","enum","value","hours","array","number","optional","daysOfWeek","daysOfMonth","timezone","settings","retryOnFailure","maxRetries","notifyOnCompletion","notifyOnFailure","skipWeekends","skipHolidays","filters","warehouses","productTypes","categories","notifications","email","slack","webhook","request","authError","_auth","validateApiKey","b","rateLimitResult","_ratelimit","rateLimit","_server","NextResponse","data","json","parsed","safeParse","success","error","details","issues","status","schedule","createSchedule","createdBy","headers","get","_logging","logger","message","_db","connectToDatabase","searchParams","URL","url","scheduleId","_schedulemodel","default","findById","schedules","find","sort","createdAt","limit"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/inventory/schedule/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { validateApiKey } from '@/lib/api/middleware/auth';\nimport { rateLimit } from '@/lib/api/middleware/rate-limit';\nimport { ScheduleManager } from '@/lib/api/services/schedule-manager';\nimport { logger } from '@/lib/api/services/logging';\nimport { connectToDatabase } from '@/lib/db';\nimport ScheduleModel from '@/lib/db/models/schedule.model';\nimport { z } from 'zod';\n\nconst scheduleManager = new ScheduleManager(\n  fulfillmentService,\n  progressTracker,\n  notificationService\n);\n\n// Validation schema\nconst scheduleSchema = z.object({\n  name: z.string(),\n  provider: z.string(),\n  enabled: z.boolean(),\n  frequency: z.object({\n    type: z.enum(['interval', 'cron']),\n    value: z.string(),\n    hours: z.array(z.number()).optional(),\n    daysOfWeek: z.array(z.number()).optional(),\n    daysOfMonth: z.array(z.number()).optional(),\n  }),\n  timezone: z.string(),\n  settings: z.object({\n    retryOnFailure: z.boolean(),\n    maxRetries: z.number(),\n    notifyOnCompletion: z.boolean(),\n    notifyOnFailure: z.boolean(),\n    skipWeekends: z.boolean().optional(),\n    skipHolidays: z.boolean().optional(),\n  }),\n  filters: z.object({\n    warehouses: z.array(z.string()).optional(),\n    productTypes: z.array(z.string()).optional(),\n    categories: z.array(z.string()).optional(),\n  }).optional(),\n  notifications: z.object({\n    email: z.array(z.string()).optional(),\n    slack: z.string().optional(),\n    webhook: z.string().optional(),\n  }),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    const data = await request.json();\n    \n    // Validate request body\n    const parsed = scheduleSchema.safeParse(data);\n    if (!parsed.success) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Invalid schedule configuration',\n          details: parsed.error.issues,\n        },\n        { status: 400 }\n      );\n    }\n\n    const schedule = await scheduleManager.createSchedule({\n      ...parsed.data,\n      createdBy: request.headers.get('x-user-id') || 'system',\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: schedule,\n    });\n\n  } catch (error) {\n    logger.error('Create schedule failed', { error });\n    return NextResponse.json(\n      { success: false, error: error.message },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authError = await validateApiKey(request);\n    if (authError) return authError;\n\n    const rateLimitResult = await rateLimit(request);\n    if (rateLimitResult instanceof NextResponse) return rateLimitResult;\n\n    await connectToDatabase();\n\n    const { searchParams } = new URL(request.url);\n    const scheduleId = searchParams.get('scheduleId');\n\n    if (scheduleId) {\n      const schedule = await ScheduleModel.findById(scheduleId);\n      if (!schedule) {\n        return NextResponse.json(\n          { success: false, error: 'Schedule not found' },\n          { status: 404 }\n        );\n      }\n      return NextResponse.json({ success: true, data: schedule });\n    }\n\n    const schedules = await ScheduleModel.find({})\n      .sort({ createdAt: -1 })\n      .limit(100);\n\n    return NextResponse.json({\n      success: true,\n      data: schedules,\n    });\n\n  } catch (error) {\n    logger.error('Get schedules failed', { error });\n    return NextResponse.json(\n      { success: false, error: error.message },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}