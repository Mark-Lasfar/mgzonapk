8ced8532ff260140048a0762b06fc390
"use strict";

/* istanbul ignore next */
function cov_2dxb1rgfs7() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/products/browsing-history/route.ts";
  var hash = "370f5ff407885aeb3b0c3b2011997853f608161a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/products/browsing-history/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 36
        },
        end: {
          line: 12,
          column: 112
        }
      },
      "5": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 41
        }
      },
      "6": {
        start: {
          line: 14,
          column: 32
        },
        end: {
          line: 14,
          column: 77
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 6
        }
      },
      "8": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "9": {
        start: {
          line: 22,
          column: 25
        },
        end: {
          line: 22,
          column: 78
        }
      },
      "10": {
        start: {
          line: 23,
          column: 32
        },
        end: {
          line: 23,
          column: 71
        }
      },
      "11": {
        start: {
          line: 24,
          column: 32
        },
        end: {
          line: 24,
          column: 78
        }
      },
      "12": {
        start: {
          line: 25,
          column: 26
        },
        end: {
          line: 25,
          column: 71
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "14": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 30,
          column: 15
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 43
        }
      },
      "16": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 69
        }
      },
      "17": {
        start: {
          line: 34,
          column: 27
        },
        end: {
          line: 34,
          column: 69
        }
      },
      "18": {
        start: {
          line: 36,
          column: 26
        },
        end: {
          line: 36,
          column: 88
        }
      },
      "19": {
        start: {
          line: 36,
          column: 47
        },
        end: {
          line: 36,
          column: 87
        }
      },
      "20": {
        start: {
          line: 37,
          column: 21
        },
        end: {
          line: 37,
          column: 23
        }
      },
      "21": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "22": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 43,
          column: 14
        }
      },
      "23": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 52,
          column: 14
        }
      },
      "24": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "25": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 81
        }
      },
      "26": {
        start: {
          line: 57,
          column: 25
        },
        end: {
          line: 57,
          column: 190
        }
      },
      "27": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "28": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 64,
          column: 15
        }
      },
      "29": {
        start: {
          line: 61,
          column: 31
        },
        end: {
          line: 61,
          column: 67
        }
      },
      "30": {
        start: {
          line: 62,
          column: 31
        },
        end: {
          line: 62,
          column: 67
        }
      },
      "31": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 39
        }
      },
      "32": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      },
      "33": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 56
        }
      },
      "34": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 33
          }
        },
        loc: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 20,
            column: 18
          }
        },
        loc: {
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 41
          },
          end: {
            line: 36,
            column: 42
          }
        },
        loc: {
          start: {
            line: 36,
            column: 47
          },
          end: {
            line: 36,
            column: 87
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 60,
            column: 26
          },
          end: {
            line: 60,
            column: 27
          }
        },
        loc: {
          start: {
            line: 60,
            column: 34
          },
          end: {
            line: 64,
            column: 13
          }
        },
        line: 60
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 38
          }
        }, {
          start: {
            line: 16,
            column: 41
          },
          end: {
            line: 18,
            column: 5
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 14
          }
        }, {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 16,
            column: 32
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 25
          },
          end: {
            line: 22,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 25
          },
          end: {
            line: 22,
            column: 65
          }
        }, {
          start: {
            line: 22,
            column: 69
          },
          end: {
            line: 22,
            column: 78
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "4": {
        loc: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 26,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 26,
            column: 28
          }
        }, {
          start: {
            line: 26,
            column: 32
          },
          end: {
            line: 26,
            column: 48
          }
        }],
        line: 26
      },
      "5": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: 44,
            column: 15
          },
          end: {
            line: 56,
            column: 9
          }
        }],
        line: 38
      },
      "6": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "7": {
        loc: {
          start: {
            line: 57,
            column: 72
          },
          end: {
            line: 57,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 97
          },
          end: {
            line: 57,
            column: 98
          }
        }, {
          start: {
            line: 57,
            column: 101
          },
          end: {
            line: 57,
            column: 118
          }
        }],
        line: 57
      },
      "8": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "9": {
        loc: {
          start: {
            line: 74,
            column: 21
          },
          end: {
            line: 74,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 74,
            column: 46
          },
          end: {
            line: 74,
            column: 59
          }
        }, {
          start: {
            line: 74,
            column: 62
          },
          end: {
            line: 74,
            column: 88
          }
        }],
        line: 74
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/products/browsing-history/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\nimport Product from '@/lib/db/models/product.model'\nimport { connectToDatabase } from '@/lib/db'\nimport mongoose from 'mongoose'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const listType = request.nextUrl.searchParams.get('type') || 'history'\n    const productIdsParam = request.nextUrl.searchParams.get('ids')\n    const categoriesParam = request.nextUrl.searchParams.get('categories')\n    const excludeId = request.nextUrl.searchParams.get('excludeId')\n\n    if (!productIdsParam || !categoriesParam) {\n      return NextResponse.json({ success: true, data: [] })\n    }\n\n    await connectToDatabase()\n\n    const productIds = productIdsParam.split(',').filter(Boolean)\n    const categories = categoriesParam.split(',').filter(Boolean)\n\n    // Convert string IDs to MongoDB ObjectIDs\n    const objectIds = productIds.map(id => new mongoose.Types.ObjectId(id))\n\n    let filter: any = {}\n\n    if (listType === 'history') {\n      filter = {\n        _id: { $in: objectIds }\n      }\n    } else {\n      filter = {\n        category: { $in: categories },\n        _id: { $nin: objectIds }\n      }\n\n      if (excludeId) {\n        filter._id.$ne = new mongoose.Types.ObjectId(excludeId)\n      }\n    }\n\n    const products = await Product.find(filter)\n      .limit(listType === 'related' ? 4 : productIds.length)\n      .select('name slug images price category brand ratings reviews')\n      .lean()\n\n    if (listType === 'history') {\n      // Sort products according to the original order\n      products.sort((a, b) => {\n        const aIndex = productIds.indexOf(a._id.toString())\n        const bIndex = productIds.indexOf(b._id.toString())\n        return aIndex - bIndex\n      })\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: products\n    })\n\n  } catch (error) {\n    console.error('Browsing history error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to fetch products'\n      },\n      { status: 500 }\n    )\n  }\n}"],
      names: ["GET", "request", "listType", "nextUrl", "searchParams", "get", "productIdsParam", "categoriesParam", "excludeId", "NextResponse", "json", "success", "data", "connectToDatabase", "productIds", "split", "filter", "Boolean", "categories", "objectIds", "map", "id", "mongoose", "Types", "ObjectId", "_id", "$in", "category", "$nin", "$ne", "products", "Product", "find", "limit", "length", "select", "lean", "sort", "a", "b", "aIndex", "indexOf", "toString", "bIndex", "error", "console", "message", "Error", "status"],
      mappings: ";;;;+BAKsBA;;;eAAAA;;;wBALoB;qEACtB;oBACc;iEACb;;;;;;AAEd,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACF,MAAMC,WAAWD,QAAQE,OAAO,CAACC,YAAY,CAACC,GAAG,CAAC,WAAW;QAC7D,MAAMC,kBAAkBL,QAAQE,OAAO,CAACC,YAAY,CAACC,GAAG,CAAC;QACzD,MAAME,kBAAkBN,QAAQE,OAAO,CAACC,YAAY,CAACC,GAAG,CAAC;QACzD,MAAMG,YAAYP,QAAQE,OAAO,CAACC,YAAY,CAACC,GAAG,CAAC;QAEnD,IAAI,CAACC,mBAAmB,CAACC,iBAAiB;YACxC,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,SAAS;gBAAMC,MAAM,EAAE;YAAC;QACrD;QAEA,MAAMC,IAAAA,qBAAiB;QAEvB,MAAMC,aAAaR,gBAAgBS,KAAK,CAAC,KAAKC,MAAM,CAACC;QACrD,MAAMC,aAAaX,gBAAgBQ,KAAK,CAAC,KAAKC,MAAM,CAACC;QAErD,0CAA0C;QAC1C,MAAME,YAAYL,WAAWM,GAAG,CAACC,CAAAA,KAAM,IAAIC,iBAAQ,CAACC,KAAK,CAACC,QAAQ,CAACH;QAEnE,IAAIL,SAAc,CAAC;QAEnB,IAAId,aAAa,WAAW;YAC1Bc,SAAS;gBACPS,KAAK;oBAAEC,KAAKP;gBAAU;YACxB;QACF,OAAO;YACLH,SAAS;gBACPW,UAAU;oBAAED,KAAKR;gBAAW;gBAC5BO,KAAK;oBAAEG,MAAMT;gBAAU;YACzB;YAEA,IAAIX,WAAW;gBACbQ,OAAOS,GAAG,CAACI,GAAG,GAAG,IAAIP,iBAAQ,CAACC,KAAK,CAACC,QAAQ,CAAChB;YAC/C;QACF;QAEA,MAAMsB,WAAW,MAAMC,qBAAO,CAACC,IAAI,CAAChB,QACjCiB,KAAK,CAAC/B,aAAa,YAAY,IAAIY,WAAWoB,MAAM,EACpDC,MAAM,CAAC,yDACPC,IAAI;QAEP,IAAIlC,aAAa,WAAW;YAC1B,gDAAgD;YAChD4B,SAASO,IAAI,CAAC,CAACC,GAAGC;gBAChB,MAAMC,SAAS1B,WAAW2B,OAAO,CAACH,EAAEb,GAAG,CAACiB,QAAQ;gBAChD,MAAMC,SAAS7B,WAAW2B,OAAO,CAACF,EAAEd,GAAG,CAACiB,QAAQ;gBAChD,OAAOF,SAASG;YAClB;QACF;QAEA,OAAOlC,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTC,MAAMkB;QACR;IAEF,EAAE,OAAOc,OAAO;QACdC,QAAQD,KAAK,CAAC,2BAA2BA;QACzC,OAAOnC,oBAAY,CAACC,IAAI,CACtB;YACEC,SAAS;YACTmC,SAASF,iBAAiBG,QAAQH,MAAME,OAAO,GAAG;QACpD,GACA;YAAEE,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "370f5ff407885aeb3b0c3b2011997853f608161a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2dxb1rgfs7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2dxb1rgfs7();
cov_2dxb1rgfs7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2dxb1rgfs7().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2dxb1rgfs7().f[0]++;
    cov_2dxb1rgfs7().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_2dxb1rgfs7().s[3]++, require("next/server"));
const _productmodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_2dxb1rgfs7().s[4]++, _interop_require_default(require("../../../../lib/db/models/product.model")));
const _db =
/* istanbul ignore next */
(cov_2dxb1rgfs7().s[5]++, require("../../../../lib/db"));
const _mongoose =
/* istanbul ignore next */
(/*#__PURE__*/cov_2dxb1rgfs7().s[6]++, _interop_require_default(require("mongoose")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2dxb1rgfs7().f[1]++;
  cov_2dxb1rgfs7().s[7]++;
  return /* istanbul ignore next */(cov_2dxb1rgfs7().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2dxb1rgfs7().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2dxb1rgfs7().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2dxb1rgfs7().b[0][1]++, {
    default: obj
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2dxb1rgfs7().f[2]++;
  cov_2dxb1rgfs7().s[8]++;
  try {
    const listType =
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().s[9]++,
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().b[2][0]++, request.nextUrl.searchParams.get('type')) ||
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().b[2][1]++, 'history'));
    const productIdsParam =
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().s[10]++, request.nextUrl.searchParams.get('ids'));
    const categoriesParam =
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().s[11]++, request.nextUrl.searchParams.get('categories'));
    const excludeId =
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().s[12]++, request.nextUrl.searchParams.get('excludeId'));
    /* istanbul ignore next */
    cov_2dxb1rgfs7().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().b[4][0]++, !productIdsParam) ||
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().b[4][1]++, !categoriesParam)) {
      /* istanbul ignore next */
      cov_2dxb1rgfs7().b[3][0]++;
      cov_2dxb1rgfs7().s[14]++;
      return _server.NextResponse.json({
        success: true,
        data: []
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dxb1rgfs7().b[3][1]++;
    }
    cov_2dxb1rgfs7().s[15]++;
    await (0, _db.connectToDatabase)();
    const productIds =
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().s[16]++, productIdsParam.split(',').filter(Boolean));
    const categories =
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().s[17]++, categoriesParam.split(',').filter(Boolean));
    // Convert string IDs to MongoDB ObjectIDs
    const objectIds =
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().s[18]++, productIds.map(id => {
      /* istanbul ignore next */
      cov_2dxb1rgfs7().f[3]++;
      cov_2dxb1rgfs7().s[19]++;
      return new _mongoose.default.Types.ObjectId(id);
    }));
    let filter =
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().s[20]++, {});
    /* istanbul ignore next */
    cov_2dxb1rgfs7().s[21]++;
    if (listType === 'history') {
      /* istanbul ignore next */
      cov_2dxb1rgfs7().b[5][0]++;
      cov_2dxb1rgfs7().s[22]++;
      filter = {
        _id: {
          $in: objectIds
        }
      };
    } else {
      /* istanbul ignore next */
      cov_2dxb1rgfs7().b[5][1]++;
      cov_2dxb1rgfs7().s[23]++;
      filter = {
        category: {
          $in: categories
        },
        _id: {
          $nin: objectIds
        }
      };
      /* istanbul ignore next */
      cov_2dxb1rgfs7().s[24]++;
      if (excludeId) {
        /* istanbul ignore next */
        cov_2dxb1rgfs7().b[6][0]++;
        cov_2dxb1rgfs7().s[25]++;
        filter._id.$ne = new _mongoose.default.Types.ObjectId(excludeId);
      } else
      /* istanbul ignore next */
      {
        cov_2dxb1rgfs7().b[6][1]++;
      }
    }
    const products =
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().s[26]++, await _productmodel.default.find(filter).limit(listType === 'related' ?
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().b[7][0]++, 4) :
    /* istanbul ignore next */
    (cov_2dxb1rgfs7().b[7][1]++, productIds.length)).select('name slug images price category brand ratings reviews').lean());
    /* istanbul ignore next */
    cov_2dxb1rgfs7().s[27]++;
    if (listType === 'history') {
      /* istanbul ignore next */
      cov_2dxb1rgfs7().b[8][0]++;
      cov_2dxb1rgfs7().s[28]++;
      // Sort products according to the original order
      products.sort((a, b) => {
        /* istanbul ignore next */
        cov_2dxb1rgfs7().f[4]++;
        const aIndex =
        /* istanbul ignore next */
        (cov_2dxb1rgfs7().s[29]++, productIds.indexOf(a._id.toString()));
        const bIndex =
        /* istanbul ignore next */
        (cov_2dxb1rgfs7().s[30]++, productIds.indexOf(b._id.toString()));
        /* istanbul ignore next */
        cov_2dxb1rgfs7().s[31]++;
        return aIndex - bIndex;
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dxb1rgfs7().b[8][1]++;
    }
    cov_2dxb1rgfs7().s[32]++;
    return _server.NextResponse.json({
      success: true,
      data: products
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dxb1rgfs7().s[33]++;
    console.error('Browsing history error:', error);
    /* istanbul ignore next */
    cov_2dxb1rgfs7().s[34]++;
    return _server.NextResponse.json({
      success: false,
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2dxb1rgfs7().b[9][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2dxb1rgfs7().b[9][1]++, 'Failed to fetch products')
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,