{"version":3,"names":["GET","request","cov_2dxb1rgfs7","f","s","listType","b","nextUrl","searchParams","get","productIdsParam","categoriesParam","excludeId","_server","NextResponse","json","success","data","_db","connectToDatabase","productIds","split","filter","Boolean","categories","objectIds","map","id","_mongoose","default","Types","ObjectId","_id","$in","category","$nin","$ne","products","_productmodel","find","limit","length","select","lean","sort","a","aIndex","indexOf","toString","bIndex","error","console","message","Error","status"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/products/browsing-history/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport Product from '@/lib/db/models/product.model'\nimport { connectToDatabase } from '@/lib/db'\nimport mongoose from 'mongoose'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const listType = request.nextUrl.searchParams.get('type') || 'history'\n    const productIdsParam = request.nextUrl.searchParams.get('ids')\n    const categoriesParam = request.nextUrl.searchParams.get('categories')\n    const excludeId = request.nextUrl.searchParams.get('excludeId')\n\n    if (!productIdsParam || !categoriesParam) {\n      return NextResponse.json({ success: true, data: [] })\n    }\n\n    await connectToDatabase()\n\n    const productIds = productIdsParam.split(',').filter(Boolean)\n    const categories = categoriesParam.split(',').filter(Boolean)\n\n    // Convert string IDs to MongoDB ObjectIDs\n    const objectIds = productIds.map(id => new mongoose.Types.ObjectId(id))\n\n    let filter: any = {}\n\n    if (listType === 'history') {\n      filter = {\n        _id: { $in: objectIds }\n      }\n    } else {\n      filter = {\n        category: { $in: categories },\n        _id: { $nin: objectIds }\n      }\n\n      if (excludeId) {\n        filter._id.$ne = new mongoose.Types.ObjectId(excludeId)\n      }\n    }\n\n    const products = await Product.find(filter)\n      .limit(listType === 'related' ? 4 : productIds.length)\n      .select('name slug images price category brand ratings reviews')\n      .lean()\n\n    if (listType === 'history') {\n      // Sort products according to the original order\n      products.sort((a, b) => {\n        const aIndex = productIds.indexOf(a._id.toString())\n        const bIndex = productIds.indexOf(b._id.toString())\n        return aIndex - bIndex\n      })\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: products\n    })\n\n  } catch (error) {\n    console.error('Browsing history error:', error)\n    return NextResponse.json(\n      {\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to fetch products'\n      },\n      { status: 500 }\n    )\n  }\n}"],"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","ignoreList":[]}