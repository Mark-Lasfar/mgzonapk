2b38aac074f0bfbbe573472988a98be1
"use strict";

/* istanbul ignore next */
function cov_2aerfzyedu() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/paypal/capture/route.ts";
  var hash = "9c8b620f7114728212638a9312cec605216e1d62";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/paypal/capture/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 34
        },
        end: {
          line: 13,
          column: 108
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 6
        }
      },
      "7": {
        start: {
          line: 20,
          column: 41
        },
        end: {
          line: 20,
          column: 57
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "9": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 67
        }
      },
      "10": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "11": {
        start: {
          line: 27,
          column: 26
        },
        end: {
          line: 27,
          column: 77
        }
      },
      "12": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "13": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 34,
          column: 19
        }
      },
      "14": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 32
        }
      },
      "15": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "16": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 42,
          column: 14
        }
      },
      "17": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 31
        }
      },
      "18": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "20": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 33
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "POST",
        decl: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 15,
            column: 38
          }
        }, {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 17,
            column: 5
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 11
          },
          end: {
            line: 15,
            column: 14
          }
        }, {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 15,
            column: 32
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: 49,
            column: 15
          },
          end: {
            line: 57,
            column: 9
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 23
          },
          end: {
            line: 41,
            column: 50
          }
        }, {
          start: {
            line: 41,
            column: 54
          },
          end: {
            line: 41,
            column: 56
          }
        }],
        line: 41
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/paypal/capture/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\nimport { paypal } from '@/lib/paypal'\nimport Order from '@/lib/db/models/order.model'\n\nexport async function POST(req: NextRequest) {\n  const { orderId, internalOrderId } = await req.json() // orderId = PayPal Order ID\n\n  try {\n    // Capture payment from PayPal\n    const result = await paypal.capturePayment(orderId)\n\n    if (result.status === 'COMPLETED') {\n      // Mark order as paid in your DB\n      const order = await Order.findById(internalOrderId)\n      if (!order) {\n        return NextResponse.json({ success: false, message: 'Order not found' }, { status: 404 })\n      }\n      order.isPaid = true\n      order.paidAt = new Date()\n      order.paymentResult = {\n        id: result.id,\n        status: result.status,\n        payer: result.payer?.email_address || '',\n      }\n      await order.save()\n      return NextResponse.json({ success: true, message: 'Payment completed', data: result })\n    } else {\n      return NextResponse.json({ success: false, message: 'Payment not completed', data: result }, { status: 400 })\n    }\n  } catch (err: any) {\n    return NextResponse.json({ success: false, message: 'PayPal Capture failed', error: err.message }, { status: 400 })\n  }\n}"],
      names: ["POST", "req", "orderId", "internalOrderId", "json", "result", "paypal", "capturePayment", "status", "order", "Order", "findById", "NextResponse", "success", "message", "isPaid", "paidAt", "Date", "paymentResult", "id", "payer", "email_address", "save", "data", "err", "error"],
      mappings: ";;;;+BAIsBA;;;eAAAA;;;wBAJoB;wBACnB;mEACL;;;;;;AAEX,eAAeA,KAAKC,GAAgB;IACzC,MAAM,EAAEC,OAAO,EAAEC,eAAe,EAAE,GAAG,MAAMF,IAAIG,IAAI,GAAG,4BAA4B;;IAElF,IAAI;QACF,8BAA8B;QAC9B,MAAMC,SAAS,MAAMC,cAAM,CAACC,cAAc,CAACL;QAE3C,IAAIG,OAAOG,MAAM,KAAK,aAAa;YACjC,gCAAgC;YAChC,MAAMC,QAAQ,MAAMC,mBAAK,CAACC,QAAQ,CAACR;YACnC,IAAI,CAACM,OAAO;gBACV,OAAOG,oBAAY,CAACR,IAAI,CAAC;oBAAES,SAAS;oBAAOC,SAAS;gBAAkB,GAAG;oBAAEN,QAAQ;gBAAI;YACzF;YACAC,MAAMM,MAAM,GAAG;YACfN,MAAMO,MAAM,GAAG,IAAIC;YACnBR,MAAMS,aAAa,GAAG;gBACpBC,IAAId,OAAOc,EAAE;gBACbX,QAAQH,OAAOG,MAAM;gBACrBY,OAAOf,OAAOe,KAAK,EAAEC,iBAAiB;YACxC;YACA,MAAMZ,MAAMa,IAAI;YAChB,OAAOV,oBAAY,CAACR,IAAI,CAAC;gBAAES,SAAS;gBAAMC,SAAS;gBAAqBS,MAAMlB;YAAO;QACvF,OAAO;YACL,OAAOO,oBAAY,CAACR,IAAI,CAAC;gBAAES,SAAS;gBAAOC,SAAS;gBAAyBS,MAAMlB;YAAO,GAAG;gBAAEG,QAAQ;YAAI;QAC7G;IACF,EAAE,OAAOgB,KAAU;QACjB,OAAOZ,oBAAY,CAACR,IAAI,CAAC;YAAES,SAAS;YAAOC,SAAS;YAAyBW,OAAOD,IAAIV,OAAO;QAAC,GAAG;YAAEN,QAAQ;QAAI;IACnH;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9c8b620f7114728212638a9312cec605216e1d62"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2aerfzyedu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2aerfzyedu();
cov_2aerfzyedu().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2aerfzyedu().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2aerfzyedu().f[0]++;
    cov_2aerfzyedu().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_2aerfzyedu().s[3]++, require("next/server"));
const _paypal =
/* istanbul ignore next */
(cov_2aerfzyedu().s[4]++, require("../../../../lib/paypal"));
const _ordermodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_2aerfzyedu().s[5]++, _interop_require_default(require("../../../../lib/db/models/order.model")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2aerfzyedu().f[1]++;
  cov_2aerfzyedu().s[6]++;
  return /* istanbul ignore next */(cov_2aerfzyedu().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2aerfzyedu().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2aerfzyedu().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2aerfzyedu().b[0][1]++, {
    default: obj
  });
}
async function POST(req) {
  /* istanbul ignore next */
  cov_2aerfzyedu().f[2]++;
  const {
    orderId,
    internalOrderId
  } =
  /* istanbul ignore next */
  (cov_2aerfzyedu().s[7]++, await req.json()) // orderId = PayPal Order ID
  ;
  /* istanbul ignore next */
  cov_2aerfzyedu().s[8]++;
  try {
    // Capture payment from PayPal
    const result =
    /* istanbul ignore next */
    (cov_2aerfzyedu().s[9]++, await _paypal.paypal.capturePayment(orderId));
    /* istanbul ignore next */
    cov_2aerfzyedu().s[10]++;
    if (result.status === 'COMPLETED') {
      /* istanbul ignore next */
      cov_2aerfzyedu().b[2][0]++;
      // Mark order as paid in your DB
      const order =
      /* istanbul ignore next */
      (cov_2aerfzyedu().s[11]++, await _ordermodel.default.findById(internalOrderId));
      /* istanbul ignore next */
      cov_2aerfzyedu().s[12]++;
      if (!order) {
        /* istanbul ignore next */
        cov_2aerfzyedu().b[3][0]++;
        cov_2aerfzyedu().s[13]++;
        return _server.NextResponse.json({
          success: false,
          message: 'Order not found'
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_2aerfzyedu().b[3][1]++;
      }
      cov_2aerfzyedu().s[14]++;
      order.isPaid = true;
      /* istanbul ignore next */
      cov_2aerfzyedu().s[15]++;
      order.paidAt = new Date();
      /* istanbul ignore next */
      cov_2aerfzyedu().s[16]++;
      order.paymentResult = {
        id: result.id,
        status: result.status,
        payer:
        /* istanbul ignore next */
        (cov_2aerfzyedu().b[4][0]++, result.payer?.email_address) ||
        /* istanbul ignore next */
        (cov_2aerfzyedu().b[4][1]++, '')
      };
      /* istanbul ignore next */
      cov_2aerfzyedu().s[17]++;
      await order.save();
      /* istanbul ignore next */
      cov_2aerfzyedu().s[18]++;
      return _server.NextResponse.json({
        success: true,
        message: 'Payment completed',
        data: result
      });
    } else {
      /* istanbul ignore next */
      cov_2aerfzyedu().b[2][1]++;
      cov_2aerfzyedu().s[19]++;
      return _server.NextResponse.json({
        success: false,
        message: 'Payment not completed',
        data: result
      }, {
        status: 400
      });
    }
  } catch (err) {
    /* istanbul ignore next */
    cov_2aerfzyedu().s[20]++;
    return _server.NextResponse.json({
      success: false,
      message: 'PayPal Capture failed',
      error: err.message
    }, {
      status: 400
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQT1NUIiwicmVxIiwiY292XzJhZXJmenllZHUiLCJmIiwib3JkZXJJZCIsImludGVybmFsT3JkZXJJZCIsInMiLCJqc29uIiwicmVzdWx0IiwiX3BheXBhbCIsInBheXBhbCIsImNhcHR1cmVQYXltZW50Iiwic3RhdHVzIiwiYiIsIm9yZGVyIiwiX29yZGVybW9kZWwiLCJkZWZhdWx0IiwiZmluZEJ5SWQiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJpc1BhaWQiLCJwYWlkQXQiLCJEYXRlIiwicGF5bWVudFJlc3VsdCIsImlkIiwicGF5ZXIiLCJlbWFpbF9hZGRyZXNzIiwic2F2ZSIsImRhdGEiLCJlcnIiLCJlcnJvciJdLCJzb3VyY2VzIjpbIi9ob21lL2hhZ2VyL25ldy9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIgKDMpL215LW5leHRqcy1wcm9qZWN0LW1hc3Rlci9hcHAvYXBpL3BheXBhbC9jYXB0dXJlL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcbmltcG9ydCB7IHBheXBhbCB9IGZyb20gJ0AvbGliL3BheXBhbCdcbmltcG9ydCBPcmRlciBmcm9tICdAL2xpYi9kYi9tb2RlbHMvb3JkZXIubW9kZWwnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcTogTmV4dFJlcXVlc3QpIHtcbiAgY29uc3QgeyBvcmRlcklkLCBpbnRlcm5hbE9yZGVySWQgfSA9IGF3YWl0IHJlcS5qc29uKCkgLy8gb3JkZXJJZCA9IFBheVBhbCBPcmRlciBJRFxuXG4gIHRyeSB7XG4gICAgLy8gQ2FwdHVyZSBwYXltZW50IGZyb20gUGF5UGFsXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGF5cGFsLmNhcHR1cmVQYXltZW50KG9yZGVySWQpXG5cbiAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gJ0NPTVBMRVRFRCcpIHtcbiAgICAgIC8vIE1hcmsgb3JkZXIgYXMgcGFpZCBpbiB5b3VyIERCXG4gICAgICBjb25zdCBvcmRlciA9IGF3YWl0IE9yZGVyLmZpbmRCeUlkKGludGVybmFsT3JkZXJJZClcbiAgICAgIGlmICghb3JkZXIpIHtcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdPcmRlciBub3QgZm91bmQnIH0sIHsgc3RhdHVzOiA0MDQgfSlcbiAgICAgIH1cbiAgICAgIG9yZGVyLmlzUGFpZCA9IHRydWVcbiAgICAgIG9yZGVyLnBhaWRBdCA9IG5ldyBEYXRlKClcbiAgICAgIG9yZGVyLnBheW1lbnRSZXN1bHQgPSB7XG4gICAgICAgIGlkOiByZXN1bHQuaWQsXG4gICAgICAgIHN0YXR1czogcmVzdWx0LnN0YXR1cyxcbiAgICAgICAgcGF5ZXI6IHJlc3VsdC5wYXllcj8uZW1haWxfYWRkcmVzcyB8fCAnJyxcbiAgICAgIH1cbiAgICAgIGF3YWl0IG9yZGVyLnNhdmUoKVxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogdHJ1ZSwgbWVzc2FnZTogJ1BheW1lbnQgY29tcGxldGVkJywgZGF0YTogcmVzdWx0IH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnUGF5bWVudCBub3QgY29tcGxldGVkJywgZGF0YTogcmVzdWx0IH0sIHsgc3RhdHVzOiA0MDAgfSlcbiAgICB9XG4gIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdQYXlQYWwgQ2FwdHVyZSBmYWlsZWQnLCBlcnJvcjogZXJyLm1lc3NhZ2UgfSwgeyBzdGF0dXM6IDQwMCB9KVxuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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