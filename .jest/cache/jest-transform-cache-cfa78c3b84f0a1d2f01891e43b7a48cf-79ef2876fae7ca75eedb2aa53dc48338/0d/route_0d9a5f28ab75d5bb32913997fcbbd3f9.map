{"version":3,"names":["POST","req","cov_2aerfzyedu","f","orderId","internalOrderId","s","json","result","_paypal","paypal","capturePayment","status","b","order","_ordermodel","default","findById","_server","NextResponse","success","message","isPaid","paidAt","Date","paymentResult","id","payer","email_address","save","data","err","error"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/paypal/capture/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { paypal } from '@/lib/paypal'\nimport Order from '@/lib/db/models/order.model'\n\nexport async function POST(req: NextRequest) {\n  const { orderId, internalOrderId } = await req.json() // orderId = PayPal Order ID\n\n  try {\n    // Capture payment from PayPal\n    const result = await paypal.capturePayment(orderId)\n\n    if (result.status === 'COMPLETED') {\n      // Mark order as paid in your DB\n      const order = await Order.findById(internalOrderId)\n      if (!order) {\n        return NextResponse.json({ success: false, message: 'Order not found' }, { status: 404 })\n      }\n      order.isPaid = true\n      order.paidAt = new Date()\n      order.paymentResult = {\n        id: result.id,\n        status: result.status,\n        payer: result.payer?.email_address || '',\n      }\n      await order.save()\n      return NextResponse.json({ success: true, message: 'Payment completed', data: result })\n    } else {\n      return NextResponse.json({ success: false, message: 'Payment not completed', data: result }, { status: 400 })\n    }\n  } catch (err: any) {\n    return NextResponse.json({ success: false, message: 'PayPal Capture failed', error: err.message }, { status: 400 })\n  }\n}"],"mappingssB;;;;;;WAAAA,IAAA;;;;;kCAJoB;;;kCACnB;;;wEACL;;;;;;;;;;;;;;;AAEX,eAAeA,KAAKC,GAAgB;EAAA;EAAAC,cAAA,GAAAC,CAAA;EACzC,MAAM;IAAEC,OAAO;IAAEC;EAAe,CAAE;EAAA;EAAA,CAAAH,cAAA,GAAAI,CAAA,OAAG,MAAML,GAAA,CAAIM,IAAI,IAAG;EAAA;;;EAEtD,IAAI;IACF;IACA,MAAMC,MAAA;IAAA;IAAA,CAAAN,cAAA,GAAAI,CAAA,OAAS,MAAMG,OAAA,CAAAC,MAAM,CAACC,cAAc,CAACP,OAAA;IAAA;IAAAF,cAAA,GAAAI,CAAA;IAE3C,IAAIE,MAAA,CAAOI,MAAM,KAAK,aAAa;MAAA;MAAAV,cAAA,GAAAW,CAAA;MACjC;MACA,MAAMC,KAAA;MAAA;MAAA,CAAAZ,cAAA,GAAAI,CAAA,QAAQ,MAAMS,WAAA,CAAAC,OAAK,CAACC,QAAQ,CAACZ,eAAA;MAAA;MAAAH,cAAA,GAAAI,CAAA;MACnC,IAAI,CAACQ,KAAA,EAAO;QAAA;QAAAZ,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAI,CAAA;QACV,OAAOY,OAAA,CAAAC,YAAY,CAACZ,IAAI,CAAC;UAAEa,OAAA,EAAS;UAAOC,OAAA,EAAS;QAAkB,GAAG;UAAET,MAAA,EAAQ;QAAI;MACzF;MAAA;MAAA;QAAAV,cAAA,GAAAW,CAAA;MAAA;MAAAX,cAAA,GAAAI,CAAA;MACAQ,KAAA,CAAMQ,MAAM,GAAG;MAAA;MAAApB,cAAA,GAAAI,CAAA;MACfQ,KAAA,CAAMS,MAAM,GAAG,IAAIC,IAAA;MAAA;MAAAtB,cAAA,GAAAI,CAAA;MACnBQ,KAAA,CAAMW,aAAa,GAAG;QACpBC,EAAA,EAAIlB,MAAA,CAAOkB,EAAE;QACbd,MAAA,EAAQJ,MAAA,CAAOI,MAAM;QACrBe,KAAA;QAAO;QAAA,CAAAzB,cAAA,GAAAW,CAAA,UAAAL,MAAA,CAAOmB,KAAK,EAAEC,aAAA;QAAA;QAAA,CAAA1B,cAAA,GAAAW,CAAA,UAAiB;MACxC;MAAA;MAAAX,cAAA,GAAAI,CAAA;MACA,MAAMQ,KAAA,CAAMe,IAAI;MAAA;MAAA3B,cAAA,GAAAI,CAAA;MAChB,OAAOY,OAAA,CAAAC,YAAY,CAACZ,IAAI,CAAC;QAAEa,OAAA,EAAS;QAAMC,OAAA,EAAS;QAAqBS,IAAA,EAAMtB;MAAO;IACvF,OAAO;MAAA;MAAAN,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAI,CAAA;MACL,OAAOY,OAAA,CAAAC,YAAY,CAACZ,IAAI,CAAC;QAAEa,OAAA,EAAS;QAAOC,OAAA,EAAS;QAAyBS,IAAA,EAAMtB;MAAO,GAAG;QAAEI,MAAA,EAAQ;MAAI;IAC7G;EACF,EAAE,OAAOmB,GAAA,EAAU;IAAA;IAAA7B,cAAA,GAAAI,CAAA;IACjB,OAAOY,OAAA,CAAAC,YAAY,CAACZ,IAAI,CAAC;MAAEa,OAAA,EAAS;MAAOC,OAAA,EAAS;MAAyBW,KAAA,EAAOD,GAAA,CAAIV;IAAQ,GAAG;MAAET,MAAA,EAAQ;IAAI;EACnH;AACF","ignoreList":[]}