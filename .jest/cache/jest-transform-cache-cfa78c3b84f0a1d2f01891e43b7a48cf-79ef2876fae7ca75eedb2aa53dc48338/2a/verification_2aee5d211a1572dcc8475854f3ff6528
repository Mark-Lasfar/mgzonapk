8e29a37edb4917f11acb208d4024b2cb
"use strict";

/* istanbul ignore next */
function cov_1izi8gakre() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/middleware/verification.ts";
  var hash = "5f8abf74c4155b911651f96abc8f4c35d9c5d453";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/middleware/verification.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 41
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 42
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 50
        }
      },
      "9": {
        start: {
          line: 24,
          column: 33
        },
        end: {
          line: 24,
          column: 93
        }
      },
      "10": {
        start: {
          line: 25,
          column: 15
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "11": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 6
        }
      },
      "12": {
        start: {
          line: 32,
          column: 17
        },
        end: {
          line: 34,
          column: 6
        }
      },
      "13": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "15": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 42,
          column: 52
        }
      },
      "16": {
        start: {
          line: 43,
          column: 21
        },
        end: {
          line: 43,
          column: 51
        }
      },
      "17": {
        start: {
          line: 44,
          column: 37
        },
        end: {
          line: 44,
          column: 111
        }
      },
      "18": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "19": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "20": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 16
        }
      },
      "21": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 26
        }
      },
      "22": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 65,
          column: 7
        }
      },
      "23": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 73,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 31
          },
          end: {
            line: 12,
            column: 32
          }
        },
        loc: {
          start: {
            line: 12,
            column: 42
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 15,
            column: 32
          }
        },
        loc: {
          start: {
            line: 15,
            column: 42
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 18,
            column: 33
          }
        },
        loc: {
          start: {
            line: 18,
            column: 43
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 33
          }
        },
        loc: {
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "checkVerificationAttempts",
        decl: {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 40
          }
        },
        loc: {
          start: {
            line: 31,
            column: 48
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 31
      },
      "6": {
        name: "updateVerificationAttempts",
        decl: {
          start: {
            line: 56,
            column: 15
          },
          end: {
            line: 56,
            column: 41
          }
        },
        loc: {
          start: {
            line: 56,
            column: 49
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 56
      },
      "7": {
        name: "resetVerificationAttempts",
        decl: {
          start: {
            line: 67,
            column: 15
          },
          end: {
            line: 67,
            column: 40
          }
        },
        loc: {
          start: {
            line: 67,
            column: 48
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 67
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 27,
            column: 35
          },
          end: {
            line: 27,
            column: 38
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 29,
            column: 5
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 14
          }
        }, {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 27,
            column: 32
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 21
          },
          end: {
            line: 43,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 21
          },
          end: {
            line: 43,
            column: 46
          }
        }, {
          start: {
            line: 43,
            column: 50
          },
          end: {
            line: 43,
            column: 51
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/middleware/verification.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { validation } from '@/lib/utils/validation';\nimport User from '@/lib/db/models/user.model';\nimport { EMAIL_CONFIG } from '@/lib/config/email';\n\nexport async function checkVerificationAttempts(\n  email: string\n): Promise<NextResponse | null> {\n  const user = await User.findOne({ email });\n  \n  if (!user) {\n    return NextResponse.json(\n      { error: 'User not found' },\n      { status: 404 }\n    );\n  }\n\n  const lastAttempt = user.lastVerificationAttempt;\n  const attempts = user.verificationAttempts || 0;\n\n  const { valid, timeRemaining } = validation.validateVerificationAttempts(\n    attempts,\n    lastAttempt\n  );\n\n  if (!valid) {\n    return NextResponse.json(\n      {\n        error: 'Too many attempts',\n        timeRemaining,\n        cooldown: Math.ceil(EMAIL_CONFIG.VERIFICATION_COOLDOWN / 1000)\n      },\n      { status: 429 }\n    );\n  }\n\n  return null;\n}\n\nexport async function updateVerificationAttempts(email: string): Promise<void> {\n  const now = new Date();\n  await User.findOneAndUpdate(\n    { email },\n    {\n      $inc: { verificationAttempts: 1 },\n      lastVerificationAttempt: now\n    }\n  );\n}\n\nexport async function resetVerificationAttempts(email: string): Promise<void> {\n  await User.findOneAndUpdate(\n    { email },\n    {\n      verificationAttempts: 0,\n      lastVerificationAttempt: null\n    }\n  );\n}"],
      names: ["checkVerificationAttempts", "resetVerificationAttempts", "updateVerificationAttempts", "email", "user", "User", "findOne", "NextResponse", "json", "error", "status", "lastAttempt", "lastVerificationAttempt", "attempts", "verificationAttempts", "valid", "timeRemaining", "validation", "validateVerificationAttempts", "cooldown", "Math", "ceil", "EMAIL_CONFIG", "VERIFICATION_COOLDOWN", "now", "Date", "findOneAndUpdate", "$inc"],
      mappings: ";;;;;;;;;;;IAKsBA,yBAAyB;eAAzBA;;IA6CAC,yBAAyB;eAAzBA;;IAXAC,0BAA0B;eAA1BA;;;wBAvCoB;4BACf;kEACV;uBACY;;;;;;AAEtB,eAAeF,0BACpBG,KAAa;IAEb,MAAMC,OAAO,MAAMC,kBAAI,CAACC,OAAO,CAAC;QAAEH;IAAM;IAExC,IAAI,CAACC,MAAM;QACT,OAAOG,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAiB,GAC1B;YAAEC,QAAQ;QAAI;IAElB;IAEA,MAAMC,cAAcP,KAAKQ,uBAAuB;IAChD,MAAMC,WAAWT,KAAKU,oBAAoB,IAAI;IAE9C,MAAM,EAAEC,KAAK,EAAEC,aAAa,EAAE,GAAGC,sBAAU,CAACC,4BAA4B,CACtEL,UACAF;IAGF,IAAI,CAACI,OAAO;QACV,OAAOR,oBAAY,CAACC,IAAI,CACtB;YACEC,OAAO;YACPO;YACAG,UAAUC,KAAKC,IAAI,CAACC,mBAAY,CAACC,qBAAqB,GAAG;QAC3D,GACA;YAAEb,QAAQ;QAAI;IAElB;IAEA,OAAO;AACT;AAEO,eAAeR,2BAA2BC,KAAa;IAC5D,MAAMqB,MAAM,IAAIC;IAChB,MAAMpB,kBAAI,CAACqB,gBAAgB,CACzB;QAAEvB;IAAM,GACR;QACEwB,MAAM;YAAEb,sBAAsB;QAAE;QAChCF,yBAAyBY;IAC3B;AAEJ;AAEO,eAAevB,0BAA0BE,KAAa;IAC3D,MAAME,kBAAI,CAACqB,gBAAgB,CACzB;QAAEvB;IAAM,GACR;QACEW,sBAAsB;QACtBF,yBAAyB;IAC3B;AAEJ"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5f8abf74c4155b911651f96abc8f4c35d9c5d453"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1izi8gakre = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1izi8gakre();
cov_1izi8gakre().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1izi8gakre().f[0]++;
  cov_1izi8gakre().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1izi8gakre().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1izi8gakre().s[3]++;
_export(exports, {
  checkVerificationAttempts: function () {
    /* istanbul ignore next */
    cov_1izi8gakre().f[1]++;
    cov_1izi8gakre().s[4]++;
    return checkVerificationAttempts;
  },
  resetVerificationAttempts: function () {
    /* istanbul ignore next */
    cov_1izi8gakre().f[2]++;
    cov_1izi8gakre().s[5]++;
    return resetVerificationAttempts;
  },
  updateVerificationAttempts: function () {
    /* istanbul ignore next */
    cov_1izi8gakre().f[3]++;
    cov_1izi8gakre().s[6]++;
    return updateVerificationAttempts;
  }
});
const _server =
/* istanbul ignore next */
(cov_1izi8gakre().s[7]++, require("next/server"));
const _validation =
/* istanbul ignore next */
(cov_1izi8gakre().s[8]++, require("../utils/validation"));
const _usermodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_1izi8gakre().s[9]++, _interop_require_default(require("../db/models/user.model")));
const _email =
/* istanbul ignore next */
(cov_1izi8gakre().s[10]++, require("../config/email"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1izi8gakre().f[4]++;
  cov_1izi8gakre().s[11]++;
  return /* istanbul ignore next */(cov_1izi8gakre().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1izi8gakre().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1izi8gakre().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1izi8gakre().b[0][1]++, {
    default: obj
  });
}
async function checkVerificationAttempts(email) {
  /* istanbul ignore next */
  cov_1izi8gakre().f[5]++;
  const user =
  /* istanbul ignore next */
  (cov_1izi8gakre().s[12]++, await _usermodel.default.findOne({
    email
  }));
  /* istanbul ignore next */
  cov_1izi8gakre().s[13]++;
  if (!user) {
    /* istanbul ignore next */
    cov_1izi8gakre().b[2][0]++;
    cov_1izi8gakre().s[14]++;
    return _server.NextResponse.json({
      error: 'User not found'
    }, {
      status: 404
    });
  } else
  /* istanbul ignore next */
  {
    cov_1izi8gakre().b[2][1]++;
  }
  const lastAttempt =
  /* istanbul ignore next */
  (cov_1izi8gakre().s[15]++, user.lastVerificationAttempt);
  const attempts =
  /* istanbul ignore next */
  (cov_1izi8gakre().s[16]++,
  /* istanbul ignore next */
  (cov_1izi8gakre().b[3][0]++, user.verificationAttempts) ||
  /* istanbul ignore next */
  (cov_1izi8gakre().b[3][1]++, 0));
  const {
    valid,
    timeRemaining
  } =
  /* istanbul ignore next */
  (cov_1izi8gakre().s[17]++, _validation.validation.validateVerificationAttempts(attempts, lastAttempt));
  /* istanbul ignore next */
  cov_1izi8gakre().s[18]++;
  if (!valid) {
    /* istanbul ignore next */
    cov_1izi8gakre().b[4][0]++;
    cov_1izi8gakre().s[19]++;
    return _server.NextResponse.json({
      error: 'Too many attempts',
      timeRemaining,
      cooldown: Math.ceil(_email.EMAIL_CONFIG.VERIFICATION_COOLDOWN / 1000)
    }, {
      status: 429
    });
  } else
  /* istanbul ignore next */
  {
    cov_1izi8gakre().b[4][1]++;
  }
  cov_1izi8gakre().s[20]++;
  return null;
}
async function updateVerificationAttempts(email) {
  /* istanbul ignore next */
  cov_1izi8gakre().f[6]++;
  const now =
  /* istanbul ignore next */
  (cov_1izi8gakre().s[21]++, new Date());
  /* istanbul ignore next */
  cov_1izi8gakre().s[22]++;
  await _usermodel.default.findOneAndUpdate({
    email
  }, {
    $inc: {
      verificationAttempts: 1
    },
    lastVerificationAttempt: now
  });
}
async function resetVerificationAttempts(email) {
  /* istanbul ignore next */
  cov_1izi8gakre().f[7]++;
  cov_1izi8gakre().s[23]++;
  await _usermodel.default.findOneAndUpdate({
    email
  }, {
    verificationAttempts: 0,
    lastVerificationAttempt: null
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGVja1ZlcmlmaWNhdGlvbkF0dGVtcHRzIiwiY292XzFpemk4Z2FrcmUiLCJmIiwicyIsInJlc2V0VmVyaWZpY2F0aW9uQXR0ZW1wdHMiLCJ1cGRhdGVWZXJpZmljYXRpb25BdHRlbXB0cyIsImVtYWlsIiwidXNlciIsIl91c2VybW9kZWwiLCJkZWZhdWx0IiwiZmluZE9uZSIsImIiLCJfc2VydmVyIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwibGFzdEF0dGVtcHQiLCJsYXN0VmVyaWZpY2F0aW9uQXR0ZW1wdCIsImF0dGVtcHRzIiwidmVyaWZpY2F0aW9uQXR0ZW1wdHMiLCJ2YWxpZCIsInRpbWVSZW1haW5pbmciLCJfdmFsaWRhdGlvbiIsInZhbGlkYXRpb24iLCJ2YWxpZGF0ZVZlcmlmaWNhdGlvbkF0dGVtcHRzIiwiY29vbGRvd24iLCJNYXRoIiwiY2VpbCIsIl9lbWFpbCIsIkVNQUlMX0NPTkZJRyIsIlZFUklGSUNBVElPTl9DT09MRE9XTiIsIm5vdyIsIkRhdGUiLCJmaW5kT25lQW5kVXBkYXRlIiwiJGluYyJdLCJzb3VyY2VzIjpbIi9ob21lL2hhZ2VyL25ldy9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIgKDMpL215LW5leHRqcy1wcm9qZWN0LW1hc3Rlci9saWIvbWlkZGxld2FyZS92ZXJpZmljYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHZhbGlkYXRpb24gfSBmcm9tICdAL2xpYi91dGlscy92YWxpZGF0aW9uJztcbmltcG9ydCBVc2VyIGZyb20gJ0AvbGliL2RiL21vZGVscy91c2VyLm1vZGVsJztcbmltcG9ydCB7IEVNQUlMX0NPTkZJRyB9IGZyb20gJ0AvbGliL2NvbmZpZy9lbWFpbCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja1ZlcmlmaWNhdGlvbkF0dGVtcHRzKFxuICBlbWFpbDogc3RyaW5nXG4pOiBQcm9taXNlPE5leHRSZXNwb25zZSB8IG51bGw+IHtcbiAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZE9uZSh7IGVtYWlsIH0pO1xuICBcbiAgaWYgKCF1c2VyKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogJ1VzZXIgbm90IGZvdW5kJyB9LFxuICAgICAgeyBzdGF0dXM6IDQwNCB9XG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGxhc3RBdHRlbXB0ID0gdXNlci5sYXN0VmVyaWZpY2F0aW9uQXR0ZW1wdDtcbiAgY29uc3QgYXR0ZW1wdHMgPSB1c2VyLnZlcmlmaWNhdGlvbkF0dGVtcHRzIHx8IDA7XG5cbiAgY29uc3QgeyB2YWxpZCwgdGltZVJlbWFpbmluZyB9ID0gdmFsaWRhdGlvbi52YWxpZGF0ZVZlcmlmaWNhdGlvbkF0dGVtcHRzKFxuICAgIGF0dGVtcHRzLFxuICAgIGxhc3RBdHRlbXB0XG4gICk7XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHtcbiAgICAgICAgZXJyb3I6ICdUb28gbWFueSBhdHRlbXB0cycsXG4gICAgICAgIHRpbWVSZW1haW5pbmcsXG4gICAgICAgIGNvb2xkb3duOiBNYXRoLmNlaWwoRU1BSUxfQ09ORklHLlZFUklGSUNBVElPTl9DT09MRE9XTiAvIDEwMDApXG4gICAgICB9LFxuICAgICAgeyBzdGF0dXM6IDQyOSB9XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlVmVyaWZpY2F0aW9uQXR0ZW1wdHMoZW1haWw6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICBhd2FpdCBVc2VyLmZpbmRPbmVBbmRVcGRhdGUoXG4gICAgeyBlbWFpbCB9LFxuICAgIHtcbiAgICAgICRpbmM6IHsgdmVyaWZpY2F0aW9uQXR0ZW1wdHM6IDEgfSxcbiAgICAgIGxhc3RWZXJpZmljYXRpb25BdHRlbXB0OiBub3dcbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXNldFZlcmlmaWNhdGlvbkF0dGVtcHRzKGVtYWlsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgYXdhaXQgVXNlci5maW5kT25lQW5kVXBkYXRlKFxuICAgIHsgZW1haWwgfSxcbiAgICB7XG4gICAgICB2ZXJpZmljYXRpb25BdHRlbXB0czogMCxcbiAgICAgIGxhc3RWZXJpZmljYXRpb25BdHRlbXB0OiBudWxsXG4gICAgfVxuICApO1xufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQUtzQkEseUJBQXlCLFdBQUFBLENBQUE7SUFBQTtJQUFBQyxjQUFBLEdBQUFDLENBQUE7SUFBQUQsY0FBQSxHQUFBRSxDQUFBO1dBQXpCSCx5QkFBQTs7RUE2Q0FJLHlCQUF5QixXQUFBQSxDQUFBO0lBQUE7SUFBQUgsY0FBQSxHQUFBQyxDQUFBO0lBQUFELGNBQUEsR0FBQUUsQ0FBQTtXQUF6QkMseUJBQUE7O0VBWEFDLDBCQUEwQixXQUFBQSxDQUFBO0lBQUE7SUFBQUosY0FBQSxHQUFBQyxDQUFBO0lBQUFELGNBQUEsR0FBQUUsQ0FBQTtXQUExQkUsMEJBQUE7Ozs7O2tDQXZDb0I7OztrQ0FDZjs7O3dFQUNWOzs7bUNBQ1k7Ozs7Ozs7Ozs7Ozs7OztBQUV0QixlQUFlTCwwQkFDcEJNLEtBQWE7RUFBQTtFQUFBTCxjQUFBLEdBQUFDLENBQUE7RUFFYixNQUFNSyxJQUFBO0VBQUE7RUFBQSxDQUFBTixjQUFBLEdBQUFFLENBQUEsUUFBTyxNQUFNSyxVQUFBLENBQUFDLE9BQUksQ0FBQ0MsT0FBTyxDQUFDO0lBQUVKO0VBQU07RUFBQTtFQUFBTCxjQUFBLEdBQUFFLENBQUE7RUFFeEMsSUFBSSxDQUFDSSxJQUFBLEVBQU07SUFBQTtJQUFBTixjQUFBLEdBQUFVLENBQUE7SUFBQVYsY0FBQSxHQUFBRSxDQUFBO0lBQ1QsT0FBT1MsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FDdEI7TUFBRUMsS0FBQSxFQUFPO0lBQWlCLEdBQzFCO01BQUVDLE1BQUEsRUFBUTtJQUFJO0VBRWxCO0VBQUE7RUFBQTtJQUFBZixjQUFBLEdBQUFVLENBQUE7RUFBQTtFQUVBLE1BQU1NLFdBQUE7RUFBQTtFQUFBLENBQUFoQixjQUFBLEdBQUFFLENBQUEsUUFBY0ksSUFBQSxDQUFLVyx1QkFBdUI7RUFDaEQsTUFBTUMsUUFBQTtFQUFBO0VBQUEsQ0FBQWxCLGNBQUEsR0FBQUUsQ0FBQTtFQUFXO0VBQUEsQ0FBQUYsY0FBQSxHQUFBVSxDQUFBLFVBQUFKLElBQUEsQ0FBS2Esb0JBQW9CO0VBQUE7RUFBQSxDQUFBbkIsY0FBQSxHQUFBVSxDQUFBLFVBQUk7RUFFOUMsTUFBTTtJQUFFVSxLQUFLO0lBQUVDO0VBQWEsQ0FBRTtFQUFBO0VBQUEsQ0FBQXJCLGNBQUEsR0FBQUUsQ0FBQSxRQUFHb0IsV0FBQSxDQUFBQyxVQUFVLENBQUNDLDRCQUE0QixDQUN0RU4sUUFBQSxFQUNBRixXQUFBO0VBQUE7RUFBQWhCLGNBQUEsR0FBQUUsQ0FBQTtFQUdGLElBQUksQ0FBQ2tCLEtBQUEsRUFBTztJQUFBO0lBQUFwQixjQUFBLEdBQUFVLENBQUE7SUFBQVYsY0FBQSxHQUFBRSxDQUFBO0lBQ1YsT0FBT1MsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FDdEI7TUFDRUMsS0FBQSxFQUFPO01BQ1BPLGFBQUE7TUFDQUksUUFBQSxFQUFVQyxJQUFBLENBQUtDLElBQUksQ0FBQ0MsTUFBQSxDQUFBQyxZQUFZLENBQUNDLHFCQUFxQixHQUFHO0lBQzNELEdBQ0E7TUFBRWYsTUFBQSxFQUFRO0lBQUk7RUFFbEI7RUFBQTtFQUFBO0lBQUFmLGNBQUEsR0FBQVUsQ0FBQTtFQUFBO0VBQUFWLGNBQUEsR0FBQUUsQ0FBQTtFQUVBLE9BQU87QUFDVDtBQUVPLGVBQWVFLDJCQUEyQkMsS0FBYTtFQUFBO0VBQUFMLGNBQUEsR0FBQUMsQ0FBQTtFQUM1RCxNQUFNOEIsR0FBQTtFQUFBO0VBQUEsQ0FBQS9CLGNBQUEsR0FBQUUsQ0FBQSxRQUFNLElBQUk4QixJQUFBO0VBQUE7RUFBQWhDLGNBQUEsR0FBQUUsQ0FBQTtFQUNoQixNQUFNSyxVQUFBLENBQUFDLE9BQUksQ0FBQ3lCLGdCQUFnQixDQUN6QjtJQUFFNUI7RUFBTSxHQUNSO0lBQ0U2QixJQUFBLEVBQU07TUFBRWYsb0JBQUEsRUFBc0I7SUFBRTtJQUNoQ0YsdUJBQUEsRUFBeUJjO0VBQzNCO0FBRUo7QUFFTyxlQUFlNUIsMEJBQTBCRSxLQUFhO0VBQUE7RUFBQUwsY0FBQSxHQUFBQyxDQUFBO0VBQUFELGNBQUEsR0FBQUUsQ0FBQTtFQUMzRCxNQUFNSyxVQUFBLENBQUFDLE9BQUksQ0FBQ3lCLGdCQUFnQixDQUN6QjtJQUFFNUI7RUFBTSxHQUNSO0lBQ0VjLG9CQUFBLEVBQXNCO0lBQ3RCRix1QkFBQSxFQUF5QjtFQUMzQjtBQUVKIiwiaWdub3JlTGlzdCI6W119