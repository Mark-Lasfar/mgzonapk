0ea8c9750e984955ad976fc9e6927892
"use strict";

/* istanbul ignore next */
function cov_14dr1jseq() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/services/marketplace/amazon.ts";
  var hash = "5951a1d811ee061f3f40c30689a62dcb5f6a4e7c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/services/marketplace/amazon.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 33
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 24
        }
      },
      "6": {
        start: {
          line: 19,
          column: 13
        },
        end: {
          line: 19,
          column: 39
        }
      },
      "7": {
        start: {
          line: 20,
          column: 13
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "8": {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 38
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 32,
          column: 11
        }
      },
      "10": {
        start: {
          line: 35,
          column: 21
        },
        end: {
          line: 35,
          column: 40
        }
      },
      "11": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 31
        }
      },
      "12": {
        start: {
          line: 36,
          column: 19
        },
        end: {
          line: 36,
          column: 31
        }
      },
      "13": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "14": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 35
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 24
        }
      },
      "16": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 25
        }
      },
      "17": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 27
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 31
        }
      },
      "19": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 27
        }
      },
      "20": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 33
        }
      },
      "21": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 26
        }
      },
      "22": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 36
        }
      },
      "23": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 30
        }
      },
      "24": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 30
        }
      },
      "26": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 33
        }
      },
      "27": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "28": {
        start: {
          line: 65,
          column: 29
        },
        end: {
          line: 65,
          column: 67
        }
      },
      "29": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 72
        }
      },
      "30": {
        start: {
          line: 66,
          column: 41
        },
        end: {
          line: 66,
          column: 70
        }
      },
      "31": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 37
        }
      },
      "32": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 24
        }
      },
      "33": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 20
        }
      },
      "34": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "35": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 42
        }
      },
      "36": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 49
        }
      },
      "37": {
        start: {
          line: 81,
          column: 26
        },
        end: {
          line: 81,
          column: 57
        }
      },
      "38": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 54
        }
      },
      "39": {
        start: {
          line: 82,
          column: 38
        },
        end: {
          line: 82,
          column: 52
        }
      },
      "40": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 35
        }
      },
      "41": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 65
        }
      },
      "42": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 37
        }
      },
      "43": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 95
        }
      },
      "44": {
        start: {
          line: 100,
          column: 28
        },
        end: {
          line: 100,
          column: 74
        }
      },
      "45": {
        start: {
          line: 101,
          column: 22
        },
        end: {
          line: 101,
          column: 58
        }
      },
      "46": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 99
        }
      },
      "47": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 105
        }
      },
      "48": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 25
        }
      },
      "49": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 125,
          column: 10
        }
      },
      "50": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 30
        }
      },
      "51": {
        start: {
          line: 134,
          column: 26
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "52": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "53": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 66
        }
      },
      "54": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 27
        }
      },
      "55": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "56": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 99
        }
      },
      "57": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 23
        }
      },
      "58": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 24
        }
      },
      "59": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 29
        }
      },
      "60": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 41
        }
      },
      "61": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 52
        }
      },
      "62": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 40
        }
      },
      "63": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 118
        }
      },
      "64": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 41
        }
      },
      "65": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 41
        }
      },
      "66": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 52
        }
      },
      "67": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 50
        }
      },
      "68": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 49
        }
      },
      "69": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 44
        }
      },
      "70": {
        start: {
          line: 169,
          column: 26
        },
        end: {
          line: 169,
          column: 36
        }
      },
      "71": {
        start: {
          line: 170,
          column: 23
        },
        end: {
          line: 170,
          column: 25
        }
      },
      "72": {
        start: {
          line: 171,
          column: 25
        },
        end: {
          line: 171,
          column: 27
        }
      },
      "73": {
        start: {
          line: 172,
          column: 23
        },
        end: {
          line: 172,
          column: 25
        }
      },
      "74": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 300,
          column: 9
        }
      },
      "75": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 67
        }
      },
      "76": {
        start: {
          line: 175,
          column: 42
        },
        end: {
          line: 175,
          column: 65
        }
      },
      "77": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "78": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 66
        }
      },
      "79": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 26
        }
      },
      "80": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 182,
          column: 65
        }
      },
      "81": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 26
        }
      },
      "82": {
        start: {
          line: 185,
          column: 20
        },
        end: {
          line: 185,
          column: 65
        }
      },
      "83": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 26
        }
      },
      "84": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 188,
          column: 61
        }
      },
      "85": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "86": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 74
        }
      },
      "87": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "88": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 75
        }
      },
      "89": {
        start: {
          line: 199,
          column: 38
        },
        end: {
          line: 199,
          column: 40
        }
      },
      "90": {
        start: {
          line: 200,
          column: 31
        },
        end: {
          line: 200,
          column: 32
        }
      },
      "91": {
        start: {
          line: 201,
          column: 31
        },
        end: {
          line: 201,
          column: 32
        }
      },
      "92": {
        start: {
          line: 203,
          column: 30
        },
        end: {
          line: 203,
          column: 53
        }
      },
      "93": {
        start: {
          line: 204,
          column: 28
        },
        end: {
          line: 204,
          column: 67
        }
      },
      "94": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 249,
          column: 13
        }
      },
      "95": {
        start: {
          line: 206,
          column: 37
        },
        end: {
          line: 239,
          column: 19
        }
      },
      "96": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 238,
          column: 21
        }
      },
      "97": {
        start: {
          line: 209,
          column: 47
        },
        end: {
          line: 209,
          column: 82
        }
      },
      "98": {
        start: {
          line: 211,
          column: 24
        },
        end: {
          line: 211,
          column: 94
        }
      },
      "99": {
        start: {
          line: 213,
          column: 24
        },
        end: {
          line: 213,
          column: 104
        }
      },
      "100": {
        start: {
          line: 215,
          column: 24
        },
        end: {
          line: 217,
          column: 25
        }
      },
      "101": {
        start: {
          line: 216,
          column: 28
        },
        end: {
          line: 216,
          column: 101
        }
      },
      "102": {
        start: {
          line: 219,
          column: 48
        },
        end: {
          line: 219,
          column: 92
        }
      },
      "103": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 228,
          column: 25
        }
      },
      "104": {
        start: {
          line: 221,
          column: 44
        },
        end: {
          line: 221,
          column: 110
        }
      },
      "105": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 222,
          column: 43
        }
      },
      "106": {
        start: {
          line: 223,
          column: 28
        },
        end: {
          line: 223,
          column: 43
        }
      },
      "107": {
        start: {
          line: 225,
          column: 44
        },
        end: {
          line: 225,
          column: 90
        }
      },
      "108": {
        start: {
          line: 226,
          column: 28
        },
        end: {
          line: 226,
          column: 60
        }
      },
      "109": {
        start: {
          line: 227,
          column: 28
        },
        end: {
          line: 227,
          column: 43
        }
      },
      "110": {
        start: {
          line: 230,
          column: 24
        },
        end: {
          line: 235,
          column: 27
        }
      },
      "111": {
        start: {
          line: 236,
          column: 24
        },
        end: {
          line: 236,
          column: 39
        }
      },
      "112": {
        start: {
          line: 237,
          column: 24
        },
        end: {
          line: 237,
          column: 36
        }
      },
      "113": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 248,
          column: 19
        }
      },
      "114": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 247,
          column: 21
        }
      },
      "115": {
        start: {
          line: 242,
          column: 24
        },
        end: {
          line: 246,
          column: 27
        }
      },
      "116": {
        start: {
          line: 250,
          column: 32
        },
        end: {
          line: 250,
          column: 54
        }
      },
      "117": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 51
        }
      },
      "118": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 94
        }
      },
      "119": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 258,
          column: 15
        }
      },
      "120": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 275,
          column: 14
        }
      },
      "121": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 65
        }
      },
      "122": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 51
        }
      },
      "123": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 281,
          column: 15
        }
      },
      "124": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 299,
          column: 14
        }
      },
      "125": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 50
        }
      },
      "126": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 49
        }
      },
      "127": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 44
        }
      },
      "128": {
        start: {
          line: 307,
          column: 26
        },
        end: {
          line: 307,
          column: 36
        }
      },
      "129": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "130": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "131": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 74
        }
      },
      "132": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 316,
          column: 13
        }
      },
      "133": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 315,
          column: 98
        }
      },
      "134": {
        start: {
          line: 315,
          column: 63
        },
        end: {
          line: 315,
          column: 95
        }
      },
      "135": {
        start: {
          line: 318,
          column: 27
        },
        end: {
          line: 318,
          column: 56
        }
      },
      "136": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "137": {
        start: {
          line: 322,
          column: 20
        },
        end: {
          line: 322,
          column: 76
        }
      },
      "138": {
        start: {
          line: 323,
          column: 20
        },
        end: {
          line: 323,
          column: 26
        }
      },
      "139": {
        start: {
          line: 325,
          column: 20
        },
        end: {
          line: 325,
          column: 77
        }
      },
      "140": {
        start: {
          line: 326,
          column: 20
        },
        end: {
          line: 326,
          column: 26
        }
      },
      "141": {
        start: {
          line: 328,
          column: 20
        },
        end: {
          line: 328,
          column: 76
        }
      },
      "142": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 329,
          column: 26
        }
      },
      "143": {
        start: {
          line: 331,
          column: 20
        },
        end: {
          line: 331,
          column: 84
        }
      },
      "144": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 337,
          column: 13
        }
      },
      "145": {
        start: {
          line: 336,
          column: 16
        },
        end: {
          line: 336,
          column: 111
        }
      },
      "146": {
        start: {
          line: 336,
          column: 60
        },
        end: {
          line: 336,
          column: 109
        }
      },
      "147": {
        start: {
          line: 338,
          column: 32
        },
        end: {
          line: 338,
          column: 54
        }
      },
      "148": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 51
        }
      },
      "149": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 79
        }
      },
      "150": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 346,
          column: 15
        }
      },
      "151": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 360,
          column: 14
        }
      },
      "152": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 65
        }
      },
      "153": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 51
        }
      },
      "154": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 366,
          column: 15
        }
      },
      "155": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 378,
          column: 14
        }
      },
      "156": {
        start: {
          line: 383,
          column: 26
        },
        end: {
          line: 383,
          column: 36
        }
      },
      "157": {
        start: {
          line: 385,
          column: 30
        },
        end: {
          line: 385,
          column: 59
        }
      },
      "158": {
        start: {
          line: 387,
          column: 31
        },
        end: {
          line: 387,
          column: 59
        }
      },
      "159": {
        start: {
          line: 388,
          column: 24
        },
        end: {
          line: 388,
          column: 26
        }
      },
      "160": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "161": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 53
        }
      },
      "162": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 70
        }
      },
      "163": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "164": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 78
        }
      },
      "165": {
        start: {
          line: 400,
          column: 26
        },
        end: {
          line: 400,
          column: 27
        }
      },
      "166": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 403,
          column: 9
        }
      },
      "167": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 66
        }
      },
      "168": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "169": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 69
        }
      },
      "170": {
        start: {
          line: 407,
          column: 28
        },
        end: {
          line: 407,
          column: 50
        }
      },
      "171": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 419,
          column: 10
        }
      },
      "172": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 424,
          column: 18
        }
      },
      "173": {
        start: {
          line: 428,
          column: 31
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "174": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 63
        }
      },
      "175": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 18
        }
      },
      "176": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 451,
          column: 11
        }
      },
      "177": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 449,
          column: 45
        }
      },
      "178": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 37
        }
      },
      "179": {
        start: {
          line: 455,
          column: 20
        },
        end: {
          line: 455,
          column: 21
        }
      },
      "180": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 463,
          column: 9
        }
      },
      "181": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 462,
          column: 13
        }
      },
      "182": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 458,
          column: 54
        }
      },
      "183": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 24
        }
      },
      "184": {
        start: {
          line: 461,
          column: 16
        },
        end: {
          line: 461,
          column: 92
        }
      },
      "185": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 464,
          column: 21
        }
      },
      "186": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 469,
          column: 37
        }
      },
      "187": {
        start: {
          line: 473,
          column: 34
        },
        end: {
          line: 473,
          column: 36
        }
      },
      "188": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 494,
          column: 9
        }
      },
      "189": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 493,
          column: 13
        }
      },
      "190": {
        start: {
          line: 476,
          column: 16
        },
        end: {
          line: 478,
          column: 17
        }
      },
      "191": {
        start: {
          line: 477,
          column: 20
        },
        end: {
          line: 477,
          column: 81
        }
      },
      "192": {
        start: {
          line: 479,
          column: 40
        },
        end: {
          line: 479,
          column: 84
        }
      },
      "193": {
        start: {
          line: 480,
          column: 16
        },
        end: {
          line: 482,
          column: 17
        }
      },
      "194": {
        start: {
          line: 481,
          column: 20
        },
        end: {
          line: 481,
          column: 75
        }
      },
      "195": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 489,
          column: 17
        }
      },
      "196": {
        start: {
          line: 484,
          column: 44
        },
        end: {
          line: 487,
          column: 22
        }
      },
      "197": {
        start: {
          line: 488,
          column: 20
        },
        end: {
          line: 488,
          column: 53
        }
      },
      "198": {
        start: {
          line: 490,
          column: 16
        },
        end: {
          line: 490,
          column: 48
        }
      },
      "199": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 492,
          column: 85
        }
      },
      "200": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 495,
          column: 33
        }
      },
      "201": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 501,
          column: 9
        }
      },
      "202": {
        start: {
          line: 500,
          column: 12
        },
        end: {
          line: 500,
          column: 64
        }
      },
      "203": {
        start: {
          line: 502,
          column: 24
        },
        end: {
          line: 502,
          column: 49
        }
      },
      "204": {
        start: {
          line: 503,
          column: 23
        },
        end: {
          line: 503,
          column: 90
        }
      },
      "205": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 513,
          column: 9
        }
      },
      "206": {
        start: {
          line: 506,
          column: 16
        },
        end: {
          line: 506,
          column: 51
        }
      },
      "207": {
        start: {
          line: 508,
          column: 16
        },
        end: {
          line: 508,
          column: 43
        }
      },
      "208": {
        start: {
          line: 510,
          column: 16
        },
        end: {
          line: 510,
          column: 51
        }
      },
      "209": {
        start: {
          line: 512,
          column: 16
        },
        end: {
          line: 512,
          column: 70
        }
      },
      "210": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 519,
          column: 9
        }
      },
      "211": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 518,
          column: 62
        }
      },
      "212": {
        start: {
          line: 520,
          column: 25
        },
        end: {
          line: 520,
          column: 74
        }
      },
      "213": {
        start: {
          line: 520,
          column: 55
        },
        end: {
          line: 520,
          column: 73
        }
      },
      "214": {
        start: {
          line: 521,
          column: 24
        },
        end: {
          line: 521,
          column: 45
        }
      },
      "215": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 531,
          column: 9
        }
      },
      "216": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 524,
          column: 51
        }
      },
      "217": {
        start: {
          line: 526,
          column: 16
        },
        end: {
          line: 526,
          column: 43
        }
      },
      "218": {
        start: {
          line: 528,
          column: 16
        },
        end: {
          line: 528,
          column: 51
        }
      },
      "219": {
        start: {
          line: 530,
          column: 16
        },
        end: {
          line: 530,
          column: 73
        }
      },
      "220": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 535,
          column: 53
        }
      },
      "221": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 539,
          column: 38
        }
      },
      "222": {
        start: {
          line: 539,
          column: 22
        },
        end: {
          line: 539,
          column: 38
        }
      },
      "223": {
        start: {
          line: 540,
          column: 8
        },
        end: {
          line: 562,
          column: 11
        }
      },
      "224": {
        start: {
          line: 541,
          column: 12
        },
        end: {
          line: 543,
          column: 13
        }
      },
      "225": {
        start: {
          line: 541,
          column: 76
        },
        end: {
          line: 541,
          column: 106
        }
      },
      "226": {
        start: {
          line: 542,
          column: 16
        },
        end: {
          line: 542,
          column: 29
        }
      },
      "227": {
        start: {
          line: 544,
          column: 12
        },
        end: {
          line: 548,
          column: 13
        }
      },
      "228": {
        start: {
          line: 545,
          column: 37
        },
        end: {
          line: 545,
          column: 55
        }
      },
      "229": {
        start: {
          line: 546,
          column: 16
        },
        end: {
          line: 546,
          column: 61
        }
      },
      "230": {
        start: {
          line: 546,
          column: 48
        },
        end: {
          line: 546,
          column: 61
        }
      },
      "231": {
        start: {
          line: 547,
          column: 16
        },
        end: {
          line: 547,
          column: 61
        }
      },
      "232": {
        start: {
          line: 547,
          column: 48
        },
        end: {
          line: 547,
          column: 61
        }
      },
      "233": {
        start: {
          line: 549,
          column: 12
        },
        end: {
          line: 551,
          column: 13
        }
      },
      "234": {
        start: {
          line: 550,
          column: 16
        },
        end: {
          line: 550,
          column: 29
        }
      },
      "235": {
        start: {
          line: 552,
          column: 12
        },
        end: {
          line: 560,
          column: 13
        }
      },
      "236": {
        start: {
          line: 553,
          column: 36
        },
        end: {
          line: 553,
          column: 84
        }
      },
      "237": {
        start: {
          line: 554,
          column: 16
        },
        end: {
          line: 556,
          column: 17
        }
      },
      "238": {
        start: {
          line: 555,
          column: 20
        },
        end: {
          line: 555,
          column: 33
        }
      },
      "239": {
        start: {
          line: 557,
          column: 16
        },
        end: {
          line: 559,
          column: 17
        }
      },
      "240": {
        start: {
          line: 558,
          column: 20
        },
        end: {
          line: 558,
          column: 33
        }
      },
      "241": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 561,
          column: 24
        }
      },
      "242": {
        start: {
          line: 566,
          column: 23
        },
        end: {
          line: 566,
          column: 25
        }
      },
      "243": {
        start: {
          line: 567,
          column: 8
        },
        end: {
          line: 567,
          column: 69
        }
      },
      "244": {
        start: {
          line: 567,
          column: 36
        },
        end: {
          line: 567,
          column: 69
        }
      },
      "245": {
        start: {
          line: 568,
          column: 8
        },
        end: {
          line: 568,
          column: 65
        }
      },
      "246": {
        start: {
          line: 568,
          column: 34
        },
        end: {
          line: 568,
          column: 65
        }
      },
      "247": {
        start: {
          line: 569,
          column: 8
        },
        end: {
          line: 571,
          column: 9
        }
      },
      "248": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 570,
          column: 59
        }
      },
      "249": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 71
        }
      },
      "250": {
        start: {
          line: 572,
          column: 37
        },
        end: {
          line: 572,
          column: 71
        }
      },
      "251": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 579,
          column: 9
        }
      },
      "252": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 574,
          column: 58
        }
      },
      "253": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 578,
          column: 15
        }
      },
      "254": {
        start: {
          line: 577,
          column: 16
        },
        end: {
          line: 577,
          column: 82
        }
      },
      "255": {
        start: {
          line: 577,
          column: 32
        },
        end: {
          line: 577,
          column: 82
        }
      },
      "256": {
        start: {
          line: 580,
          column: 8
        },
        end: {
          line: 591,
          column: 9
        }
      },
      "257": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 590,
          column: 15
        }
      },
      "258": {
        start: {
          line: 582,
          column: 16
        },
        end: {
          line: 582,
          column: 86
        }
      },
      "259": {
        start: {
          line: 582,
          column: 34
        },
        end: {
          line: 582,
          column: 86
        }
      },
      "260": {
        start: {
          line: 583,
          column: 16
        },
        end: {
          line: 583,
          column: 90
        }
      },
      "261": {
        start: {
          line: 583,
          column: 36
        },
        end: {
          line: 583,
          column: 90
        }
      },
      "262": {
        start: {
          line: 584,
          column: 16
        },
        end: {
          line: 586,
          column: 17
        }
      },
      "263": {
        start: {
          line: 585,
          column: 20
        },
        end: {
          line: 585,
          column: 88
        }
      },
      "264": {
        start: {
          line: 587,
          column: 16
        },
        end: {
          line: 589,
          column: 17
        }
      },
      "265": {
        start: {
          line: 588,
          column: 20
        },
        end: {
          line: 588,
          column: 86
        }
      },
      "266": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 599,
          column: 9
        }
      },
      "267": {
        start: {
          line: 593,
          column: 12
        },
        end: {
          line: 598,
          column: 15
        }
      },
      "268": {
        start: {
          line: 594,
          column: 16
        },
        end: {
          line: 594,
          column: 86
        }
      },
      "269": {
        start: {
          line: 594,
          column: 34
        },
        end: {
          line: 594,
          column: 86
        }
      },
      "270": {
        start: {
          line: 595,
          column: 16
        },
        end: {
          line: 597,
          column: 17
        }
      },
      "271": {
        start: {
          line: 596,
          column: 20
        },
        end: {
          line: 596,
          column: 84
        }
      },
      "272": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 600,
          column: 81
        }
      },
      "273": {
        start: {
          line: 600,
          column: 42
        },
        end: {
          line: 600,
          column: 81
        }
      },
      "274": {
        start: {
          line: 601,
          column: 8
        },
        end: {
          line: 603,
          column: 9
        }
      },
      "275": {
        start: {
          line: 602,
          column: 12
        },
        end: {
          line: 602,
          column: 61
        }
      },
      "276": {
        start: {
          line: 604,
          column: 8
        },
        end: {
          line: 606,
          column: 9
        }
      },
      "277": {
        start: {
          line: 605,
          column: 12
        },
        end: {
          line: 605,
          column: 71
        }
      },
      "278": {
        start: {
          line: 607,
          column: 8
        },
        end: {
          line: 607,
          column: 23
        }
      },
      "279": {
        start: {
          line: 611,
          column: 28
        },
        end: {
          line: 611,
          column: 30
        }
      },
      "280": {
        start: {
          line: 612,
          column: 8
        },
        end: {
          line: 625,
          column: 9
        }
      },
      "281": {
        start: {
          line: 613,
          column: 37
        },
        end: {
          line: 615,
          column: 13
        }
      },
      "282": {
        start: {
          line: 616,
          column: 12
        },
        end: {
          line: 620,
          column: 13
        }
      },
      "283": {
        start: {
          line: 617,
          column: 16
        },
        end: {
          line: 619,
          column: 19
        }
      },
      "284": {
        start: {
          line: 618,
          column: 20
        },
        end: {
          line: 618,
          column: 59
        }
      },
      "285": {
        start: {
          line: 621,
          column: 12
        },
        end: {
          line: 623,
          column: 13
        }
      },
      "286": {
        start: {
          line: 622,
          column: 16
        },
        end: {
          line: 622,
          column: 81
        }
      },
      "287": {
        start: {
          line: 624,
          column: 12
        },
        end: {
          line: 624,
          column: 49
        }
      },
      "288": {
        start: {
          line: 626,
          column: 8
        },
        end: {
          line: 626,
          column: 27
        }
      },
      "289": {
        start: {
          line: 630,
          column: 26
        },
        end: {
          line: 650,
          column: 9
        }
      },
      "290": {
        start: {
          line: 651,
          column: 8
        },
        end: {
          line: 653,
          column: 9
        }
      },
      "291": {
        start: {
          line: 652,
          column: 12
        },
        end: {
          line: 652,
          column: 41
        }
      },
      "292": {
        start: {
          line: 654,
          column: 8
        },
        end: {
          line: 656,
          column: 9
        }
      },
      "293": {
        start: {
          line: 655,
          column: 12
        },
        end: {
          line: 655,
          column: 85
        }
      },
      "294": {
        start: {
          line: 655,
          column: 45
        },
        end: {
          line: 655,
          column: 83
        }
      },
      "295": {
        start: {
          line: 657,
          column: 8
        },
        end: {
          line: 657,
          column: 25
        }
      },
      "296": {
        start: {
          line: 661,
          column: 24
        },
        end: {
          line: 661,
          column: 26
        }
      },
      "297": {
        start: {
          line: 662,
          column: 8
        },
        end: {
          line: 664,
          column: 9
        }
      },
      "298": {
        start: {
          line: 662,
          column: 20
        },
        end: {
          line: 662,
          column: 21
        }
      },
      "299": {
        start: {
          line: 663,
          column: 12
        },
        end: {
          line: 663,
          column: 56
        }
      },
      "300": {
        start: {
          line: 665,
          column: 8
        },
        end: {
          line: 665,
          column: 23
        }
      },
      "301": {
        start: {
          line: 669,
          column: 8
        },
        end: {
          line: 677,
          column: 9
        }
      },
      "302": {
        start: {
          line: 670,
          column: 12
        },
        end: {
          line: 670,
          column: 37
        }
      },
      "303": {
        start: {
          line: 672,
          column: 12
        },
        end: {
          line: 675,
          column: 13
        }
      },
      "304": {
        start: {
          line: 673,
          column: 16
        },
        end: {
          line: 673,
          column: 73
        }
      },
      "305": {
        start: {
          line: 673,
          column: 45
        },
        end: {
          line: 673,
          column: 71
        }
      },
      "306": {
        start: {
          line: 674,
          column: 16
        },
        end: {
          line: 674,
          column: 78
        }
      },
      "307": {
        start: {
          line: 676,
          column: 12
        },
        end: {
          line: 676,
          column: 24
        }
      },
      "308": {
        start: {
          line: 681,
          column: 8
        },
        end: {
          line: 681,
          column: 53
        }
      },
      "309": {
        start: {
          line: 684,
          column: 33
        },
        end: {
          line: 688,
          column: 10
        }
      },
      "310": {
        start: {
          line: 685,
          column: 29
        },
        end: {
          line: 685,
          column: 31
        }
      },
      "311": {
        start: {
          line: 686,
          column: 12
        },
        end: {
          line: 686,
          column: 70
        }
      },
      "312": {
        start: {
          line: 686,
          column: 36
        },
        end: {
          line: 686,
          column: 68
        }
      },
      "313": {
        start: {
          line: 687,
          column: 12
        },
        end: {
          line: 687,
          column: 28
        }
      },
      "314": {
        start: {
          line: 689,
          column: 8
        },
        end: {
          line: 689,
          column: 57
        }
      },
      "315": {
        start: {
          line: 692,
          column: 8
        },
        end: {
          line: 692,
          column: 55
        }
      },
      "316": {
        start: {
          line: 698,
          column: 8
        },
        end: {
          line: 698,
          column: 29
        }
      },
      "317": {
        start: {
          line: 701,
          column: 25
        },
        end: {
          line: 712,
          column: 10
        }
      },
      "318": {
        start: {
          line: 713,
          column: 8
        },
        end: {
          line: 715,
          column: 9
        }
      },
      "319": {
        start: {
          line: 714,
          column: 12
        },
        end: {
          line: 714,
          column: 77
        }
      },
      "320": {
        start: {
          line: 716,
          column: 21
        },
        end: {
          line: 716,
          column: 42
        }
      },
      "321": {
        start: {
          line: 717,
          column: 8
        },
        end: {
          line: 717,
          column: 45
        }
      },
      "322": {
        start: {
          line: 720,
          column: 25
        },
        end: {
          line: 723,
          column: 10
        }
      },
      "323": {
        start: {
          line: 724,
          column: 8
        },
        end: {
          line: 724,
          column: 33
        }
      },
      "324": {
        start: {
          line: 727,
          column: 25
        },
        end: {
          line: 732,
          column: 10
        }
      },
      "325": {
        start: {
          line: 733,
          column: 8
        },
        end: {
          line: 733,
          column: 40
        }
      },
      "326": {
        start: {
          line: 736,
          column: 25
        },
        end: {
          line: 739,
          column: 10
        }
      },
      "327": {
        start: {
          line: 740,
          column: 8
        },
        end: {
          line: 740,
          column: 32
        }
      },
      "328": {
        start: {
          line: 743,
          column: 25
        },
        end: {
          line: 746,
          column: 10
        }
      },
      "329": {
        start: {
          line: 747,
          column: 8
        },
        end: {
          line: 747,
          column: 32
        }
      },
      "330": {
        start: {
          line: 750,
          column: 25
        },
        end: {
          line: 756,
          column: 10
        }
      },
      "331": {
        start: {
          line: 757,
          column: 8
        },
        end: {
          line: 757,
          column: 28
        }
      },
      "332": {
        start: {
          line: 760,
          column: 25
        },
        end: {
          line: 760,
          column: 39
        }
      },
      "333": {
        start: {
          line: 761,
          column: 8
        },
        end: {
          line: 767,
          column: 9
        }
      },
      "334": {
        start: {
          line: 762,
          column: 29
        },
        end: {
          line: 762,
          column: 47
        }
      },
      "335": {
        start: {
          line: 763,
          column: 25
        },
        end: {
          line: 763,
          column: 46
        }
      },
      "336": {
        start: {
          line: 764,
          column: 12
        },
        end: {
          line: 764,
          column: 43
        }
      },
      "337": {
        start: {
          line: 766,
          column: 12
        },
        end: {
          line: 766,
          column: 44
        }
      },
      "338": {
        start: {
          line: 768,
          column: 25
        },
        end: {
          line: 774,
          column: 10
        }
      },
      "339": {
        start: {
          line: 775,
          column: 8
        },
        end: {
          line: 777,
          column: 9
        }
      },
      "340": {
        start: {
          line: 776,
          column: 12
        },
        end: {
          line: 776,
          column: 86
        }
      },
      "341": {
        start: {
          line: 778,
          column: 21
        },
        end: {
          line: 778,
          column: 42
        }
      },
      "342": {
        start: {
          line: 779,
          column: 8
        },
        end: {
          line: 779,
          column: 24
        }
      },
      "343": {
        start: {
          line: 782,
          column: 32
        },
        end: {
          line: 782,
          column: 34
        }
      },
      "344": {
        start: {
          line: 783,
          column: 8
        },
        end: {
          line: 793,
          column: 9
        }
      },
      "345": {
        start: {
          line: 784,
          column: 12
        },
        end: {
          line: 792,
          column: 13
        }
      },
      "346": {
        start: {
          line: 785,
          column: 36
        },
        end: {
          line: 785,
          column: 69
        }
      },
      "347": {
        start: {
          line: 786,
          column: 16
        },
        end: {
          line: 789,
          column: 19
        }
      },
      "348": {
        start: {
          line: 791,
          column: 16
        },
        end: {
          line: 791,
          column: 83
        }
      },
      "349": {
        start: {
          line: 794,
          column: 8
        },
        end: {
          line: 794,
          column: 31
        }
      },
      "350": {
        start: {
          line: 798,
          column: 8
        },
        end: {
          line: 800,
          column: 9
        }
      },
      "351": {
        start: {
          line: 799,
          column: 12
        },
        end: {
          line: 799,
          column: 38
        }
      },
      "352": {
        start: {
          line: 801,
          column: 20
        },
        end: {
          line: 801,
          column: 58
        }
      },
      "353": {
        start: {
          line: 802,
          column: 8
        },
        end: {
          line: 806,
          column: 9
        }
      },
      "354": {
        start: {
          line: 803,
          column: 12
        },
        end: {
          line: 805,
          column: 15
        }
      },
      "355": {
        start: {
          line: 804,
          column: 16
        },
        end: {
          line: 804,
          column: 60
        }
      },
      "356": {
        start: {
          line: 807,
          column: 25
        },
        end: {
          line: 814,
          column: 10
        }
      },
      "357": {
        start: {
          line: 815,
          column: 8
        },
        end: {
          line: 821,
          column: 9
        }
      },
      "358": {
        start: {
          line: 816,
          column: 12
        },
        end: {
          line: 819,
          column: 13
        }
      },
      "359": {
        start: {
          line: 817,
          column: 16
        },
        end: {
          line: 817,
          column: 42
        }
      },
      "360": {
        start: {
          line: 818,
          column: 16
        },
        end: {
          line: 818,
          column: 55
        }
      },
      "361": {
        start: {
          line: 820,
          column: 12
        },
        end: {
          line: 820,
          column: 71
        }
      },
      "362": {
        start: {
          line: 822,
          column: 8
        },
        end: {
          line: 822,
          column: 31
        }
      },
      "363": {
        start: {
          line: 828,
          column: 8
        },
        end: {
          line: 830,
          column: 9
        }
      },
      "364": {
        start: {
          line: 829,
          column: 12
        },
        end: {
          line: 829,
          column: 44
        }
      },
      "365": {
        start: {
          line: 831,
          column: 8
        },
        end: {
          line: 831,
          column: 53
        }
      },
      "366": {
        start: {
          line: 834,
          column: 22
        },
        end: {
          line: 834,
          column: 49
        }
      },
      "367": {
        start: {
          line: 835,
          column: 8
        },
        end: {
          line: 835,
          column: 51
        }
      },
      "368": {
        start: {
          line: 835,
          column: 42
        },
        end: {
          line: 835,
          column: 51
        }
      },
      "369": {
        start: {
          line: 836,
          column: 26
        },
        end: {
          line: 836,
          column: 37
        }
      },
      "370": {
        start: {
          line: 837,
          column: 25
        },
        end: {
          line: 837,
          column: 47
        }
      },
      "371": {
        start: {
          line: 838,
          column: 8
        },
        end: {
          line: 838,
          column: 74
        }
      },
      "372": {
        start: {
          line: 839,
          column: 8
        },
        end: {
          line: 839,
          column: 24
        }
      },
      "373": {
        start: {
          line: 842,
          column: 22
        },
        end: {
          line: 842,
          column: 24
        }
      },
      "374": {
        start: {
          line: 843,
          column: 8
        },
        end: {
          line: 849,
          column: 11
        }
      },
      "375": {
        start: {
          line: 844,
          column: 26
        },
        end: {
          line: 844,
          column: 66
        }
      },
      "376": {
        start: {
          line: 844,
          column: 52
        },
        end: {
          line: 844,
          column: 62
        }
      },
      "377": {
        start: {
          line: 845,
          column: 12
        },
        end: {
          line: 848,
          column: 14
        }
      },
      "378": {
        start: {
          line: 850,
          column: 8
        },
        end: {
          line: 850,
          column: 21
        }
      },
      "379": {
        start: {
          line: 853,
          column: 8
        },
        end: {
          line: 853,
          column: 33
        }
      },
      "380": {
        start: {
          line: 856,
          column: 17
        },
        end: {
          line: 856,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 12,
            column: 24
          }
        },
        loc: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 13
          },
          end: {
            line: 15,
            column: 14
          }
        },
        loc: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 34
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 13
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 34
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 17
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 46
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 46
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 52
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 23
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 58
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 66,
            column: 30
          },
          end: {
            line: 66,
            column: 31
          }
        },
        loc: {
          start: {
            line: 66,
            column: 41
          },
          end: {
            line: 66,
            column: 70
          }
        },
        line: 66
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 24
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 74
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 22
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 80
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 82,
            column: 26
          },
          end: {
            line: 82,
            column: 27
          }
        },
        loc: {
          start: {
            line: 82,
            column: 38
          },
          end: {
            line: 82,
            column: 52
          }
        },
        line: 82
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 17
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 84
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 39
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 90
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 49
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 97
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 21
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 105
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 17
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 108
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 18
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 130
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 29
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 133
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 35
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 142
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 17
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 149
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        loc: {
          start: {
            line: 154,
            column: 23
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 154
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 34
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 165
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 175,
            column: 38
          },
          end: {
            line: 175,
            column: 39
          }
        },
        loc: {
          start: {
            line: 175,
            column: 42
          },
          end: {
            line: 175,
            column: 65
          }
        },
        line: 175
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 206,
            column: 72
          },
          end: {
            line: 206,
            column: 73
          }
        },
        loc: {
          start: {
            line: 206,
            column: 89
          },
          end: {
            line: 239,
            column: 17
          }
        },
        line: 206
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 240,
            column: 37
          },
          end: {
            line: 240,
            column: 38
          }
        },
        loc: {
          start: {
            line: 240,
            column: 54
          },
          end: {
            line: 248,
            column: 17
          }
        },
        line: 240
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 44
          },
          end: {
            line: 380,
            column: 5
          }
        },
        line: 303
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 315,
            column: 58
          },
          end: {
            line: 315,
            column: 59
          }
        },
        loc: {
          start: {
            line: 315,
            column: 63
          },
          end: {
            line: 315,
            column: 95
          }
        },
        line: 315
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 336,
            column: 56
          },
          end: {
            line: 336,
            column: 57
          }
        },
        loc: {
          start: {
            line: 336,
            column: 60
          },
          end: {
            line: 336,
            column: 109
          }
        },
        line: 336
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 32
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 382
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 422,
            column: 4
          },
          end: {
            line: 422,
            column: 5
          }
        },
        loc: {
          start: {
            line: 422,
            column: 29
          },
          end: {
            line: 425,
            column: 5
          }
        },
        line: 422
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 427,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        },
        loc: {
          start: {
            line: 427,
            column: 35
          },
          end: {
            line: 439,
            column: 5
          }
        },
        line: 427
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 441,
            column: 4
          },
          end: {
            line: 441,
            column: 5
          }
        },
        loc: {
          start: {
            line: 441,
            column: 33
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 441
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 446,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        },
        loc: {
          start: {
            line: 446,
            column: 49
          },
          end: {
            line: 452,
            column: 5
          }
        },
        line: 446
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 448,
            column: 26
          },
          end: {
            line: 448,
            column: 27
          }
        },
        loc: {
          start: {
            line: 448,
            column: 38
          },
          end: {
            line: 451,
            column: 9
          }
        },
        line: 448
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 454,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        loc: {
          start: {
            line: 454,
            column: 33
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 454
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 467,
            column: 5
          }
        },
        loc: {
          start: {
            line: 467,
            column: 41
          },
          end: {
            line: 470,
            column: 5
          }
        },
        line: 467
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        },
        loc: {
          start: {
            line: 472,
            column: 35
          },
          end: {
            line: 496,
            column: 5
          }
        },
        line: 472
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 498,
            column: 5
          }
        },
        loc: {
          start: {
            line: 498,
            column: 34
          },
          end: {
            line: 514,
            column: 5
          }
        },
        line: 498
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 516,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        },
        loc: {
          start: {
            line: 516,
            column: 33
          },
          end: {
            line: 532,
            column: 5
          }
        },
        line: 516
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 520,
            column: 51
          },
          end: {
            line: 520,
            column: 52
          }
        },
        loc: {
          start: {
            line: 520,
            column: 55
          },
          end: {
            line: 520,
            column: 73
          }
        },
        line: 520
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 534,
            column: 4
          },
          end: {
            line: 534,
            column: 5
          }
        },
        loc: {
          start: {
            line: 534,
            column: 33
          },
          end: {
            line: 536,
            column: 5
          }
        },
        line: 534
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 538,
            column: 4
          },
          end: {
            line: 538,
            column: 5
          }
        },
        loc: {
          start: {
            line: 538,
            column: 38
          },
          end: {
            line: 563,
            column: 5
          }
        },
        line: 538
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 540,
            column: 31
          },
          end: {
            line: 540,
            column: 32
          }
        },
        loc: {
          start: {
            line: 540,
            column: 42
          },
          end: {
            line: 562,
            column: 9
          }
        },
        line: 540
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 541,
            column: 71
          },
          end: {
            line: 541,
            column: 72
          }
        },
        loc: {
          start: {
            line: 541,
            column: 76
          },
          end: {
            line: 541,
            column: 106
          }
        },
        line: 541
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 565,
            column: 4
          },
          end: {
            line: 565,
            column: 5
          }
        },
        loc: {
          start: {
            line: 565,
            column: 35
          },
          end: {
            line: 608,
            column: 5
          }
        },
        line: 565
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 576,
            column: 35
          },
          end: {
            line: 576,
            column: 36
          }
        },
        loc: {
          start: {
            line: 576,
            column: 51
          },
          end: {
            line: 578,
            column: 13
          }
        },
        line: 576
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 581,
            column: 37
          },
          end: {
            line: 581,
            column: 38
          }
        },
        loc: {
          start: {
            line: 581,
            column: 55
          },
          end: {
            line: 590,
            column: 13
          }
        },
        line: 581
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 593,
            column: 36
          },
          end: {
            line: 593,
            column: 37
          }
        },
        loc: {
          start: {
            line: 593,
            column: 53
          },
          end: {
            line: 598,
            column: 13
          }
        },
        line: 593
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 610,
            column: 4
          },
          end: {
            line: 610,
            column: 5
          }
        },
        loc: {
          start: {
            line: 610,
            column: 47
          },
          end: {
            line: 627,
            column: 5
          }
        },
        line: 610
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 617,
            column: 56
          },
          end: {
            line: 617,
            column: 57
          }
        },
        loc: {
          start: {
            line: 617,
            column: 70
          },
          end: {
            line: 619,
            column: 17
          }
        },
        line: 617
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 629,
            column: 4
          },
          end: {
            line: 629,
            column: 5
          }
        },
        loc: {
          start: {
            line: 629,
            column: 29
          },
          end: {
            line: 658,
            column: 5
          }
        },
        line: 629
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 655,
            column: 36
          },
          end: {
            line: 655,
            column: 37
          }
        },
        loc: {
          start: {
            line: 655,
            column: 45
          },
          end: {
            line: 655,
            column: 83
          }
        },
        line: 655
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 660,
            column: 4
          },
          end: {
            line: 660,
            column: 5
          }
        },
        loc: {
          start: {
            line: 660,
            column: 36
          },
          end: {
            line: 666,
            column: 5
          }
        },
        line: 660
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 668,
            column: 4
          },
          end: {
            line: 668,
            column: 5
          }
        },
        loc: {
          start: {
            line: 668,
            column: 145
          },
          end: {
            line: 678,
            column: 5
          }
        },
        line: 668
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 673,
            column: 34
          },
          end: {
            line: 673,
            column: 35
          }
        },
        loc: {
          start: {
            line: 673,
            column: 45
          },
          end: {
            line: 673,
            column: 71
          }
        },
        line: 673
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 680,
            column: 4
          },
          end: {
            line: 680,
            column: 5
          }
        },
        loc: {
          start: {
            line: 680,
            column: 40
          },
          end: {
            line: 682,
            column: 5
          }
        },
        line: 680
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 683,
            column: 4
          },
          end: {
            line: 683,
            column: 5
          }
        },
        loc: {
          start: {
            line: 683,
            column: 41
          },
          end: {
            line: 690,
            column: 5
          }
        },
        line: 683
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 684,
            column: 46
          },
          end: {
            line: 684,
            column: 47
          }
        },
        loc: {
          start: {
            line: 684,
            column: 57
          },
          end: {
            line: 688,
            column: 9
          }
        },
        line: 684
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 686,
            column: 27
          },
          end: {
            line: 686,
            column: 28
          }
        },
        loc: {
          start: {
            line: 686,
            column: 36
          },
          end: {
            line: 686,
            column: 68
          }
        },
        line: 686
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 691,
            column: 4
          },
          end: {
            line: 691,
            column: 5
          }
        },
        loc: {
          start: {
            line: 691,
            column: 40
          },
          end: {
            line: 693,
            column: 5
          }
        },
        line: 691
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 697,
            column: 4
          },
          end: {
            line: 697,
            column: 5
          }
        },
        loc: {
          start: {
            line: 697,
            column: 23
          },
          end: {
            line: 699,
            column: 5
          }
        },
        line: 697
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 700,
            column: 4
          },
          end: {
            line: 700,
            column: 5
          }
        },
        loc: {
          start: {
            line: 700,
            column: 25
          },
          end: {
            line: 718,
            column: 5
          }
        },
        line: 700
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 719,
            column: 4
          },
          end: {
            line: 719,
            column: 5
          }
        },
        loc: {
          start: {
            line: 719,
            column: 31
          },
          end: {
            line: 725,
            column: 5
          }
        },
        line: 719
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 726,
            column: 4
          },
          end: {
            line: 726,
            column: 5
          }
        },
        loc: {
          start: {
            line: 726,
            column: 32
          },
          end: {
            line: 734,
            column: 5
          }
        },
        line: 726
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 735,
            column: 4
          },
          end: {
            line: 735,
            column: 5
          }
        },
        loc: {
          start: {
            line: 735,
            column: 33
          },
          end: {
            line: 741,
            column: 5
          }
        },
        line: 735
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 742,
            column: 4
          },
          end: {
            line: 742,
            column: 5
          }
        },
        loc: {
          start: {
            line: 742,
            column: 37
          },
          end: {
            line: 748,
            column: 5
          }
        },
        line: 742
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 749,
            column: 4
          },
          end: {
            line: 749,
            column: 5
          }
        },
        loc: {
          start: {
            line: 749,
            column: 38
          },
          end: {
            line: 758,
            column: 5
          }
        },
        line: 749
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 759,
            column: 4
          },
          end: {
            line: 759,
            column: 5
          }
        },
        loc: {
          start: {
            line: 759,
            column: 29
          },
          end: {
            line: 780,
            column: 5
          }
        },
        line: 759
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 781,
            column: 4
          },
          end: {
            line: 781,
            column: 5
          }
        },
        loc: {
          start: {
            line: 781,
            column: 40
          },
          end: {
            line: 795,
            column: 5
          }
        },
        line: 781
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 797,
            column: 4
          },
          end: {
            line: 797,
            column: 5
          }
        },
        loc: {
          start: {
            line: 797,
            column: 37
          },
          end: {
            line: 823,
            column: 5
          }
        },
        line: 797
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 803,
            column: 51
          },
          end: {
            line: 803,
            column: 52
          }
        },
        loc: {
          start: {
            line: 803,
            column: 67
          },
          end: {
            line: 805,
            column: 13
          }
        },
        line: 803
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 827,
            column: 4
          },
          end: {
            line: 827,
            column: 5
          }
        },
        loc: {
          start: {
            line: 827,
            column: 21
          },
          end: {
            line: 832,
            column: 5
          }
        },
        line: 827
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 833,
            column: 4
          },
          end: {
            line: 833,
            column: 5
          }
        },
        loc: {
          start: {
            line: 833,
            column: 19
          },
          end: {
            line: 840,
            column: 5
          }
        },
        line: 833
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 841,
            column: 4
          },
          end: {
            line: 841,
            column: 5
          }
        },
        loc: {
          start: {
            line: 841,
            column: 15
          },
          end: {
            line: 851,
            column: 5
          }
        },
        line: 841
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 843,
            column: 29
          },
          end: {
            line: 843,
            column: 30
          }
        },
        loc: {
          start: {
            line: 843,
            column: 49
          },
          end: {
            line: 849,
            column: 9
          }
        },
        line: 843
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 844,
            column: 39
          },
          end: {
            line: 844,
            column: 40
          }
        },
        loc: {
          start: {
            line: 844,
            column: 52
          },
          end: {
            line: 844,
            column: 62
          }
        },
        line: 844
      },
      "78": {
        name: "(anonymous_78)",
        decl: {
          start: {
            line: 852,
            column: 4
          },
          end: {
            line: 852,
            column: 5
          }
        },
        loc: {
          start: {
            line: 852,
            column: 17
          },
          end: {
            line: 854,
            column: 5
          }
        },
        line: 852
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 19
          },
          end: {
            line: 27,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 32
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 52,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 24
          },
          end: {
            line: 52,
            column: 27
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 29
          },
          end: {
            line: 52,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 40
          },
          end: {
            line: 52,
            column: 45
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "7": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "8": {
        loc: {
          start: {
            line: 81,
            column: 26
          },
          end: {
            line: 81,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 26
          },
          end: {
            line: 81,
            column: 51
          }
        }, {
          start: {
            line: 81,
            column: 55
          },
          end: {
            line: 81,
            column: 57
          }
        }],
        line: 81
      },
      "9": {
        loc: {
          start: {
            line: 98,
            column: 48
          },
          end: {
            line: 98,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 48
          },
          end: {
            line: 98,
            column: 84
          }
        }, {
          start: {
            line: 98,
            column: 88
          },
          end: {
            line: 98,
            column: 89
          }
        }],
        line: 98
      },
      "10": {
        loc: {
          start: {
            line: 100,
            column: 28
          },
          end: {
            line: 100,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 28
          },
          end: {
            line: 100,
            column: 69
          }
        }, {
          start: {
            line: 100,
            column: 73
          },
          end: {
            line: 100,
            column: 74
          }
        }],
        line: 100
      },
      "11": {
        loc: {
          start: {
            line: 103,
            column: 45
          },
          end: {
            line: 103,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 45
          },
          end: {
            line: 103,
            column: 78
          }
        }, {
          start: {
            line: 103,
            column: 82
          },
          end: {
            line: 103,
            column: 83
          }
        }],
        line: 103
      },
      "12": {
        loc: {
          start: {
            line: 103,
            column: 88
          },
          end: {
            line: 103,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 98
          },
          end: {
            line: 103,
            column: 99
          }
        }, {
          start: {
            line: 103,
            column: 102
          },
          end: {
            line: 103,
            column: 103
          }
        }],
        line: 103
      },
      "13": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "14": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 144,
            column: 36
          }
        }, {
          start: {
            line: 144,
            column: 40
          },
          end: {
            line: 144,
            column: 60
          }
        }],
        line: 144
      },
      "15": {
        loc: {
          start: {
            line: 145,
            column: 34
          },
          end: {
            line: 145,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 34
          },
          end: {
            line: 145,
            column: 75
          }
        }, {
          start: {
            line: 145,
            column: 79
          },
          end: {
            line: 145,
            column: 98
          }
        }],
        line: 145
      },
      "16": {
        loc: {
          start: {
            line: 159,
            column: 43
          },
          end: {
            line: 159,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 43
          },
          end: {
            line: 159,
            column: 72
          }
        }, {
          start: {
            line: 159,
            column: 76
          },
          end: {
            line: 159,
            column: 79
          }
        }],
        line: 159
      },
      "17": {
        loc: {
          start: {
            line: 159,
            column: 81
          },
          end: {
            line: 159,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 81
          },
          end: {
            line: 159,
            column: 107
          }
        }, {
          start: {
            line: 159,
            column: 111
          },
          end: {
            line: 159,
            column: 116
          }
        }],
        line: 159
      },
      "18": {
        loc: {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 178,
            column: 16
          },
          end: {
            line: 180,
            column: 26
          }
        }, {
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 183,
            column: 26
          }
        }, {
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 186,
            column: 26
          }
        }, {
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 188,
            column: 61
          }
        }],
        line: 177
      },
      "19": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 193,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "20": {
        loc: {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "21": {
        loc: {
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 195,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 195,
            column: 31
          }
        }, {
          start: {
            line: 195,
            column: 35
          },
          end: {
            line: 195,
            column: 52
          }
        }],
        line: 195
      },
      "22": {
        loc: {
          start: {
            line: 203,
            column: 30
          },
          end: {
            line: 203,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 30
          },
          end: {
            line: 203,
            column: 47
          }
        }, {
          start: {
            line: 203,
            column: 51
          },
          end: {
            line: 203,
            column: 53
          }
        }],
        line: 203
      },
      "23": {
        loc: {
          start: {
            line: 215,
            column: 24
          },
          end: {
            line: 217,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 24
          },
          end: {
            line: 217,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "24": {
        loc: {
          start: {
            line: 220,
            column: 24
          },
          end: {
            line: 228,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 24
          },
          end: {
            line: 228,
            column: 25
          }
        }, {
          start: {
            line: 224,
            column: 31
          },
          end: {
            line: 228,
            column: 25
          }
        }],
        line: 220
      },
      "25": {
        loc: {
          start: {
            line: 241,
            column: 20
          },
          end: {
            line: 247,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 20
          },
          end: {
            line: 247,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "26": {
        loc: {
          start: {
            line: 262,
            column: 24
          },
          end: {
            line: 262,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 262,
            column: 44
          },
          end: {
            line: 262,
            column: 50
          }
        }, {
          start: {
            line: 262,
            column: 53
          },
          end: {
            line: 262,
            column: 62
          }
        }],
        line: 262
      },
      "27": {
        loc: {
          start: {
            line: 263,
            column: 26
          },
          end: {
            line: 263,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 263,
            column: 48
          },
          end: {
            line: 263,
            column: 56
          }
        }, {
          start: {
            line: 263,
            column: 59
          },
          end: {
            line: 263,
            column: 68
          }
        }],
        line: 263
      },
      "28": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "29": {
        loc: {
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 316,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 316,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "30": {
        loc: {
          start: {
            line: 320,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 323,
            column: 26
          }
        }, {
          start: {
            line: 324,
            column: 16
          },
          end: {
            line: 326,
            column: 26
          }
        }, {
          start: {
            line: 327,
            column: 16
          },
          end: {
            line: 329,
            column: 26
          }
        }, {
          start: {
            line: 330,
            column: 16
          },
          end: {
            line: 331,
            column: 84
          }
        }],
        line: 320
      },
      "31": {
        loc: {
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 337,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 337,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "32": {
        loc: {
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "33": {
        loc: {
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "34": {
        loc: {
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 403,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 403,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 401
      },
      "35": {
        loc: {
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 401,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 401,
            column: 40
          }
        }, {
          start: {
            line: 401,
            column: 44
          },
          end: {
            line: 401,
            column: 81
          }
        }],
        line: 401
      },
      "36": {
        loc: {
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 406,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 406,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 404
      },
      "37": {
        loc: {
          start: {
            line: 404,
            column: 12
          },
          end: {
            line: 404,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 12
          },
          end: {
            line: 404,
            column: 40
          }
        }, {
          start: {
            line: 404,
            column: 44
          },
          end: {
            line: 404,
            column: 81
          }
        }],
        line: 404
      },
      "38": {
        loc: {
          start: {
            line: 418,
            column: 22
          },
          end: {
            line: 418,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 418,
            column: 39
          },
          end: {
            line: 418,
            column: 61
          }
        }, {
          start: {
            line: 418,
            column: 64
          },
          end: {
            line: 418,
            column: 73
          }
        }],
        line: 418
      },
      "39": {
        loc: {
          start: {
            line: 476,
            column: 16
          },
          end: {
            line: 478,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 16
          },
          end: {
            line: 478,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 476
      },
      "40": {
        loc: {
          start: {
            line: 476,
            column: 20
          },
          end: {
            line: 476,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 476,
            column: 20
          },
          end: {
            line: 476,
            column: 32
          }
        }, {
          start: {
            line: 476,
            column: 36
          },
          end: {
            line: 476,
            column: 50
          }
        }],
        line: 476
      },
      "41": {
        loc: {
          start: {
            line: 480,
            column: 16
          },
          end: {
            line: 482,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 16
          },
          end: {
            line: 482,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "42": {
        loc: {
          start: {
            line: 483,
            column: 16
          },
          end: {
            line: 489,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 16
          },
          end: {
            line: 489,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 483
      },
      "43": {
        loc: {
          start: {
            line: 499,
            column: 8
          },
          end: {
            line: 501,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 499,
            column: 8
          },
          end: {
            line: 501,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 499
      },
      "44": {
        loc: {
          start: {
            line: 503,
            column: 23
          },
          end: {
            line: 503,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 503,
            column: 23
          },
          end: {
            line: 503,
            column: 37
          }
        }, {
          start: {
            line: 503,
            column: 41
          },
          end: {
            line: 503,
            column: 90
          }
        }],
        line: 503
      },
      "45": {
        loc: {
          start: {
            line: 504,
            column: 8
          },
          end: {
            line: 513,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 505,
            column: 12
          },
          end: {
            line: 506,
            column: 51
          }
        }, {
          start: {
            line: 507,
            column: 12
          },
          end: {
            line: 508,
            column: 43
          }
        }, {
          start: {
            line: 509,
            column: 12
          },
          end: {
            line: 510,
            column: 51
          }
        }, {
          start: {
            line: 511,
            column: 12
          },
          end: {
            line: 512,
            column: 70
          }
        }],
        line: 504
      },
      "46": {
        loc: {
          start: {
            line: 517,
            column: 8
          },
          end: {
            line: 519,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 517,
            column: 8
          },
          end: {
            line: 519,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 517
      },
      "47": {
        loc: {
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 531,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 523,
            column: 12
          },
          end: {
            line: 524,
            column: 51
          }
        }, {
          start: {
            line: 525,
            column: 12
          },
          end: {
            line: 526,
            column: 43
          }
        }, {
          start: {
            line: 527,
            column: 12
          },
          end: {
            line: 528,
            column: 51
          }
        }, {
          start: {
            line: 529,
            column: 12
          },
          end: {
            line: 530,
            column: 73
          }
        }],
        line: 522
      },
      "48": {
        loc: {
          start: {
            line: 539,
            column: 8
          },
          end: {
            line: 539,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 539,
            column: 8
          },
          end: {
            line: 539,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 539
      },
      "49": {
        loc: {
          start: {
            line: 541,
            column: 12
          },
          end: {
            line: 543,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 541,
            column: 12
          },
          end: {
            line: 543,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 541
      },
      "50": {
        loc: {
          start: {
            line: 541,
            column: 16
          },
          end: {
            line: 541,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 541,
            column: 16
          },
          end: {
            line: 541,
            column: 42
          }
        }, {
          start: {
            line: 541,
            column: 46
          },
          end: {
            line: 541,
            column: 107
          }
        }],
        line: 541
      },
      "51": {
        loc: {
          start: {
            line: 544,
            column: 12
          },
          end: {
            line: 548,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 544,
            column: 12
          },
          end: {
            line: 548,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 544
      },
      "52": {
        loc: {
          start: {
            line: 546,
            column: 16
          },
          end: {
            line: 546,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 546,
            column: 16
          },
          end: {
            line: 546,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 546
      },
      "53": {
        loc: {
          start: {
            line: 546,
            column: 20
          },
          end: {
            line: 546,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 546,
            column: 20
          },
          end: {
            line: 546,
            column: 23
          }
        }, {
          start: {
            line: 546,
            column: 27
          },
          end: {
            line: 546,
            column: 46
          }
        }],
        line: 546
      },
      "54": {
        loc: {
          start: {
            line: 547,
            column: 16
          },
          end: {
            line: 547,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 547,
            column: 16
          },
          end: {
            line: 547,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 547
      },
      "55": {
        loc: {
          start: {
            line: 547,
            column: 20
          },
          end: {
            line: 547,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 547,
            column: 20
          },
          end: {
            line: 547,
            column: 23
          }
        }, {
          start: {
            line: 547,
            column: 27
          },
          end: {
            line: 547,
            column: 46
          }
        }],
        line: 547
      },
      "56": {
        loc: {
          start: {
            line: 549,
            column: 12
          },
          end: {
            line: 551,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 549,
            column: 12
          },
          end: {
            line: 551,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 549
      },
      "57": {
        loc: {
          start: {
            line: 549,
            column: 16
          },
          end: {
            line: 549,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 549,
            column: 16
          },
          end: {
            line: 549,
            column: 38
          }
        }, {
          start: {
            line: 549,
            column: 42
          },
          end: {
            line: 549,
            column: 82
          }
        }],
        line: 549
      },
      "58": {
        loc: {
          start: {
            line: 552,
            column: 12
          },
          end: {
            line: 560,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 552,
            column: 12
          },
          end: {
            line: 560,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 552
      },
      "59": {
        loc: {
          start: {
            line: 553,
            column: 45
          },
          end: {
            line: 553,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 553,
            column: 45
          },
          end: {
            line: 553,
            column: 62
          }
        }, {
          start: {
            line: 553,
            column: 66
          },
          end: {
            line: 553,
            column: 83
          }
        }],
        line: 553
      },
      "60": {
        loc: {
          start: {
            line: 554,
            column: 16
          },
          end: {
            line: 556,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 554,
            column: 16
          },
          end: {
            line: 556,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 554
      },
      "61": {
        loc: {
          start: {
            line: 554,
            column: 20
          },
          end: {
            line: 554,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 554,
            column: 20
          },
          end: {
            line: 554,
            column: 43
          }
        }, {
          start: {
            line: 554,
            column: 47
          },
          end: {
            line: 554,
            column: 84
          }
        }],
        line: 554
      },
      "62": {
        loc: {
          start: {
            line: 557,
            column: 16
          },
          end: {
            line: 559,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 557,
            column: 16
          },
          end: {
            line: 559,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 557
      },
      "63": {
        loc: {
          start: {
            line: 557,
            column: 20
          },
          end: {
            line: 557,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 557,
            column: 20
          },
          end: {
            line: 557,
            column: 41
          }
        }, {
          start: {
            line: 557,
            column: 45
          },
          end: {
            line: 557,
            column: 80
          }
        }],
        line: 557
      },
      "64": {
        loc: {
          start: {
            line: 567,
            column: 8
          },
          end: {
            line: 567,
            column: 69
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 567,
            column: 8
          },
          end: {
            line: 567,
            column: 69
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 567
      },
      "65": {
        loc: {
          start: {
            line: 568,
            column: 8
          },
          end: {
            line: 568,
            column: 65
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 568,
            column: 8
          },
          end: {
            line: 568,
            column: 65
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 568
      },
      "66": {
        loc: {
          start: {
            line: 569,
            column: 8
          },
          end: {
            line: 571,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 569,
            column: 8
          },
          end: {
            line: 571,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 569
      },
      "67": {
        loc: {
          start: {
            line: 569,
            column: 12
          },
          end: {
            line: 569,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 569,
            column: 12
          },
          end: {
            line: 569,
            column: 45
          }
        }, {
          start: {
            line: 569,
            column: 49
          },
          end: {
            line: 569,
            column: 66
          }
        }],
        line: 569
      },
      "68": {
        loc: {
          start: {
            line: 572,
            column: 8
          },
          end: {
            line: 572,
            column: 71
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 572,
            column: 8
          },
          end: {
            line: 572,
            column: 71
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 572
      },
      "69": {
        loc: {
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 579,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 579,
            column: 9
          }
        }, {
          start: {
            line: 575,
            column: 15
          },
          end: {
            line: 579,
            column: 9
          }
        }],
        line: 573
      },
      "70": {
        loc: {
          start: {
            line: 573,
            column: 12
          },
          end: {
            line: 573,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 573,
            column: 12
          },
          end: {
            line: 573,
            column: 42
          }
        }, {
          start: {
            line: 573,
            column: 46
          },
          end: {
            line: 573,
            column: 73
          }
        }],
        line: 573
      },
      "71": {
        loc: {
          start: {
            line: 577,
            column: 16
          },
          end: {
            line: 577,
            column: 82
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 577,
            column: 16
          },
          end: {
            line: 577,
            column: 82
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 577
      },
      "72": {
        loc: {
          start: {
            line: 580,
            column: 8
          },
          end: {
            line: 591,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 580,
            column: 8
          },
          end: {
            line: 591,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 580
      },
      "73": {
        loc: {
          start: {
            line: 582,
            column: 16
          },
          end: {
            line: 582,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 582,
            column: 16
          },
          end: {
            line: 582,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 582
      },
      "74": {
        loc: {
          start: {
            line: 583,
            column: 16
          },
          end: {
            line: 583,
            column: 90
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 583,
            column: 16
          },
          end: {
            line: 583,
            column: 90
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 583
      },
      "75": {
        loc: {
          start: {
            line: 584,
            column: 16
          },
          end: {
            line: 586,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 584,
            column: 16
          },
          end: {
            line: 586,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 584
      },
      "76": {
        loc: {
          start: {
            line: 584,
            column: 20
          },
          end: {
            line: 584,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 584,
            column: 20
          },
          end: {
            line: 584,
            column: 53
          }
        }, {
          start: {
            line: 584,
            column: 57
          },
          end: {
            line: 584,
            column: 74
          }
        }],
        line: 584
      },
      "77": {
        loc: {
          start: {
            line: 587,
            column: 16
          },
          end: {
            line: 589,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 587,
            column: 16
          },
          end: {
            line: 589,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 587
      },
      "78": {
        loc: {
          start: {
            line: 587,
            column: 20
          },
          end: {
            line: 587,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 587,
            column: 20
          },
          end: {
            line: 587,
            column: 36
          }
        }, {
          start: {
            line: 587,
            column: 40
          },
          end: {
            line: 587,
            column: 81
          }
        }],
        line: 587
      },
      "79": {
        loc: {
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 599,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 592,
            column: 8
          },
          end: {
            line: 599,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 592
      },
      "80": {
        loc: {
          start: {
            line: 594,
            column: 16
          },
          end: {
            line: 594,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 594,
            column: 16
          },
          end: {
            line: 594,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 594
      },
      "81": {
        loc: {
          start: {
            line: 595,
            column: 16
          },
          end: {
            line: 597,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 595,
            column: 16
          },
          end: {
            line: 597,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 595
      },
      "82": {
        loc: {
          start: {
            line: 595,
            column: 20
          },
          end: {
            line: 595,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 595,
            column: 20
          },
          end: {
            line: 595,
            column: 49
          }
        }, {
          start: {
            line: 595,
            column: 53
          },
          end: {
            line: 595,
            column: 79
          }
        }],
        line: 595
      },
      "83": {
        loc: {
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 600,
            column: 81
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 600,
            column: 81
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 600
      },
      "84": {
        loc: {
          start: {
            line: 601,
            column: 8
          },
          end: {
            line: 603,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 601,
            column: 8
          },
          end: {
            line: 603,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 601
      },
      "85": {
        loc: {
          start: {
            line: 601,
            column: 12
          },
          end: {
            line: 601,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 601,
            column: 12
          },
          end: {
            line: 601,
            column: 46
          }
        }, {
          start: {
            line: 601,
            column: 50
          },
          end: {
            line: 601,
            column: 81
          }
        }],
        line: 601
      },
      "86": {
        loc: {
          start: {
            line: 604,
            column: 8
          },
          end: {
            line: 606,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 604,
            column: 8
          },
          end: {
            line: 606,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 604
      },
      "87": {
        loc: {
          start: {
            line: 616,
            column: 12
          },
          end: {
            line: 620,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 616,
            column: 12
          },
          end: {
            line: 620,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 616
      },
      "88": {
        loc: {
          start: {
            line: 621,
            column: 12
          },
          end: {
            line: 623,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 621,
            column: 12
          },
          end: {
            line: 623,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 621
      },
      "89": {
        loc: {
          start: {
            line: 651,
            column: 8
          },
          end: {
            line: 653,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 651,
            column: 8
          },
          end: {
            line: 653,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 651
      },
      "90": {
        loc: {
          start: {
            line: 654,
            column: 8
          },
          end: {
            line: 656,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 654,
            column: 8
          },
          end: {
            line: 656,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 654
      },
      "91": {
        loc: {
          start: {
            line: 668,
            column: 36
          },
          end: {
            line: 668,
            column: 87
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 668,
            column: 46
          },
          end: {
            line: 668,
            column: 87
          }
        }],
        line: 668
      },
      "92": {
        loc: {
          start: {
            line: 668,
            column: 46
          },
          end: {
            line: 668,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 668,
            column: 46
          },
          end: {
            line: 668,
            column: 82
          }
        }, {
          start: {
            line: 668,
            column: 86
          },
          end: {
            line: 668,
            column: 87
          }
        }],
        line: 668
      },
      "93": {
        loc: {
          start: {
            line: 668,
            column: 89
          },
          end: {
            line: 668,
            column: 143
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 668,
            column: 97
          },
          end: {
            line: 668,
            column: 143
          }
        }],
        line: 668
      },
      "94": {
        loc: {
          start: {
            line: 668,
            column: 97
          },
          end: {
            line: 668,
            column: 143
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 668,
            column: 97
          },
          end: {
            line: 668,
            column: 135
          }
        }, {
          start: {
            line: 668,
            column: 139
          },
          end: {
            line: 668,
            column: 143
          }
        }],
        line: 668
      },
      "95": {
        loc: {
          start: {
            line: 672,
            column: 12
          },
          end: {
            line: 675,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 672,
            column: 12
          },
          end: {
            line: 675,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 672
      },
      "96": {
        loc: {
          start: {
            line: 713,
            column: 8
          },
          end: {
            line: 715,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 713,
            column: 8
          },
          end: {
            line: 715,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 713
      },
      "97": {
        loc: {
          start: {
            line: 733,
            column: 15
          },
          end: {
            line: 733,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 733,
            column: 15
          },
          end: {
            line: 733,
            column: 31
          }
        }, {
          start: {
            line: 733,
            column: 35
          },
          end: {
            line: 733,
            column: 39
          }
        }],
        line: 733
      },
      "98": {
        loc: {
          start: {
            line: 761,
            column: 8
          },
          end: {
            line: 767,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 761,
            column: 8
          },
          end: {
            line: 767,
            column: 9
          }
        }, {
          start: {
            line: 765,
            column: 15
          },
          end: {
            line: 767,
            column: 9
          }
        }],
        line: 761
      },
      "99": {
        loc: {
          start: {
            line: 775,
            column: 8
          },
          end: {
            line: 777,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 775,
            column: 8
          },
          end: {
            line: 777,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 775
      },
      "100": {
        loc: {
          start: {
            line: 798,
            column: 8
          },
          end: {
            line: 800,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 798,
            column: 8
          },
          end: {
            line: 800,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 798
      },
      "101": {
        loc: {
          start: {
            line: 802,
            column: 8
          },
          end: {
            line: 806,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 802,
            column: 8
          },
          end: {
            line: 806,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 802
      },
      "102": {
        loc: {
          start: {
            line: 813,
            column: 18
          },
          end: {
            line: 813,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 813,
            column: 33
          },
          end: {
            line: 813,
            column: 61
          }
        }, {
          start: {
            line: 813,
            column: 64
          },
          end: {
            line: 813,
            column: 73
          }
        }],
        line: 813
      },
      "103": {
        loc: {
          start: {
            line: 815,
            column: 8
          },
          end: {
            line: 821,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 815,
            column: 8
          },
          end: {
            line: 821,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 815
      },
      "104": {
        loc: {
          start: {
            line: 816,
            column: 12
          },
          end: {
            line: 819,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 816,
            column: 12
          },
          end: {
            line: 819,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 816
      },
      "105": {
        loc: {
          start: {
            line: 828,
            column: 8
          },
          end: {
            line: 830,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 828,
            column: 8
          },
          end: {
            line: 830,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 828
      },
      "106": {
        loc: {
          start: {
            line: 835,
            column: 8
          },
          end: {
            line: 835,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 835,
            column: 8
          },
          end: {
            line: 835,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 835
      },
      "107": {
        loc: {
          start: {
            line: 835,
            column: 12
          },
          end: {
            line: 835,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 835,
            column: 12
          },
          end: {
            line: 835,
            column: 18
          }
        }, {
          start: {
            line: 835,
            column: 22
          },
          end: {
            line: 835,
            column: 40
          }
        }],
        line: 835
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0, 0, 0],
      "46": [0, 0],
      "47": [0, 0, 0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0],
      "92": [0, 0],
      "93": [0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0],
      "101": [0, 0],
      "102": [0, 0],
      "103": [0, 0],
      "104": [0, 0],
      "105": [0, 0],
      "106": [0, 0],
      "107": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/services/marketplace/amazon.ts"],
      sourcesContent: ["import { createCSV,parseCSV } from '@/lib/utils/csv';\nimport { parseXML } from '@/lib/utils/xml';\nimport { logger } from '../logging';\nimport { \n    MarketplaceProduct, \n    ProductImage,\n    ProductVariant,\n    ProductOption,\n    ImportOptions, \n    ImportResult, \n    ExportOptions, \n    ExportResult,\n    ImportError,\n    ImportWarning,\n    MarketplaceConfig,\n    SyncOptions,\n    SyncResult,\n    SyncConflict,\n    AnalyticsData,\n    TransformationRule,\n    BackupMetadata\n  , MarketplaceOrder\n\n  } from './types';\n//   import { parseCSV, createCSV } from '../../utils/csv';\n//   import { parseXML, createXL } from '../../utils/xml';\n//   import { logger } from '../../utils/logger';\n  \n  // Cache Manager for improved performance\n  class CacheManager {\n    private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();\n  \n    set(key: string, data: any, ttl: number = 3600000): void {\n      this.cache.set(key, { data, timestamp: Date.now(), ttl });\n    }\n  \n    get(key: string): any {\n      const item = this.cache.get(key);\n      if (!item) return null;\n      if (Date.now() - item.timestamp > item.ttl) {\n        this.cache.delete(key);\n        return null;\n      }\n      return item.data;\n    }\n  \n    clear(): void {\n      this.cache.clear();\n    }\n  }\n  \n  // Rate Limiter to prevent exceeding API limits\n  class RateLimiter {\n    private requests: number = 0;\n    private lastReset: number = Date.now();\n  \n    constructor(private readonly limit: number = 100, private readonly interval: number = 60000) {}\n  \n    async checkLimit(): Promise<boolean> {\n      const now = Date.now();\n      if (now - this.lastReset > this.interval) {\n        this.requests = 0;\n        this.lastReset = now;\n      }\n      if (this.requests >= this.limit) {\n        const waitTime = this.interval - (now - this.lastReset);\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n        return this.checkLimit();\n      }\n      this.requests++;\n      return true;\n    }\n  }\n  \n  // Simple Event Emitter implementation for tracking operations\n  type EventType = 'import:start' | 'import:end' | 'export:start' | 'export:end' | 'error';\n  \n  class EventEmitter {\n    private listeners: Map<EventType, Function[]> = new Map();\n  \n    on(event: EventType, callback: Function): void {\n      if (!this.listeners.has(event)) {\n        this.listeners.set(event, []);\n      }\n      this.listeners.get(event).push(callback);\n    }\n  \n    emit(event: EventType, data?: any): void {\n      const callbacks = this.listeners.get(event) || [];\n      callbacks.forEach(callback => callback(data));\n    }\n  }\n  \n  // Custom Error class for Amazon API errors\n  class AmazonAPIError extends Error {\n    constructor(public readonly code: string, message: string, public readonly details?: any) {\n      super(message);\n      this.name = 'AmazonAPIError';\n    }\n  }\n  \n  // Analytics class to track operations and performance\n  class Analytics {\n    private data: AnalyticsData = {\n      operationCounts: {},\n      errorRates: {},\n      averageResponseTimes: {},\n      successRates: {},\n      syncStats: { lastSync: new Date(), totalSyncs: 0, successfulSyncs: 0, failedSyncs: 0 },\n      performance: { averageImportTime: 0, averageExportTime: 0, averageProcessingTime: 0 }\n    };\n  \n    trackOperation(operation: string, duration: number, success: boolean): void {\n      this.data.operationCounts[operation] = (this.data.operationCounts[operation] || 0) + 1;\n      // Calculate average response times and success rates (simplified)\n      const previousAvg = this.data.averageResponseTimes[operation] || 0;\n      const count = this.data.operationCounts[operation];\n      this.data.averageResponseTimes[operation] = ((previousAvg * (count - 1)) + duration) / count;\n      this.data.successRates[operation] = (this.data.successRates[operation] || 0) + (success ? 1 : 0);\n    }\n  \n    generateReport(): AnalyticsData {\n      return this.data;\n    }\n  }\n  \n  // Product Transformer for advanced field transformations\n  class ProductTransformer {\n    private rules: TransformationRule[] = [];\n  \n    addRule(rule: TransformationRule): void {\n      this.rules.push(rule);\n    }\n  \n    async transform(product: MarketplaceProduct): Promise<MarketplaceProduct> {\n      let transformed = { ...product };\n      for (const rule of this.rules) {\n        transformed = await this.applyRule(transformed, rule);\n      }\n      return transformed;\n    }\n  \n    private async applyRule(product: MarketplaceProduct, rule: TransformationRule): Promise<MarketplaceProduct> {\n      // Dummy implementation: extend this to cover 'combine', 'split', 'format', etc.\n      if (rule.operation === 'map' && rule.params.mappings) {\n        product[rule.field] = rule.params.mappings[product[rule.field]] || product[rule.field];\n      }\n      return product;\n    }\n  }\n  \n  // Main AmazonMarketplace class\n  export class AmazonMarketplace {\n    private api: AmazonAPI;\n    private performance: PerformanceTracker;\n    private cache: CacheManager;\n    private rateLimiter: RateLimiter;\n    private events: EventEmitter;\n    private analytics: Analytics;\n    private transformer: ProductTransformer;\n  \n    constructor(private config: MarketplaceConfig) {\n      this.api = new AmazonAPI(config);\n      this.performance = new PerformanceTracker();\n      this.cache = new CacheManager();\n      this.rateLimiter = new RateLimiter(config.rateLimit?.maxRequests || 100, config.rateLimit?.interval || 60000);\n      this.events = new EventEmitter();\n      this.analytics = new Analytics();\n      this.transformer = new ProductTransformer();\n    }\n  \n    // Method to import products\n    async importProducts(options: ImportOptions): Promise<ImportResult> {\n      this.events.emit('import:start', options);\n      this.performance.start('importProducts');\n      await this.rateLimiter.checkLimit();\n      const startTime = Date.now();\n      const errors: ImportError[] = [];\n      const warnings: ImportWarning[] = [];\n      let products: MarketplaceProduct[] = [];\n  \n      try {\n        // Authenticate using retry mechanism\n        await this.retryOperation(() => this.api.authenticate());\n  \n        // Import based on source type\n        switch (options.source) {\n          case 'file':\n            products = await this.importFromFile(options);\n            break;\n          case 'url':\n            products = await this.importFromUrl(options);\n            break;\n          case 'api':\n            products = await this.importFromAPI(options);\n            break;\n          default:\n            throw new Error('Invalid import source');\n        }\n  \n        // Apply filters if provided\n        if (options.filters) {\n          products = this.filterProducts(products, options.filters);\n        }\n  \n        // Apply transformation rules if provided\n        if (options.mapping || options.transform) {\n          products = await this.transformProducts(products, options);\n        }\n  \n        // Validate and process each product\n        const processedProducts: MarketplaceProduct[] = [];\n        let updatedCount = 0;\n        let skippedCount = 0;\n  \n        // Process products in batches\n        const batchSize = options.batchSize || 50;\n        const batches = this.createBatches(products, batchSize);\n        \n        for (const batch of batches) {\n          const batchResults = await Promise.allSettled(\n            batch.map(async product => {\n              try {\n                // Validate product\n                let validatedProduct = await this.validateProduct(product);\n                // Transform product using advanced transformer\n                validatedProduct = await this.transformer.transform(validatedProduct);\n                // Process images\n                validatedProduct.images = await this.api.processProductImages(validatedProduct);\n                // Process variants, if present\n                if (validatedProduct.variants?.length) {\n                  validatedProduct.variants = await this.processVariants(validatedProduct);\n                }\n                // Check if product exists remotely\n                const existingProduct = await this.api.findProductBySKU(product.sku);\n                if (existingProduct) {\n                  const updated = await this.api.updateProduct(existingProduct.id, validatedProduct);\n                  updatedCount++;\n                  return updated;\n                } else {\n                  const created = await this.api.createProduct(validatedProduct);\n                  processedProducts.push(created);\n                  return created;\n                }\n              } catch (error: any) {\n                errors.push({\n                  code: 'VALIDATION_ERROR',\n                  message: error.message,\n                  product,\n                  field: error.field\n                });\n                skippedCount++;\n                return null;\n              }\n            })\n          );\n  \n          batchResults.forEach((result, index) => {\n            if (result.status === 'rejected') {\n              errors.push({\n                code: 'PROCESSING_ERROR',\n                message: result.reason.message,\n                product: batch[index]\n              });\n            }\n          });\n        }\n  \n        const timeElapsed = Date.now() - startTime;\n        this.performance.end('importProducts');\n        this.analytics.trackOperation('importProducts', timeElapsed, errors.length === 0);\n        this.events.emit('import:end', { result: 'success', stats: { total: products.length } });\n  \n        return {\n          success: errors.length === 0,\n          products: processedProducts,\n          errors: errors.length > 0 ? errors : undefined,\n          warnings: warnings.length > 0 ? warnings : undefined,\n          stats: {\n            total: products.length,\n            imported: processedProducts.length,\n            failed: errors.length,\n            updated: updatedCount,\n            skipped: skippedCount,\n            timeElapsed\n          },\n          metadata: { importedAt: new Date().toISOString() }\n        };\n      } catch (error: any) {\n        logger.error('Amazon import error:', error);\n        this.performance.end('importProducts');\n        this.events.emit('error', { error: error.message });\n        return {\n          success: false,\n          products: [],\n          errors: [{\n            code: 'IMPORT_FAILED',\n            message: error.message\n          }],\n          stats: {\n            total: 0,\n            imported: 0,\n            failed: 1,\n            updated: 0,\n            skipped: 0,\n            timeElapsed: Date.now() - startTime\n          }\n        };\n      }\n    }\n  \n    // Method to export products\n    async exportProducts(products: MarketplaceProduct[], options: ExportOptions): Promise<ExportResult> {\n      this.events.emit('export:start', options);\n      this.performance.start('exportProducts');\n      await this.rateLimiter.checkLimit();\n      const startTime = Date.now();\n      try {\n        // Apply filters on export if provided\n        if (options.filters) {\n          products = this.filterProducts(products, options.filters);\n        }\n        // Optionally transform products before export\n        if (options.transformBeforeExport) {\n          products = await Promise.all(products.map(p => options.transformBeforeExport(p)));\n        }\n        // Determine fields to export\n        const fields = this.getExportFields(options);\n        let exportedData: string;\n        switch (options.format) {\n          case 'csv':\n            exportedData = await this.exportToCSV(products, fields);\n            break;\n          case 'json':\n            exportedData = await this.exportToJSON(products, fields);\n            break;\n          case 'xml':\n            exportedData = await this.exportToXML(products, fields);\n            break;\n          default:\n            throw new Error(`Unsupported export format: ${options.format}`);\n        }\n        // Upload exported data if destination requires it\n        let uploadedUrl: string | undefined;\n        if (exportedData) {\n          uploadedUrl = await this.retryOperation(() => this.api.uploadFile(exportedData, options.format));\n        }\n        const timeElapsed = Date.now() - startTime;\n        this.performance.end('exportProducts');\n        this.analytics.trackOperation('exportProducts', timeElapsed, true);\n        this.events.emit('export:end', { result: 'success', stats: { total: products.length } });\n        return {\n          success: true,\n          url: uploadedUrl,\n          data: exportedData,\n          stats: {\n            total: products.length,\n            exported: products.length,\n            failed: 0,\n            timeElapsed\n          },\n          metadata: { exportedAt: new Date().toISOString() }\n        };\n      } catch (error: any) {\n        logger.error('Amazon export error:', error);\n        this.performance.end('exportProducts');\n        this.events.emit('error', { error: error.message });\n        return {\n          success: false,\n          errors: [error.message],\n          stats: {\n            total: products.length,\n            exported: 0,\n            failed: products.length,\n            timeElapsed: Date.now() - startTime\n          }\n        };\n      }\n    }\n  \n    // Method to synchronize products with local DB and remote API\n    async syncProducts(options: SyncOptions): Promise<SyncResult> {\n      const startTime = Date.now();\n      // Retrieve local products (assumed to be implemented elsewhere)\n      const localProducts = await this.getLocalProducts();\n      // Retrieve remote products via API\n      const remoteProducts = await this.api.getProducts();\n      let conflicts: SyncConflict[] = [];\n      // Optionally backup local products\n      if (options.backup) {\n        await this.backupProducts(localProducts);\n      }\n      // Find conflicts between local and remote data\n      conflicts = this.findConflicts(localProducts, remoteProducts);\n      // Handle conflicts based on resolution strategy\n      if (conflicts.length > 0) {\n        await this.handleConflicts(conflicts, options.conflictResolution);\n      }\n      // Perform sync based on direction\n      let syncedCount = 0;\n      if (options.direction === 'push' || options.direction === 'bidirectional') {\n        syncedCount += await this.pushToRemote(localProducts);\n      }\n      if (options.direction === 'pull' || options.direction === 'bidirectional') {\n        syncedCount += await this.pullFromRemote(remoteProducts);\n      }\n      const timeElapsed = Date.now() - startTime;\n      return {\n        success: conflicts.length === 0,\n        conflicts,\n        stats: {\n          total: localProducts.length,\n          synced: syncedCount,\n          conflicts: conflicts.length,\n          failed: localProducts.length - syncedCount,\n          timeElapsed\n        },\n        backupId: options.backup ? \"backup_\" + Date.now() : undefined\n      };\n    }\n  \n    // Dummy method to get local products from a database\n    private async getLocalProducts(): Promise<MarketplaceProduct[]> {\n      // Replace with actual DB fetch\n      return [];\n    }\n  \n    // Dummy method to backup products\n    private async backupProducts(products: MarketplaceProduct[]): Promise<void> {\n      const backupMetadata: BackupMetadata = {\n        id: \"backup_\" + Date.now(),\n        timestamp: new Date(),\n        type: \"auto\",\n        reason: \"Scheduled backup\",\n        products: products.length,\n        size: JSON.stringify(products).length,\n        checksum: \"dummy-checksum\"\n      };\n      // Save backup to file or DB\n      logger.info(\"Backup created\", backupMetadata);\n    }\n  \n    // Dummy method to find conflicts between local and remote products\n    private findConflicts(local: MarketplaceProduct[], remote: MarketplaceProduct[]): SyncConflict[] {\n      // Implement actual conflict detection logic\n      return [];\n    }\n  \n    // Dummy method to handle conflicts\n    private async handleConflicts(conflicts: SyncConflict[], resolution: SyncOptions[\"conflictResolution\"]): Promise<void> {\n      // Implement conflict resolution logic\n      conflicts.forEach(conflict => {\n        conflict.resolution = resolution;\n        conflict.resolved = true;\n      });\n    }\n  \n    // Dummy method to push local products to remote API\n    private async pushToRemote(products: MarketplaceProduct[]): Promise<number> {\n      let count = 0;\n      for (const product of products) {\n        try {\n          await this.api.createProduct(product);\n          count++;\n        } catch (error) {\n          logger.error(\"Push to remote failed for SKU:\", product.sku, error);\n        }\n      }\n      return count;\n    }\n  \n    // Dummy method to pull products from remote API into local DB\n    private async pullFromRemote(remoteProducts: MarketplaceProduct[]): Promise<number> {\n      // Replace with actual DB update logic\n      return remoteProducts.length;\n    }\n  \n    // Process product variants using API methods\n    private async processVariants(product: MarketplaceProduct): Promise<ProductVariant[]> {\n      const processedVariants: ProductVariant[] = [];\n      for (const variant of product.variants) {\n        try {\n          if (!variant.sku || !variant.price) {\n            throw new Error(`Invalid variant data for ${variant.title}`);\n          }\n          const existingVariant = await this.api.findProductBySKU(variant.sku);\n          if (existingVariant) {\n            throw new Error(`Duplicate SKU found: ${variant.sku}`);\n          }\n          if (variant.images?.length) {\n            const processedImages = await this.api.processProductImages({\n              ...product,\n              images: variant.images\n            });\n            variant.images = processedImages;\n          }\n          processedVariants.push(variant);\n        } catch (error: any) {\n          logger.error(`Failed to process variant: ${error.message}`);\n        }\n      }\n      return processedVariants;\n    }\n  \n    // Import products from a file\n    private async importFromFile(options: ImportOptions): Promise<MarketplaceProduct[]> {\n      if (!options.file) {\n        throw new Error('File is required for file import');\n      }\n      const content = await options.file.text();\n      const format = options.format || options.file.name.split('.').pop()?.toLowerCase();\n      switch (format) {\n        case 'csv':\n          return parseCSV<MarketplaceProduct>(content);\n        case 'json':\n          return JSON.parse(content);\n        case 'xml':\n          return parseXML<MarketplaceProduct>(content);\n        default:\n          throw new Error(`Unsupported file format: ${format}`);\n      }\n    }\n  \n    // Import products from a URL\n    private async importFromUrl(options: ImportOptions): Promise<MarketplaceProduct[]> {\n      if (!options.url) {\n        throw new Error('URL is required for URL import');\n      }\n      const response = await this.retryOperation(() => fetch(options.url));\n      const content = await response.text();\n      switch (options.format) {\n        case 'csv':\n          return parseCSV<MarketplaceProduct>(content);\n        case 'json':\n          return JSON.parse(content);\n        case 'xml':\n          return parseXML<MarketplaceProduct>(content);\n        default:\n          throw new Error(`Unsupported format: ${options.format}`);\n      }\n    }\n  \n    // Import products using API\n    private async importFromAPI(options: ImportOptions): Promise<MarketplaceProduct[]> {\n      return this.api.getProducts(options.filters);\n    }\n  \n    // Filter products based on provided filters\n    private filterProducts(products: MarketplaceProduct[], filters: ImportOptions['filters']): MarketplaceProduct[] {\n      if (!filters) return products;\n      return products.filter(product => {\n        if (filters.categories?.length && !filters.categories.some(c => product.categories.includes(c))) {\n          return false;\n        }\n        if (filters.priceRange) {\n          const { min, max } = filters.priceRange;\n          if (min && product.price < min) return false;\n          if (max && product.price > max) return false;\n        }\n        if (filters.status?.length && !filters.status.includes(product.status)) {\n          return false;\n        }\n        if (filters.dateRange) {\n          const productDate = new Date(product.createdAt || product.updatedAt);\n          if (filters.dateRange.start && productDate < filters.dateRange.start) {\n            return false;\n          }\n          if (filters.dateRange.end && productDate > filters.dateRange.end) {\n            return false;\n          }\n        }\n        return true;\n      });\n    }\n  \n    // Validate product data\n    private async validateProduct(product: MarketplaceProduct): Promise<MarketplaceProduct> {\n      const errors: string[] = [];\n      if (!product.title?.trim()) errors.push('Title is required');\n      if (!product.sku?.trim()) errors.push('SKU is required');\n      if (typeof product.price !== 'number' || product.price < 0) {\n        errors.push('Price must be a positive number');\n      }\n      if (!product.vendor?.trim()) errors.push('Vendor is required');\n      if (!Array.isArray(product.images) || product.images.length === 0) {\n        errors.push('At least one image is required');\n      } else {\n        product.images.forEach((image, index) => {\n          if (!image.url) errors.push(`Image ${index + 1} URL is required`);\n        });\n      }\n      if (product.variants?.length) {\n        product.variants.forEach((variant, index) => {\n          if (!variant.sku) errors.push(`Variant ${index + 1} SKU is required`);\n          if (!variant.title) errors.push(`Variant ${index + 1} title is required`);\n          if (typeof variant.price !== 'number' || variant.price < 0) {\n            errors.push(`Variant ${index + 1} price must be a positive number`);\n          }\n          if (!variant.options || Object.keys(variant.options).length === 0) {\n            errors.push(`Variant ${index + 1} must have at least one option`);\n          }\n        });\n      }\n      if (product.options?.length) {\n        product.options.forEach((option, index) => {\n          if (!option.name) errors.push(`Option ${index + 1} name is required`);\n          if (!Array.isArray(option.values) || option.values.length === 0) {\n            errors.push(`Option ${index + 1} must have at least one value`);\n          }\n        });\n      }\n      if (!product.description?.trim()) errors.push('Description is required');\n      if (!Array.isArray(product.categories) || product.categories.length === 0) {\n        errors.push('At least one category is required');\n      }\n      if (errors.length > 0) {\n        throw new Error(`Validation failed: ${errors.join(', ')}`);\n      }\n      return product;\n    }\n  \n    // Transform products based on mapping or custom function\n    private async transformProducts(products: MarketplaceProduct[], options: ImportOptions): Promise<MarketplaceProduct[]> {\n      const transformed: MarketplaceProduct[] = [];\n      for (const product of products) {\n        let transformedProduct = { ...product };\n        if (options.mapping) {\n          Object.entries(options.mapping).forEach(([from, to]) => {\n            transformedProduct[to] = product[from];\n          });\n        }\n        if (options.transform) {\n          transformedProduct = await options.transform(transformedProduct);\n        }\n        transformed.push(transformedProduct);\n      }\n      return transformed;\n    }\n  \n    // Determine fields to include for export\n    private getExportFields(options: ExportOptions): string[] {\n      const allFields = [\n        'id', 'title', 'description', 'price', 'compareAtPrice',\n        'sku', 'barcode', 'vendor', 'quantity', 'images',\n        'variants', 'options', 'categories', 'tags', 'attributes',\n        'status', 'sourceUrl', 'sourceId', 'sourcePlatform'\n      ];\n      if (options.includeFields) {\n        return options.includeFields;\n      }\n      if (options.excludeFields) {\n        return allFields.filter(field => !options.excludeFields.includes(field));\n      }\n      return allFields;\n    }\n  \n    // Create batches of items\n    private createBatches<T>(items: T[], batchSize: number): T[][] {\n      const batches: T[][] = [];\n      for (let i = 0; i < items.length; i += batchSize) {\n        batches.push(items.slice(i, i + batchSize));\n      }\n      return batches;\n    }\n  \n    // Retry an operation with exponential backoff\n    private async retryOperation<T>(\n      operation: () => Promise<T>,\n      retries: number = this.config.retryOptions?.maxRetries || 3,\n      delay: number = this.config.retryOptions?.initialDelay || 1000\n    ): Promise<T> {\n      try {\n        return await operation();\n      } catch (error) {\n        if (retries > 0) {\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.retryOperation(operation, retries - 1, delay * 2);\n        }\n        throw error;\n      }\n    }\n  \n    // Export methods for CSV, JSON, and XML\n    private async exportToCSV(products: MarketplaceProduct[], fields: string[]): Promise<string> {\n      return createCSV(products, fields);\n    }\n  \n    private async exportToJSON(products: MarketplaceProduct[], fields: string[]): Promise<string> {\n      const filteredProducts = products.map(product => {\n        const filtered: any = {};\n        fields.forEach(field => filtered[field] = product[field]);\n        return filtered;\n      });\n      return JSON.stringify(filteredProducts, null, 2);\n    }\n  \n    private async exportToXML(products: MarketplaceProduct[], fields: string[]): Promise<string> {\n      return createXML('products', products, fields);\n    }\n  }\n  \n  // AmazonAPI handles remote API interactions\n  class AmazonAPI {\n    private accessToken?: string;\n  \n    constructor(private config: MarketplaceConfig) {}\n  \n    async authenticate(): Promise<void> {\n      const response = await fetch(`${this.config.apiUrl}/auth/token`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          refresh_token: this.config.refreshToken,\n          grant_type: 'refresh_token'\n        })\n      });\n      if (!response.ok) {\n        throw new AmazonAPIError('AUTH_FAILED', 'Authentication failed');\n      }\n      const data = await response.json();\n      this.accessToken = data.access_token;\n    }\n  \n    async getProducts(filters?: ImportOptions['filters']): Promise<MarketplaceProduct[]> {\n      const response = await this.request('/products', { method: 'GET', params: filters });\n      return response.products;\n    }\n  \n    async findProductBySKU(sku: string): Promise<MarketplaceProduct | null> {\n      const response = await this.request('/products/lookup', { method: 'GET', params: { sku } });\n      return response.product || null;\n    }\n  \n    async createProduct(product: MarketplaceProduct): Promise<MarketplaceProduct> {\n      const response = await this.request('/products', { method: 'POST', body: product });\n      return response.product;\n    }\n  \n    async updateProduct(id: string, product: MarketplaceProduct): Promise<MarketplaceProduct> {\n      const response = await this.request(`/products/${id}`, { method: 'PUT', body: product });\n      return response.product;\n    }\n  \n    async uploadFile(content: string, format: string): Promise<string> {\n      const response = await this.request('/upload', { method: 'POST', body: { content, format } });\n      return response.url;\n    }\n  \n    async uploadImage(image: File | string): Promise<string> {\n      const formData = new FormData();\n      if (typeof image === 'string') {\n        const response = await fetch(image);\n        const blob = await response.blob();\n        formData.append('image', blob);\n      } else {\n        formData.append('image', image);\n      }\n      const response = await fetch(`${this.config.apiUrl}/images/upload`, {\n        method: 'POST',\n        headers: { 'Authorization': `Bearer ${this.accessToken}` },\n        body: formData\n      });\n      if (!response.ok) {\n        throw new AmazonAPIError('IMAGE_UPLOAD_FAILED', 'Failed to upload image');\n      }\n      const data = await response.json();\n      return data.url;\n    }\n  \n    async processProductImages(product: MarketplaceProduct): Promise<ProductImage[]> {\n      const processedImages: ProductImage[] = [];\n      for (const image of product.images) {\n        try {\n          const uploadedUrl = await this.uploadImage(image.url);\n          processedImages.push({ ...image, url: uploadedUrl });\n        } catch (error: any) {\n          logger.error(`Failed to process image: ${error.message}`);\n        }\n      }\n      return processedImages;\n    }\n  \n    // Generic request method with authentication & retry\n    private async request(endpoint: string, options: { method: string; params?: any; body?: any }): Promise<any> {\n      if (!this.accessToken) {\n        await this.authenticate();\n      }\n      const url = new URL(this.config.apiUrl + endpoint);\n      if (options.params) {\n        Object.entries(options.params).forEach(([key, value]) => {\n          url.searchParams.append(key, String(value));\n        });\n      }\n      const response = await fetch(url.toString(), {\n        method: options.method,\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: options.body ? JSON.stringify(options.body) : undefined\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          await this.authenticate();\n          return this.request(endpoint, options);\n        }\n        throw new AmazonAPIError('API_ERROR', response.statusText);\n      }\n      return response.json();\n    }\n  }\n  \n  // Performance Tracker for measuring execution time\n  class PerformanceTracker {\n    private metrics = new Map<string, number[]>();\n    start(operation: string): void {\n      if (!this.metrics.has(operation)) {\n        this.metrics.set(operation, []);\n      }\n      this.metrics.get(operation).push(Date.now());\n    }\n    end(operation: string): number {\n      const times = this.metrics.get(operation);\n      if (!times || times.length === 0) return 0;\n      const startTime = times.pop();\n      const duration = Date.now() - startTime;\n      logger.info(`Operation ${operation} took ${duration}ms`);\n      return duration;\n    }\n    getStats(): { [key: string]: { avg: number; count: number } } {\n      const stats = {};\n      this.metrics.forEach((times, operation) => {\n        const total = times.reduce((sum, time) => sum + time, 0);\n        stats[operation] = { avg: total / times.length, count: times.length };\n      });\n      return stats;\n    }\n  }\n  \n  export default AmazonMarketplace;"],
      names: ["AmazonMarketplace", "CacheManager", "set", "key", "data", "ttl", "cache", "timestamp", "Date", "now", "get", "item", "delete", "clear", "Map", "RateLimiter", "constructor", "limit", "interval", "requests", "lastReset", "checkLimit", "waitTime", "Promise", "resolve", "setTimeout", "EventEmitter", "on", "event", "callback", "listeners", "has", "push", "emit", "callbacks", "forEach", "AmazonAPIError", "Error", "code", "message", "details", "name", "Analytics", "trackOperation", "operation", "duration", "success", "operationCounts", "previousAvg", "averageResponseTimes", "count", "successRates", "generateReport", "errorRates", "syncStats", "lastSync", "totalSyncs", "successfulSyncs", "failedSyncs", "performance", "averageImportTime", "averageExportTime", "averageProcessingTime", "ProductTransformer", "addRule", "rule", "rules", "transform", "product", "transformed", "applyRule", "params", "mappings", "field", "config", "api", "AmazonAPI", "PerformanceTracker", "rateLimiter", "rateLimit", "maxRequests", "events", "analytics", "transformer", "importProducts", "options", "start", "startTime", "errors", "warnings", "products", "retryOperation", "authenticate", "source", "importFromFile", "importFromUrl", "importFromAPI", "filters", "filterProducts", "mapping", "transformProducts", "processedProducts", "updatedCount", "skippedCount", "batchSize", "batches", "createBatches", "batch", "batchResults", "allSettled", "map", "validatedProduct", "validateProduct", "images", "processProductImages", "variants", "length", "processVariants", "existingProduct", "findProductBySKU", "sku", "updated", "updateProduct", "id", "created", "createProduct", "error", "result", "index", "status", "reason", "timeElapsed", "end", "stats", "total", "undefined", "imported", "failed", "skipped", "metadata", "importedAt", "toISOString", "logger", "exportProducts", "transformBeforeExport", "all", "p", "fields", "getExportFields", "exportedData", "format", "exportToCSV", "exportToJSON", "exportToXML", "uploadedUrl", "uploadFile", "url", "exported", "exportedAt", "syncProducts", "localProducts", "getLocalProducts", "remoteProducts", "getProducts", "conflicts", "backup", "backupProducts", "findConflicts", "handleConflicts", "conflictResolution", "syncedCount", "direction", "pushToRemote", "pullFromRemote", "synced", "backupId", "backupMetadata", "type", "size", "JSON", "stringify", "checksum", "info", "local", "remote", "resolution", "conflict", "resolved", "processedVariants", "variant", "price", "title", "existingVariant", "processedImages", "file", "content", "text", "split", "pop", "toLowerCase", "parseCSV", "parse", "parseXML", "response", "fetch", "filter", "categories", "some", "c", "includes", "priceRange", "min", "max", "dateRange", "productDate", "createdAt", "updatedAt", "trim", "vendor", "Array", "isArray", "image", "Object", "keys", "option", "values", "description", "join", "transformedProduct", "entries", "from", "to", "allFields", "includeFields", "excludeFields", "items", "i", "slice", "retries", "retryOptions", "maxRetries", "delay", "initialDelay", "createCSV", "filteredProducts", "filtered", "createXML", "apiUrl", "method", "headers", "body", "client_id", "clientId", "client_secret", "clientSecret", "refresh_token", "refreshToken", "grant_type", "ok", "json", "accessToken", "access_token", "request", "uploadImage", "formData", "FormData", "blob", "append", "endpoint", "URL", "value", "searchParams", "String", "toString", "statusText", "metrics", "times", "getStats", "reduce", "sum", "time", "avg"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5951a1d811ee061f3f40c30689a62dcb5f6a4e7c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14dr1jseq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14dr1jseq();
cov_14dr1jseq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_14dr1jseq().f[0]++;
  cov_14dr1jseq().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_14dr1jseq().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_14dr1jseq().s[3]++;
_export(exports, {
  AmazonMarketplace: function () {
    /* istanbul ignore next */
    cov_14dr1jseq().f[1]++;
    cov_14dr1jseq().s[4]++;
    return AmazonMarketplace;
  },
  default: function () {
    /* istanbul ignore next */
    cov_14dr1jseq().f[2]++;
    cov_14dr1jseq().s[5]++;
    return _default;
  }
});
const _csv =
/* istanbul ignore next */
(cov_14dr1jseq().s[6]++, require("../../utils/csv"));
const _xml =
/* istanbul ignore next */
(cov_14dr1jseq().s[7]++, require("../../utils/xml"));
const _logging =
/* istanbul ignore next */
(cov_14dr1jseq().s[8]++, require("../logging"));
//   import { parseCSV, createCSV } from '../../utils/csv';
//   import { parseXML, createXL } from '../../utils/xml';
//   import { logger } from '../../utils/logger';
// Cache Manager for improved performance
class CacheManager {
  set(key, data, ttl =
  /* istanbul ignore next */
  (cov_14dr1jseq().b[0][0]++, 3600000)) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[3]++;
    cov_14dr1jseq().s[9]++;
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl
    });
  }
  get(key) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[4]++;
    const item =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[10]++, this.cache.get(key));
    /* istanbul ignore next */
    cov_14dr1jseq().s[11]++;
    if (!item) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[1][0]++;
      cov_14dr1jseq().s[12]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[1][1]++;
    }
    cov_14dr1jseq().s[13]++;
    if (Date.now() - item.timestamp > item.ttl) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[2][0]++;
      cov_14dr1jseq().s[14]++;
      this.cache.delete(key);
      /* istanbul ignore next */
      cov_14dr1jseq().s[15]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[2][1]++;
    }
    cov_14dr1jseq().s[16]++;
    return item.data;
  }
  clear() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[5]++;
    cov_14dr1jseq().s[17]++;
    this.cache.clear();
  }
  constructor() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[6]++;
    cov_14dr1jseq().s[18]++;
    this.cache = new Map();
  }
}
// Rate Limiter to prevent exceeding API limits
class RateLimiter {
  constructor(limit =
  /* istanbul ignore next */
  (cov_14dr1jseq().b[3][0]++, 100), interval =
  /* istanbul ignore next */
  (cov_14dr1jseq().b[4][0]++, 60000)) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[7]++;
    cov_14dr1jseq().s[19]++;
    this.limit = limit;
    /* istanbul ignore next */
    cov_14dr1jseq().s[20]++;
    this.interval = interval;
    /* istanbul ignore next */
    cov_14dr1jseq().s[21]++;
    this.requests = 0;
    /* istanbul ignore next */
    cov_14dr1jseq().s[22]++;
    this.lastReset = Date.now();
  }
  async checkLimit() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[8]++;
    const now =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[23]++, Date.now());
    /* istanbul ignore next */
    cov_14dr1jseq().s[24]++;
    if (now - this.lastReset > this.interval) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[5][0]++;
      cov_14dr1jseq().s[25]++;
      this.requests = 0;
      /* istanbul ignore next */
      cov_14dr1jseq().s[26]++;
      this.lastReset = now;
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[5][1]++;
    }
    cov_14dr1jseq().s[27]++;
    if (this.requests >= this.limit) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[6][0]++;
      const waitTime =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[28]++, this.interval - (now - this.lastReset));
      /* istanbul ignore next */
      cov_14dr1jseq().s[29]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_14dr1jseq().f[9]++;
        cov_14dr1jseq().s[30]++;
        return setTimeout(resolve, waitTime);
      });
      /* istanbul ignore next */
      cov_14dr1jseq().s[31]++;
      return this.checkLimit();
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[6][1]++;
    }
    cov_14dr1jseq().s[32]++;
    this.requests++;
    /* istanbul ignore next */
    cov_14dr1jseq().s[33]++;
    return true;
  }
}
class EventEmitter {
  on(event, callback) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[10]++;
    cov_14dr1jseq().s[34]++;
    if (!this.listeners.has(event)) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[7][0]++;
      cov_14dr1jseq().s[35]++;
      this.listeners.set(event, []);
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[7][1]++;
    }
    cov_14dr1jseq().s[36]++;
    this.listeners.get(event).push(callback);
  }
  emit(event, data) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[11]++;
    const callbacks =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[37]++,
    /* istanbul ignore next */
    (cov_14dr1jseq().b[8][0]++, this.listeners.get(event)) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[8][1]++, []));
    /* istanbul ignore next */
    cov_14dr1jseq().s[38]++;
    callbacks.forEach(callback => {
      /* istanbul ignore next */
      cov_14dr1jseq().f[12]++;
      cov_14dr1jseq().s[39]++;
      return callback(data);
    });
  }
  constructor() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[13]++;
    cov_14dr1jseq().s[40]++;
    this.listeners = new Map();
  }
}
// Custom Error class for Amazon API errors
class AmazonAPIError extends Error {
  constructor(code, message, details) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[14]++;
    cov_14dr1jseq().s[41]++;
    super(message), this.code = code, this.details = details;
    /* istanbul ignore next */
    cov_14dr1jseq().s[42]++;
    this.name = 'AmazonAPIError';
  }
}
// Analytics class to track operations and performance
class Analytics {
  trackOperation(operation, duration, success) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[15]++;
    cov_14dr1jseq().s[43]++;
    this.data.operationCounts[operation] = (
    /* istanbul ignore next */
    (cov_14dr1jseq().b[9][0]++, this.data.operationCounts[operation]) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[9][1]++, 0)) + 1;
    // Calculate average response times and success rates (simplified)
    const previousAvg =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[44]++,
    /* istanbul ignore next */
    (cov_14dr1jseq().b[10][0]++, this.data.averageResponseTimes[operation]) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[10][1]++, 0));
    const count =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[45]++, this.data.operationCounts[operation]);
    /* istanbul ignore next */
    cov_14dr1jseq().s[46]++;
    this.data.averageResponseTimes[operation] = (previousAvg * (count - 1) + duration) / count;
    /* istanbul ignore next */
    cov_14dr1jseq().s[47]++;
    this.data.successRates[operation] = (
    /* istanbul ignore next */
    (cov_14dr1jseq().b[11][0]++, this.data.successRates[operation]) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[11][1]++, 0)) + (success ?
    /* istanbul ignore next */
    (cov_14dr1jseq().b[12][0]++, 1) :
    /* istanbul ignore next */
    (cov_14dr1jseq().b[12][1]++, 0));
  }
  generateReport() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[16]++;
    cov_14dr1jseq().s[48]++;
    return this.data;
  }
  constructor() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[17]++;
    cov_14dr1jseq().s[49]++;
    this.data = {
      operationCounts: {},
      errorRates: {},
      averageResponseTimes: {},
      successRates: {},
      syncStats: {
        lastSync: new Date(),
        totalSyncs: 0,
        successfulSyncs: 0,
        failedSyncs: 0
      },
      performance: {
        averageImportTime: 0,
        averageExportTime: 0,
        averageProcessingTime: 0
      }
    };
  }
}
// Product Transformer for advanced field transformations
class ProductTransformer {
  addRule(rule) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[18]++;
    cov_14dr1jseq().s[50]++;
    this.rules.push(rule);
  }
  async transform(product) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[19]++;
    let transformed =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[51]++, {
      ...product
    });
    /* istanbul ignore next */
    cov_14dr1jseq().s[52]++;
    for (const rule of this.rules) {
      /* istanbul ignore next */
      cov_14dr1jseq().s[53]++;
      transformed = await this.applyRule(transformed, rule);
    }
    /* istanbul ignore next */
    cov_14dr1jseq().s[54]++;
    return transformed;
  }
  async applyRule(product, rule) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[20]++;
    cov_14dr1jseq().s[55]++;
    // Dummy implementation: extend this to cover 'combine', 'split', 'format', etc.
    if (
    /* istanbul ignore next */
    (cov_14dr1jseq().b[14][0]++, rule.operation === 'map') &&
    /* istanbul ignore next */
    (cov_14dr1jseq().b[14][1]++, rule.params.mappings)) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[13][0]++;
      cov_14dr1jseq().s[56]++;
      product[rule.field] =
      /* istanbul ignore next */
      (cov_14dr1jseq().b[15][0]++, rule.params.mappings[product[rule.field]]) ||
      /* istanbul ignore next */
      (cov_14dr1jseq().b[15][1]++, product[rule.field]);
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[13][1]++;
    }
    cov_14dr1jseq().s[57]++;
    return product;
  }
  constructor() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[21]++;
    cov_14dr1jseq().s[58]++;
    this.rules = [];
  }
}
class AmazonMarketplace {
  constructor(config) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[22]++;
    cov_14dr1jseq().s[59]++;
    this.config = config;
    /* istanbul ignore next */
    cov_14dr1jseq().s[60]++;
    this.api = new AmazonAPI(config);
    /* istanbul ignore next */
    cov_14dr1jseq().s[61]++;
    this.performance = new PerformanceTracker();
    /* istanbul ignore next */
    cov_14dr1jseq().s[62]++;
    this.cache = new CacheManager();
    /* istanbul ignore next */
    cov_14dr1jseq().s[63]++;
    this.rateLimiter = new RateLimiter(
    /* istanbul ignore next */
    (cov_14dr1jseq().b[16][0]++, config.rateLimit?.maxRequests) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[16][1]++, 100),
    /* istanbul ignore next */
    (cov_14dr1jseq().b[17][0]++, config.rateLimit?.interval) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[17][1]++, 60000));
    /* istanbul ignore next */
    cov_14dr1jseq().s[64]++;
    this.events = new EventEmitter();
    /* istanbul ignore next */
    cov_14dr1jseq().s[65]++;
    this.analytics = new Analytics();
    /* istanbul ignore next */
    cov_14dr1jseq().s[66]++;
    this.transformer = new ProductTransformer();
  }
  // Method to import products
  async importProducts(options) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[23]++;
    cov_14dr1jseq().s[67]++;
    this.events.emit('import:start', options);
    /* istanbul ignore next */
    cov_14dr1jseq().s[68]++;
    this.performance.start('importProducts');
    /* istanbul ignore next */
    cov_14dr1jseq().s[69]++;
    await this.rateLimiter.checkLimit();
    const startTime =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[70]++, Date.now());
    const errors =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[71]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[72]++, []);
    let products =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[73]++, []);
    /* istanbul ignore next */
    cov_14dr1jseq().s[74]++;
    try {
      /* istanbul ignore next */
      cov_14dr1jseq().s[75]++;
      // Authenticate using retry mechanism
      await this.retryOperation(() => {
        /* istanbul ignore next */
        cov_14dr1jseq().f[24]++;
        cov_14dr1jseq().s[76]++;
        return this.api.authenticate();
      });
      // Import based on source type
      /* istanbul ignore next */
      cov_14dr1jseq().s[77]++;
      switch (options.source) {
        case 'file':
          /* istanbul ignore next */
          cov_14dr1jseq().b[18][0]++;
          cov_14dr1jseq().s[78]++;
          products = await this.importFromFile(options);
          /* istanbul ignore next */
          cov_14dr1jseq().s[79]++;
          break;
        case 'url':
          /* istanbul ignore next */
          cov_14dr1jseq().b[18][1]++;
          cov_14dr1jseq().s[80]++;
          products = await this.importFromUrl(options);
          /* istanbul ignore next */
          cov_14dr1jseq().s[81]++;
          break;
        case 'api':
          /* istanbul ignore next */
          cov_14dr1jseq().b[18][2]++;
          cov_14dr1jseq().s[82]++;
          products = await this.importFromAPI(options);
          /* istanbul ignore next */
          cov_14dr1jseq().s[83]++;
          break;
        default:
          /* istanbul ignore next */
          cov_14dr1jseq().b[18][3]++;
          cov_14dr1jseq().s[84]++;
          throw new Error('Invalid import source');
      }
      // Apply filters if provided
      /* istanbul ignore next */
      cov_14dr1jseq().s[85]++;
      if (options.filters) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[19][0]++;
        cov_14dr1jseq().s[86]++;
        products = this.filterProducts(products, options.filters);
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[19][1]++;
      }
      // Apply transformation rules if provided
      cov_14dr1jseq().s[87]++;
      if (
      /* istanbul ignore next */
      (cov_14dr1jseq().b[21][0]++, options.mapping) ||
      /* istanbul ignore next */
      (cov_14dr1jseq().b[21][1]++, options.transform)) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[20][0]++;
        cov_14dr1jseq().s[88]++;
        products = await this.transformProducts(products, options);
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[20][1]++;
      }
      // Validate and process each product
      const processedProducts =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[89]++, []);
      let updatedCount =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[90]++, 0);
      let skippedCount =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[91]++, 0);
      // Process products in batches
      const batchSize =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[92]++,
      /* istanbul ignore next */
      (cov_14dr1jseq().b[22][0]++, options.batchSize) ||
      /* istanbul ignore next */
      (cov_14dr1jseq().b[22][1]++, 50));
      const batches =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[93]++, this.createBatches(products, batchSize));
      /* istanbul ignore next */
      cov_14dr1jseq().s[94]++;
      for (const batch of batches) {
        const batchResults =
        /* istanbul ignore next */
        (cov_14dr1jseq().s[95]++, await Promise.allSettled(batch.map(async product => {
          /* istanbul ignore next */
          cov_14dr1jseq().f[25]++;
          cov_14dr1jseq().s[96]++;
          try {
            // Validate product
            let validatedProduct =
            /* istanbul ignore next */
            (cov_14dr1jseq().s[97]++, await this.validateProduct(product));
            // Transform product using advanced transformer
            /* istanbul ignore next */
            cov_14dr1jseq().s[98]++;
            validatedProduct = await this.transformer.transform(validatedProduct);
            // Process images
            /* istanbul ignore next */
            cov_14dr1jseq().s[99]++;
            validatedProduct.images = await this.api.processProductImages(validatedProduct);
            // Process variants, if present
            /* istanbul ignore next */
            cov_14dr1jseq().s[100]++;
            if (validatedProduct.variants?.length) {
              /* istanbul ignore next */
              cov_14dr1jseq().b[23][0]++;
              cov_14dr1jseq().s[101]++;
              validatedProduct.variants = await this.processVariants(validatedProduct);
            } else
            /* istanbul ignore next */
            {
              cov_14dr1jseq().b[23][1]++;
            }
            // Check if product exists remotely
            const existingProduct =
            /* istanbul ignore next */
            (cov_14dr1jseq().s[102]++, await this.api.findProductBySKU(product.sku));
            /* istanbul ignore next */
            cov_14dr1jseq().s[103]++;
            if (existingProduct) {
              /* istanbul ignore next */
              cov_14dr1jseq().b[24][0]++;
              const updated =
              /* istanbul ignore next */
              (cov_14dr1jseq().s[104]++, await this.api.updateProduct(existingProduct.id, validatedProduct));
              /* istanbul ignore next */
              cov_14dr1jseq().s[105]++;
              updatedCount++;
              /* istanbul ignore next */
              cov_14dr1jseq().s[106]++;
              return updated;
            } else {
              /* istanbul ignore next */
              cov_14dr1jseq().b[24][1]++;
              const created =
              /* istanbul ignore next */
              (cov_14dr1jseq().s[107]++, await this.api.createProduct(validatedProduct));
              /* istanbul ignore next */
              cov_14dr1jseq().s[108]++;
              processedProducts.push(created);
              /* istanbul ignore next */
              cov_14dr1jseq().s[109]++;
              return created;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_14dr1jseq().s[110]++;
            errors.push({
              code: 'VALIDATION_ERROR',
              message: error.message,
              product,
              field: error.field
            });
            /* istanbul ignore next */
            cov_14dr1jseq().s[111]++;
            skippedCount++;
            /* istanbul ignore next */
            cov_14dr1jseq().s[112]++;
            return null;
          }
        })));
        /* istanbul ignore next */
        cov_14dr1jseq().s[113]++;
        batchResults.forEach((result, index) => {
          /* istanbul ignore next */
          cov_14dr1jseq().f[26]++;
          cov_14dr1jseq().s[114]++;
          if (result.status === 'rejected') {
            /* istanbul ignore next */
            cov_14dr1jseq().b[25][0]++;
            cov_14dr1jseq().s[115]++;
            errors.push({
              code: 'PROCESSING_ERROR',
              message: result.reason.message,
              product: batch[index]
            });
          } else
          /* istanbul ignore next */
          {
            cov_14dr1jseq().b[25][1]++;
          }
        });
      }
      const timeElapsed =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[116]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_14dr1jseq().s[117]++;
      this.performance.end('importProducts');
      /* istanbul ignore next */
      cov_14dr1jseq().s[118]++;
      this.analytics.trackOperation('importProducts', timeElapsed, errors.length === 0);
      /* istanbul ignore next */
      cov_14dr1jseq().s[119]++;
      this.events.emit('import:end', {
        result: 'success',
        stats: {
          total: products.length
        }
      });
      /* istanbul ignore next */
      cov_14dr1jseq().s[120]++;
      return {
        success: errors.length === 0,
        products: processedProducts,
        errors: errors.length > 0 ?
        /* istanbul ignore next */
        (cov_14dr1jseq().b[26][0]++, errors) :
        /* istanbul ignore next */
        (cov_14dr1jseq().b[26][1]++, undefined),
        warnings: warnings.length > 0 ?
        /* istanbul ignore next */
        (cov_14dr1jseq().b[27][0]++, warnings) :
        /* istanbul ignore next */
        (cov_14dr1jseq().b[27][1]++, undefined),
        stats: {
          total: products.length,
          imported: processedProducts.length,
          failed: errors.length,
          updated: updatedCount,
          skipped: skippedCount,
          timeElapsed
        },
        metadata: {
          importedAt: new Date().toISOString()
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14dr1jseq().s[121]++;
      _logging.logger.error('Amazon import error:', error);
      /* istanbul ignore next */
      cov_14dr1jseq().s[122]++;
      this.performance.end('importProducts');
      /* istanbul ignore next */
      cov_14dr1jseq().s[123]++;
      this.events.emit('error', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_14dr1jseq().s[124]++;
      return {
        success: false,
        products: [],
        errors: [{
          code: 'IMPORT_FAILED',
          message: error.message
        }],
        stats: {
          total: 0,
          imported: 0,
          failed: 1,
          updated: 0,
          skipped: 0,
          timeElapsed: Date.now() - startTime
        }
      };
    }
  }
  // Method to export products
  async exportProducts(products, options) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[27]++;
    cov_14dr1jseq().s[125]++;
    this.events.emit('export:start', options);
    /* istanbul ignore next */
    cov_14dr1jseq().s[126]++;
    this.performance.start('exportProducts');
    /* istanbul ignore next */
    cov_14dr1jseq().s[127]++;
    await this.rateLimiter.checkLimit();
    const startTime =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[128]++, Date.now());
    /* istanbul ignore next */
    cov_14dr1jseq().s[129]++;
    try {
      /* istanbul ignore next */
      cov_14dr1jseq().s[130]++;
      // Apply filters on export if provided
      if (options.filters) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[28][0]++;
        cov_14dr1jseq().s[131]++;
        products = this.filterProducts(products, options.filters);
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[28][1]++;
      }
      // Optionally transform products before export
      cov_14dr1jseq().s[132]++;
      if (options.transformBeforeExport) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[29][0]++;
        cov_14dr1jseq().s[133]++;
        products = await Promise.all(products.map(p => {
          /* istanbul ignore next */
          cov_14dr1jseq().f[28]++;
          cov_14dr1jseq().s[134]++;
          return options.transformBeforeExport(p);
        }));
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[29][1]++;
      }
      // Determine fields to export
      const fields =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[135]++, this.getExportFields(options));
      let exportedData;
      /* istanbul ignore next */
      cov_14dr1jseq().s[136]++;
      switch (options.format) {
        case 'csv':
          /* istanbul ignore next */
          cov_14dr1jseq().b[30][0]++;
          cov_14dr1jseq().s[137]++;
          exportedData = await this.exportToCSV(products, fields);
          /* istanbul ignore next */
          cov_14dr1jseq().s[138]++;
          break;
        case 'json':
          /* istanbul ignore next */
          cov_14dr1jseq().b[30][1]++;
          cov_14dr1jseq().s[139]++;
          exportedData = await this.exportToJSON(products, fields);
          /* istanbul ignore next */
          cov_14dr1jseq().s[140]++;
          break;
        case 'xml':
          /* istanbul ignore next */
          cov_14dr1jseq().b[30][2]++;
          cov_14dr1jseq().s[141]++;
          exportedData = await this.exportToXML(products, fields);
          /* istanbul ignore next */
          cov_14dr1jseq().s[142]++;
          break;
        default:
          /* istanbul ignore next */
          cov_14dr1jseq().b[30][3]++;
          cov_14dr1jseq().s[143]++;
          throw new Error(`Unsupported export format: ${options.format}`);
      }
      // Upload exported data if destination requires it
      let uploadedUrl;
      /* istanbul ignore next */
      cov_14dr1jseq().s[144]++;
      if (exportedData) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[31][0]++;
        cov_14dr1jseq().s[145]++;
        uploadedUrl = await this.retryOperation(() => {
          /* istanbul ignore next */
          cov_14dr1jseq().f[29]++;
          cov_14dr1jseq().s[146]++;
          return this.api.uploadFile(exportedData, options.format);
        });
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[31][1]++;
      }
      const timeElapsed =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[147]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_14dr1jseq().s[148]++;
      this.performance.end('exportProducts');
      /* istanbul ignore next */
      cov_14dr1jseq().s[149]++;
      this.analytics.trackOperation('exportProducts', timeElapsed, true);
      /* istanbul ignore next */
      cov_14dr1jseq().s[150]++;
      this.events.emit('export:end', {
        result: 'success',
        stats: {
          total: products.length
        }
      });
      /* istanbul ignore next */
      cov_14dr1jseq().s[151]++;
      return {
        success: true,
        url: uploadedUrl,
        data: exportedData,
        stats: {
          total: products.length,
          exported: products.length,
          failed: 0,
          timeElapsed
        },
        metadata: {
          exportedAt: new Date().toISOString()
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_14dr1jseq().s[152]++;
      _logging.logger.error('Amazon export error:', error);
      /* istanbul ignore next */
      cov_14dr1jseq().s[153]++;
      this.performance.end('exportProducts');
      /* istanbul ignore next */
      cov_14dr1jseq().s[154]++;
      this.events.emit('error', {
        error: error.message
      });
      /* istanbul ignore next */
      cov_14dr1jseq().s[155]++;
      return {
        success: false,
        errors: [error.message],
        stats: {
          total: products.length,
          exported: 0,
          failed: products.length,
          timeElapsed: Date.now() - startTime
        }
      };
    }
  }
  // Method to synchronize products with local DB and remote API
  async syncProducts(options) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[30]++;
    const startTime =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[156]++, Date.now());
    // Retrieve local products (assumed to be implemented elsewhere)
    const localProducts =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[157]++, await this.getLocalProducts());
    // Retrieve remote products via API
    const remoteProducts =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[158]++, await this.api.getProducts());
    let conflicts =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[159]++, []);
    // Optionally backup local products
    /* istanbul ignore next */
    cov_14dr1jseq().s[160]++;
    if (options.backup) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[32][0]++;
      cov_14dr1jseq().s[161]++;
      await this.backupProducts(localProducts);
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[32][1]++;
    }
    // Find conflicts between local and remote data
    cov_14dr1jseq().s[162]++;
    conflicts = this.findConflicts(localProducts, remoteProducts);
    // Handle conflicts based on resolution strategy
    /* istanbul ignore next */
    cov_14dr1jseq().s[163]++;
    if (conflicts.length > 0) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[33][0]++;
      cov_14dr1jseq().s[164]++;
      await this.handleConflicts(conflicts, options.conflictResolution);
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[33][1]++;
    }
    // Perform sync based on direction
    let syncedCount =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[165]++, 0);
    /* istanbul ignore next */
    cov_14dr1jseq().s[166]++;
    if (
    /* istanbul ignore next */
    (cov_14dr1jseq().b[35][0]++, options.direction === 'push') ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[35][1]++, options.direction === 'bidirectional')) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[34][0]++;
      cov_14dr1jseq().s[167]++;
      syncedCount += await this.pushToRemote(localProducts);
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[34][1]++;
    }
    cov_14dr1jseq().s[168]++;
    if (
    /* istanbul ignore next */
    (cov_14dr1jseq().b[37][0]++, options.direction === 'pull') ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[37][1]++, options.direction === 'bidirectional')) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[36][0]++;
      cov_14dr1jseq().s[169]++;
      syncedCount += await this.pullFromRemote(remoteProducts);
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[36][1]++;
    }
    const timeElapsed =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[170]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_14dr1jseq().s[171]++;
    return {
      success: conflicts.length === 0,
      conflicts,
      stats: {
        total: localProducts.length,
        synced: syncedCount,
        conflicts: conflicts.length,
        failed: localProducts.length - syncedCount,
        timeElapsed
      },
      backupId: options.backup ?
      /* istanbul ignore next */
      (cov_14dr1jseq().b[38][0]++, "backup_" + Date.now()) :
      /* istanbul ignore next */
      (cov_14dr1jseq().b[38][1]++, undefined)
    };
  }
  // Dummy method to get local products from a database
  async getLocalProducts() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[31]++;
    cov_14dr1jseq().s[172]++;
    // Replace with actual DB fetch
    return [];
  }
  // Dummy method to backup products
  async backupProducts(products) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[32]++;
    const backupMetadata =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[173]++, {
      id: "backup_" + Date.now(),
      timestamp: new Date(),
      type: "auto",
      reason: "Scheduled backup",
      products: products.length,
      size: JSON.stringify(products).length,
      checksum: "dummy-checksum"
    });
    // Save backup to file or DB
    /* istanbul ignore next */
    cov_14dr1jseq().s[174]++;
    _logging.logger.info("Backup created", backupMetadata);
  }
  // Dummy method to find conflicts between local and remote products
  findConflicts(local, remote) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[33]++;
    cov_14dr1jseq().s[175]++;
    // Implement actual conflict detection logic
    return [];
  }
  // Dummy method to handle conflicts
  async handleConflicts(conflicts, resolution) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[34]++;
    cov_14dr1jseq().s[176]++;
    // Implement conflict resolution logic
    conflicts.forEach(conflict => {
      /* istanbul ignore next */
      cov_14dr1jseq().f[35]++;
      cov_14dr1jseq().s[177]++;
      conflict.resolution = resolution;
      /* istanbul ignore next */
      cov_14dr1jseq().s[178]++;
      conflict.resolved = true;
    });
  }
  // Dummy method to push local products to remote API
  async pushToRemote(products) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[36]++;
    let count =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[179]++, 0);
    /* istanbul ignore next */
    cov_14dr1jseq().s[180]++;
    for (const product of products) {
      /* istanbul ignore next */
      cov_14dr1jseq().s[181]++;
      try {
        /* istanbul ignore next */
        cov_14dr1jseq().s[182]++;
        await this.api.createProduct(product);
        /* istanbul ignore next */
        cov_14dr1jseq().s[183]++;
        count++;
      } catch (error) {
        /* istanbul ignore next */
        cov_14dr1jseq().s[184]++;
        _logging.logger.error("Push to remote failed for SKU:", product.sku, error);
      }
    }
    /* istanbul ignore next */
    cov_14dr1jseq().s[185]++;
    return count;
  }
  // Dummy method to pull products from remote API into local DB
  async pullFromRemote(remoteProducts) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[37]++;
    cov_14dr1jseq().s[186]++;
    // Replace with actual DB update logic
    return remoteProducts.length;
  }
  // Process product variants using API methods
  async processVariants(product) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[38]++;
    const processedVariants =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[187]++, []);
    /* istanbul ignore next */
    cov_14dr1jseq().s[188]++;
    for (const variant of product.variants) {
      /* istanbul ignore next */
      cov_14dr1jseq().s[189]++;
      try {
        /* istanbul ignore next */
        cov_14dr1jseq().s[190]++;
        if (
        /* istanbul ignore next */
        (cov_14dr1jseq().b[40][0]++, !variant.sku) ||
        /* istanbul ignore next */
        (cov_14dr1jseq().b[40][1]++, !variant.price)) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[39][0]++;
          cov_14dr1jseq().s[191]++;
          throw new Error(`Invalid variant data for ${variant.title}`);
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[39][1]++;
        }
        const existingVariant =
        /* istanbul ignore next */
        (cov_14dr1jseq().s[192]++, await this.api.findProductBySKU(variant.sku));
        /* istanbul ignore next */
        cov_14dr1jseq().s[193]++;
        if (existingVariant) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[41][0]++;
          cov_14dr1jseq().s[194]++;
          throw new Error(`Duplicate SKU found: ${variant.sku}`);
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[41][1]++;
        }
        cov_14dr1jseq().s[195]++;
        if (variant.images?.length) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[42][0]++;
          const processedImages =
          /* istanbul ignore next */
          (cov_14dr1jseq().s[196]++, await this.api.processProductImages({
            ...product,
            images: variant.images
          }));
          /* istanbul ignore next */
          cov_14dr1jseq().s[197]++;
          variant.images = processedImages;
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[42][1]++;
        }
        cov_14dr1jseq().s[198]++;
        processedVariants.push(variant);
      } catch (error) {
        /* istanbul ignore next */
        cov_14dr1jseq().s[199]++;
        _logging.logger.error(`Failed to process variant: ${error.message}`);
      }
    }
    /* istanbul ignore next */
    cov_14dr1jseq().s[200]++;
    return processedVariants;
  }
  // Import products from a file
  async importFromFile(options) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[39]++;
    cov_14dr1jseq().s[201]++;
    if (!options.file) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[43][0]++;
      cov_14dr1jseq().s[202]++;
      throw new Error('File is required for file import');
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[43][1]++;
    }
    const content =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[203]++, await options.file.text());
    const format =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[204]++,
    /* istanbul ignore next */
    (cov_14dr1jseq().b[44][0]++, options.format) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[44][1]++, options.file.name.split('.').pop()?.toLowerCase()));
    /* istanbul ignore next */
    cov_14dr1jseq().s[205]++;
    switch (format) {
      case 'csv':
        /* istanbul ignore next */
        cov_14dr1jseq().b[45][0]++;
        cov_14dr1jseq().s[206]++;
        return (0, _csv.parseCSV)(content);
      case 'json':
        /* istanbul ignore next */
        cov_14dr1jseq().b[45][1]++;
        cov_14dr1jseq().s[207]++;
        return JSON.parse(content);
      case 'xml':
        /* istanbul ignore next */
        cov_14dr1jseq().b[45][2]++;
        cov_14dr1jseq().s[208]++;
        return (0, _xml.parseXML)(content);
      default:
        /* istanbul ignore next */
        cov_14dr1jseq().b[45][3]++;
        cov_14dr1jseq().s[209]++;
        throw new Error(`Unsupported file format: ${format}`);
    }
  }
  // Import products from a URL
  async importFromUrl(options) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[40]++;
    cov_14dr1jseq().s[210]++;
    if (!options.url) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[46][0]++;
      cov_14dr1jseq().s[211]++;
      throw new Error('URL is required for URL import');
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[46][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[212]++, await this.retryOperation(() => {
      /* istanbul ignore next */
      cov_14dr1jseq().f[41]++;
      cov_14dr1jseq().s[213]++;
      return fetch(options.url);
    }));
    const content =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[214]++, await response.text());
    /* istanbul ignore next */
    cov_14dr1jseq().s[215]++;
    switch (options.format) {
      case 'csv':
        /* istanbul ignore next */
        cov_14dr1jseq().b[47][0]++;
        cov_14dr1jseq().s[216]++;
        return (0, _csv.parseCSV)(content);
      case 'json':
        /* istanbul ignore next */
        cov_14dr1jseq().b[47][1]++;
        cov_14dr1jseq().s[217]++;
        return JSON.parse(content);
      case 'xml':
        /* istanbul ignore next */
        cov_14dr1jseq().b[47][2]++;
        cov_14dr1jseq().s[218]++;
        return (0, _xml.parseXML)(content);
      default:
        /* istanbul ignore next */
        cov_14dr1jseq().b[47][3]++;
        cov_14dr1jseq().s[219]++;
        throw new Error(`Unsupported format: ${options.format}`);
    }
  }
  // Import products using API
  async importFromAPI(options) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[42]++;
    cov_14dr1jseq().s[220]++;
    return this.api.getProducts(options.filters);
  }
  // Filter products based on provided filters
  filterProducts(products, filters) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[43]++;
    cov_14dr1jseq().s[221]++;
    if (!filters) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[48][0]++;
      cov_14dr1jseq().s[222]++;
      return products;
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[48][1]++;
    }
    cov_14dr1jseq().s[223]++;
    return products.filter(product => {
      /* istanbul ignore next */
      cov_14dr1jseq().f[44]++;
      cov_14dr1jseq().s[224]++;
      if (
      /* istanbul ignore next */
      (cov_14dr1jseq().b[50][0]++, filters.categories?.length) &&
      /* istanbul ignore next */
      (cov_14dr1jseq().b[50][1]++, !filters.categories.some(c => {
        /* istanbul ignore next */
        cov_14dr1jseq().f[45]++;
        cov_14dr1jseq().s[225]++;
        return product.categories.includes(c);
      }))) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[49][0]++;
        cov_14dr1jseq().s[226]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[49][1]++;
      }
      cov_14dr1jseq().s[227]++;
      if (filters.priceRange) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[51][0]++;
        const {
          min,
          max
        } =
        /* istanbul ignore next */
        (cov_14dr1jseq().s[228]++, filters.priceRange);
        /* istanbul ignore next */
        cov_14dr1jseq().s[229]++;
        if (
        /* istanbul ignore next */
        (cov_14dr1jseq().b[53][0]++, min) &&
        /* istanbul ignore next */
        (cov_14dr1jseq().b[53][1]++, product.price < min)) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[52][0]++;
          cov_14dr1jseq().s[230]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[52][1]++;
        }
        cov_14dr1jseq().s[231]++;
        if (
        /* istanbul ignore next */
        (cov_14dr1jseq().b[55][0]++, max) &&
        /* istanbul ignore next */
        (cov_14dr1jseq().b[55][1]++, product.price > max)) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[54][0]++;
          cov_14dr1jseq().s[232]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[54][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[51][1]++;
      }
      cov_14dr1jseq().s[233]++;
      if (
      /* istanbul ignore next */
      (cov_14dr1jseq().b[57][0]++, filters.status?.length) &&
      /* istanbul ignore next */
      (cov_14dr1jseq().b[57][1]++, !filters.status.includes(product.status))) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[56][0]++;
        cov_14dr1jseq().s[234]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[56][1]++;
      }
      cov_14dr1jseq().s[235]++;
      if (filters.dateRange) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[58][0]++;
        const productDate =
        /* istanbul ignore next */
        (cov_14dr1jseq().s[236]++, new Date(
        /* istanbul ignore next */
        (cov_14dr1jseq().b[59][0]++, product.createdAt) ||
        /* istanbul ignore next */
        (cov_14dr1jseq().b[59][1]++, product.updatedAt)));
        /* istanbul ignore next */
        cov_14dr1jseq().s[237]++;
        if (
        /* istanbul ignore next */
        (cov_14dr1jseq().b[61][0]++, filters.dateRange.start) &&
        /* istanbul ignore next */
        (cov_14dr1jseq().b[61][1]++, productDate < filters.dateRange.start)) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[60][0]++;
          cov_14dr1jseq().s[238]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[60][1]++;
        }
        cov_14dr1jseq().s[239]++;
        if (
        /* istanbul ignore next */
        (cov_14dr1jseq().b[63][0]++, filters.dateRange.end) &&
        /* istanbul ignore next */
        (cov_14dr1jseq().b[63][1]++, productDate > filters.dateRange.end)) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[62][0]++;
          cov_14dr1jseq().s[240]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[62][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[58][1]++;
      }
      cov_14dr1jseq().s[241]++;
      return true;
    });
  }
  // Validate product data
  async validateProduct(product) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[46]++;
    const errors =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[242]++, []);
    /* istanbul ignore next */
    cov_14dr1jseq().s[243]++;
    if (!product.title?.trim()) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[64][0]++;
      cov_14dr1jseq().s[244]++;
      errors.push('Title is required');
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[64][1]++;
    }
    cov_14dr1jseq().s[245]++;
    if (!product.sku?.trim()) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[65][0]++;
      cov_14dr1jseq().s[246]++;
      errors.push('SKU is required');
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[65][1]++;
    }
    cov_14dr1jseq().s[247]++;
    if (
    /* istanbul ignore next */
    (cov_14dr1jseq().b[67][0]++, typeof product.price !== 'number') ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[67][1]++, product.price < 0)) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[66][0]++;
      cov_14dr1jseq().s[248]++;
      errors.push('Price must be a positive number');
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[66][1]++;
    }
    cov_14dr1jseq().s[249]++;
    if (!product.vendor?.trim()) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[68][0]++;
      cov_14dr1jseq().s[250]++;
      errors.push('Vendor is required');
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[68][1]++;
    }
    cov_14dr1jseq().s[251]++;
    if (
    /* istanbul ignore next */
    (cov_14dr1jseq().b[70][0]++, !Array.isArray(product.images)) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[70][1]++, product.images.length === 0)) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[69][0]++;
      cov_14dr1jseq().s[252]++;
      errors.push('At least one image is required');
    } else {
      /* istanbul ignore next */
      cov_14dr1jseq().b[69][1]++;
      cov_14dr1jseq().s[253]++;
      product.images.forEach((image, index) => {
        /* istanbul ignore next */
        cov_14dr1jseq().f[47]++;
        cov_14dr1jseq().s[254]++;
        if (!image.url) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[71][0]++;
          cov_14dr1jseq().s[255]++;
          errors.push(`Image ${index + 1} URL is required`);
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[71][1]++;
        }
      });
    }
    /* istanbul ignore next */
    cov_14dr1jseq().s[256]++;
    if (product.variants?.length) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[72][0]++;
      cov_14dr1jseq().s[257]++;
      product.variants.forEach((variant, index) => {
        /* istanbul ignore next */
        cov_14dr1jseq().f[48]++;
        cov_14dr1jseq().s[258]++;
        if (!variant.sku) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[73][0]++;
          cov_14dr1jseq().s[259]++;
          errors.push(`Variant ${index + 1} SKU is required`);
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[73][1]++;
        }
        cov_14dr1jseq().s[260]++;
        if (!variant.title) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[74][0]++;
          cov_14dr1jseq().s[261]++;
          errors.push(`Variant ${index + 1} title is required`);
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[74][1]++;
        }
        cov_14dr1jseq().s[262]++;
        if (
        /* istanbul ignore next */
        (cov_14dr1jseq().b[76][0]++, typeof variant.price !== 'number') ||
        /* istanbul ignore next */
        (cov_14dr1jseq().b[76][1]++, variant.price < 0)) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[75][0]++;
          cov_14dr1jseq().s[263]++;
          errors.push(`Variant ${index + 1} price must be a positive number`);
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[75][1]++;
        }
        cov_14dr1jseq().s[264]++;
        if (
        /* istanbul ignore next */
        (cov_14dr1jseq().b[78][0]++, !variant.options) ||
        /* istanbul ignore next */
        (cov_14dr1jseq().b[78][1]++, Object.keys(variant.options).length === 0)) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[77][0]++;
          cov_14dr1jseq().s[265]++;
          errors.push(`Variant ${index + 1} must have at least one option`);
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[77][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[72][1]++;
    }
    cov_14dr1jseq().s[266]++;
    if (product.options?.length) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[79][0]++;
      cov_14dr1jseq().s[267]++;
      product.options.forEach((option, index) => {
        /* istanbul ignore next */
        cov_14dr1jseq().f[49]++;
        cov_14dr1jseq().s[268]++;
        if (!option.name) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[80][0]++;
          cov_14dr1jseq().s[269]++;
          errors.push(`Option ${index + 1} name is required`);
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[80][1]++;
        }
        cov_14dr1jseq().s[270]++;
        if (
        /* istanbul ignore next */
        (cov_14dr1jseq().b[82][0]++, !Array.isArray(option.values)) ||
        /* istanbul ignore next */
        (cov_14dr1jseq().b[82][1]++, option.values.length === 0)) {
          /* istanbul ignore next */
          cov_14dr1jseq().b[81][0]++;
          cov_14dr1jseq().s[271]++;
          errors.push(`Option ${index + 1} must have at least one value`);
        } else
        /* istanbul ignore next */
        {
          cov_14dr1jseq().b[81][1]++;
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[79][1]++;
    }
    cov_14dr1jseq().s[272]++;
    if (!product.description?.trim()) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[83][0]++;
      cov_14dr1jseq().s[273]++;
      errors.push('Description is required');
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[83][1]++;
    }
    cov_14dr1jseq().s[274]++;
    if (
    /* istanbul ignore next */
    (cov_14dr1jseq().b[85][0]++, !Array.isArray(product.categories)) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[85][1]++, product.categories.length === 0)) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[84][0]++;
      cov_14dr1jseq().s[275]++;
      errors.push('At least one category is required');
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[84][1]++;
    }
    cov_14dr1jseq().s[276]++;
    if (errors.length > 0) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[86][0]++;
      cov_14dr1jseq().s[277]++;
      throw new Error(`Validation failed: ${errors.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[86][1]++;
    }
    cov_14dr1jseq().s[278]++;
    return product;
  }
  // Transform products based on mapping or custom function
  async transformProducts(products, options) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[50]++;
    const transformed =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[279]++, []);
    /* istanbul ignore next */
    cov_14dr1jseq().s[280]++;
    for (const product of products) {
      let transformedProduct =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[281]++, {
        ...product
      });
      /* istanbul ignore next */
      cov_14dr1jseq().s[282]++;
      if (options.mapping) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[87][0]++;
        cov_14dr1jseq().s[283]++;
        Object.entries(options.mapping).forEach(([from, to]) => {
          /* istanbul ignore next */
          cov_14dr1jseq().f[51]++;
          cov_14dr1jseq().s[284]++;
          transformedProduct[to] = product[from];
        });
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[87][1]++;
      }
      cov_14dr1jseq().s[285]++;
      if (options.transform) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[88][0]++;
        cov_14dr1jseq().s[286]++;
        transformedProduct = await options.transform(transformedProduct);
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[88][1]++;
      }
      cov_14dr1jseq().s[287]++;
      transformed.push(transformedProduct);
    }
    /* istanbul ignore next */
    cov_14dr1jseq().s[288]++;
    return transformed;
  }
  // Determine fields to include for export
  getExportFields(options) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[52]++;
    const allFields =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[289]++, ['id', 'title', 'description', 'price', 'compareAtPrice', 'sku', 'barcode', 'vendor', 'quantity', 'images', 'variants', 'options', 'categories', 'tags', 'attributes', 'status', 'sourceUrl', 'sourceId', 'sourcePlatform']);
    /* istanbul ignore next */
    cov_14dr1jseq().s[290]++;
    if (options.includeFields) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[89][0]++;
      cov_14dr1jseq().s[291]++;
      return options.includeFields;
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[89][1]++;
    }
    cov_14dr1jseq().s[292]++;
    if (options.excludeFields) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[90][0]++;
      cov_14dr1jseq().s[293]++;
      return allFields.filter(field => {
        /* istanbul ignore next */
        cov_14dr1jseq().f[53]++;
        cov_14dr1jseq().s[294]++;
        return !options.excludeFields.includes(field);
      });
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[90][1]++;
    }
    cov_14dr1jseq().s[295]++;
    return allFields;
  }
  // Create batches of items
  createBatches(items, batchSize) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[54]++;
    const batches =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[296]++, []);
    /* istanbul ignore next */
    cov_14dr1jseq().s[297]++;
    for (let i =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[298]++, 0); i < items.length; i += batchSize) {
      /* istanbul ignore next */
      cov_14dr1jseq().s[299]++;
      batches.push(items.slice(i, i + batchSize));
    }
    /* istanbul ignore next */
    cov_14dr1jseq().s[300]++;
    return batches;
  }
  // Retry an operation with exponential backoff
  async retryOperation(operation, retries =
  /* istanbul ignore next */
  (cov_14dr1jseq().b[91][0]++,
  /* istanbul ignore next */
  (cov_14dr1jseq().b[92][0]++, this.config.retryOptions?.maxRetries) ||
  /* istanbul ignore next */
  (cov_14dr1jseq().b[92][1]++, 3)), delay =
  /* istanbul ignore next */
  (cov_14dr1jseq().b[93][0]++,
  /* istanbul ignore next */
  (cov_14dr1jseq().b[94][0]++, this.config.retryOptions?.initialDelay) ||
  /* istanbul ignore next */
  (cov_14dr1jseq().b[94][1]++, 1000))) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[55]++;
    cov_14dr1jseq().s[301]++;
    try {
      /* istanbul ignore next */
      cov_14dr1jseq().s[302]++;
      return await operation();
    } catch (error) {
      /* istanbul ignore next */
      cov_14dr1jseq().s[303]++;
      if (retries > 0) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[95][0]++;
        cov_14dr1jseq().s[304]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_14dr1jseq().f[56]++;
          cov_14dr1jseq().s[305]++;
          return setTimeout(resolve, delay);
        });
        /* istanbul ignore next */
        cov_14dr1jseq().s[306]++;
        return this.retryOperation(operation, retries - 1, delay * 2);
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[95][1]++;
      }
      cov_14dr1jseq().s[307]++;
      throw error;
    }
  }
  // Export methods for CSV, JSON, and XML
  async exportToCSV(products, fields) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[57]++;
    cov_14dr1jseq().s[308]++;
    return (0, _csv.createCSV)(products, fields);
  }
  async exportToJSON(products, fields) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[58]++;
    const filteredProducts =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[309]++, products.map(product => {
      /* istanbul ignore next */
      cov_14dr1jseq().f[59]++;
      const filtered =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[310]++, {});
      /* istanbul ignore next */
      cov_14dr1jseq().s[311]++;
      fields.forEach(field => {
        /* istanbul ignore next */
        cov_14dr1jseq().f[60]++;
        cov_14dr1jseq().s[312]++;
        return filtered[field] = product[field];
      });
      /* istanbul ignore next */
      cov_14dr1jseq().s[313]++;
      return filtered;
    }));
    /* istanbul ignore next */
    cov_14dr1jseq().s[314]++;
    return JSON.stringify(filteredProducts, null, 2);
  }
  async exportToXML(products, fields) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[61]++;
    cov_14dr1jseq().s[315]++;
    return createXML('products', products, fields);
  }
}
// AmazonAPI handles remote API interactions
class AmazonAPI {
  constructor(config) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[62]++;
    cov_14dr1jseq().s[316]++;
    this.config = config;
  }
  async authenticate() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[63]++;
    const response =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[317]++, await fetch(`${this.config.apiUrl}/auth/token`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        client_id: this.config.clientId,
        client_secret: this.config.clientSecret,
        refresh_token: this.config.refreshToken,
        grant_type: 'refresh_token'
      })
    }));
    /* istanbul ignore next */
    cov_14dr1jseq().s[318]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[96][0]++;
      cov_14dr1jseq().s[319]++;
      throw new AmazonAPIError('AUTH_FAILED', 'Authentication failed');
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[96][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[320]++, await response.json());
    /* istanbul ignore next */
    cov_14dr1jseq().s[321]++;
    this.accessToken = data.access_token;
  }
  async getProducts(filters) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[64]++;
    const response =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[322]++, await this.request('/products', {
      method: 'GET',
      params: filters
    }));
    /* istanbul ignore next */
    cov_14dr1jseq().s[323]++;
    return response.products;
  }
  async findProductBySKU(sku) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[65]++;
    const response =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[324]++, await this.request('/products/lookup', {
      method: 'GET',
      params: {
        sku
      }
    }));
    /* istanbul ignore next */
    cov_14dr1jseq().s[325]++;
    return /* istanbul ignore next */(cov_14dr1jseq().b[97][0]++, response.product) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[97][1]++, null);
  }
  async createProduct(product) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[66]++;
    const response =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[326]++, await this.request('/products', {
      method: 'POST',
      body: product
    }));
    /* istanbul ignore next */
    cov_14dr1jseq().s[327]++;
    return response.product;
  }
  async updateProduct(id, product) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[67]++;
    const response =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[328]++, await this.request(`/products/${id}`, {
      method: 'PUT',
      body: product
    }));
    /* istanbul ignore next */
    cov_14dr1jseq().s[329]++;
    return response.product;
  }
  async uploadFile(content, format) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[68]++;
    const response =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[330]++, await this.request('/upload', {
      method: 'POST',
      body: {
        content,
        format
      }
    }));
    /* istanbul ignore next */
    cov_14dr1jseq().s[331]++;
    return response.url;
  }
  async uploadImage(image) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[69]++;
    const formData =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[332]++, new FormData());
    /* istanbul ignore next */
    cov_14dr1jseq().s[333]++;
    if (typeof image === 'string') {
      /* istanbul ignore next */
      cov_14dr1jseq().b[98][0]++;
      const response =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[334]++, await fetch(image));
      const blob =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[335]++, await response.blob());
      /* istanbul ignore next */
      cov_14dr1jseq().s[336]++;
      formData.append('image', blob);
    } else {
      /* istanbul ignore next */
      cov_14dr1jseq().b[98][1]++;
      cov_14dr1jseq().s[337]++;
      formData.append('image', image);
    }
    const response =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[338]++, await fetch(`${this.config.apiUrl}/images/upload`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.accessToken}`
      },
      body: formData
    }));
    /* istanbul ignore next */
    cov_14dr1jseq().s[339]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[99][0]++;
      cov_14dr1jseq().s[340]++;
      throw new AmazonAPIError('IMAGE_UPLOAD_FAILED', 'Failed to upload image');
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[99][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[341]++, await response.json());
    /* istanbul ignore next */
    cov_14dr1jseq().s[342]++;
    return data.url;
  }
  async processProductImages(product) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[70]++;
    const processedImages =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[343]++, []);
    /* istanbul ignore next */
    cov_14dr1jseq().s[344]++;
    for (const image of product.images) {
      /* istanbul ignore next */
      cov_14dr1jseq().s[345]++;
      try {
        const uploadedUrl =
        /* istanbul ignore next */
        (cov_14dr1jseq().s[346]++, await this.uploadImage(image.url));
        /* istanbul ignore next */
        cov_14dr1jseq().s[347]++;
        processedImages.push({
          ...image,
          url: uploadedUrl
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_14dr1jseq().s[348]++;
        _logging.logger.error(`Failed to process image: ${error.message}`);
      }
    }
    /* istanbul ignore next */
    cov_14dr1jseq().s[349]++;
    return processedImages;
  }
  // Generic request method with authentication & retry
  async request(endpoint, options) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[71]++;
    cov_14dr1jseq().s[350]++;
    if (!this.accessToken) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[100][0]++;
      cov_14dr1jseq().s[351]++;
      await this.authenticate();
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[100][1]++;
    }
    const url =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[352]++, new URL(this.config.apiUrl + endpoint));
    /* istanbul ignore next */
    cov_14dr1jseq().s[353]++;
    if (options.params) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[101][0]++;
      cov_14dr1jseq().s[354]++;
      Object.entries(options.params).forEach(([key, value]) => {
        /* istanbul ignore next */
        cov_14dr1jseq().f[72]++;
        cov_14dr1jseq().s[355]++;
        url.searchParams.append(key, String(value));
      });
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[101][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[356]++, await fetch(url.toString(), {
      method: options.method,
      headers: {
        'Authorization': `Bearer ${this.accessToken}`,
        'Content-Type': 'application/json'
      },
      body: options.body ?
      /* istanbul ignore next */
      (cov_14dr1jseq().b[102][0]++, JSON.stringify(options.body)) :
      /* istanbul ignore next */
      (cov_14dr1jseq().b[102][1]++, undefined)
    }));
    /* istanbul ignore next */
    cov_14dr1jseq().s[357]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[103][0]++;
      cov_14dr1jseq().s[358]++;
      if (response.status === 401) {
        /* istanbul ignore next */
        cov_14dr1jseq().b[104][0]++;
        cov_14dr1jseq().s[359]++;
        await this.authenticate();
        /* istanbul ignore next */
        cov_14dr1jseq().s[360]++;
        return this.request(endpoint, options);
      } else
      /* istanbul ignore next */
      {
        cov_14dr1jseq().b[104][1]++;
      }
      cov_14dr1jseq().s[361]++;
      throw new AmazonAPIError('API_ERROR', response.statusText);
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[103][1]++;
    }
    cov_14dr1jseq().s[362]++;
    return response.json();
  }
}
// Performance Tracker for measuring execution time
class PerformanceTracker {
  start(operation) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[73]++;
    cov_14dr1jseq().s[363]++;
    if (!this.metrics.has(operation)) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[105][0]++;
      cov_14dr1jseq().s[364]++;
      this.metrics.set(operation, []);
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[105][1]++;
    }
    cov_14dr1jseq().s[365]++;
    this.metrics.get(operation).push(Date.now());
  }
  end(operation) {
    /* istanbul ignore next */
    cov_14dr1jseq().f[74]++;
    const times =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[366]++, this.metrics.get(operation));
    /* istanbul ignore next */
    cov_14dr1jseq().s[367]++;
    if (
    /* istanbul ignore next */
    (cov_14dr1jseq().b[107][0]++, !times) ||
    /* istanbul ignore next */
    (cov_14dr1jseq().b[107][1]++, times.length === 0)) {
      /* istanbul ignore next */
      cov_14dr1jseq().b[106][0]++;
      cov_14dr1jseq().s[368]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_14dr1jseq().b[106][1]++;
    }
    const startTime =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[369]++, times.pop());
    const duration =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[370]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_14dr1jseq().s[371]++;
    _logging.logger.info(`Operation ${operation} took ${duration}ms`);
    /* istanbul ignore next */
    cov_14dr1jseq().s[372]++;
    return duration;
  }
  getStats() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[75]++;
    const stats =
    /* istanbul ignore next */
    (cov_14dr1jseq().s[373]++, {});
    /* istanbul ignore next */
    cov_14dr1jseq().s[374]++;
    this.metrics.forEach((times, operation) => {
      /* istanbul ignore next */
      cov_14dr1jseq().f[76]++;
      const total =
      /* istanbul ignore next */
      (cov_14dr1jseq().s[375]++, times.reduce((sum, time) => {
        /* istanbul ignore next */
        cov_14dr1jseq().f[77]++;
        cov_14dr1jseq().s[376]++;
        return sum + time;
      }, 0));
      /* istanbul ignore next */
      cov_14dr1jseq().s[377]++;
      stats[operation] = {
        avg: total / times.length,
        count: times.length
      };
    });
    /* istanbul ignore next */
    cov_14dr1jseq().s[378]++;
    return stats;
  }
  constructor() {
    /* istanbul ignore next */
    cov_14dr1jseq().f[78]++;
    cov_14dr1jseq().s[379]++;
    this.metrics = new Map();
  }
}
const _default =
/* istanbul ignore next */
(cov_14dr1jseq().s[380]++, AmazonMarketplace);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,