{"version":3,"names":["handleRevenueSharing","productId","saleAmount","cov_1znwqizchw","f","product","s","_productmodel","default","findById","b","Error","platformCommission","sellerRevenue","sourceRevenue","sourceSellerId","sourceSeller","_partnermodel","balance","save","metrics","sales","revenue","lastSold","Date"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/actions/revenue-sharing.ts"],"sourcesContent":["import Product from '@/lib/db/models/product.model';\nimport Partner from '@/lib/db/models/partner.model';\n\nexport async function handleRevenueSharing(productId: string, saleAmount: number) {\n  const product = await Product.findById(productId);\n\n  if (!product) {\n    throw new Error('Product not found');\n  }\n\n  let platformCommission = 0;\n  let sellerRevenue = 0;\n  let sourceRevenue = 0;\n\n  // Platform commission (e.g., 15% of the sale amount)\n  platformCommission = (saleAmount * 15) / 100;\n  sellerRevenue = saleAmount - platformCommission;\n\n  if (product.sourceSellerId) {\n    // Revenue sharing with the source seller\n    const sourceSeller = await Partner.findById(product.sourceSellerId);\n    if (sourceSeller) {\n      sourceRevenue = (saleAmount * 10) / 100; // Example: 10% share\n      sellerRevenue -= sourceRevenue;\n      sourceSeller.balance += sourceRevenue;\n      await sourceSeller.save();\n    }\n  }\n\n  // Update the product's metrics\n  product.metrics.sales += 1;\n  product.metrics.revenue += saleAmount;\n  product.metrics.lastSold = new Date();\n  await product.save();\n\n  return {\n    platformCommission,\n    sellerRevenue,\n    sourceRevenue,\n  };\n}"],"mappingssB;;;;;;WAAAA,oBAAA;;;;;wEAHF;;;wEACA;;;;;;;;;;;;;;;AAEb,eAAeA,qBAAqBC,SAAiB,EAAEC,UAAkB;EAAA;EAAAC,cAAA,GAAAC,CAAA;EAC9E,MAAMC,OAAA;EAAA;EAAA,CAAAF,cAAA,GAAAG,CAAA,OAAU,MAAMC,aAAA,CAAAC,OAAO,CAACC,QAAQ,CAACR,SAAA;EAAA;EAAAE,cAAA,GAAAG,CAAA;EAEvC,IAAI,CAACD,OAAA,EAAS;IAAA;IAAAF,cAAA,GAAAO,CAAA;IAAAP,cAAA,GAAAG,CAAA;IACZ,MAAM,IAAIK,KAAA,CAAM;EAClB;EAAA;EAAA;IAAAR,cAAA,GAAAO,CAAA;EAAA;EAEA,IAAIE,kBAAA;EAAA;EAAA,CAAAT,cAAA,GAAAG,CAAA,OAAqB;EACzB,IAAIO,aAAA;EAAA;EAAA,CAAAV,cAAA,GAAAG,CAAA,QAAgB;EACpB,IAAIQ,aAAA;EAAA;EAAA,CAAAX,cAAA,GAAAG,CAAA,QAAgB;EAEpB;EAAA;EAAAH,cAAA,GAAAG,CAAA;EACAM,kBAAA,GAAqBV,UAAC,GAAa,KAAM;EAAA;EAAAC,cAAA,GAAAG,CAAA;EACzCO,aAAA,GAAgBX,UAAA,GAAaU,kBAAA;EAAA;EAAAT,cAAA,GAAAG,CAAA;EAE7B,IAAID,OAAA,CAAQU,cAAc,EAAE;IAAA;IAAAZ,cAAA,GAAAO,CAAA;IAC1B;IACA,MAAMM,YAAA;IAAA;IAAA,CAAAb,cAAA,GAAAG,CAAA,QAAe,MAAMW,aAAA,CAAAT,OAAO,CAACC,QAAQ,CAACJ,OAAA,CAAQU,cAAc;IAAA;IAAAZ,cAAA,GAAAG,CAAA;IAClE,IAAIU,YAAA,EAAc;MAAA;MAAAb,cAAA,GAAAO,CAAA;MAAAP,cAAA,GAAAG,CAAA;MAChBQ,aAAA,GAAgBZ,UAAC,GAAa,KAAM,KAAK;MAAA;MAAAC,cAAA,GAAAG,CAAA;MACzCO,aAAA,IAAiBC,aAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACjBU,YAAA,CAAaE,OAAO,IAAIJ,aAAA;MAAA;MAAAX,cAAA,GAAAG,CAAA;MACxB,MAAMU,YAAA,CAAaG,IAAI;IACzB;IAAA;IAAA;MAAAhB,cAAA,GAAAO,CAAA;IAAA;EACF;EAAA;EAAA;IAAAP,cAAA,GAAAO,CAAA;EAAA;EAEA;EAAAP,cAAA,GAAAG,CAAA;EACAD,OAAA,CAAQe,OAAO,CAACC,KAAK,IAAI;EAAA;EAAAlB,cAAA,GAAAG,CAAA;EACzBD,OAAA,CAAQe,OAAO,CAACE,OAAO,IAAIpB,UAAA;EAAA;EAAAC,cAAA,GAAAG,CAAA;EAC3BD,OAAA,CAAQe,OAAO,CAACG,QAAQ,GAAG,IAAIC,IAAA;EAAA;EAAArB,cAAA,GAAAG,CAAA;EAC/B,MAAMD,OAAA,CAAQc,IAAI;EAAA;EAAAhB,cAAA,GAAAG,CAAA;EAElB,OAAO;IACLM,kBAAA;IACAC,aAAA;IACAC;EACF;AACF","ignoreList":[]}