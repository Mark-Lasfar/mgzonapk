{"version":3,"names":["initiatePayment","_restsdk","default","configure","mode","cov_oeny05toy","b","process","env","PAYPAL_MODE","client_id","PAYPAL_CLIENT_ID","client_secret","PAYPAL_CLIENT_SECRET","stripe","s","_stripejs","loadStripe","STRIPE_SECRET_KEY","options","f","userId","amount","currency","paymentMethod","description","_db","connectToDatabase","seller","_sellermodel","findOne","lean","Error","user","_usermodel","findById","select","channels","whatsapp","redirectUrl","session","checkout","sessions","create","payment_method_types","line_items","price_data","product_data","name","unit_amount","Math","round","quantity","success_url","NEXT_PUBLIC_BASE_URL","cancel_url","metadata","url","_notification","sendNotification","type","title","message","data","createPaymentJson","intent","payer","payment_method","redirect_urls","return_url","transactions","total","toFixed","Promise","resolve","reject","payment","error","approvalUrl","links","find","link","rel","href","success","console"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/actions/payment.actions.ts"],"sourcesContent":["import { loadStripe } from '@stripe/stripe-js'\nimport paypal from '@paypal/rest-sdk'\nimport { connectToDatabase } from '@/lib/db'\nimport Seller from '@/lib/db/models/seller.model'\nimport User from '@/lib/db/models/user.model'\nimport { sendNotification } from '@/lib/utils/notification'\n\npaypal.configure({\n  mode: process.env.PAYPAL_MODE || 'sandbox',\n  client_id: process.env.PAYPAL_CLIENT_ID || '',\n  client_secret: process.env.PAYPAL_CLIENT_SECRET || '',\n})\n\nconst stripe = await loadStripe(process.env.STRIPE_SECRET_KEY || '')\n\ninterface PaymentOptions {\n  userId: string\n  amount: number\n  currency: string\n  paymentMethod: 'stripe' | 'paypal'\n  description: string\n}\n\nexport async function initiatePayment(options: PaymentOptions) {\n  const { userId, amount, currency, paymentMethod, description } = options\n\n  try {\n    await connectToDatabase()\n    const seller = await Seller.findOne({ userId }).lean()\n    if (!seller) {\n      throw new Error('Seller not found')\n    }\n\n    const user = await User.findById(userId).select('whatsapp').lean()\n    const channels = user?.whatsapp ? ['email', 'in_app', 'whatsapp'] : ['email', 'in_app']\n\n    let redirectUrl: string\n\n    if (paymentMethod === 'stripe') {\n      if (!stripe) {\n        throw new Error('Stripe not initialized')\n      }\n      const session = await stripe.checkout.sessions.create({\n        payment_method_types: ['card'],\n        line_items: [\n          {\n            price_data: {\n              currency,\n              product_data: { name: description },\n              unit_amount: Math.round(amount * 100),\n            },\n            quantity: 1,\n          },\n        ],\n        mode: 'payment',\n        success_url: `${process.env.NEXT_PUBLIC_BASE_URL}/account/subscriptions?success=true`,\n        cancel_url: `${process.env.NEXT_PUBLIC_BASE_URL}/account/subscriptions?cancelled=true`,\n        metadata: { userId, description },\n      })\n      redirectUrl = session.url || ''\n\n      await sendNotification({\n        userId,\n        type: 'payment_success',\n        title: 'Payment Initiated',\n        message: `Your payment of $${amount} for ${description} has been initiated.`,\n        channels,\n        data: { amount, description },\n      })\n    } else if (paymentMethod === 'paypal') {\n      const createPaymentJson = {\n        intent: 'sale',\n        payer: { payment_method: 'paypal' },\n        redirect_urls: {\n          return_url: `${process.env.NEXT_PUBLIC_BASE_URL}/account/subscriptions?success=true`,\n          cancel_url: `${process.env.NEXT_PUBLIC_BASE_URL}/account/subscriptions?cancelled=true`,\n        },\n        transactions: [\n          {\n            amount: { total: amount.toFixed(2), currency },\n            description,\n          },\n        ],\n      }\n\n      redirectUrl = await new Promise((resolve, reject) => {\n        paypal.payment.create(createPaymentJson, (error, payment) => {\n          if (error) {\n            reject(error)\n          } else {\n            const approvalUrl = payment.links?.find(link => link.rel === 'approval_url')?.href\n            resolve(approvalUrl || '')\n          }\n        })\n      })\n\n      await sendNotification({\n        userId,\n        type: 'payment_success',\n        title: 'Payment Initiated',\n        message: `Your payment of $${amount} for ${description} has been initiated.`,\n        channels,\n        data: { amount, description },\n      })\n    } else {\n      throw new Error('Unsupported payment method')\n    }\n\n    return { success: true, data: { redirectUrl } }\n  } catch (error) {\n    console.error('Payment initiation error:', error)\n    return {\n      success: false,\n      message: error instanceof Error ? error.message : 'Failed to initiate payment',\n    }\n  }\n}"],"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","ignoreList":[]}