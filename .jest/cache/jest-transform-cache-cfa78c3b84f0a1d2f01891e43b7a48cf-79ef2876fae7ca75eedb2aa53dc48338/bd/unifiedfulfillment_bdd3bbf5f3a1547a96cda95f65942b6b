930945bfd2197476fdbdb4e764800f97
"use strict";

/* istanbul ignore next */
function cov_1a2rv8me9s() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/unified-fulfillment.ts";
  var hash = "b400a7042cdd504b6a702590e4ed65a10a69623d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/unified-fulfillment.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 41
        }
      },
      "3": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 40
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 59
        }
      },
      "5": {
        start: {
          line: 13,
          column: 18
        },
        end: {
          line: 13,
          column: 59
        }
      },
      "6": {
        start: {
          line: 14,
          column: 18
        },
        end: {
          line: 14,
          column: 63
        }
      },
      "7": {
        start: {
          line: 15,
          column: 18
        },
        end: {
          line: 15,
          column: 56
        }
      },
      "8": {
        start: {
          line: 16,
          column: 17
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "9": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 59
        }
      },
      "10": {
        start: {
          line: 18,
          column: 34
        },
        end: {
          line: 18,
          column: 98
        }
      },
      "11": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 31
        }
      },
      "12": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 23,
          column: 6
        }
      },
      "13": {
        start: {
          line: 25,
          column: 26
        },
        end: {
          line: 25,
          column: 48
        }
      },
      "14": {
        start: {
          line: 26,
          column: 21
        },
        end: {
          line: 26,
          column: 34
        }
      },
      "15": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 35
        }
      },
      "16": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "17": {
        start: {
          line: 36,
          column: 24
        },
        end: {
          line: 36,
          column: 50
        }
      },
      "18": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "19": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 42,
          column: 11
        }
      },
      "20": {
        start: {
          line: 45,
          column: 24
        },
        end: {
          line: 45,
          column: 26
        }
      },
      "21": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "22": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "23": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "24": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "25": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "26": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "27": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "28": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 93,
          column: 15
        }
      },
      "29": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 23
        }
      },
      "30": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "31": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "32": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 104,
          column: 24
        }
      },
      "33": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 105,
          column: 26
        }
      },
      "34": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 104
        }
      },
      "35": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 108,
          column: 26
        }
      },
      "36": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 110,
          column: 108
        }
      },
      "37": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 26
        }
      },
      "38": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 104
        }
      },
      "39": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 26
        }
      },
      "40": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 116,
          column: 81
        }
      },
      "41": {
        start: {
          line: 121,
          column: 32
        },
        end: {
          line: 121,
          column: 60
        }
      },
      "42": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "43": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 79
        }
      },
      "44": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 31
        }
      },
      "45": {
        start: {
          line: 128,
          column: 25
        },
        end: {
          line: 128,
          column: 63
        }
      },
      "46": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "47": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 47
        }
      },
      "48": {
        start: {
          line: 132,
          column: 35
        },
        end: {
          line: 132,
          column: 79
        }
      },
      "49": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "50": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 85
        }
      },
      "51": {
        start: {
          line: 137,
          column: 38
        },
        end: {
          line: 137,
          column: 82
        }
      },
      "52": {
        start: {
          line: 139,
          column: 28
        },
        end: {
          line: 147,
          column: 14
        }
      },
      "53": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 73
        }
      },
      "54": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "55": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 164,
          column: 15
        }
      },
      "56": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 175,
          column: 14
        }
      },
      "57": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 182,
          column: 15
        }
      },
      "58": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 24
        }
      },
      "59": {
        start: {
          line: 187,
          column: 24
        },
        end: {
          line: 187,
          column: 56
        }
      },
      "60": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "61": {
        start: {
          line: 190,
          column: 32
        },
        end: {
          line: 190,
          column: 72
        }
      },
      "62": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "63": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 198,
          column: 18
        }
      },
      "64": {
        start: {
          line: 201,
          column: 26
        },
        end: {
          line: 201,
          column: 68
        }
      },
      "65": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 57
        }
      },
      "66": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 210,
          column: 14
        }
      },
      "67": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 218,
          column: 15
        }
      },
      "68": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 24
        }
      },
      "69": {
        start: {
          line: 223,
          column: 25
        },
        end: {
          line: 223,
          column: 63
        }
      },
      "70": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "71": {
        start: {
          line: 225,
          column: 30
        },
        end: {
          line: 225,
          column: 98
        }
      },
      "72": {
        start: {
          line: 225,
          column: 88
        },
        end: {
          line: 225,
          column: 96
        }
      },
      "73": {
        start: {
          line: 226,
          column: 37
        },
        end: {
          line: 229,
          column: 14
        }
      },
      "74": {
        start: {
          line: 227,
          column: 35
        },
        end: {
          line: 227,
          column: 59
        }
      },
      "75": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 228,
          column: 50
        }
      },
      "76": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 235,
          column: 14
        }
      },
      "77": {
        start: {
          line: 232,
          column: 113
        },
        end: {
          line: 232,
          column: 118
        }
      },
      "78": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 242,
          column: 15
        }
      },
      "79": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 24
        }
      },
      "80": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "81": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 255,
          column: 14
        }
      },
      "82": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 262,
          column: 15
        }
      },
      "83": {
        start: {
          line: 266,
          column: 24
        },
        end: {
          line: 266,
          column: 105
        }
      },
      "84": {
        start: {
          line: 266,
          column: 69
        },
        end: {
          line: 266,
          column: 103
        }
      },
      "85": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 274,
          column: 16
        }
      },
      "86": {
        start: {
          line: 267,
          column: 45
        },
        end: {
          line: 274,
          column: 13
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 20,
            column: 9
          },
          end: {
            line: 20,
            column: 33
          }
        },
        loc: {
          start: {
            line: 20,
            column: 39
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 17
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 26
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 44
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 33
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 97
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 98,
            column: 24
          },
          end: {
            line: 98,
            column: 25
          }
        },
        loc: {
          start: {
            line: 98,
            column: 34
          },
          end: {
            line: 118,
            column: 9
          }
        },
        line: 98
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 32
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 120
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 40
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 127
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 49
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 186
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 222,
            column: 5
          }
        },
        loc: {
          start: {
            line: 222,
            column: 44
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 222
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 225,
            column: 80
          },
          end: {
            line: 225,
            column: 81
          }
        },
        loc: {
          start: {
            line: 225,
            column: 88
          },
          end: {
            line: 225,
            column: 96
          }
        },
        line: 225
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 226,
            column: 56
          },
          end: {
            line: 226,
            column: 57
          }
        },
        loc: {
          start: {
            line: 226,
            column: 64
          },
          end: {
            line: 229,
            column: 13
          }
        },
        line: 226
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 232,
            column: 108
          },
          end: {
            line: 232,
            column: 109
          }
        },
        loc: {
          start: {
            line: 232,
            column: 113
          },
          end: {
            line: 232,
            column: 118
          }
        },
        line: 232
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 246,
            column: 4
          },
          end: {
            line: 246,
            column: 5
          }
        },
        loc: {
          start: {
            line: 246,
            column: 46
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 246
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 36
          },
          end: {
            line: 275,
            column: 5
          }
        },
        line: 265
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 266,
            column: 60
          },
          end: {
            line: 266,
            column: 61
          }
        },
        loc: {
          start: {
            line: 266,
            column: 69
          },
          end: {
            line: 266,
            column: 103
          }
        },
        line: 266
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 267,
            column: 27
          },
          end: {
            line: 267,
            column: 28
          }
        },
        loc: {
          start: {
            line: 267,
            column: 45
          },
          end: {
            line: 274,
            column: 13
          }
        },
        line: 267
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 11
          },
          end: {
            line: 23,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 21,
            column: 38
          }
        }, {
          start: {
            line: 21,
            column: 41
          },
          end: {
            line: 23,
            column: 5
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 11
          },
          end: {
            line: 21,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 11
          },
          end: {
            line: 21,
            column: 14
          }
        }, {
          start: {
            line: 21,
            column: 18
          },
          end: {
            line: 21,
            column: 32
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "5": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "6": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 105,
            column: 26
          }
        }, {
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 108,
            column: 26
          }
        }, {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 26
          }
        }, {
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 114,
            column: 26
          }
        }, {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 116,
            column: 81
          }
        }],
        line: 99
      },
      "7": {
        loc: {
          start: {
            line: 103,
            column: 32
          },
          end: {
            line: 103,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 32
          },
          end: {
            line: 103,
            column: 59
          }
        }, {
          start: {
            line: 103,
            column: 63
          },
          end: {
            line: 103,
            column: 88
          }
        }],
        line: 103
      },
      "8": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "9": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "10": {
        loc: {
          start: {
            line: 179,
            column: 23
          },
          end: {
            line: 179,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 179,
            column: 48
          },
          end: {
            line: 179,
            column: 61
          }
        }, {
          start: {
            line: 179,
            column: 64
          },
          end: {
            line: 179,
            column: 77
          }
        }],
        line: 179
      },
      "11": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "12": {
        loc: {
          start: {
            line: 194,
            column: 37
          },
          end: {
            line: 194,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 71
          },
          end: {
            line: 194,
            column: 82
          }
        }, {
          start: {
            line: 194,
            column: 85
          },
          end: {
            line: 194,
            column: 112
          }
        }],
        line: 194
      },
      "13": {
        loc: {
          start: {
            line: 215,
            column: 23
          },
          end: {
            line: 215,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 215,
            column: 48
          },
          end: {
            line: 215,
            column: 61
          }
        }, {
          start: {
            line: 215,
            column: 64
          },
          end: {
            line: 215,
            column: 77
          }
        }],
        line: 215
      },
      "14": {
        loc: {
          start: {
            line: 227,
            column: 35
          },
          end: {
            line: 227,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 35
          },
          end: {
            line: 227,
            column: 54
          }
        }, {
          start: {
            line: 227,
            column: 58
          },
          end: {
            line: 227,
            column: 59
          }
        }],
        line: 227
      },
      "15": {
        loc: {
          start: {
            line: 232,
            column: 25
          },
          end: {
            line: 232,
            column: 156
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 232,
            column: 55
          },
          end: {
            line: 232,
            column: 132
          }
        }, {
          start: {
            line: 232,
            column: 135
          },
          end: {
            line: 232,
            column: 156
          }
        }],
        line: 232
      },
      "16": {
        loc: {
          start: {
            line: 239,
            column: 23
          },
          end: {
            line: 239,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 48
          },
          end: {
            line: 239,
            column: 61
          }
        }, {
          start: {
            line: 239,
            column: 64
          },
          end: {
            line: 239,
            column: 77
          }
        }],
        line: 239
      },
      "17": {
        loc: {
          start: {
            line: 259,
            column: 23
          },
          end: {
            line: 259,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 48
          },
          end: {
            line: 259,
            column: 61
          }
        }, {
          start: {
            line: 259,
            column: 64
          },
          end: {
            line: 259,
            column: 77
          }
        }],
        line: 259
      },
      "18": {
        loc: {
          start: {
            line: 270,
            column: 22
          },
          end: {
            line: 270,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 270,
            column: 54
          },
          end: {
            line: 270,
            column: 66
          }
        }, {
          start: {
            line: 270,
            column: 69
          },
          end: {
            line: 270,
            column: 78
          }
        }],
        line: 270
      },
      "19": {
        loc: {
          start: {
            line: 271,
            column: 23
          },
          end: {
            line: 271,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 271,
            column: 54
          },
          end: {
            line: 271,
            column: 75
          }
        }, {
          start: {
            line: 271,
            column: 78
          },
          end: {
            line: 271,
            column: 87
          }
        }],
        line: 271
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/api/services/unified-fulfillment.ts"],
      sourcesContent: ["import { Redis } from '@upstash/redis';\nimport { FulfillmentConfig, FulfillmentOrder, FulfillmentProvider } from '../types/fulfillment';\nimport { ShipBobService } from '../integrations/shipbob/service';\nimport { AmazonFulfillmentService } from '../integrations/amazon/service';\nimport { AliExpressFulfillmentService } from '../integrations/aliexpress/service';\nimport { FourPXFulfillmentService } from '../integrations/4px/service';\nimport { logger } from './logging';\nimport { WebhookDispatcher } from '../webhook-dispatcher';\nimport Order from '@/lib/db/models/order.model';\nimport { connectToDatabase } from '@/lib/db';\n\nconst CURRENT_TIMESTAMP = '2025-04-27T12:11:47Z';\nconst CURRENT_USER = 'Mark-Lasfar';\n\nexport class UnifiedFulfillmentService {\n  private providers: Map<FulfillmentProvider, any> = new Map();\n  private redis: Redis;\n\n  constructor() {\n    // Initialize Redis\n    this.redis = new Redis({\n      url: process.env.UPSTASH_REDIS_REST_URL!,\n      token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n    });\n\n    // Initialize providers based on environment configuration\n    const configs: FulfillmentConfig[] = this.loadProviderConfigs();\n    this.initializeProviders(configs);\n\n    logger.info('UnifiedFulfillmentService initialized', {\n      providers: Array.from(this.providers.keys()),\n      timestamp: CURRENT_TIMESTAMP,\n      user: CURRENT_USER\n    });\n  }\n\n  private loadProviderConfigs(): FulfillmentConfig[] {\n    const configs: FulfillmentConfig[] = [];\n\n    // Load ShipBob config if available\n    if (process.env.SHIPBOB_API_KEY) {\n      configs.push({\n        provider: 'shipbob',\n        apiKey: process.env.SHIPBOB_API_KEY,\n        sandbox: process.env.NODE_ENV !== 'production',\n        createdAt: CURRENT_TIMESTAMP,\n        createdBy: CURRENT_USER,\n        updatedAt: CURRENT_TIMESTAMP,\n        updatedBy: CURRENT_USER\n      });\n    }\n\n    // Load Amazon config if available\n    if (process.env.AMAZON_API_KEY) {\n      configs.push({\n        provider: 'amazon',\n        apiKey: process.env.AMAZON_API_KEY,\n        apiSecret: process.env.AMAZON_API_SECRET,\n        region: process.env.AMAZON_REGION,\n        createdAt: CURRENT_TIMESTAMP,\n        createdBy: CURRENT_USER,\n        updatedAt: CURRENT_TIMESTAMP,\n        updatedBy: CURRENT_USER\n      });\n    }\n\n    // Load AliExpress config if available\n    if (process.env.ALIEXPRESS_API_KEY) {\n      configs.push({\n        provider: 'aliexpress',\n        apiKey: process.env.ALIEXPRESS_API_KEY,\n        apiSecret: process.env.ALIEXPRESS_API_SECRET,\n        createdAt: CURRENT_TIMESTAMP,\n        createdBy: CURRENT_USER,\n        updatedAt: CURRENT_TIMESTAMP,\n        updatedBy: CURRENT_USER\n      });\n    }\n\n    // Load FourPX config if available\n    if (process.env.FOURPX_API_KEY) {\n      configs.push({\n        provider: '4px',\n        apiKey: process.env.FOURPX_API_KEY,\n        apiSecret: process.env.FOURPX_API_SECRET,\n        createdAt: CURRENT_TIMESTAMP,\n        createdBy: CURRENT_USER,\n        updatedAt: CURRENT_TIMESTAMP,\n        updatedBy: CURRENT_USER\n      });\n    }\n\n    return configs;\n  }\n\n  private initializeProviders(configs: FulfillmentConfig[]) {\n    configs.forEach(config => {\n      switch (config.provider) {\n        case 'shipbob':\n          this.providers.set(\n            config.provider,\n            new ShipBobService({\n              apiKey: config.apiKey,\n              apiUrl: process.env.SHIPBOB_API_URL || 'https://api.shipbob.com',\n            })\n          );\n          break;\n        case 'amazon':\n          this.providers.set(config.provider, new AmazonFulfillmentService(config));\n          break;\n        case 'aliexpress':\n          this.providers.set(config.provider, new AliExpressFulfillmentService(config));\n          break;\n        case '4px':\n          this.providers.set(config.provider, new FourPXFulfillmentService(config));\n          break;\n        default:\n          logger.warn('Unknown provider: ' + config.provider);\n      }\n    });\n  }\n\n  private async getProvider(provider: FulfillmentProvider) {\n    const providerService = this.providers.get(provider);\n    if (!providerService) {\n      throw new Error(`Fulfillment provider ${provider} not configured`);\n    }\n    return providerService;\n  }\n\n  async createFulfillmentOrder(order: FulfillmentOrder) {\n    const provider = await this.getProvider(order.provider);\n    try {\n      await connectToDatabase();\n\n      // Check inventory before creating order\n      const inventoryCheck = await this.checkInventoryAvailability(order);\n      if (!inventoryCheck.available) {\n        throw new Error(`Insufficient inventory: ${inventoryCheck.message}`);\n      }\n\n      // Create fulfillment order with provider\n      const fulfillmentResult = await provider.createFulfillmentOrder(order);\n\n      // Store order in database\n      const dbOrder = await Order.create({\n        ...order,\n        fulfillmentId: fulfillmentResult.id,\n        status: 'pending',\n        createdAt: new Date(CURRENT_TIMESTAMP),\n        updatedAt: new Date(CURRENT_TIMESTAMP),\n        createdBy: CURRENT_USER,\n        updatedBy: CURRENT_USER\n      });\n\n      // Cache order details\n      await this.cacheOrderDetails(dbOrder._id, fulfillmentResult);\n\n      // Dispatch webhook\n      await WebhookDispatcher.dispatch(\n        order.userId,\n        `${order.provider}.order.created`,\n        {\n          orderId: dbOrder._id,\n          fulfillmentId: fulfillmentResult.id,\n          status: 'pending',\n          timestamp: CURRENT_TIMESTAMP,\n          user: CURRENT_USER\n        }\n      );\n\n      logger.info('Fulfillment order created', {\n        orderId: dbOrder._id,\n        provider: order.provider,\n        fulfillmentId: fulfillmentResult.id,\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n\n      return {\n        success: true,\n        data: {\n          orderId: dbOrder._id,\n          fulfillmentId: fulfillmentResult.id,\n          status: 'pending',\n          tracking: fulfillmentResult.tracking,\n          createdAt: CURRENT_TIMESTAMP,\n          createdBy: CURRENT_USER\n        }\n      };\n\n    } catch (error) {\n      logger.error(\n        new Error('Create fulfillment order failed'),\n        {\n          provider: order.provider,\n          error: error instanceof Error ? error.message : String(error),\n          timestamp: CURRENT_TIMESTAMP,\n          user: CURRENT_USER\n        }\n      );\n      throw error;\n    }\n  }\n\n  async getFulfillmentOrder(orderId: string, provider: FulfillmentProvider) {\n    const service = await this.getProvider(provider);\n    try {\n      // Try to get from cache first\n      const cachedOrder = await this.redis.get(`order:${orderId}`);\n      if (cachedOrder) {\n        return { \n          success: true, \n          data: JSON.parse(typeof cachedOrder === 'string' ? cachedOrder : JSON.stringify(cachedOrder)),\n          cached: true,\n          timestamp: CURRENT_TIMESTAMP,\n          requestedBy: CURRENT_USER\n        };\n      }\n\n      // Get from provider\n      const order = await service.getFulfillmentOrder(orderId);\n      \n      // Update cache\n      await this.cacheOrderDetails(orderId, order);\n\n      return { \n        success: true, \n        data: order,\n        cached: false,\n        timestamp: CURRENT_TIMESTAMP,\n        requestedBy: CURRENT_USER\n      };\n\n    } catch (error) {\n      logger.error(\n        new Error('Get fulfillment order failed'),\n        {\n          orderId,\n          provider,\n          error: error instanceof Error ? error.message : String(error),\n          timestamp: CURRENT_TIMESTAMP,\n          user: CURRENT_USER\n        }\n      );\n      throw error;\n    }\n  }\n\n  private async checkInventoryAvailability(order: FulfillmentOrder) {\n    const provider = await this.getProvider(order.provider);\n    \n    try {\n      const inventory = await provider.getInventoryLevels(\n        order.items.map(item => item.sku)\n      );\n\n      const unavailableItems = order.items.filter(item => {\n        const stockLevel = inventory[item.sku] || 0;\n        return stockLevel < item.quantity;\n      });\n\n      return {\n        available: unavailableItems.length === 0,\n        message: unavailableItems.length > 0\n          ? `Insufficient stock for SKUs: ${unavailableItems.map(i => i.sku).join(', ')}`\n          : 'All items available',\n        checkedAt: CURRENT_TIMESTAMP,\n        checkedBy: CURRENT_USER\n      };\n\n    } catch (error) {\n      logger.error(\n        new Error('Inventory check failed'),\n        {\n          provider: order.provider,\n          error: error instanceof Error ? error.message : String(error),\n          timestamp: CURRENT_TIMESTAMP,\n          user: CURRENT_USER\n        }\n      );\n      throw error;\n    }\n  }\n\n  private async cacheOrderDetails(orderId: string, details: any) {\n    try {\n      await this.redis.set(\n        `order:${orderId}`,\n        JSON.stringify({\n          ...details,\n          cachedAt: CURRENT_TIMESTAMP,\n          cachedBy: CURRENT_USER\n        }),\n        { ex: 3600 } // Expire in 1 hour\n      );\n    } catch (error) {\n      logger.warn('Cache update failed', {\n        orderId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: CURRENT_TIMESTAMP,\n        user: CURRENT_USER\n      });\n    }\n  }\n\n  async processBulkOrders(orders: FulfillmentOrder[]) {\n    const results = await Promise.allSettled(\n      orders.map(order => this.createFulfillmentOrder(order))\n    );\n\n    return results.map((result, index) => ({\n      orderId: orders[index].orderId,\n      success: result.status === 'fulfilled',\n      data: result.status === 'fulfilled' ? result.value : undefined,\n      error: result.status === 'rejected' ? result.reason.message : undefined,\n      timestamp: CURRENT_TIMESTAMP,\n      processedBy: CURRENT_USER\n    }));\n  }\n}\n"],
      names: ["UnifiedFulfillmentService", "CURRENT_TIMESTAMP", "CURRENT_USER", "constructor", "providers", "Map", "redis", "Redis", "url", "process", "env", "UPSTASH_REDIS_REST_URL", "token", "UPSTASH_REDIS_REST_TOKEN", "configs", "loadProviderConfigs", "initializeProviders", "logger", "info", "Array", "from", "keys", "timestamp", "user", "SHIPBOB_API_KEY", "push", "provider", "apiKey", "sandbox", "NODE_ENV", "createdAt", "createdBy", "updatedAt", "updatedBy", "AMAZON_API_KEY", "apiSecret", "AMAZON_API_SECRET", "region", "AMAZON_REGION", "ALIEXPRESS_API_KEY", "ALIEXPRESS_API_SECRET", "FOURPX_API_KEY", "FOURPX_API_SECRET", "forEach", "config", "set", "ShipBobService", "apiUrl", "SHIPBOB_API_URL", "AmazonFulfillmentService", "AliExpressFulfillmentService", "FourPXFulfillmentService", "warn", "getProvider", "providerService", "get", "Error", "createFulfillmentOrder", "order", "connectToDatabase", "inventoryCheck", "checkInventoryAvailability", "available", "message", "fulfillmentResult", "dbOrder", "Order", "create", "fulfillmentId", "id", "status", "Date", "cacheOrderDetails", "_id", "WebhookDispatcher", "dispatch", "userId", "orderId", "success", "data", "tracking", "error", "String", "getFulfillmentOrder", "service", "cachedOrder", "JSON", "parse", "stringify", "cached", "requestedBy", "inventory", "getInventoryLevels", "items", "map", "item", "sku", "unavailableItems", "filter", "stockLevel", "quantity", "length", "i", "join", "checkedAt", "checkedBy", "details", "cachedAt", "cachedBy", "ex", "processBulkOrders", "orders", "results", "Promise", "allSettled", "result", "index", "value", "undefined", "reason", "processedBy"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b400a7042cdd504b6a702590e4ed65a10a69623d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1a2rv8me9s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1a2rv8me9s();
cov_1a2rv8me9s().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1a2rv8me9s().s[1]++;
Object.defineProperty(exports, "UnifiedFulfillmentService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1a2rv8me9s().f[0]++;
    cov_1a2rv8me9s().s[2]++;
    return UnifiedFulfillmentService;
  }
});
const _redis =
/* istanbul ignore next */
(cov_1a2rv8me9s().s[3]++, require("@upstash/redis"));
const _service =
/* istanbul ignore next */
(cov_1a2rv8me9s().s[4]++, require("../integrations/shipbob/service"));
const _service1 =
/* istanbul ignore next */
(cov_1a2rv8me9s().s[5]++, require("../integrations/amazon/service"));
const _service2 =
/* istanbul ignore next */
(cov_1a2rv8me9s().s[6]++, require("../integrations/aliexpress/service"));
const _service3 =
/* istanbul ignore next */
(cov_1a2rv8me9s().s[7]++, require("../integrations/4px/service"));
const _logging =
/* istanbul ignore next */
(cov_1a2rv8me9s().s[8]++, require("./logging"));
const _webhookdispatcher =
/* istanbul ignore next */
(cov_1a2rv8me9s().s[9]++, require("../webhook-dispatcher"));
const _ordermodel =
/* istanbul ignore next */
(/*#__PURE__*/cov_1a2rv8me9s().s[10]++, _interop_require_default(require("../../db/models/order.model")));
const _db =
/* istanbul ignore next */
(cov_1a2rv8me9s().s[11]++, require("../../db"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_1a2rv8me9s().f[1]++;
  cov_1a2rv8me9s().s[12]++;
  return /* istanbul ignore next */(cov_1a2rv8me9s().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1a2rv8me9s().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_1a2rv8me9s().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_1a2rv8me9s().b[0][1]++, {
    default: obj
  });
}
const CURRENT_TIMESTAMP =
/* istanbul ignore next */
(cov_1a2rv8me9s().s[13]++, '2025-04-27T12:11:47Z');
const CURRENT_USER =
/* istanbul ignore next */
(cov_1a2rv8me9s().s[14]++, 'Mark-Lasfar');
class UnifiedFulfillmentService {
  constructor() {
    /* istanbul ignore next */
    cov_1a2rv8me9s().f[2]++;
    cov_1a2rv8me9s().s[15]++;
    this.providers = new Map();
    // Initialize Redis
    /* istanbul ignore next */
    cov_1a2rv8me9s().s[16]++;
    this.redis = new _redis.Redis({
      url: process.env.UPSTASH_REDIS_REST_URL,
      token: process.env.UPSTASH_REDIS_REST_TOKEN
    });
    // Initialize providers based on environment configuration
    const configs =
    /* istanbul ignore next */
    (cov_1a2rv8me9s().s[17]++, this.loadProviderConfigs());
    /* istanbul ignore next */
    cov_1a2rv8me9s().s[18]++;
    this.initializeProviders(configs);
    /* istanbul ignore next */
    cov_1a2rv8me9s().s[19]++;
    _logging.logger.info('UnifiedFulfillmentService initialized', {
      providers: Array.from(this.providers.keys()),
      timestamp: CURRENT_TIMESTAMP,
      user: CURRENT_USER
    });
  }
  loadProviderConfigs() {
    /* istanbul ignore next */
    cov_1a2rv8me9s().f[3]++;
    const configs =
    /* istanbul ignore next */
    (cov_1a2rv8me9s().s[20]++, []);
    // Load ShipBob config if available
    /* istanbul ignore next */
    cov_1a2rv8me9s().s[21]++;
    if (process.env.SHIPBOB_API_KEY) {
      /* istanbul ignore next */
      cov_1a2rv8me9s().b[2][0]++;
      cov_1a2rv8me9s().s[22]++;
      configs.push({
        provider: 'shipbob',
        apiKey: process.env.SHIPBOB_API_KEY,
        sandbox: process.env.NODE_ENV !== 'production',
        createdAt: CURRENT_TIMESTAMP,
        createdBy: CURRENT_USER,
        updatedAt: CURRENT_TIMESTAMP,
        updatedBy: CURRENT_USER
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a2rv8me9s().b[2][1]++;
    }
    // Load Amazon config if available
    cov_1a2rv8me9s().s[23]++;
    if (process.env.AMAZON_API_KEY) {
      /* istanbul ignore next */
      cov_1a2rv8me9s().b[3][0]++;
      cov_1a2rv8me9s().s[24]++;
      configs.push({
        provider: 'amazon',
        apiKey: process.env.AMAZON_API_KEY,
        apiSecret: process.env.AMAZON_API_SECRET,
        region: process.env.AMAZON_REGION,
        createdAt: CURRENT_TIMESTAMP,
        createdBy: CURRENT_USER,
        updatedAt: CURRENT_TIMESTAMP,
        updatedBy: CURRENT_USER
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a2rv8me9s().b[3][1]++;
    }
    // Load AliExpress config if available
    cov_1a2rv8me9s().s[25]++;
    if (process.env.ALIEXPRESS_API_KEY) {
      /* istanbul ignore next */
      cov_1a2rv8me9s().b[4][0]++;
      cov_1a2rv8me9s().s[26]++;
      configs.push({
        provider: 'aliexpress',
        apiKey: process.env.ALIEXPRESS_API_KEY,
        apiSecret: process.env.ALIEXPRESS_API_SECRET,
        createdAt: CURRENT_TIMESTAMP,
        createdBy: CURRENT_USER,
        updatedAt: CURRENT_TIMESTAMP,
        updatedBy: CURRENT_USER
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a2rv8me9s().b[4][1]++;
    }
    // Load FourPX config if available
    cov_1a2rv8me9s().s[27]++;
    if (process.env.FOURPX_API_KEY) {
      /* istanbul ignore next */
      cov_1a2rv8me9s().b[5][0]++;
      cov_1a2rv8me9s().s[28]++;
      configs.push({
        provider: '4px',
        apiKey: process.env.FOURPX_API_KEY,
        apiSecret: process.env.FOURPX_API_SECRET,
        createdAt: CURRENT_TIMESTAMP,
        createdBy: CURRENT_USER,
        updatedAt: CURRENT_TIMESTAMP,
        updatedBy: CURRENT_USER
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a2rv8me9s().b[5][1]++;
    }
    cov_1a2rv8me9s().s[29]++;
    return configs;
  }
  initializeProviders(configs) {
    /* istanbul ignore next */
    cov_1a2rv8me9s().f[4]++;
    cov_1a2rv8me9s().s[30]++;
    configs.forEach(config => {
      /* istanbul ignore next */
      cov_1a2rv8me9s().f[5]++;
      cov_1a2rv8me9s().s[31]++;
      switch (config.provider) {
        case 'shipbob':
          /* istanbul ignore next */
          cov_1a2rv8me9s().b[6][0]++;
          cov_1a2rv8me9s().s[32]++;
          this.providers.set(config.provider, new _service.ShipBobService({
            apiKey: config.apiKey,
            apiUrl:
            /* istanbul ignore next */
            (cov_1a2rv8me9s().b[7][0]++, process.env.SHIPBOB_API_URL) ||
            /* istanbul ignore next */
            (cov_1a2rv8me9s().b[7][1]++, 'https://api.shipbob.com')
          }));
          /* istanbul ignore next */
          cov_1a2rv8me9s().s[33]++;
          break;
        case 'amazon':
          /* istanbul ignore next */
          cov_1a2rv8me9s().b[6][1]++;
          cov_1a2rv8me9s().s[34]++;
          this.providers.set(config.provider, new _service1.AmazonFulfillmentService(config));
          /* istanbul ignore next */
          cov_1a2rv8me9s().s[35]++;
          break;
        case 'aliexpress':
          /* istanbul ignore next */
          cov_1a2rv8me9s().b[6][2]++;
          cov_1a2rv8me9s().s[36]++;
          this.providers.set(config.provider, new _service2.AliExpressFulfillmentService(config));
          /* istanbul ignore next */
          cov_1a2rv8me9s().s[37]++;
          break;
        case '4px':
          /* istanbul ignore next */
          cov_1a2rv8me9s().b[6][3]++;
          cov_1a2rv8me9s().s[38]++;
          this.providers.set(config.provider, new _service3.FourPXFulfillmentService(config));
          /* istanbul ignore next */
          cov_1a2rv8me9s().s[39]++;
          break;
        default:
          /* istanbul ignore next */
          cov_1a2rv8me9s().b[6][4]++;
          cov_1a2rv8me9s().s[40]++;
          _logging.logger.warn('Unknown provider: ' + config.provider);
      }
    });
  }
  async getProvider(provider) {
    /* istanbul ignore next */
    cov_1a2rv8me9s().f[6]++;
    const providerService =
    /* istanbul ignore next */
    (cov_1a2rv8me9s().s[41]++, this.providers.get(provider));
    /* istanbul ignore next */
    cov_1a2rv8me9s().s[42]++;
    if (!providerService) {
      /* istanbul ignore next */
      cov_1a2rv8me9s().b[8][0]++;
      cov_1a2rv8me9s().s[43]++;
      throw new Error(`Fulfillment provider ${provider} not configured`);
    } else
    /* istanbul ignore next */
    {
      cov_1a2rv8me9s().b[8][1]++;
    }
    cov_1a2rv8me9s().s[44]++;
    return providerService;
  }
  async createFulfillmentOrder(order) {
    /* istanbul ignore next */
    cov_1a2rv8me9s().f[7]++;
    const provider =
    /* istanbul ignore next */
    (cov_1a2rv8me9s().s[45]++, await this.getProvider(order.provider));
    /* istanbul ignore next */
    cov_1a2rv8me9s().s[46]++;
    try {
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[47]++;
      await (0, _db.connectToDatabase)();
      // Check inventory before creating order
      const inventoryCheck =
      /* istanbul ignore next */
      (cov_1a2rv8me9s().s[48]++, await this.checkInventoryAvailability(order));
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[49]++;
      if (!inventoryCheck.available) {
        /* istanbul ignore next */
        cov_1a2rv8me9s().b[9][0]++;
        cov_1a2rv8me9s().s[50]++;
        throw new Error(`Insufficient inventory: ${inventoryCheck.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1a2rv8me9s().b[9][1]++;
      }
      // Create fulfillment order with provider
      const fulfillmentResult =
      /* istanbul ignore next */
      (cov_1a2rv8me9s().s[51]++, await provider.createFulfillmentOrder(order));
      // Store order in database
      const dbOrder =
      /* istanbul ignore next */
      (cov_1a2rv8me9s().s[52]++, await _ordermodel.default.create({
        ...order,
        fulfillmentId: fulfillmentResult.id,
        status: 'pending',
        createdAt: new Date(CURRENT_TIMESTAMP),
        updatedAt: new Date(CURRENT_TIMESTAMP),
        createdBy: CURRENT_USER,
        updatedBy: CURRENT_USER
      }));
      // Cache order details
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[53]++;
      await this.cacheOrderDetails(dbOrder._id, fulfillmentResult);
      // Dispatch webhook
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[54]++;
      await _webhookdispatcher.WebhookDispatcher.dispatch(order.userId, `${order.provider}.order.created`, {
        orderId: dbOrder._id,
        fulfillmentId: fulfillmentResult.id,
        status: 'pending',
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[55]++;
      _logging.logger.info('Fulfillment order created', {
        orderId: dbOrder._id,
        provider: order.provider,
        fulfillmentId: fulfillmentResult.id,
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[56]++;
      return {
        success: true,
        data: {
          orderId: dbOrder._id,
          fulfillmentId: fulfillmentResult.id,
          status: 'pending',
          tracking: fulfillmentResult.tracking,
          createdAt: CURRENT_TIMESTAMP,
          createdBy: CURRENT_USER
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[57]++;
      _logging.logger.error(new Error('Create fulfillment order failed'), {
        provider: order.provider,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[10][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[58]++;
      throw error;
    }
  }
  async getFulfillmentOrder(orderId, provider) {
    /* istanbul ignore next */
    cov_1a2rv8me9s().f[8]++;
    const service =
    /* istanbul ignore next */
    (cov_1a2rv8me9s().s[59]++, await this.getProvider(provider));
    /* istanbul ignore next */
    cov_1a2rv8me9s().s[60]++;
    try {
      // Try to get from cache first
      const cachedOrder =
      /* istanbul ignore next */
      (cov_1a2rv8me9s().s[61]++, await this.redis.get(`order:${orderId}`));
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[62]++;
      if (cachedOrder) {
        /* istanbul ignore next */
        cov_1a2rv8me9s().b[11][0]++;
        cov_1a2rv8me9s().s[63]++;
        return {
          success: true,
          data: JSON.parse(typeof cachedOrder === 'string' ?
          /* istanbul ignore next */
          (cov_1a2rv8me9s().b[12][0]++, cachedOrder) :
          /* istanbul ignore next */
          (cov_1a2rv8me9s().b[12][1]++, JSON.stringify(cachedOrder))),
          cached: true,
          timestamp: CURRENT_TIMESTAMP,
          requestedBy: CURRENT_USER
        };
      } else
      /* istanbul ignore next */
      {
        cov_1a2rv8me9s().b[11][1]++;
      }
      // Get from provider
      const order =
      /* istanbul ignore next */
      (cov_1a2rv8me9s().s[64]++, await service.getFulfillmentOrder(orderId));
      // Update cache
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[65]++;
      await this.cacheOrderDetails(orderId, order);
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[66]++;
      return {
        success: true,
        data: order,
        cached: false,
        timestamp: CURRENT_TIMESTAMP,
        requestedBy: CURRENT_USER
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[67]++;
      _logging.logger.error(new Error('Get fulfillment order failed'), {
        orderId,
        provider,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[13][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[13][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[68]++;
      throw error;
    }
  }
  async checkInventoryAvailability(order) {
    /* istanbul ignore next */
    cov_1a2rv8me9s().f[9]++;
    const provider =
    /* istanbul ignore next */
    (cov_1a2rv8me9s().s[69]++, await this.getProvider(order.provider));
    /* istanbul ignore next */
    cov_1a2rv8me9s().s[70]++;
    try {
      const inventory =
      /* istanbul ignore next */
      (cov_1a2rv8me9s().s[71]++, await provider.getInventoryLevels(order.items.map(item => {
        /* istanbul ignore next */
        cov_1a2rv8me9s().f[10]++;
        cov_1a2rv8me9s().s[72]++;
        return item.sku;
      })));
      const unavailableItems =
      /* istanbul ignore next */
      (cov_1a2rv8me9s().s[73]++, order.items.filter(item => {
        /* istanbul ignore next */
        cov_1a2rv8me9s().f[11]++;
        const stockLevel =
        /* istanbul ignore next */
        (cov_1a2rv8me9s().s[74]++,
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[14][0]++, inventory[item.sku]) ||
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[14][1]++, 0));
        /* istanbul ignore next */
        cov_1a2rv8me9s().s[75]++;
        return stockLevel < item.quantity;
      }));
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[76]++;
      return {
        available: unavailableItems.length === 0,
        message: unavailableItems.length > 0 ?
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[15][0]++, `Insufficient stock for SKUs: ${unavailableItems.map(i => {
          /* istanbul ignore next */
          cov_1a2rv8me9s().f[12]++;
          cov_1a2rv8me9s().s[77]++;
          return i.sku;
        }).join(', ')}`) :
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[15][1]++, 'All items available'),
        checkedAt: CURRENT_TIMESTAMP,
        checkedBy: CURRENT_USER
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[78]++;
      _logging.logger.error(new Error('Inventory check failed'), {
        provider: order.provider,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[16][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[79]++;
      throw error;
    }
  }
  async cacheOrderDetails(orderId, details) {
    /* istanbul ignore next */
    cov_1a2rv8me9s().f[13]++;
    cov_1a2rv8me9s().s[80]++;
    try {
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[81]++;
      await this.redis.set(`order:${orderId}`, JSON.stringify({
        ...details,
        cachedAt: CURRENT_TIMESTAMP,
        cachedBy: CURRENT_USER
      }), {
        ex: 3600
      } // Expire in 1 hour
      );
    } catch (error) {
      /* istanbul ignore next */
      cov_1a2rv8me9s().s[82]++;
      _logging.logger.warn('Cache update failed', {
        orderId,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[17][1]++, String(error)),
        timestamp: CURRENT_TIMESTAMP,
        user: CURRENT_USER
      });
    }
  }
  async processBulkOrders(orders) {
    /* istanbul ignore next */
    cov_1a2rv8me9s().f[14]++;
    const results =
    /* istanbul ignore next */
    (cov_1a2rv8me9s().s[83]++, await Promise.allSettled(orders.map(order => {
      /* istanbul ignore next */
      cov_1a2rv8me9s().f[15]++;
      cov_1a2rv8me9s().s[84]++;
      return this.createFulfillmentOrder(order);
    })));
    /* istanbul ignore next */
    cov_1a2rv8me9s().s[85]++;
    return results.map((result, index) => {
      /* istanbul ignore next */
      cov_1a2rv8me9s().f[16]++;
      cov_1a2rv8me9s().s[86]++;
      return {
        orderId: orders[index].orderId,
        success: result.status === 'fulfilled',
        data: result.status === 'fulfilled' ?
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[18][0]++, result.value) :
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[18][1]++, undefined),
        error: result.status === 'rejected' ?
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[19][0]++, result.reason.message) :
        /* istanbul ignore next */
        (cov_1a2rv8me9s().b[19][1]++, undefined),
        timestamp: CURRENT_TIMESTAMP,
        processedBy: CURRENT_USER
      };
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,