4f38f517230ae2ff9830ea7f2742befd
"use strict";
jest.mock('react-hook-form', ()=>{
    const actual = jest.requireActual('react-hook-form');
    return {
        ...actual,
        useFieldArray: ()=>mockFieldArray
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _currencyform = /*#__PURE__*/ _interop_require_default(require("../../../app/[locale]/admin/settings/currency-form"));
const _reacthookform = require("react-hook-form");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockDefaultCurrency = {
    name: 'US Dollar',
    code: 'USD',
    symbol: '$',
    convertRate: 1
};
const mockDefaultValues = {
    availableCurrencies: [
        mockDefaultCurrency
    ],
    defaultCurrency: 'USD'
};
// Only override useFieldArray; use the actual implementations for useForm and FormProvider.
const mockFieldArray = {
    fields: [
        mockDefaultCurrency
    ],
    append: jest.fn(),
    remove: jest.fn()
};
function TestComponent() {
    const form = (0, _reacthookform.useForm)({
        defaultValues: mockDefaultValues
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.FormProvider, {
        ...form,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_currencyform.default, {
            form: form,
            id: "currency-form"
        })
    });
}
describe('CurrencyForm', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockFieldArray.append.mockClear();
        mockFieldArray.remove.mockClear();
    });
    it('renders currency form fields', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(_react.screen.getByText('Currency Settings')).toBeInTheDocument();
        expect(_react.screen.getByText(/Currency Name/i)).toBeInTheDocument();
        expect(_react.screen.getByText(/Currency Code/i)).toBeInTheDocument();
        expect(_react.screen.getByText(/Currency Symbol/i)).toBeInTheDocument();
        expect(_react.screen.getByText(/Conversion Rate/i)).toBeInTheDocument();
    });
    it('allows adding new currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const addButton = _react.screen.getByText('Add New Currency');
        _react.fireEvent.click(addButton);
        expect(mockFieldArray.append).toHaveBeenCalled();
    });
    it('prevents removing last currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const removeButton = _react.screen.getByTitle('Cannot remove last currency');
        expect(removeButton).toBeDisabled();
    });
    it('allows selecting default currency', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const select = _react.screen.getByRole('combobox', {
            name: /Default Currency/i
        });
        expect(select).toBeInTheDocument();
    });
    it('displays currency settings header', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        expect(_react.screen.getByText('Currency Settings')).toBeInTheDocument();
    });
    it('has correct currency code input constraints', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const codeInput = _react.screen.getByRole('textbox', {
            name: /Currency Code/i
        });
        expect(codeInput).toHaveAttribute('maxLength', '3');
    });
    it('has correct conversion rate input constraints', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        const rateInput = _react.screen.getByRole('spinbutton', {
            name: /Conversion Rate/i
        });
        expect(rateInput).toHaveAttribute('type', 'number');
        expect(rateInput).toHaveAttribute('min', '0');
        expect(rateInput).toHaveAttribute('step', '0.0001');
    });
}) // Current Date and Time (UTC - YYYY-MM-DD HH:MM:SS formatted): 2025-04-21 01:19:05
 // Current User's Login: ibrahim-lasfar
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2hhZ2VyL25ldy9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIgKDMpL215LW5leHRqcy1wcm9qZWN0LW1hc3Rlci9fX3Rlc3RzX18vY29tcG9uZW50cy9zZXR0aW5ncy9jdXJyZW5jeS1mb3JtLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuaW1wb3J0IEN1cnJlbmN5Rm9ybSBmcm9tICdAL2FwcC9bbG9jYWxlXS9hZG1pbi9zZXR0aW5ncy9jdXJyZW5jeS1mb3JtJ1xuaW1wb3J0IHsgRm9ybVByb3ZpZGVyLCB1c2VGb3JtIH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJ1xuaW1wb3J0IHsgSVNldHRpbmdJbnB1dCB9IGZyb20gJ0AvdHlwZXMnXG5cbmNvbnN0IG1vY2tEZWZhdWx0Q3VycmVuY3kgPSB7XG4gIG5hbWU6ICdVUyBEb2xsYXInLFxuICBjb2RlOiAnVVNEJyxcbiAgc3ltYm9sOiAnJCcsXG4gIGNvbnZlcnRSYXRlOiAxLFxufVxuXG5jb25zdCBtb2NrRGVmYXVsdFZhbHVlcyA9IHtcbiAgYXZhaWxhYmxlQ3VycmVuY2llczogW21vY2tEZWZhdWx0Q3VycmVuY3ldLFxuICBkZWZhdWx0Q3VycmVuY3k6ICdVU0QnLFxufVxuXG4vLyBPbmx5IG92ZXJyaWRlIHVzZUZpZWxkQXJyYXk7IHVzZSB0aGUgYWN0dWFsIGltcGxlbWVudGF0aW9ucyBmb3IgdXNlRm9ybSBhbmQgRm9ybVByb3ZpZGVyLlxuY29uc3QgbW9ja0ZpZWxkQXJyYXkgPSB7XG4gIGZpZWxkczogW21vY2tEZWZhdWx0Q3VycmVuY3ldLFxuICBhcHBlbmQ6IGplc3QuZm4oKSxcbiAgcmVtb3ZlOiBqZXN0LmZuKCksXG59XG5cbmplc3QubW9jaygncmVhY3QtaG9vay1mb3JtJywgKCkgPT4ge1xuICBjb25zdCBhY3R1YWwgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LWhvb2stZm9ybScpXG4gIHJldHVybiB7XG4gICAgLi4uYWN0dWFsLFxuICAgIHVzZUZpZWxkQXJyYXk6ICgpID0+IG1vY2tGaWVsZEFycmF5LFxuICB9XG59KVxuXG5mdW5jdGlvbiBUZXN0Q29tcG9uZW50KCkge1xuICBjb25zdCBmb3JtID0gdXNlRm9ybTxJU2V0dGluZ0lucHV0Pih7XG4gICAgZGVmYXVsdFZhbHVlczogbW9ja0RlZmF1bHRWYWx1ZXMsXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8Rm9ybVByb3ZpZGVyIHsuLi5mb3JtfT5cbiAgICAgIDxDdXJyZW5jeUZvcm0gZm9ybT17Zm9ybX0gaWQ9XCJjdXJyZW5jeS1mb3JtXCIgLz5cbiAgICA8L0Zvcm1Qcm92aWRlcj5cbiAgKVxufVxuXG5kZXNjcmliZSgnQ3VycmVuY3lGb3JtJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKVxuICAgIG1vY2tGaWVsZEFycmF5LmFwcGVuZC5tb2NrQ2xlYXIoKVxuICAgIG1vY2tGaWVsZEFycmF5LnJlbW92ZS5tb2NrQ2xlYXIoKVxuICB9KVxuXG4gIGl0KCdyZW5kZXJzIGN1cnJlbmN5IGZvcm0gZmllbGRzJywgKCkgPT4ge1xuICAgIHJlbmRlcig8VGVzdENvbXBvbmVudCAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQ3VycmVuY3kgU2V0dGluZ3MnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9DdXJyZW5jeSBOYW1lL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL0N1cnJlbmN5IENvZGUvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvQ3VycmVuY3kgU3ltYm9sL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL0NvbnZlcnNpb24gUmF0ZS9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxuXG4gIGl0KCdhbGxvd3MgYWRkaW5nIG5ldyBjdXJyZW5jeScsICgpID0+IHtcbiAgICByZW5kZXIoPFRlc3RDb21wb25lbnQgLz4pXG4gICAgY29uc3QgYWRkQnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgnQWRkIE5ldyBDdXJyZW5jeScpXG4gICAgZmlyZUV2ZW50LmNsaWNrKGFkZEJ1dHRvbilcbiAgICBleHBlY3QobW9ja0ZpZWxkQXJyYXkuYXBwZW5kKS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgfSlcblxuICBpdCgncHJldmVudHMgcmVtb3ZpbmcgbGFzdCBjdXJyZW5jeScsICgpID0+IHtcbiAgICByZW5kZXIoPFRlc3RDb21wb25lbnQgLz4pXG4gICAgY29uc3QgcmVtb3ZlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGl0bGUoJ0Nhbm5vdCByZW1vdmUgbGFzdCBjdXJyZW5jeScpXG4gICAgZXhwZWN0KHJlbW92ZUJ1dHRvbikudG9CZURpc2FibGVkKClcbiAgfSlcblxuICBpdCgnYWxsb3dzIHNlbGVjdGluZyBkZWZhdWx0IGN1cnJlbmN5JywgKCkgPT4ge1xuICAgIHJlbmRlcig8VGVzdENvbXBvbmVudCAvPilcbiAgICBjb25zdCBzZWxlY3QgPSBzY3JlZW4uZ2V0QnlSb2xlKCdjb21ib2JveCcsIHsgbmFtZTogL0RlZmF1bHQgQ3VycmVuY3kvaSB9KVxuICAgIGV4cGVjdChzZWxlY3QpLnRvQmVJblRoZURvY3VtZW50KClcbiAgfSlcblxuICBpdCgnZGlzcGxheXMgY3VycmVuY3kgc2V0dGluZ3MgaGVhZGVyJywgKCkgPT4ge1xuICAgIHJlbmRlcig8VGVzdENvbXBvbmVudCAvPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQ3VycmVuY3kgU2V0dGluZ3MnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxuXG4gIGl0KCdoYXMgY29ycmVjdCBjdXJyZW5jeSBjb2RlIGlucHV0IGNvbnN0cmFpbnRzJywgKCkgPT4ge1xuICAgIHJlbmRlcig8VGVzdENvbXBvbmVudCAvPilcbiAgICBjb25zdCBjb2RlSW5wdXQgPSBzY3JlZW4uZ2V0QnlSb2xlKCd0ZXh0Ym94JywgeyBuYW1lOiAvQ3VycmVuY3kgQ29kZS9pIH0pXG4gICAgZXhwZWN0KGNvZGVJbnB1dCkudG9IYXZlQXR0cmlidXRlKCdtYXhMZW5ndGgnLCAnMycpXG4gIH0pXG5cbiAgaXQoJ2hhcyBjb3JyZWN0IGNvbnZlcnNpb24gcmF0ZSBpbnB1dCBjb25zdHJhaW50cycsICgpID0+IHtcbiAgICByZW5kZXIoPFRlc3RDb21wb25lbnQgLz4pXG4gICAgY29uc3QgcmF0ZUlucHV0ID0gc2NyZWVuLmdldEJ5Um9sZSgnc3BpbmJ1dHRvbicsIHtcbiAgICAgIG5hbWU6IC9Db252ZXJzaW9uIFJhdGUvaSxcbiAgICB9KVxuICAgIGV4cGVjdChyYXRlSW5wdXQpLnRvSGF2ZUF0dHJpYnV0ZSgndHlwZScsICdudW1iZXInKVxuICAgIGV4cGVjdChyYXRlSW5wdXQpLnRvSGF2ZUF0dHJpYnV0ZSgnbWluJywgJzAnKVxuICAgIGV4cGVjdChyYXRlSW5wdXQpLnRvSGF2ZUF0dHJpYnV0ZSgnc3RlcCcsICcwLjAwMDEnKVxuICB9KVxufSlcblxuLy8gQ3VycmVudCBEYXRlIGFuZCBUaW1lIChVVEMgLSBZWVlZLU1NLUREIEhIOk1NOlNTIGZvcm1hdHRlZCk6IDIwMjUtMDQtMjEgMDE6MTk6MDVcbi8vIEN1cnJlbnQgVXNlcidzIExvZ2luOiBpYnJhaGltLWxhc2ZhclxuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiYWN0dWFsIiwicmVxdWlyZUFjdHVhbCIsInVzZUZpZWxkQXJyYXkiLCJtb2NrRmllbGRBcnJheSIsIm1vY2tEZWZhdWx0Q3VycmVuY3kiLCJuYW1lIiwiY29kZSIsInN5bWJvbCIsImNvbnZlcnRSYXRlIiwibW9ja0RlZmF1bHRWYWx1ZXMiLCJhdmFpbGFibGVDdXJyZW5jaWVzIiwiZGVmYXVsdEN1cnJlbmN5IiwiZmllbGRzIiwiYXBwZW5kIiwiZm4iLCJyZW1vdmUiLCJUZXN0Q29tcG9uZW50IiwiZm9ybSIsInVzZUZvcm0iLCJkZWZhdWx0VmFsdWVzIiwiRm9ybVByb3ZpZGVyIiwiQ3VycmVuY3lGb3JtIiwiaWQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja0NsZWFyIiwiaXQiLCJyZW5kZXIiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImFkZEJ1dHRvbiIsImZpcmVFdmVudCIsImNsaWNrIiwidG9IYXZlQmVlbkNhbGxlZCIsInJlbW92ZUJ1dHRvbiIsImdldEJ5VGl0bGUiLCJ0b0JlRGlzYWJsZWQiLCJzZWxlY3QiLCJnZXRCeVJvbGUiLCJjb2RlSW5wdXQiLCJ0b0hhdmVBdHRyaWJ1dGUiLCJyYXRlSW5wdXQiXSwibWFwcGluZ3MiOiI7QUF3QkFBLEtBQUtDLElBQUksQ0FBQyxtQkFBbUI7SUFDM0IsTUFBTUMsU0FBU0YsS0FBS0csYUFBYSxDQUFDO0lBQ2xDLE9BQU87UUFDTCxHQUFHRCxNQUFNO1FBQ1RFLGVBQWUsSUFBTUM7SUFDdkI7QUFDRjs7Ozs7dUJBOUIwQztxRUFDakI7K0JBQ2E7Ozs7OztBQUd0QyxNQUFNQyxzQkFBc0I7SUFDMUJDLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxRQUFRO0lBQ1JDLGFBQWE7QUFDZjtBQUVBLE1BQU1DLG9CQUFvQjtJQUN4QkMscUJBQXFCO1FBQUNOO0tBQW9CO0lBQzFDTyxpQkFBaUI7QUFDbkI7QUFFQSw0RkFBNEY7QUFDNUYsTUFBTVIsaUJBQWlCO0lBQ3JCUyxRQUFRO1FBQUNSO0tBQW9CO0lBQzdCUyxRQUFRZixLQUFLZ0IsRUFBRTtJQUNmQyxRQUFRakIsS0FBS2dCLEVBQUU7QUFDakI7QUFVQSxTQUFTRTtJQUNQLE1BQU1DLE9BQU9DLElBQUFBLHNCQUFPLEVBQWdCO1FBQ2xDQyxlQUFlVjtJQUNqQjtJQUVBLHFCQUNFLHFCQUFDVywyQkFBWTtRQUFFLEdBQUdILElBQUk7a0JBQ3BCLGNBQUEscUJBQUNJLHFCQUFZO1lBQUNKLE1BQU1BO1lBQU1LLElBQUc7OztBQUduQztBQUVBQyxTQUFTLGdCQUFnQjtJQUN2QkMsV0FBVztRQUNUMUIsS0FBSzJCLGFBQWE7UUFDbEJ0QixlQUFlVSxNQUFNLENBQUNhLFNBQVM7UUFDL0J2QixlQUFlWSxNQUFNLENBQUNXLFNBQVM7SUFDakM7SUFFQUMsR0FBRyxnQ0FBZ0M7UUFDakNDLElBQUFBLGFBQU0sZ0JBQUMscUJBQUNaO1FBQ1JhLE9BQU9DLGFBQU0sQ0FBQ0MsU0FBUyxDQUFDLHNCQUFzQkMsaUJBQWlCO1FBQy9ESCxPQUFPQyxhQUFNLENBQUNDLFNBQVMsQ0FBQyxtQkFBbUJDLGlCQUFpQjtRQUM1REgsT0FBT0MsYUFBTSxDQUFDQyxTQUFTLENBQUMsbUJBQW1CQyxpQkFBaUI7UUFDNURILE9BQU9DLGFBQU0sQ0FBQ0MsU0FBUyxDQUFDLHFCQUFxQkMsaUJBQWlCO1FBQzlESCxPQUFPQyxhQUFNLENBQUNDLFNBQVMsQ0FBQyxxQkFBcUJDLGlCQUFpQjtJQUNoRTtJQUVBTCxHQUFHLDhCQUE4QjtRQUMvQkMsSUFBQUEsYUFBTSxnQkFBQyxxQkFBQ1o7UUFDUixNQUFNaUIsWUFBWUgsYUFBTSxDQUFDQyxTQUFTLENBQUM7UUFDbkNHLGdCQUFTLENBQUNDLEtBQUssQ0FBQ0Y7UUFDaEJKLE9BQU8xQixlQUFlVSxNQUFNLEVBQUV1QixnQkFBZ0I7SUFDaEQ7SUFFQVQsR0FBRyxtQ0FBbUM7UUFDcENDLElBQUFBLGFBQU0sZ0JBQUMscUJBQUNaO1FBQ1IsTUFBTXFCLGVBQWVQLGFBQU0sQ0FBQ1EsVUFBVSxDQUFDO1FBQ3ZDVCxPQUFPUSxjQUFjRSxZQUFZO0lBQ25DO0lBRUFaLEdBQUcscUNBQXFDO1FBQ3RDQyxJQUFBQSxhQUFNLGdCQUFDLHFCQUFDWjtRQUNSLE1BQU13QixTQUFTVixhQUFNLENBQUNXLFNBQVMsQ0FBQyxZQUFZO1lBQUVwQyxNQUFNO1FBQW9CO1FBQ3hFd0IsT0FBT1csUUFBUVIsaUJBQWlCO0lBQ2xDO0lBRUFMLEdBQUcscUNBQXFDO1FBQ3RDQyxJQUFBQSxhQUFNLGdCQUFDLHFCQUFDWjtRQUNSYSxPQUFPQyxhQUFNLENBQUNDLFNBQVMsQ0FBQyxzQkFBc0JDLGlCQUFpQjtJQUNqRTtJQUVBTCxHQUFHLCtDQUErQztRQUNoREMsSUFBQUEsYUFBTSxnQkFBQyxxQkFBQ1o7UUFDUixNQUFNMEIsWUFBWVosYUFBTSxDQUFDVyxTQUFTLENBQUMsV0FBVztZQUFFcEMsTUFBTTtRQUFpQjtRQUN2RXdCLE9BQU9hLFdBQVdDLGVBQWUsQ0FBQyxhQUFhO0lBQ2pEO0lBRUFoQixHQUFHLGlEQUFpRDtRQUNsREMsSUFBQUEsYUFBTSxnQkFBQyxxQkFBQ1o7UUFDUixNQUFNNEIsWUFBWWQsYUFBTSxDQUFDVyxTQUFTLENBQUMsY0FBYztZQUMvQ3BDLE1BQU07UUFDUjtRQUNBd0IsT0FBT2UsV0FBV0QsZUFBZSxDQUFDLFFBQVE7UUFDMUNkLE9BQU9lLFdBQVdELGVBQWUsQ0FBQyxPQUFPO1FBQ3pDZCxPQUFPZSxXQUFXRCxlQUFlLENBQUMsUUFBUTtJQUM1QztBQUNGLEdBRUEsbUZBQW1GO0NBQ25GLHVDQUF1QyJ9