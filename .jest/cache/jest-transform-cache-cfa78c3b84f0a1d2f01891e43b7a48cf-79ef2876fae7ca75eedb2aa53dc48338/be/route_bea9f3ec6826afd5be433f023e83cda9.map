{"version":3,"names":["POST","verifySignature","request","provider","cov_1a0gmta96n","f","signature","s","headers","get","body","secret","process","env","toUpperCase","b","hmac","_crypto","default","createHmac","digest","update","JSON","stringify","timingSafeEqual","Buffer","from","requestId","randomBytes","toString","_logging","logger","warn","_server","NextResponse","json","error","status","payload","info","eventType","orderId","fulfillmentService","_unifiedfulfillment","UnifiedFulfillmentService","result","handleProviderWebhook","_webhookdispatcher","WebhookDispatcher","dispatch","userId","success","timestamp","Date","toISOString","message","stack"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/app/api/v1/webhooks/fulfillment/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport crypto from 'crypto';\nimport { logger } from '@/lib/api/services/logging';\nimport { UnifiedFulfillmentService } from '@/lib/api/services/unified-fulfillment';\nimport { WebhookDispatcher } from '@/lib/api/webhook-dispatcher';\n\nfunction verifySignature(request: NextRequest, provider: string): boolean {\n  const signature = request.headers.get(`x-${provider}-signature`);\n  const body = request.body;\n  const secret = process.env[`${provider.toUpperCase()}_WEBHOOK_SECRET`];\n\n  if (!signature || !secret) return false;\n\n  const hmac = crypto.createHmac('sha256', secret);\n  const digest = hmac.update(JSON.stringify(body)).digest('hex');\n\n  return crypto.timingSafeEqual(\n    Buffer.from(signature),\n    Buffer.from(digest)\n  );\n}\n\nexport async function POST(request: NextRequest) {\n  const requestId = crypto.randomBytes(16).toString('hex');\n  const provider = request.headers.get('x-fulfillment-provider');\n\n  try {\n    // Verify webhook signature\n    if (!provider || !verifySignature(request, provider)) {\n      logger.warn('Invalid webhook signature', { requestId, provider });\n      return NextResponse.json({ error: 'Invalid signature' }, { status: 401 });\n    }\n\n    const payload = await request.json();\n\n    logger.info('Received webhook', {\n      requestId,\n      provider,\n      eventType: payload.eventType,\n      orderId: payload.orderId\n    });\n\n    // Process the webhook based on provider\n    const fulfillmentService = new UnifiedFulfillmentService([\n      // ... provider configurations\n    ]);\n\n    // Update order status\n    const result = await fulfillmentService.handleProviderWebhook(\n      provider,\n      payload\n    );\n\n    // Notify client via websocket\n    await WebhookDispatcher.dispatch(\n      payload.userId,\n      `${provider}.order.updated`,\n      result\n    );\n\n    return NextResponse.json({\n      success: true,\n      requestId,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    logger.error('Webhook processing error', {\n      requestId,\n      provider,\n      error: error.message,\n      stack: error.stack\n    });\n\n    return NextResponse.json({\n      success: false,\n      error: 'Webhook processing failed',\n      requestId,\n      timestamp: new Date().toISOString()\n    }, { \n      status: 500 \n    });\n  }\n}"],"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","ignoreList":[]}