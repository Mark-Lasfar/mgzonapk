cb52fd6545aef2be4ddab05c220b0393
"use strict";

/* istanbul ignore next */
function cov_2gd0sel6mm() {
  var path = "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/execution.model.ts";
  var hash = "fca32b3ea99869cb6b7b7e435e3e30c84cad0c0d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/execution.model.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "3": {
        start: {
          line: 11,
          column: 32
        },
        end: {
          line: 11,
          column: 77
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 15,
          column: 6
        }
      },
      "5": {
        start: {
          line: 17,
          column: 24
        },
        end: {
          line: 76,
          column: 2
        }
      },
      "6": {
        start: {
          line: 64,
          column: 21
        },
        end: {
          line: 64,
          column: 31
        }
      },
      "7": {
        start: {
          line: 68,
          column: 21
        },
        end: {
          line: 68,
          column: 31
        }
      },
      "8": {
        start: {
          line: 77,
          column: 0
        },
        end: {
          line: 81,
          column: 3
        }
      },
      "9": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 32
        }
      },
      "10": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "11": {
        start: {
          line: 82,
          column: 18
        },
        end: {
          line: 82,
          column: 109
        }
      },
      "12": {
        start: {
          line: 83,
          column: 17
        },
        end: {
          line: 83,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 33
          }
        },
        loc: {
          start: {
            line: 12,
            column: 39
          },
          end: {
            line: 16,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 17
          },
          end: {
            line: 64,
            column: 18
          }
        },
        loc: {
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 64,
            column: 31
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 68,
            column: 17
          },
          end: {
            line: 68,
            column: 18
          }
        },
        loc: {
          start: {
            line: 68,
            column: 21
          },
          end: {
            line: 68,
            column: 31
          }
        },
        line: 68
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 77,
            column: 28
          },
          end: {
            line: 77,
            column: 29
          }
        },
        loc: {
          start: {
            line: 77,
            column: 43
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 77
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 11
          },
          end: {
            line: 15,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 35
          },
          end: {
            line: 13,
            column: 38
          }
        }, {
          start: {
            line: 13,
            column: 41
          },
          end: {
            line: 15,
            column: 5
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 11
          },
          end: {
            line: 13,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 11
          },
          end: {
            line: 13,
            column: 14
          }
        }, {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 13,
            column: 32
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 82,
            column: 18
          },
          end: {
            line: 82,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 18
          },
          end: {
            line: 82,
            column: 52
          }
        }, {
          start: {
            line: 82,
            column: 56
          },
          end: {
            line: 82,
            column: 109
          }
        }],
        line: 82
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/execution.model.ts"],
      sourcesContent: ["import mongoose from 'mongoose';\n\nconst executionSchema = new mongoose.Schema({\n  id: { type: String, required: true, unique: true },\n  scheduleId: { type: String, required: true },\n  syncId: { type: String, required: true },\n  provider: { type: String, required: true },\n  status: {\n    type: String,\n    enum: ['pending', 'running', 'completed', 'failed'],\n    default: 'pending'\n  },\n  startTime: { type: Date, required: true },\n  endTime: Date,\n  duration: Number,\n  retryCount: { type: Number, default: 0 },\n  nextRetry: Date,\n  result: mongoose.Schema.Types.Mixed,\n  error: {\n    message: String,\n    code: String,\n    stack: String\n  },\n  createdAt: { type: Date, default: () => new Date() },\n  updatedAt: { type: Date, default: () => new Date() },\n  executedBy: { type: String },\n  updatedBy: { type: String }\n});\n\nexecutionSchema.pre('save', function(next) {\n  this.updatedAt = new Date();\n  // this.updatedBy = someExternalUser;\n  next();\n});\n\nconst Execution = mongoose.models.Execution || mongoose.model('Execution', executionSchema);\nexport default Execution;\n"],
      names: ["executionSchema", "mongoose", "Schema", "id", "type", "String", "required", "unique", "scheduleId", "syncId", "provider", "status", "enum", "default", "startTime", "Date", "endTime", "duration", "Number", "retryCount", "nextRetry", "result", "Types", "Mixed", "error", "message", "code", "stack", "createdAt", "updatedAt", "executedBy", "updatedBy", "pre", "next", "Execution", "models", "model"],
      mappings: ";;;;+BAoCA;;;eAAA;;;iEApCqB;;;;;;AAErB,MAAMA,kBAAkB,IAAIC,iBAAQ,CAACC,MAAM,CAAC;IAC1CC,IAAI;QAAEC,MAAMC;QAAQC,UAAU;QAAMC,QAAQ;IAAK;IACjDC,YAAY;QAAEJ,MAAMC;QAAQC,UAAU;IAAK;IAC3CG,QAAQ;QAAEL,MAAMC;QAAQC,UAAU;IAAK;IACvCI,UAAU;QAAEN,MAAMC;QAAQC,UAAU;IAAK;IACzCK,QAAQ;QACNP,MAAMC;QACNO,MAAM;YAAC;YAAW;YAAW;YAAa;SAAS;QACnDC,SAAS;IACX;IACAC,WAAW;QAAEV,MAAMW;QAAMT,UAAU;IAAK;IACxCU,SAASD;IACTE,UAAUC;IACVC,YAAY;QAAEf,MAAMc;QAAQL,SAAS;IAAE;IACvCO,WAAWL;IACXM,QAAQpB,iBAAQ,CAACC,MAAM,CAACoB,KAAK,CAACC,KAAK;IACnCC,OAAO;QACLC,SAASpB;QACTqB,MAAMrB;QACNsB,OAAOtB;IACT;IACAuB,WAAW;QAAExB,MAAMW;QAAMF,SAAS,IAAM,IAAIE;IAAO;IACnDc,WAAW;QAAEzB,MAAMW;QAAMF,SAAS,IAAM,IAAIE;IAAO;IACnDe,YAAY;QAAE1B,MAAMC;IAAO;IAC3B0B,WAAW;QAAE3B,MAAMC;IAAO;AAC5B;AAEAL,gBAAgBgC,GAAG,CAAC,QAAQ,SAASC,IAAI;IACvC,IAAI,CAACJ,SAAS,GAAG,IAAId;IACrB,qCAAqC;IACrCkB;AACF;AAEA,MAAMC,YAAYjC,iBAAQ,CAACkC,MAAM,CAACD,SAAS,IAAIjC,iBAAQ,CAACmC,KAAK,CAAC,aAAapC;MAC3E,WAAekC"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fca32b3ea99869cb6b7b7e435e3e30c84cad0c0d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gd0sel6mm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gd0sel6mm();
cov_2gd0sel6mm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2gd0sel6mm().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2gd0sel6mm().f[0]++;
    cov_2gd0sel6mm().s[2]++;
    return _default;
  }
});
const _mongoose =
/* istanbul ignore next */
(/*#__PURE__*/cov_2gd0sel6mm().s[3]++, _interop_require_default(require("mongoose")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2gd0sel6mm().f[1]++;
  cov_2gd0sel6mm().s[4]++;
  return /* istanbul ignore next */(cov_2gd0sel6mm().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2gd0sel6mm().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2gd0sel6mm().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2gd0sel6mm().b[0][1]++, {
    default: obj
  });
}
const executionSchema =
/* istanbul ignore next */
(cov_2gd0sel6mm().s[5]++, new _mongoose.default.Schema({
  id: {
    type: String,
    required: true,
    unique: true
  },
  scheduleId: {
    type: String,
    required: true
  },
  syncId: {
    type: String,
    required: true
  },
  provider: {
    type: String,
    required: true
  },
  status: {
    type: String,
    enum: ['pending', 'running', 'completed', 'failed'],
    default: 'pending'
  },
  startTime: {
    type: Date,
    required: true
  },
  endTime: Date,
  duration: Number,
  retryCount: {
    type: Number,
    default: 0
  },
  nextRetry: Date,
  result: _mongoose.default.Schema.Types.Mixed,
  error: {
    message: String,
    code: String,
    stack: String
  },
  createdAt: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_2gd0sel6mm().f[2]++;
      cov_2gd0sel6mm().s[6]++;
      return new Date();
    }
  },
  updatedAt: {
    type: Date,
    default: () => {
      /* istanbul ignore next */
      cov_2gd0sel6mm().f[3]++;
      cov_2gd0sel6mm().s[7]++;
      return new Date();
    }
  },
  executedBy: {
    type: String
  },
  updatedBy: {
    type: String
  }
}));
/* istanbul ignore next */
cov_2gd0sel6mm().s[8]++;
executionSchema.pre('save', function (next) {
  /* istanbul ignore next */
  cov_2gd0sel6mm().f[4]++;
  cov_2gd0sel6mm().s[9]++;
  this.updatedAt = new Date();
  // this.updatedBy = someExternalUser;
  /* istanbul ignore next */
  cov_2gd0sel6mm().s[10]++;
  next();
});
const Execution =
/* istanbul ignore next */
(cov_2gd0sel6mm().s[11]++,
/* istanbul ignore next */
(cov_2gd0sel6mm().b[2][0]++, _mongoose.default.models.Execution) ||
/* istanbul ignore next */
(cov_2gd0sel6mm().b[2][1]++, _mongoose.default.model('Execution', executionSchema)));
const _default =
/* istanbul ignore next */
(cov_2gd0sel6mm().s[12]++, Execution);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGVmYXVsdCIsImV4ZWN1dGlvblNjaGVtYSIsImNvdl8yZ2Qwc2VsNm1tIiwicyIsIl9tb25nb29zZSIsImRlZmF1bHQiLCJTY2hlbWEiLCJpZCIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsInVuaXF1ZSIsInNjaGVkdWxlSWQiLCJzeW5jSWQiLCJwcm92aWRlciIsInN0YXR1cyIsImVudW0iLCJzdGFydFRpbWUiLCJEYXRlIiwiZW5kVGltZSIsImR1cmF0aW9uIiwiTnVtYmVyIiwicmV0cnlDb3VudCIsIm5leHRSZXRyeSIsInJlc3VsdCIsIlR5cGVzIiwiTWl4ZWQiLCJlcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwic3RhY2siLCJjcmVhdGVkQXQiLCJmIiwidXBkYXRlZEF0IiwiZXhlY3V0ZWRCeSIsInVwZGF0ZWRCeSIsInByZSIsIm5leHQiLCJFeGVjdXRpb24iLCJiIiwibW9kZWxzIiwibW9kZWwiXSwic291cmNlcyI6WyIvaG9tZS9oYWdlci9uZXcvbXktbmV4dGpzLXByb2plY3QtbWFzdGVyICgzKS9teS1uZXh0anMtcHJvamVjdC1tYXN0ZXIvbGliL2RiL21vZGVscy9leGVjdXRpb24ubW9kZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcblxuY29uc3QgZXhlY3V0aW9uU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XG4gIGlkOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUsIHVuaXF1ZTogdHJ1ZSB9LFxuICBzY2hlZHVsZUlkOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgc3luY0lkOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgcHJvdmlkZXI6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxuICBzdGF0dXM6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZW51bTogWydwZW5kaW5nJywgJ3J1bm5pbmcnLCAnY29tcGxldGVkJywgJ2ZhaWxlZCddLFxuICAgIGRlZmF1bHQ6ICdwZW5kaW5nJ1xuICB9LFxuICBzdGFydFRpbWU6IHsgdHlwZTogRGF0ZSwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgZW5kVGltZTogRGF0ZSxcbiAgZHVyYXRpb246IE51bWJlcixcbiAgcmV0cnlDb3VudDogeyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IDAgfSxcbiAgbmV4dFJldHJ5OiBEYXRlLFxuICByZXN1bHQ6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5NaXhlZCxcbiAgZXJyb3I6IHtcbiAgICBtZXNzYWdlOiBTdHJpbmcsXG4gICAgY29kZTogU3RyaW5nLFxuICAgIHN0YWNrOiBTdHJpbmdcbiAgfSxcbiAgY3JlYXRlZEF0OiB7IHR5cGU6IERhdGUsIGRlZmF1bHQ6ICgpID0+IG5ldyBEYXRlKCkgfSxcbiAgdXBkYXRlZEF0OiB7IHR5cGU6IERhdGUsIGRlZmF1bHQ6ICgpID0+IG5ldyBEYXRlKCkgfSxcbiAgZXhlY3V0ZWRCeTogeyB0eXBlOiBTdHJpbmcgfSxcbiAgdXBkYXRlZEJ5OiB7IHR5cGU6IFN0cmluZyB9XG59KTtcblxuZXhlY3V0aW9uU2NoZW1hLnByZSgnc2F2ZScsIGZ1bmN0aW9uKG5leHQpIHtcbiAgdGhpcy51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICAvLyB0aGlzLnVwZGF0ZWRCeSA9IHNvbWVFeHRlcm5hbFVzZXI7XG4gIG5leHQoKTtcbn0pO1xuXG5jb25zdCBFeGVjdXRpb24gPSBtb25nb29zZS5tb2RlbHMuRXhlY3V0aW9uIHx8IG1vbmdvb3NlLm1vZGVsKCdFeGVjdXRpb24nLCBleGVjdXRpb25TY2hlbWEpO1xuZXhwb3J0IGRlZmF1bHQgRXhlY3V0aW9uO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFvQ0E7Ozs7OztXQUFBQSxRQUFBOzs7Ozt3RUFwQ3FCOzs7Ozs7Ozs7Ozs7Ozs7QUFFckIsTUFBTUMsZUFBQTtBQUFBO0FBQUEsQ0FBQUMsY0FBQSxHQUFBQyxDQUFBLE9BQWtCLElBQUlDLFNBQUEsQ0FBQUMsT0FBUSxDQUFDQyxNQUFNLENBQUM7RUFDMUNDLEVBQUEsRUFBSTtJQUFFQyxJQUFBLEVBQU1DLE1BQUE7SUFBUUMsUUFBQSxFQUFVO0lBQU1DLE1BQUEsRUFBUTtFQUFLO0VBQ2pEQyxVQUFBLEVBQVk7SUFBRUosSUFBQSxFQUFNQyxNQUFBO0lBQVFDLFFBQUEsRUFBVTtFQUFLO0VBQzNDRyxNQUFBLEVBQVE7SUFBRUwsSUFBQSxFQUFNQyxNQUFBO0lBQVFDLFFBQUEsRUFBVTtFQUFLO0VBQ3ZDSSxRQUFBLEVBQVU7SUFBRU4sSUFBQSxFQUFNQyxNQUFBO0lBQVFDLFFBQUEsRUFBVTtFQUFLO0VBQ3pDSyxNQUFBLEVBQVE7SUFDTlAsSUFBQSxFQUFNQyxNQUFBO0lBQ05PLElBQUEsRUFBTSxDQUFDLFdBQVcsV0FBVyxhQUFhLFNBQVM7SUFDbkRYLE9BQUEsRUFBUztFQUNYO0VBQ0FZLFNBQUEsRUFBVztJQUFFVCxJQUFBLEVBQU1VLElBQUE7SUFBTVIsUUFBQSxFQUFVO0VBQUs7RUFDeENTLE9BQUEsRUFBU0QsSUFBQTtFQUNURSxRQUFBLEVBQVVDLE1BQUE7RUFDVkMsVUFBQSxFQUFZO0lBQUVkLElBQUEsRUFBTWEsTUFBQTtJQUFRaEIsT0FBQSxFQUFTO0VBQUU7RUFDdkNrQixTQUFBLEVBQVdMLElBQUE7RUFDWE0sTUFBQSxFQUFRcEIsU0FBQSxDQUFBQyxPQUFRLENBQUNDLE1BQU0sQ0FBQ21CLEtBQUssQ0FBQ0MsS0FBSztFQUNuQ0MsS0FBQSxFQUFPO0lBQ0xDLE9BQUEsRUFBU25CLE1BQUE7SUFDVG9CLElBQUEsRUFBTXBCLE1BQUE7SUFDTnFCLEtBQUEsRUFBT3JCO0VBQ1Q7RUFDQXNCLFNBQUEsRUFBVztJQUFFdkIsSUFBQSxFQUFNVSxJQUFBO0lBQU1iLE9BQUEsRUFBU0EsQ0FBQSxLQUFNO01BQUE7TUFBQUgsY0FBQSxHQUFBOEIsQ0FBQTtNQUFBOUIsY0FBQSxHQUFBQyxDQUFBO01BQUEsV0FBSWUsSUFBQTtJQUFBO0VBQU87RUFDbkRlLFNBQUEsRUFBVztJQUFFekIsSUFBQSxFQUFNVSxJQUFBO0lBQU1iLE9BQUEsRUFBU0EsQ0FBQSxLQUFNO01BQUE7TUFBQUgsY0FBQSxHQUFBOEIsQ0FBQTtNQUFBOUIsY0FBQSxHQUFBQyxDQUFBO01BQUEsV0FBSWUsSUFBQTtJQUFBO0VBQU87RUFDbkRnQixVQUFBLEVBQVk7SUFBRTFCLElBQUEsRUFBTUM7RUFBTztFQUMzQjBCLFNBQUEsRUFBVztJQUFFM0IsSUFBQSxFQUFNQztFQUFPO0FBQzVCO0FBQUE7QUFBQVAsY0FBQSxHQUFBQyxDQUFBO0FBRUFGLGVBQUEsQ0FBZ0JtQyxHQUFHLENBQUMsUUFBUSxVQUFTQyxJQUFJO0VBQUE7RUFBQW5DLGNBQUEsR0FBQThCLENBQUE7RUFBQTlCLGNBQUEsR0FBQUMsQ0FBQTtFQUN2QyxJQUFJLENBQUM4QixTQUFTLEdBQUcsSUFBSWYsSUFBQTtFQUNyQjtFQUFBO0VBQUFoQixjQUFBLEdBQUFDLENBQUE7RUFDQWtDLElBQUE7QUFDRjtBQUVBLE1BQU1DLFNBQUE7QUFBQTtBQUFBLENBQUFwQyxjQUFBLEdBQUFDLENBQUE7QUFBWTtBQUFBLENBQUFELGNBQUEsR0FBQXFDLENBQUEsVUFBQW5DLFNBQUEsQ0FBQUMsT0FBUSxDQUFDbUMsTUFBTSxDQUFDRixTQUFTO0FBQUE7QUFBQSxDQUFBcEMsY0FBQSxHQUFBcUMsQ0FBQSxVQUFJbkMsU0FBQSxDQUFBQyxPQUFRLENBQUNvQyxLQUFLLENBQUMsYUFBYXhDLGVBQUE7TUFDM0VELFFBQUE7QUFBQTtBQUFBLENBQUFFLGNBQUEsR0FBQUMsQ0FBQSxRQUFlbUMsU0FBQSIsImlnbm9yZUxpc3QiOltdfQ==