{"version":3,"names":["_default","executionSchema","cov_2gd0sel6mm","s","_mongoose","default","Schema","id","type","String","required","unique","scheduleId","syncId","provider","status","enum","startTime","Date","endTime","duration","Number","retryCount","nextRetry","result","Types","Mixed","error","message","code","stack","createdAt","f","updatedAt","executedBy","updatedBy","pre","next","Execution","b","models","model"],"sources":["/home/hager/new/my-nextjs-project-master (3)/my-nextjs-project-master/lib/db/models/execution.model.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst executionSchema = new mongoose.Schema({\n  id: { type: String, required: true, unique: true },\n  scheduleId: { type: String, required: true },\n  syncId: { type: String, required: true },\n  provider: { type: String, required: true },\n  status: {\n    type: String,\n    enum: ['pending', 'running', 'completed', 'failed'],\n    default: 'pending'\n  },\n  startTime: { type: Date, required: true },\n  endTime: Date,\n  duration: Number,\n  retryCount: { type: Number, default: 0 },\n  nextRetry: Date,\n  result: mongoose.Schema.Types.Mixed,\n  error: {\n    message: String,\n    code: String,\n    stack: String\n  },\n  createdAt: { type: Date, default: () => new Date() },\n  updatedAt: { type: Date, default: () => new Date() },\n  executedBy: { type: String },\n  updatedBy: { type: String }\n});\n\nexecutionSchema.pre('save', function(next) {\n  this.updatedAt = new Date();\n  // this.updatedBy = someExternalUser;\n  next();\n});\n\nconst Execution = mongoose.models.Execution || mongoose.model('Execution', executionSchema);\nexport default Execution;\n"],"mappings":"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","ignoreList":[]}